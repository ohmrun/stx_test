// Generated by Haxe 4.3.1
(function ($hx_exports, $global) { "use strict";
$hx_exports["stx"] = $hx_exports["stx"] || {};
$hx_exports["stx"]["pico"] = $hx_exports["stx"]["pico"] || {};
$hx_exports["stx"]["pico"]["_Option"] = $hx_exports["stx"]["pico"]["_Option"] || {};
;$hx_exports["stx"]["nano"] = $hx_exports["stx"]["nano"] || {};
$hx_exports["stx"]["nano"]["_Contract"] = $hx_exports["stx"]["nano"]["_Contract"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Bake = function() { };
$hxClasses["Bake"] = Bake;
Bake.__name__ = "Bake";
Bake.is_macro = function() {
	return false;
};
Bake.pop = function() {
	haxe_Log.trace("runtime bake",{ fileName : "Bake.hx", lineNumber : 25, className : "Bake", methodName : "pop"});
	return bake_Baked._new();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Console = function() { };
$hxClasses["Console"] = Console;
Console.__name__ = "Console";
Console.printlnFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	Console.printFormatted(s + "\n",outputStream);
};
Console.println = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	Console.print(s + "\n",outputStream);
};
Console.format = function(s,formatMode) {
	s += "<//>";
	var activeFormatFlagStack = [];
	var groupedProceedingTags = [];
	var browserFormatArguments = [];
	var result = Console.formatTagPattern.map(s,function(e) {
		var escaped = e.matched(1) != null;
		if(escaped) {
			return e.matched(0);
		}
		var open = e.matched(2) == null;
		var tags = e.matched(3).split(",");
		if(!open && tags.length == 1) {
			if(tags[0] == "") {
				var last = activeFormatFlagStack[activeFormatFlagStack.length - 1];
				var i = activeFormatFlagStack.indexOf(last);
				if(i != -1) {
					var proceedingTags = groupedProceedingTags[i];
					activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
					groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
				}
			} else if(FormatFlag.fromString(tags[0]) == "reset") {
				activeFormatFlagStack = [];
				groupedProceedingTags = [];
			} else {
				var flag = FormatFlag.fromString(tags[0]);
				if(flag != null) {
					var i = activeFormatFlagStack.indexOf(flag);
					if(i != -1) {
						var proceedingTags = groupedProceedingTags[i];
						activeFormatFlagStack.splice(i - proceedingTags,proceedingTags + 1);
						groupedProceedingTags.splice(i - proceedingTags,proceedingTags + 1);
					}
				}
			}
		} else {
			var proceedingTags = 0;
			var _g = 0;
			while(_g < tags.length) {
				var tag = tags[_g];
				++_g;
				var flag = FormatFlag.fromString(tag);
				if(flag == null) {
					return e.matched(0);
				}
				if(open) {
					activeFormatFlagStack.push(flag);
					groupedProceedingTags.push(proceedingTags);
					++proceedingTags;
				} else {
					var i = activeFormatFlagStack.indexOf(flag);
					if(i != -1) {
						var proceedingTags1 = groupedProceedingTags[i];
						activeFormatFlagStack.splice(i - proceedingTags1,proceedingTags1 + 1);
						groupedProceedingTags.splice(i - proceedingTags1,proceedingTags1 + 1);
					}
				}
			}
		}
		switch(formatMode) {
		case 1:
			var browserFormatArguments1 = browserFormatArguments;
			var result = new Array(activeFormatFlagStack.length);
			var _g = 0;
			var _g1 = activeFormatFlagStack.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Console.getBrowserFormat(activeFormatFlagStack[i]);
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = result;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				if(v != null) {
					_g.push(v);
				}
			}
			browserFormatArguments1.push(_g.join(";"));
			return "%c";
		case 2:
			return "";
		}
	});
	return { formatted : result, browserFormatArguments : browserFormatArguments};
};
Console.stripFormatting = function(s) {
	return Console.format(s,2).formatted;
};
Console.printFormatted = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	var result = Console.format(s,Console.formatMode);
	if(Console.formatMode == 1) {
		var logArgs = [result.formatted].concat(result.browserFormatArguments);
		switch(outputStream) {
		case 1:
			console.warn.apply(console, logArgs);
			break;
		case 2:
			console.error.apply(console, logArgs);
			break;
		case 0:case 3:
			console.log.apply(console, logArgs);
			break;
		}
		return;
	}
	Console.print(result.formatted,outputStream);
};
Console.print = function(s,outputStream) {
	if(outputStream == null) {
		outputStream = 0;
	}
	if(s == null) {
		s = "";
	}
	if(Console.printIntercept != null) {
		var allowDefaultPrint = Console.printIntercept(s,outputStream);
		if(!allowDefaultPrint) {
			return;
		}
	}
	switch(outputStream) {
	case 1:
		console.warn(s);
		break;
	case 2:
		console.error(s);
		break;
	case 0:case 3:
		console.log(s);
		break;
	}
};
Console.getAsciiFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		var hex = HxOverrides.substr(flag,1,null);
		var r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2));
		var g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2));
		var b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2));
		return "\x1B[38;5;" + Console.rgbToAscii256(r,g,b) + "m";
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		var hex = HxOverrides.substr(flag,3,null);
		var r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2));
		var g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2));
		var b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2));
		return "\x1B[48;5;" + Console.rgbToAscii256(r,g,b) + "m";
	}
	switch(flag) {
	case "bg_black":
		return "\x1B[48;5;" + 0 + "m";
	case "bg_blue":
		return "\x1B[48;5;" + 4 + "m";
	case "bg_cyan":
		return "\x1B[48;5;" + 6 + "m";
	case "bg_green":
		return "\x1B[48;5;" + 2 + "m";
	case "bg_light_black":
		return "\x1B[48;5;" + 8 + "m";
	case "bg_light_blue":
		return "\x1B[48;5;" + 12 + "m";
	case "bg_light_cyan":
		return "\x1B[48;5;" + 14 + "m";
	case "bg_light_green":
		return "\x1B[48;5;" + 10 + "m";
	case "bg_light_magenta":
		return "\x1B[48;5;" + 13 + "m";
	case "bg_light_red":
		return "\x1B[48;5;" + 9 + "m";
	case "bg_light_white":
		return "\x1B[48;5;" + 15 + "m";
	case "bg_light_yellow":
		return "\x1B[48;5;" + 11 + "m";
	case "bg_magenta":
		return "\x1B[48;5;" + 5 + "m";
	case "bg_red":
		return "\x1B[48;5;" + 1 + "m";
	case "bg_white":
		return "\x1B[48;5;" + 7 + "m";
	case "bg_yellow":
		return "\x1B[48;5;" + 3 + "m";
	case "black":
		return "\x1B[38;5;" + 0 + "m";
	case "blink":
		return "\x1B[5m";
	case "blue":
		return "\x1B[38;5;" + 4 + "m";
	case "bold":
		return "\x1B[1m";
	case "cyan":
		return "\x1B[38;5;" + 6 + "m";
	case "dim":
		return "\x1B[2m";
	case "green":
		return "\x1B[38;5;" + 2 + "m";
	case "hidden":
		return "\x1B[8m";
	case "invert":
		return "\x1B[7m";
	case "italic":
		return "\x1B[3m";
	case "light_black":
		return "\x1B[38;5;" + 8 + "m";
	case "light_blue":
		return "\x1B[38;5;" + 12 + "m";
	case "light_cyan":
		return "\x1B[38;5;" + 14 + "m";
	case "light_green":
		return "\x1B[38;5;" + 10 + "m";
	case "light_magenta":
		return "\x1B[38;5;" + 13 + "m";
	case "light_red":
		return "\x1B[38;5;" + 9 + "m";
	case "light_white":
		return "\x1B[38;5;" + 15 + "m";
	case "light_yellow":
		return "\x1B[38;5;" + 11 + "m";
	case "magenta":
		return "\x1B[38;5;" + 5 + "m";
	case "red":
		return "\x1B[38;5;" + 1 + "m";
	case "reset":
		return "\x1B[m";
	case "underline":
		return "\x1B[4m";
	case "white":
		return "\x1B[38;5;" + 7 + "m";
	case "yellow":
		return "\x1B[38;5;" + 3 + "m";
	default:
		return "";
	}
};
Console.rgbToAscii256 = function(r,g,b) {
	var nearIdx = function(c,set) {
		var delta = Infinity;
		var index = -1;
		var _g = 0;
		var _g1 = set.length;
		while(_g < _g1) {
			var i = _g++;
			var d = Math.abs(c - set[i]);
			if(d < delta) {
				delta = d;
				index = i;
			}
		}
		return index;
	};
	var colorSteps = [0,95,135,175,215,255];
	var ir = nearIdx(r,colorSteps);
	var ig = nearIdx(g,colorSteps);
	var ib = nearIdx(b,colorSteps);
	var ier = Math.abs(r - colorSteps[ir]);
	var ieg = Math.abs(g - colorSteps[ig]);
	var ieb = Math.abs(b - colorSteps[ib]);
	var averageColorError = ier + ieg + ieb;
	var jr = Math.round((r - 8) / 10);
	var jg = Math.round((g - 8) / 10);
	var jb = Math.round((b - 8) / 10);
	var jer = Math.abs(r - Math.max(Math.min(jr * 10 + 8,238),8));
	var jeg = Math.abs(g - Math.max(Math.min(jg * 10 + 8,238),8));
	var jeb = Math.abs(b - Math.max(Math.min(jb * 10 + 8,238),8));
	var averageGrayError = jer + jeg + jeb;
	if(averageGrayError < averageColorError && r == g && g == b) {
		var grayIndex = jr + 232;
		return grayIndex;
	} else {
		var colorIndex = 16 + ir * 36 + ig * 6 + ib;
		return colorIndex;
	}
};
Console.getBrowserFormat = function(flag) {
	if(flag.charAt(0) == "#") {
		return "color: " + flag;
	}
	if(HxOverrides.substr(flag,0,3) == "bg#") {
		return "background-color: " + HxOverrides.substr(flag,2,null);
	}
	if(flag.charAt(0) == "{") {
		return HxOverrides.substr(flag,1,flag.length - 2);
	}
	switch(flag) {
	case "bg_black":
		return "background-color: black";
	case "bg_blue":
		return "background-color: blue";
	case "bg_cyan":
		return "background-color: cyan";
	case "bg_green":
		return "background-color: green";
	case "bg_light_black":
		return "background-color: gray";
	case "bg_light_blue":
		return "background-color: lightBlue";
	case "bg_light_cyan":
		return "background-color: lightCyan";
	case "bg_light_green":
		return "background-color: lightGreen";
	case "bg_light_magenta":
		return "background-color: lightPink";
	case "bg_light_red":
		return "background-color: salmon";
	case "bg_light_white":
		return "background-color: white";
	case "bg_light_yellow":
		return "background-color: lightYellow";
	case "bg_magenta":
		return "background-color: magenta";
	case "bg_red":
		return "background-color: red";
	case "bg_white":
		return "background-color: whiteSmoke";
	case "bg_yellow":
		return "background-color: gold";
	case "black":
		return "color: black";
	case "blink":
		return "text-decoration: blink";
	case "blue":
		return "color: blue";
	case "bold":
		return "font-weight: bold";
	case "cyan":
		return "color: cyan";
	case "dim":
		return "color: gray";
	case "green":
		return "color: green";
	case "hidden":
		return "visibility: hidden; color: white";
	case "invert":
		return "-webkit-filter: invert(100%); filter: invert(100%)";
	case "italic":
		return "font-style: italic";
	case "light_black":
		return "color: gray";
	case "light_blue":
		return "color: lightBlue";
	case "light_cyan":
		return "color: lightCyan";
	case "light_green":
		return "color: lightGreen";
	case "light_magenta":
		return "color: lightPink";
	case "light_red":
		return "color: salmon";
	case "light_white":
		return "color: white";
	case "light_yellow":
		return "color: #ffed88";
	case "magenta":
		return "color: magenta";
	case "red":
		return "color: red";
	case "reset":
		return "";
	case "underline":
		return "text-decoration: underline";
	case "white":
		return "color: whiteSmoke";
	case "yellow":
		return "color: #f5ba00";
	default:
		return "";
	}
};
Console.determineConsoleFormatMode = function() {
	var hasWindowObject = typeof(window) != "undefined";
	if(hasWindowObject) {
		return 1;
	}
	return 2;
};
var FormatFlag = {};
FormatFlag.fromString = function(str) {
	str = str.toLowerCase();
	if(str.charAt(0) == "#" || HxOverrides.substr(str,0,3) == "bg#") {
		var hIdx = str.indexOf("#");
		var hex = HxOverrides.substr(str,hIdx + 1,null);
		if(hex.length == 3) {
			var a = hex.split("");
			hex = [a[0],a[0],a[1],a[1],a[2],a[2]].join("");
		}
		if(new EReg("[^0-9a-f]","i").match(hex) || hex.length < 6) {
			return "";
		}
		var normalized = str.substring(0,hIdx) + "#" + hex;
		return normalized;
	}
	switch(str) {
	case "!":
		return "invert";
	case "/":
		return "reset";
	case "b":
		return "bold";
	case "bg_gray":
		return "bg_light_black";
	case "gray":
		return "light_black";
	case "i":
		return "italic";
	case "u":
		return "underline";
	default:
		return str;
	}
};
var _$Date_Date_$Impl_$ = function() { };
$hxClasses["_Date.Date_Impl_"] = _$Date_Date_$Impl_$;
_$Date_Date_$Impl_$.__name__ = "_Date.Date_Impl_";
_$Date_Date_$Impl_$.now = function() {
	return new Date();
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Math.__name__ = "Math";
var _$Printf_FormatFlag = $hxEnums["_Printf.FormatFlag"] = { __ename__:"_Printf.FormatFlag",__constructs__:null
	,Minus: {_hx_name:"Minus",_hx_index:0,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Plus: {_hx_name:"Plus",_hx_index:1,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Space: {_hx_name:"Space",_hx_index:2,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Sharp: {_hx_name:"Sharp",_hx_index:3,__enum__:"_Printf.FormatFlag",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:4,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthH: {_hx_name:"LengthH",_hx_index:5,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthUpperCaseL: {_hx_name:"LengthUpperCaseL",_hx_index:6,__enum__:"_Printf.FormatFlag",toString:$estr}
	,LengthLowerCaseL: {_hx_name:"LengthLowerCaseL",_hx_index:7,__enum__:"_Printf.FormatFlag",toString:$estr}
	,UpperCase: {_hx_name:"UpperCase",_hx_index:8,__enum__:"_Printf.FormatFlag",toString:$estr}
};
_$Printf_FormatFlag.__constructs__ = [_$Printf_FormatFlag.Minus,_$Printf_FormatFlag.Plus,_$Printf_FormatFlag.Space,_$Printf_FormatFlag.Sharp,_$Printf_FormatFlag.Zero,_$Printf_FormatFlag.LengthH,_$Printf_FormatFlag.LengthUpperCaseL,_$Printf_FormatFlag.LengthLowerCaseL,_$Printf_FormatFlag.UpperCase];
var _$Printf_FormatArgs = function(flags,pos,width,precision) {
	this.flags = flags;
	this.pos = pos;
	this.width = width;
	this.precision = precision;
};
$hxClasses["_Printf.FormatArgs"] = _$Printf_FormatArgs;
_$Printf_FormatArgs.__name__ = "_Printf.FormatArgs";
_$Printf_FormatArgs.prototype = {
	flags: null
	,pos: null
	,width: null
	,precision: null
	,__class__: _$Printf_FormatArgs
};
var _$Printf_FormatToken = $hxEnums["_Printf.FormatToken"] = { __ename__:"_Printf.FormatToken",__constructs__:null
	,Raw: ($_=function(string) { return {_hx_index:0,string:string,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Raw",$_.__params__ = ["string"],$_)
	,Tag: ($_=function(type,args) { return {_hx_index:1,type:type,args:args,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Tag",$_.__params__ = ["type","args"],$_)
	,Property: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Property",$_.__params__ = ["name"],$_)
	,Unknown: ($_=function(string,pos) { return {_hx_index:3,string:string,pos:pos,__enum__:"_Printf.FormatToken",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["string","pos"],$_)
};
_$Printf_FormatToken.__constructs__ = [_$Printf_FormatToken.Raw,_$Printf_FormatToken.Tag,_$Printf_FormatToken.Property,_$Printf_FormatToken.Unknown];
var _$Printf_FormatDataType = $hxEnums["_Printf.FormatDataType"] = { __ename__:"_Printf.FormatDataType",__constructs__:null
	,FmtInt: ($_=function(type) { return {_hx_index:0,type:type,__enum__:"_Printf.FormatDataType",toString:$estr}; },$_._hx_name="FmtInt",$_.__params__ = ["type"],$_)
	,FmtFloat: ($_=function(floatType) { return {_hx_index:1,floatType:floatType,__enum__:"_Printf.FormatDataType",toString:$estr}; },$_._hx_name="FmtFloat",$_.__params__ = ["floatType"],$_)
	,FmtString: {_hx_name:"FmtString",_hx_index:2,__enum__:"_Printf.FormatDataType",toString:$estr}
	,FmtPointer: {_hx_name:"FmtPointer",_hx_index:3,__enum__:"_Printf.FormatDataType",toString:$estr}
	,FmtNothing: {_hx_name:"FmtNothing",_hx_index:4,__enum__:"_Printf.FormatDataType",toString:$estr}
};
_$Printf_FormatDataType.__constructs__ = [_$Printf_FormatDataType.FmtInt,_$Printf_FormatDataType.FmtFloat,_$Printf_FormatDataType.FmtString,_$Printf_FormatDataType.FmtPointer,_$Printf_FormatDataType.FmtNothing];
var _$Printf_IntType = $hxEnums["_Printf.IntType"] = { __ename__:"_Printf.IntType",__constructs__:null
	,ICharacter: {_hx_name:"ICharacter",_hx_index:0,__enum__:"_Printf.IntType",toString:$estr}
	,ISignedDecimal: {_hx_name:"ISignedDecimal",_hx_index:1,__enum__:"_Printf.IntType",toString:$estr}
	,IUnsignedDecimal: {_hx_name:"IUnsignedDecimal",_hx_index:2,__enum__:"_Printf.IntType",toString:$estr}
	,IOctal: {_hx_name:"IOctal",_hx_index:3,__enum__:"_Printf.IntType",toString:$estr}
	,IHex: {_hx_name:"IHex",_hx_index:4,__enum__:"_Printf.IntType",toString:$estr}
	,IBin: {_hx_name:"IBin",_hx_index:5,__enum__:"_Printf.IntType",toString:$estr}
};
_$Printf_IntType.__constructs__ = [_$Printf_IntType.ICharacter,_$Printf_IntType.ISignedDecimal,_$Printf_IntType.IUnsignedDecimal,_$Printf_IntType.IOctal,_$Printf_IntType.IHex,_$Printf_IntType.IBin];
var _$Printf_FloatType = $hxEnums["_Printf.FloatType"] = { __ename__:"_Printf.FloatType",__constructs__:null
	,FNormal: {_hx_name:"FNormal",_hx_index:0,__enum__:"_Printf.FloatType",toString:$estr}
	,FScientific: {_hx_name:"FScientific",_hx_index:1,__enum__:"_Printf.FloatType",toString:$estr}
	,FNatural: {_hx_name:"FNatural",_hx_index:2,__enum__:"_Printf.FloatType",toString:$estr}
};
_$Printf_FloatType.__constructs__ = [_$Printf_FloatType.FNormal,_$Printf_FloatType.FScientific,_$Printf_FloatType.FNatural];
var Printf = function() { };
$hxClasses["Printf"] = Printf;
Printf.__name__ = "Printf";
Printf._padChars = null;
Printf._tmp = null;
Printf.init = function() {
	Printf._padChars = new Array(40);
	Printf._padChars[0] = StringTools.rpad("","0",0);
	Printf._padChars[1] = StringTools.rpad("","0",1);
	Printf._padChars[2] = StringTools.rpad("","0",2);
	Printf._padChars[3] = StringTools.rpad("","0",3);
	Printf._padChars[4] = StringTools.rpad("","0",4);
	Printf._padChars[5] = StringTools.rpad("","0",5);
	Printf._padChars[6] = StringTools.rpad("","0",6);
	Printf._padChars[7] = StringTools.rpad("","0",7);
	Printf._padChars[8] = StringTools.rpad("","0",8);
	Printf._padChars[9] = StringTools.rpad("","0",9);
	Printf._padChars[10] = StringTools.rpad("","0",10);
	Printf._padChars[11] = StringTools.rpad("","0",11);
	Printf._padChars[12] = StringTools.rpad("","0",12);
	Printf._padChars[13] = StringTools.rpad("","0",13);
	Printf._padChars[14] = StringTools.rpad("","0",14);
	Printf._padChars[15] = StringTools.rpad("","0",15);
	Printf._padChars[16] = StringTools.rpad("","0",16);
	Printf._padChars[17] = StringTools.rpad("","0",17);
	Printf._padChars[18] = StringTools.rpad("","0",18);
	Printf._padChars[19] = StringTools.rpad("","0",19);
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		Printf._padChars[i + 20] = StringTools.rpad(""," ",i);
	}
	Printf._tmp = new Array(64);
};
Printf.format = function(fmt,args) {
	if(!Printf._initialized) {
		Printf._initialized = true;
		Printf.init();
	}
	var output = new StringBuf();
	var argIndex = 0;
	var tokens = [];
	var _g = 0;
	var _g1 = Printf.tokenize(fmt,tokens);
	while(_g < _g1) {
		var i = _g++;
		var _g2 = tokens[i];
		switch(_g2._hx_index) {
		case 0:
			var string = _g2.string;
			output.b += string == null ? "null" : "" + string;
			break;
		case 1:
			var type = _g2.type;
			var tagArgs = _g2.args;
			if(tagArgs.width == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw haxe_Exception.thrown(new PrintfError("invalid 'width' argument"));
				}
				tagArgs.width = args[argIndex++];
			}
			if(tagArgs.precision == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw haxe_Exception.thrown(new PrintfError("invalid 'precision' argument"));
				}
				tagArgs.precision = args[argIndex++];
			}
			var value;
			if(tagArgs.pos > -1) {
				if(tagArgs.pos > args.length - 1) {
					throw haxe_Exception.thrown(new PrintfError("argument index out of range"));
				}
				value = args[tagArgs.pos];
			} else {
				value = args[argIndex++];
			}
			if(value == null) {
				value = "null";
			}
			switch(type._hx_index) {
			case 0:
				var intType = type.type;
				switch(intType._hx_index) {
				case 0:
					Printf.formatCharacter(value,tagArgs,output);
					break;
				case 1:
					Printf.formatSignedDecimal(value,tagArgs,output);
					break;
				case 2:
					Printf.formatUnsignedDecimal(value,tagArgs,output);
					break;
				case 3:
					Printf.formatOctal(value,tagArgs,output);
					break;
				case 4:
					Printf.formatHexadecimal(value,tagArgs,output);
					break;
				case 5:
					Printf.formatBinary(value,tagArgs,output);
					break;
				}
				break;
			case 1:
				var floatType = type.floatType;
				switch(floatType._hx_index) {
				case 0:
					Printf.formatFloat(value,tagArgs,output);
					break;
				case 1:
					Printf.formatScientific(value,tagArgs,output);
					break;
				case 2:
					Printf.formatNaturalFloat(value,tagArgs,output);
					break;
				}
				break;
			case 2:
				Printf.formatString(Std.string(value),tagArgs,output);
				break;
			case 3:
				throw haxe_Exception.thrown(new PrintfError("specifier 'p' is not supported"));
			case 4:
				throw haxe_Exception.thrown(new PrintfError("specifier 'n' is not supported"));
			}
			break;
		case 2:
			var name = _g2.name;
			if(!Object.prototype.hasOwnProperty.call(args[0],name)) {
				throw haxe_Exception.thrown(new PrintfError("no field named \"" + name + "\" found"));
			}
			output.b += Std.string(Std.string(Reflect.field(args[0],name)));
			++argIndex;
			break;
		case 3:
			var _g3 = _g2.string;
			var _g4 = _g2.pos;
			throw haxe_Exception.thrown(new PrintfError("Invalid format specifier."));
		}
	}
	return output.b;
};
Printf.tokenize = function(fmt,output) {
	var i = 0;
	var c = 0;
	var n = 0;
	var buf = new StringBuf();
	var k = fmt.length;
	while(i < k) {
		c = fmt.charCodeAt(i++);
		if(c == 37) {
			c = fmt.charCodeAt(i++);
			if(c == 37) {
				buf.b += String.fromCodePoint(c);
				continue;
			}
			if(buf.b.length > 0) {
				output[n++] = _$Printf_FormatToken.Raw(buf.b);
				buf = new StringBuf();
			}
			var token;
			if(c == 40) {
				var endPos = fmt.indexOf(")",i);
				if(endPos == -1) {
					token = _$Printf_FormatToken.Unknown("named parameter",i);
				} else {
					var paramName = HxOverrides.substr(fmt,i,endPos - i);
					i = endPos + 1;
					token = _$Printf_FormatToken.Property(paramName);
				}
			} else {
				var i1 = 0;
				if(i1 == null) {
					i1 = 0;
				}
				var params = new _$Printf_FormatArgs(i1,-1,-1,-1);
				_hx_loop2: while(c >= 32 && c <= 48) switch(c) {
				case 32:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Space._hx_index;
					break;
				case 35:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Sharp._hx_index;
					break;
				case 43:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Plus._hx_index;
					break;
				case 45:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Minus._hx_index;
					break;
				case 48:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.Zero._hx_index;
					break;
				default:
					break _hx_loop2;
				}
				if((params.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0 && (params.flags & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
					params.flags &= -1 - (1 << _$Printf_FormatFlag.Zero._hx_index);
				}
				if((params.flags & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 && (params.flags & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0) {
					params.flags &= -1 - (1 << _$Printf_FormatFlag.Space._hx_index);
				}
				if(c == 42) {
					params.width = null;
					c = fmt.charCodeAt(i++);
				} else if(c >= 48 && c <= 57) {
					var w = 0;
					while(c >= 48 && c <= 57) {
						w = c - 48 + w * 10;
						c = fmt.charCodeAt(i++);
					}
					params.width = w;
					if(c == 36) {
						params.pos = w - 1;
						params.width = -1;
						c = fmt.charCodeAt(i++);
						if(c == 42) {
							params.width = null;
							c = fmt.charCodeAt(i++);
						} else if(c >= 48 && c <= 57) {
							var w1 = 0;
							while(c >= 48 && c <= 57) {
								w1 = c - 48 + w1 * 10;
								c = fmt.charCodeAt(i++);
							}
							params.width = w1;
						}
					}
				}
				if(c == 46) {
					c = fmt.charCodeAt(i++);
					if(c == 42) {
						params.precision = null;
						c = fmt.charCodeAt(i++);
					} else {
						var p = 0;
						if(c >= 48 && c <= 57) {
							while(c >= 48 && c <= 57) {
								p = c - 48 + p * 10;
								c = fmt.charCodeAt(i++);
							}
						}
						params.precision = p;
					}
				}
				_hx_loop6: while(c >= 76 && c <= 108) switch(c) {
				case 76:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthUpperCaseL._hx_index;
					break;
				case 104:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthH._hx_index;
					break;
				case 108:
					c = fmt.charCodeAt(i++);
					params.flags |= 1 << _$Printf_FormatFlag.LengthLowerCaseL._hx_index;
					break;
				default:
					break _hx_loop6;
				}
				if(c >= 69 && c <= 120) {
					var type;
					switch(c) {
					case 69:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FScientific);
						break;
					case 71:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNatural);
						break;
					case 88:
						params.flags |= 1 << _$Printf_FormatFlag.UpperCase._hx_index;
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IHex);
						break;
					case 98:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IBin);
						break;
					case 99:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ICharacter);
						break;
					case 100:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ISignedDecimal);
						break;
					case 101:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FScientific);
						break;
					case 102:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNormal);
						break;
					case 103:
						type = _$Printf_FormatDataType.FmtFloat(_$Printf_FloatType.FNatural);
						break;
					case 105:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.ISignedDecimal);
						break;
					case 110:
						type = _$Printf_FormatDataType.FmtNothing;
						break;
					case 111:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IOctal);
						break;
					case 112:
						type = _$Printf_FormatDataType.FmtPointer;
						break;
					case 115:
						type = _$Printf_FormatDataType.FmtString;
						break;
					case 117:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IUnsignedDecimal);
						break;
					case 120:
						type = _$Printf_FormatDataType.FmtInt(_$Printf_IntType.IHex);
						break;
					default:
						type = null;
					}
					token = type == null ? _$Printf_FormatToken.Unknown(String.fromCodePoint(c),i) : _$Printf_FormatToken.Tag(type,params);
				} else {
					token = _$Printf_FormatToken.Unknown(String.fromCodePoint(c),i);
				}
			}
			output[n++] = token;
		} else {
			buf.b += String.fromCodePoint(c);
		}
	}
	if(buf.b.length > 0) {
		output[n++] = _$Printf_FormatToken.Raw(buf.b);
	}
	return n;
};
Printf.formatBinary = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = Printf._tmp;
	var l = 0;
	do {
		tmp[l++] = value & 1;
		value >>>= 1;
	} while(value > 0);
	var m = l;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0b";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) buf.b += String.fromCodePoint((48 + tmp[m]));
	}
};
Printf.formatOctal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			buf.b += Std.string((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0 ? "0" : "");
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	var tmp = Printf._tmp;
	var l = 0;
	do {
		tmp[l++] = value & 7;
		value >>>= 3;
	} while(value > 0);
	var m = l;
	if(p != -1) {
		if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
			f &= -1 - (1 << _$Printf_FormatFlag.Zero._hx_index);
			f |= 1 << _$Printf_FormatFlag.Space._hx_index;
		}
	} else {
		p = 1;
	}
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
			++l;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x);
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			++l;
		}
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			buf.b += "0";
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		while(--m > -1) {
			var x = String.fromCodePoint((48 + tmp[m]));
			buf.b += Std.string(x);
		}
	}
};
Printf.formatHexadecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	if(value == 0) {
		if(p == 0) {
			return;
		}
		f &= -1 - (1 << _$Printf_FormatFlag.Sharp._hx_index);
	}
	if(p == -1) {
		p = 1;
	}
	var tmp = Printf._tmp;
	var l = 0;
	do {
		tmp[l++] = value & 15;
		value >>>= 4;
	} while(value > 0);
	var m = l;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		var a = (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v = tmp[m];
			if(v < 10) {
				var x = String.fromCodePoint((48 + v));
				buf.b += Std.string(x);
			} else {
				var x1 = String.fromCodePoint((a + (v - 10)));
				buf.b += Std.string(x1);
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			w -= 2;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 && p == 1) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			if((f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0) {
				buf.b += "0X";
			} else {
				buf.b += "0x";
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		var a = (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? 65 : 97;
		while(--m > -1) {
			var v = tmp[m];
			if(v < 10) {
				var x = String.fromCodePoint((48 + v));
				buf.b += Std.string(x);
			} else {
				var x1 = String.fromCodePoint((a + (v - 10)));
				buf.b += Std.string(x1);
			}
		}
	}
};
Printf.formatSignedDecimal = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if(p == 0 && value == 0) {
		return;
	}
	if((f & 1 << _$Printf_FormatFlag.LengthH._hx_index) != 0) {
		value &= 65535;
	}
	var s = Std.string(value < 0 ? -value : value);
	var l = s.length;
	var sign = value < 0 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : (f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 ? " " : null;
	var hasSign = sign != null;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += Std.string(s);
		if(p > l) {
			l = p;
		}
		l += hasSign ? 1 : 0;
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l + (hasSign ? 1 : 0);
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
				}
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(hasSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) == 0) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += Std.string(s);
	}
};
Printf.formatUnsignedDecimal = function(value,args,buf) {
	if(value >= 0) {
		Printf.formatSignedDecimal(value,args,buf);
		return;
	}
	var s = haxe_Int64.toString(new haxe__$Int64__$_$_$Int64(0,value));
	var l = s.length;
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
		if(p > l) {
			l = p;
		}
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		var k = l;
		if(p > k) {
			k = p;
		}
		if(w > k) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - k;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(p > l) {
			var _g = 0;
			var _g1 = p - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += "0";
			}
		}
		buf.b += s == null ? "null" : "" + s;
	}
};
Printf.formatNaturalFloat = function(value,args,buf) {
	var tmp = new StringBuf();
	Printf.formatFloat(value,args,tmp);
	var formatedFloat = tmp.b;
	haxe_Log.trace("formatedFloat " + formatedFloat,{ fileName : "Printf.hx", lineNumber : 729, className : "Printf", methodName : "formatNaturalFloat"});
	tmp = new StringBuf();
	Printf.formatScientific(value,args,tmp);
	var formatedScientific = tmp.b;
	haxe_Log.trace("formatedScientific " + formatedScientific,{ fileName : "Printf.hx", lineNumber : 735, className : "Printf", methodName : "formatNaturalFloat"});
	var s = formatedFloat.length <= formatedScientific.length ? formatedFloat : formatedScientific;
	buf.b += s == null ? "null" : "" + s;
};
Printf.formatScientific = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = Printf.DEFAULT_PRECISION;
	}
	var sign;
	var exponent;
	var s = "";
	if(value == 0) {
		sign = 0;
		exponent = 0;
		s += "0";
		if(p > 0) {
			s += ".";
			var _g = 0;
			var _g1 = p;
			while(_g < _g1) {
				var i = _g++;
				s += "0";
			}
		}
	} else {
		var m = Math;
		sign = value > 0. ? 1 : value < 0. ? -1 : 0;
		value = m.abs(value);
		exponent = m.floor(Math.log(value) / 2.302585092994046);
		value /= m.pow(10,exponent);
		var y = m.pow(0.1,p);
		value = Math.round(value / y) * y;
	}
	if(value != 0) {
		s += HxOverrides.substr(value == null ? "null" : "" + value,0,p + 2);
	}
	s += (f & 1 << _$Printf_FormatFlag.UpperCase._hx_index) != 0 ? "E" : "e";
	s += exponent >= 0 ? "+" : "-";
	var s1 = Std.string(exponent < 0 ? -exponent : exponent);
	var c = Printf.DEFAULT_NUM_EXP_DIGITS - s1.length;
	var s2;
	if(c < 1) {
		s2 = s1;
	} else {
		var t;
		if(c > 30) {
			var char = "0";
			t = char;
			var _g = 0;
			var _g1 = c - 1;
			while(_g < _g1) {
				var i = _g++;
				t += char;
			}
		} else {
			t = Printf._padChars[c];
		}
		s2 = t + s1;
	}
	s += s2;
	var printSign = sign == -1 || ((f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 || (f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0);
	if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) == 0) {
		s = (sign == -1 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	if(args.width > 0) {
		var w = args.width;
		if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
			--w;
		}
		var type = (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0 ? 0 : 20;
		var c = w - s.length;
		if(c >= 1) {
			var t;
			if(c > 30) {
				var char = type == 0 ? "0" : " ";
				t = char;
				var _g = 0;
				var _g1 = c - 1;
				while(_g < _g1) {
					var i = _g++;
					t += char;
				}
			} else {
				t = Printf._padChars[type + c];
			}
			s = t + s;
		}
	}
	if(printSign && (f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
		s = (sign == -1 ? "-" : (f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 ? "+" : " ") + s;
	}
	buf.b += s == null ? "null" : "" + s;
};
Printf.formatFloat = function(value,args,buf) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = Printf.DEFAULT_PRECISION;
	}
	var w = args.width;
	var isNegative = value < 0;
	var s;
	if(p == 0) {
		s = Std.string(Math.round(value));
		if((f & 1 << _$Printf_FormatFlag.Sharp._hx_index) != 0) {
			s += ".";
		}
	} else if(isNaN(value)) {
		s = "NaN";
	} else {
		s = value.toFixed(p);
	}
	var l = s.length;
	if(isNegative && s.indexOf("-") > -1) {
		s = HxOverrides.substr(s,1,null);
	}
	var sign = null;
	if((f & 1 << _$Printf_FormatFlag.Plus._hx_index) != 0 && !isNegative) {
		sign = "+";
		++l;
	} else if((f & 1 << _$Printf_FormatFlag.Space._hx_index) != 0 && !isNegative) {
		sign = " ";
		++l;
	} else if(isNegative) {
		sign = "-";
	}
	var hasSign = sign != null;
	if((f & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += Std.string(s);
		if(w > l) {
			var _g = 0;
			var _g1 = w - l;
			while(_g < _g1) {
				var i = _g++;
				buf.b += " ";
			}
		}
	} else {
		if(w > l) {
			if((f & 1 << _$Printf_FormatFlag.Zero._hx_index) != 0) {
				if(hasSign) {
					buf.b += sign == null ? "null" : "" + sign;
					hasSign = false;
				}
				var _g = 0;
				var _g1 = w - l;
				while(_g < _g1) {
					var i = _g++;
					buf.b += "0";
				}
			} else {
				var _g = 0;
				var _g1 = w - l;
				while(_g < _g1) {
					var i = _g++;
					buf.b += " ";
				}
			}
		}
		if(hasSign) {
			buf.b += sign == null ? "null" : "" + sign;
		}
		buf.b += Std.string(s);
	}
};
Printf.formatCharacter = function(x,args,buf) {
	if((args.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		var x1 = String.fromCodePoint(x);
		buf.b += Std.string(x1);
		var _g = 0;
		var _g1 = args.width - 1;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		var _g = 0;
		var _g1 = args.width - 1;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
		var x1 = String.fromCodePoint(x);
		buf.b += Std.string(x1);
	}
};
Printf.formatString = function(value,args,buf) {
	var l = value.length;
	var p = args.precision;
	if((args.flags & 1 << _$Printf_FormatFlag.Minus._hx_index) != 0) {
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
			l = p;
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
		var _g = 0;
		var _g1 = args.width - l;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
	} else {
		if(p != -1) {
			l = p;
		}
		var _g = 0;
		var _g1 = args.width - l;
		while(_g < _g1) {
			var i = _g++;
			buf.b += " ";
		}
		if(p != -1) {
			buf.b += p == null ? HxOverrides.substr(value,0,null) : HxOverrides.substr(value,0,p);
		} else {
			buf.b += value == null ? "null" : "" + value;
		}
	}
};
Printf.pad = function(s,l,type,dir) {
	var c = l - s.length;
	if(c < 1) {
		return s;
	} else {
		var t;
		if(c > 30) {
			var char = type == 0 ? "0" : " ";
			t = char;
			var _g = 0;
			var _g1 = c - 1;
			while(_g < _g1) {
				var i = _g++;
				t += char;
			}
		} else {
			t = Printf._padChars[type + c];
		}
		if(dir > 0) {
			return s + t;
		} else {
			return t + s;
		}
	}
};
var PrintfError = function(message) {
	this.message = message;
};
$hxClasses["PrintfError"] = PrintfError;
PrintfError.__name__ = "PrintfError";
PrintfError.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: PrintfError
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var STX = $hxEnums["STX"] = { __ename__:"STX",__constructs__:null
	,STX: {_hx_name:"STX",_hx_index:0,__enum__:"STX",toString:$estr}
};
STX.__constructs__ = [STX.STX];
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var bake_Baked = {};
bake_Baked._new = function() {
	var this1 = new haxe_io_Path("/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_test/");
	var _this = [{ key : "utf16", value : "1"},{ key : "true", value : "1"},{ key : "tink_syntaxhub", value : "0.6.1"},{ key : "tink_runloop", value : "0.1.0"},{ key : "tink_priority", value : "0.1.4"},{ key : "tink_macro", value : "1.0.1"},{ key : "tink_core", value : "2.1.1"},{ key : "tink_concurrent", value : "0.1.3"},{ key : "tink-syntaxhub", value : "0.6.1"},{ key : "tink-runloop", value : "0.1.0"},{ key : "tink-priority", value : "0.1.4"},{ key : "tink-macro", value : "1.0.1"},{ key : "tink-core", value : "2.1.1"},{ key : "tink-concurrent", value : "0.1.3"},{ key : "target.utf16", value : "1"},{ key : "target.unicode", value : "1"},{ key : "target.name", value : "js"},{ key : "target.atomics", value : "1"},{ key : "stx_stream", value : "0.1.1"},{ key : "stx_show", value : "0.1.0"},{ key : "stx_proxy", value : "0.1.0"},{ key : "stx_pkg", value : "0.1.0"},{ key : "stx_pico", value : "2.1.2"},{ key : "stx_parse", value : "0.4.0"},{ key : "stx_om", value : "0.3.0"},{ key : "stx_nano", value : "0.3.1"},{ key : "stx_log", value : "0.1.6"},{ key : "stx_fp", value : "0.3.0"},{ key : "stx_fn", value : "1.1.0"},{ key : "stx_fail", value : "0.2.0"},{ key : "stx_ds", value : "0.2.1"},{ key : "stx_coroutine", value : "0.3.0"},{ key : "stx_asys", value : "0.1.0"},{ key : "stx_assert", value : "0.2.0"},{ key : "stx.log.filter.show", value : "false"},{ key : "stx-stream", value : "0.1.1"},{ key : "stx-show", value : "0.1.0"},{ key : "stx-proxy", value : "0.1.0"},{ key : "stx-pkg", value : "0.1.0"},{ key : "stx-pico", value : "2.1.2"},{ key : "stx-parse", value : "0.4.0"},{ key : "stx-om", value : "0.3.0"},{ key : "stx-nano", value : "0.3.1"},{ key : "stx-log", value : "0.1.6"},{ key : "stx-fp", value : "0.3.0"},{ key : "stx-fn", value : "1.1.0"},{ key : "stx-fail", value : "0.2.0"},{ key : "stx-ds", value : "0.2.1"},{ key : "stx-coroutine", value : "0.3.0"},{ key : "stx-asys", value : "0.1.0"},{ key : "stx-assert", value : "0.2.0"},{ key : "source_header", value : "Generated by Haxe 4.3.1"},{ key : "source-header", value : "Generated by Haxe 4.3.1"},{ key : "polygonal_printf", value : "1.0.2-beta"},{ key : "polygonal-printf", value : "1.0.2-beta"},{ key : "pml", value : "0.5.0"},{ key : "no_deprecation_warnings", value : "1"},{ key : "no-deprecation-warnings", value : "1"},{ key : "js_es5", value : "1"},{ key : "js_es", value : "5"},{ key : "js-es5", value : "1"},{ key : "js-es", value : "5"},{ key : "js", value : "1"},{ key : "haxe_ver", value : "4.301"},{ key : "haxe4", value : "1"},{ key : "haxe3", value : "1"},{ key : "haxe-ver", value : "4.301"},{ key : "haxe", value : "4.3.1"},{ key : "fletcher", value : "0.2.0"},{ key : "equals", value : "1.0.2"},{ key : "dce", value : "std"},{ key : "console.hx", value : "0.2.15"},{ key : "bake", value : "0.2.1"}];
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var kv = _this[i];
		result[i] = bake_Field.lift({ key : kv.key, value : kv.value});
	}
	return new bake_Baking(this1,["/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/equals/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_show/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_proxy/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_parse/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_om/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_ds/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/pml/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_asys/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_priority/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_macro/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_syntaxhub/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_concurrent/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_runloop/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_coroutine/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_stream/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_pkg/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/polygonal-printf/src/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/console.hx/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/bake/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_log/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fp/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/fletcher/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_assert/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fn/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fail/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_nano/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_pico/src/main/haxe/","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_core/src/","src/main/haxe/","","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/lib/haxe/extraLibs/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/share/haxe/extraLibs/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/bin/extraLibs/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/lib/haxe/std/js/_std/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/share/haxe/std/js/_std/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/bin/std/js/_std/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/lib/haxe/std/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/share/haxe/std/","/mnt/dat/i/prj/haxe/pub/ohmrun/ohmrun_workspace/.local/bertha/o/var/asdf/installs/haxe/4.3.1/bin/std/"],["-cp","src/main/haxe","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_core/src/","-D","tink_core=2.1.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_pico/src/main/haxe/","-D","stx_pico=2.1.2","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_nano/src/main/haxe/","-D","stx_nano=0.3.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fail/src/main/haxe/","-D","stx_fail=0.2.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fn/src/main/haxe/","-D","stx_fn=1.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_assert/src/main/haxe/","-D","stx_assert=0.2.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/fletcher/src/main/haxe/","-D","fletcher=0.2.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_fp/src/main/haxe/","-D","stx_fp=0.3.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_log/src/main/haxe/","-D","stx_log=0.1.6","--macro","bake.Plugin.use()","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/bake/src/main/haxe/","-D","bake=0.2.1","--neko-lib-path","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/console.hx/ndll/","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/console.hx/","-D","console.hx=0.2.15","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/polygonal-printf/src/","-D","polygonal-printf=1.0.2-beta","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_pkg/src/main/haxe/","-D","stx_pkg=0.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_stream/src/main/haxe/","-D","stx_stream=0.1.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_coroutine/src/main/haxe/","-D","stx_coroutine=0.3.0","--macro","tink.runloop.Boot.boot()","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_runloop/src/","-D","tink_runloop=0.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_concurrent/src/","-D","tink_concurrent=0.1.3","--macro","tink.SyntaxHub.use()","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_syntaxhub/src/","-D","tink_syntaxhub=0.6.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_macro/src/","-D","tink_macro=1.0.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/tink_priority/src/","-D","tink_priority=0.1.4","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_asys/src/main/haxe/","-D","stx_asys=0.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/pml/src/main/haxe/","-D","pml=0.5.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_ds/src/main/haxe/","-D","stx_ds=0.2.1","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_om/src/main/haxe/","-D","stx_om=0.3.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_parse/src/main/haxe/","-D","stx_parse=0.4.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_proxy/src/main/haxe/","-D","stx_proxy=0.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/stx_show/src/main/haxe/","-D","stx_show=0.1.0","-cp","/mnt/dat/i/prj/haxe/pub/ohmrun/stx/ballz/haxe_modules/equals/src/","-D","equals=1.0.2","-D","no-deprecation-warnings","-D","stx.log.filter.show=false","-resource","tests.pml@tests","--macro","include('stx.Test',true)","--macro","include('stx.test',true)","--js","build/unit/event/javascript/main.js"],result,"/home/dayz");
};
var bake_Baking = function(root,classpaths,args,defines,home) {
	this.root = root;
	this.classpaths = classpaths;
	this.args = args;
	this.id = haxe_Resource.getString("bake.session.id");
	this.defines = defines;
	this.home = home;
};
$hxClasses["bake.Baking"] = bake_Baking;
bake_Baking.__name__ = "bake.Baking";
bake_Baking.instance = null;
bake_Baking.prototype = {
	is_runtime: null
	,get_is_runtime: function() {
		return bake_Baking.instance == null;
	}
	,root: null
	,classpaths: null
	,args: null
	,id: null
	,defines: null
	,home: null
	,target: null
	,get_target: function() {
		return bake_makro_GetTarget.apply(this);
	}
	,toString: function() {
		var rt = this.get_is_runtime() ? "runtime" : "macrotime";
		return "Bake(" + this.id + " root:" + Std.string(this.root) + " " + Std.string(this.get_target()) + " [" + rt + "] home:" + this.home + ")";
	}
	,__class__: bake_Baking
};
var bake_BakingLift = function() { };
$hxClasses["bake.BakingLift"] = bake_BakingLift;
bake_BakingLift.__name__ = "bake.BakingLift";
bake_BakingLift.get_build_location = function(self) {
	return bake_OptionUtil.flat_map(self.get_target(),function(target) {
		var arr = ["--" + target,"-" + target];
		var idx = Lambda.fold(arr,function(n,m) {
			return bake_OptionUtil.fold(m,function(ok) {
				return bake_Util.option(ok);
			},function() {
				var self1 = self.args;
				var index = 0;
				var ok = false;
				var _g = 0;
				while(_g < self1.length) {
					var e = self1[_g];
					++_g;
					if(n == e) {
						ok = true;
						break;
					}
					++index;
				}
				var i = ok ? index : -1;
				if(i == -1) {
					return haxe_ds_Option.None;
				} else {
					return haxe_ds_Option.Some(i);
				}
			});
		},haxe_ds_Option.None);
		return bake_OptionUtil.map(bake_OptionUtil.flat_map(idx,function(i) {
			if(target == "interp") {
				return haxe_ds_Option.None;
			} else {
				return haxe_ds_Option.Some(self.args[i + 1]);
			}
		}),function(tail) {
			return haxe_io_Path.addTrailingSlash(self.root.toString()) + tail;
		});
	});
};
bake_BakingLift.get_build_directory = function(self) {
	return bake_OptionUtil.flat_map(bake_BakingLift.get_build_location(self),function(string) {
		return bake_OptionUtil.map(self.get_target(),function(target) {
			return bake_BoolUtil.if_else(bake_TargetUtil.uses_file(target),function() {
				return haxe_io_Path.directory(string);
			},function() {
				return string;
			});
		});
	});
};
bake_BakingLift.get_main = function(baking) {
	var result = Lambda.fold(baking.args,function(n,m) {
		var _g = m.data;
		if(m.done) {
			return m;
		} else {
			return bake_BoolUtil.if_else(bake_ArrayUtil.any(["-main","--main"],function(str) {
				return str == m.data;
			}),function() {
				return { done : true, data : n};
			},function() {
				return { done : false, data : n};
			});
		}
	},{ done : false, data : null});
	if(result.done == true) {
		return bake_Util.option(result.data);
	} else {
		return bake_Util.option(null);
	}
};
var bake_Field = {};
bake_Field._new = function(self) {
	return self;
};
bake_Field.lift = function(self) {
	return bake_Field._new(self);
};
bake_Field.prj = function(this1) {
	return this1;
};
bake_Field.get_self = function(this1) {
	return bake_Field.lift(this1);
};
var bake_TargetId = $hxEnums["bake.TargetId"] = { __ename__:"bake.TargetId",__constructs__:null
	,swf: {_hx_name:"swf",_hx_index:0,__enum__:"bake.TargetId",toString:$estr}
	,js: {_hx_name:"js",_hx_index:1,__enum__:"bake.TargetId",toString:$estr}
	,php: {_hx_name:"php",_hx_index:2,__enum__:"bake.TargetId",toString:$estr}
	,neko: {_hx_name:"neko",_hx_index:3,__enum__:"bake.TargetId",toString:$estr}
	,cpp: {_hx_name:"cpp",_hx_index:4,__enum__:"bake.TargetId",toString:$estr}
	,cppia: {_hx_name:"cppia",_hx_index:5,__enum__:"bake.TargetId",toString:$estr}
	,cs: {_hx_name:"cs",_hx_index:6,__enum__:"bake.TargetId",toString:$estr}
	,java: {_hx_name:"java",_hx_index:7,__enum__:"bake.TargetId",toString:$estr}
	,python: {_hx_name:"python",_hx_index:8,__enum__:"bake.TargetId",toString:$estr}
	,lua: {_hx_name:"lua",_hx_index:9,__enum__:"bake.TargetId",toString:$estr}
	,hl: {_hx_name:"hl",_hx_index:10,__enum__:"bake.TargetId",toString:$estr}
	,interp: {_hx_name:"interp",_hx_index:11,__enum__:"bake.TargetId",toString:$estr}
};
bake_TargetId.__constructs__ = [bake_TargetId.swf,bake_TargetId.js,bake_TargetId.php,bake_TargetId.neko,bake_TargetId.cpp,bake_TargetId.cppia,bake_TargetId.cs,bake_TargetId.java,bake_TargetId.python,bake_TargetId.lua,bake_TargetId.hl,bake_TargetId.interp];
var bake_Util = function() { };
$hxClasses["bake.Util"] = bake_Util;
bake_Util.__name__ = "bake.Util";
bake_Util.option = function(v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		var x = v;
		return haxe_ds_Option.Some(x);
	}
};
bake_Util.uuid = function(value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
var bake_OptionUtil = function() { };
$hxClasses["bake.OptionUtil"] = bake_OptionUtil;
bake_OptionUtil.__name__ = "bake.OptionUtil";
bake_OptionUtil.is_defined = function(opt) {
	if(opt._hx_index == 0) {
		var _g = opt.v;
		return true;
	} else {
		return false;
	}
};
bake_OptionUtil.zip_with = function(l,r,fn) {
	if(l._hx_index == 0) {
		if(r._hx_index == 0) {
			var r1 = r.v;
			var l1 = l.v;
			return haxe_ds_Option.Some(fn(l1,r1));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
bake_OptionUtil.flat_map = function(self,fn) {
	if(self._hx_index == 0) {
		var x = self.v;
		return fn(x);
	} else {
		return haxe_ds_Option.None;
	}
};
bake_OptionUtil.fold = function(self,some,none) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return some(v);
	case 1:
		return none();
	}
};
bake_OptionUtil.fudge = function(self,msg) {
	return bake_OptionUtil.fold(self,function(x) {
		return x;
	},function() {
		throw haxe_Exception.thrown(msg);
	});
};
bake_OptionUtil.map = function(self,fn) {
	return bake_OptionUtil.fold(self,function(x) {
		return haxe_ds_Option.Some(fn(x));
	},function() {
		return haxe_ds_Option.None;
	});
};
var bake_BoolUtil = function() { };
$hxClasses["bake.BoolUtil"] = bake_BoolUtil;
bake_BoolUtil.__name__ = "bake.BoolUtil";
bake_BoolUtil.if_else = function(b,l,r) {
	if(b) {
		return l();
	} else {
		return r();
	}
};
var bake_IdentUtil = function() { };
$hxClasses["bake.IdentUtil"] = bake_IdentUtil;
bake_IdentUtil.__name__ = "bake.IdentUtil";
bake_IdentUtil.toIdentifier = function(self) {
	var _g = self.name;
	var _g1 = self.pack;
	if(_g1 == null) {
		var n = _g;
		return n;
	} else {
		var pack = _g1;
		var n = _g;
		if(pack.length == 0) {
			return n;
		} else {
			var p = _g1;
			var n = _g;
			var next = p.slice();
			next.push(n);
			return next.join(".");
		}
	}
};
var bake_ArrayUtil = function() { };
$hxClasses["bake.ArrayUtil"] = bake_ArrayUtil;
bake_ArrayUtil.__name__ = "bake.ArrayUtil";
bake_ArrayUtil.index_of = function(self,t) {
	var index = 0;
	var ok = false;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			ok = true;
			break;
		}
		++index;
	}
	if(ok) {
		return index;
	} else {
		return -1;
	}
};
bake_ArrayUtil.any = function(self,fn) {
	return Lambda.fold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
bake_ArrayUtil.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
var bake_TargetUtil = function() { };
$hxClasses["bake.TargetUtil"] = bake_TargetUtil;
bake_TargetUtil.__name__ = "bake.TargetUtil";
bake_TargetUtil.uses_file = function(self) {
	switch(self) {
	case "cppia":case "hl":case "js":case "lua":case "neko":case "python":case "swf":
		return true;
	case "cpp":case "cs":case "interp":case "java":case "php":
		return false;
	default:
		return true;
	}
};
var bake_makro_GetTarget = function() { };
$hxClasses["bake.makro.GetTarget"] = bake_makro_GetTarget;
bake_makro_GetTarget.__name__ = "bake.makro.GetTarget";
bake_makro_GetTarget.apply = function(build) {
	var enm = bake_TargetId;
	var _this = enm.__constructs__;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i]._hx_name;
	}
	var types = result;
	var target = haxe_ds_Option.None;
	var _g = 0;
	while(_g < types.length) {
		var t = types[_g];
		++_g;
		var self = build.args;
		var index = 0;
		var ok = false;
		var _g1 = 0;
		while(_g1 < self.length) {
			var e = self[_g1];
			++_g1;
			if(e == "-" + t || e == "--" + t) {
				ok = true;
				break;
			}
			++index;
		}
		var idx = ok ? index : -1;
		if(idx != -1) {
			target = haxe_ds_Option.Some(t);
			break;
		}
	}
	return target;
};
var equals_Equal = function() { };
$hxClasses["equals.Equal"] = equals_Equal;
equals_Equal.__name__ = "equals.Equal";
equals_Equal.iz = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
equals_Equal.isNull = function(a) {
	if(Type.typeof(a)._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
equals_Equal.isFunction = function(a) {
	if(Type.typeof(a)._hx_index == 5) {
		return true;
	} else {
		return false;
	}
};
equals_Equal.diff = function(a,b) {
	return !equals_Equal.equals(a,b);
};
equals_Equal.equals = function(a,b) {
	if(a == b) {
		return true;
	}
	if(equals_Equal.isNull(a) || equals_Equal.isNull(b)) {
		return false;
	}
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 2:
		if(isNaN(a)) {
			return isNaN(b);
		} else {
			return false;
		}
		break;
	case 4:
		break;
	case 5:
		return a == b;
	case 6:
		var _g1 = _g.c;
		if(equals_Equal.iz(a,String)) {
			return a == b;
		}
		if(equals_Equal.iz(a,Array)) {
			var a1 = js_Boot.__cast(a , Array);
			var b1 = js_Boot.__cast(b , Array);
			if(a1.length != b1.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = a1.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!equals_Equal.equals(a1[i],b1[i])) {
					return false;
				}
			}
			return true;
		}
		if(equals_Equal.iz(a,haxe_IMap)) {
			var a1 = a;
			var b1 = b;
			var _g1 = [];
			var key = a1.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				_g1.push(key1);
			}
			var a_keys = _g1;
			var _g1 = [];
			var key = b1.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				_g1.push(key1);
			}
			var b_keys = _g1;
			if(!equals_Equal.equals(a_keys,b_keys)) {
				return false;
			}
			var _g1 = 0;
			while(_g1 < a_keys.length) {
				var key = a_keys[_g1];
				++_g1;
				if(!equals_Equal.equals(a1.get(key),b1.get(key))) {
					return false;
				}
			}
			return true;
		}
		if(equals_Equal.iz(a,Date)) {
			return (js_Boot.__cast(a , Date)).getTime() == (js_Boot.__cast(b , Date)).getTime();
		}
		if(equals_Equal.iz(a,haxe_io_Bytes)) {
			return equals_Equal.equals((js_Boot.__cast(a , haxe_io_Bytes)).b.bufferValue,(js_Boot.__cast(b , haxe_io_Bytes)).b.bufferValue);
		}
		break;
	case 7:
		var _g1 = _g.e;
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var a_args = Type.enumParameters(a);
		var b_args = Type.enumParameters(b);
		return equals_Equal.equals(a_args,b_args);
	case 0:case 1:case 3:case 8:
		return a == b;
	}
	var _g = 0;
	var _g1 = Reflect.fields(a);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var pa = Reflect.field(a,field);
		var pb = Reflect.field(b,field);
		if(equals_Equal.isFunction(pa)) {
			if(equals_Equal.isNull(pa) != equals_Equal.isNull(pb)) {
				return false;
			}
			continue;
		}
		if(!equals_Equal.equals(pa,pb)) {
			return false;
		}
	}
	return true;
};
var stx_StxMemberApi = function() { };
$hxClasses["stx.StxMemberApi"] = stx_StxMemberApi;
stx_StxMemberApi.__name__ = "stx.StxMemberApi";
stx_StxMemberApi.__isInterface__ = true;
stx_StxMemberApi.prototype = {
	stx_tag: null
	,get_stx_tag: null
	,__class__: stx_StxMemberApi
};
var eu_ohmrun_FletcherApi = function() { };
$hxClasses["eu.ohmrun.FletcherApi"] = eu_ohmrun_FletcherApi;
eu_ohmrun_FletcherApi.__name__ = "eu.ohmrun.FletcherApi";
eu_ohmrun_FletcherApi.__isInterface__ = true;
eu_ohmrun_FletcherApi.__interfaces__ = [stx_StxMemberApi];
eu_ohmrun_FletcherApi.prototype = {
	source: null
	,defer: null
	,toFletcher: null
	,__class__: eu_ohmrun_FletcherApi
};
var stx_pico_Clazz = $hx_exports["stx"]["Clazz"] = function() {
};
$hxClasses["stx.pico.Clazz"] = stx_pico_Clazz;
stx_pico_Clazz.__name__ = "stx.pico.Clazz";
stx_pico_Clazz.prototype = {
	definition: function() {
		return js_Boot.getClass(this);
	}
	,identifier: function() {
		var c = js_Boot.getClass(this);
		return stx_pico_Identifier._new(c.__name__);
	}
	,__class__: stx_pico_Clazz
};
var stx_StxMemberCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.StxMemberCls"] = stx_StxMemberCls;
stx_StxMemberCls.__name__ = "stx.StxMemberCls";
stx_StxMemberCls.__super__ = stx_pico_Clazz;
stx_StxMemberCls.prototype = $extend(stx_pico_Clazz.prototype,{
	stx_tag: null
	,get_stx_tag: null
	,__class__: stx_StxMemberCls
});
var eu_ohmrun_FletcherCls = function(pos) {
	stx_StxMemberCls.call(this);
	this.source = pos;
};
$hxClasses["eu.ohmrun.FletcherCls"] = eu_ohmrun_FletcherCls;
eu_ohmrun_FletcherCls.__name__ = "eu.ohmrun.FletcherCls";
eu_ohmrun_FletcherCls.__interfaces__ = [eu_ohmrun_FletcherApi];
eu_ohmrun_FletcherCls.__super__ = stx_StxMemberCls;
eu_ohmrun_FletcherCls.prototype = $extend(stx_StxMemberCls.prototype,{
	source: null
	,get_stx_tag: function() {
		return 1;
	}
	,defer: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ":" + (this.source == null ? "null" : stx_nano_Position.toString(this.source));
	}
	,toFletcher: function() {
		return this;
	}
	,__class__: eu_ohmrun_FletcherCls
});
var eu_ohmrun_FletcherLift = function() { };
$hxClasses["eu.ohmrun.FletcherLift"] = eu_ohmrun_FletcherLift;
eu_ohmrun_FletcherLift.__name__ = "eu.ohmrun.FletcherLift";
eu_ohmrun_FletcherLift.lift = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_FletcherLift.environment = function(self,p,success,failure,pos) {
	var context = eu_ohmrun_Fletcher.ctx(stx_nano_Wildcard.__,p,success,failure);
	var process = self;
	var completion = new eu_ohmrun_fletcher_Completion(context,process,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 144, className : "eu.ohmrun.FletcherLift", methodName : "environment"});
	return completion;
};
eu_ohmrun_FletcherLift.fudge = function(self,p) {
	var val = null;
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("fudged");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 153, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}));
		val = ok;
	},function(no) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("fudged:fail");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 157, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}));
		throw haxe_Exception.thrown(no);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 149, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))));
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 161, className : "eu.ohmrun.FletcherLift", methodName : "fudge"}).module.exists().apply(val);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	return val;
};
eu_ohmrun_FletcherLift.force = function(self,p) {
	var val = null;
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("fudged");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 171, className : "eu.ohmrun.FletcherLift", methodName : "force"}));
		val = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok);
	},function(no) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("fudged:fail");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 175, className : "eu.ohmrun.FletcherLift", methodName : "force"}));
		val = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(no)),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 176, className : "eu.ohmrun.FletcherLift", methodName : "force"});
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 167, className : "eu.ohmrun.FletcherLift", methodName : "force"}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))));
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 179, className : "eu.ohmrun.FletcherLift", methodName : "force"}).module.exists().apply(val);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	return val;
};
eu_ohmrun_FletcherLift.then = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,that,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 185, className : "eu.ohmrun.FletcherLift", methodName : "then"});
};
eu_ohmrun_FletcherLift.pair = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var lhs = eu_ohmrun_Fletcher.forward(self,stx_nano_CoupleLift.fst(p),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 189, className : "eu.ohmrun.FletcherLift", methodName : "pair"});
		var rhs = eu_ohmrun_Fletcher.forward(that,stx_nano_CoupleLift.snd(p),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 190, className : "eu.ohmrun.FletcherLift", methodName : "pair"});
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.zip(lhs,rhs);
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 188, className : "eu.ohmrun.FletcherLift", methodName : "pair"});
};
eu_ohmrun_FletcherLift.split = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(pi,cont) {
		return eu_ohmrun_FletcherLift.pair(self,that).defer(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,pi,pi),cont);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 195, className : "eu.ohmrun.FletcherLift", methodName : "split"});
};
eu_ohmrun_FletcherLift.first = function(self) {
	return eu_ohmrun_FletcherLift.pair(self,eu_ohmrun_Fletcher.unit());
};
eu_ohmrun_FletcherLift.pinch = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.zip(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 204, className : "eu.ohmrun.FletcherLift", methodName : "pinch"}),eu_ohmrun_Fletcher.forward(that,p,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 204, className : "eu.ohmrun.FletcherLift", methodName : "pinch"}));
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 203, className : "eu.ohmrun.FletcherLift", methodName : "pinch"});
};
eu_ohmrun_FletcherLift.map = function(self,that,pos) {
	return new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(that,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),pos);
};
eu_ohmrun_FletcherLift.mapi = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		return self.defer(that(p),cont);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 215, className : "eu.ohmrun.FletcherLift", methodName : "mapi"});
};
eu_ohmrun_FletcherLift.joint = function(lhs,rhs) {
	return eu_ohmrun_FletcherLift.then(lhs,eu_ohmrun_FletcherLift.split(eu_ohmrun_Fletcher.unit(),rhs));
};
eu_ohmrun_FletcherLift.bound = function(self,that) {
	return eu_ohmrun_FletcherLift.then(eu_ohmrun_FletcherLift.joint(eu_ohmrun_Fletcher.unit(),self),that);
};
eu_ohmrun_FletcherLift.broach = function(self) {
	return eu_ohmrun_FletcherLift.bound(self,new eu_ohmrun_fletcher_term_AnonSync(stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	}),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_FletcherLift.future = function(self,p) {
	return tink_core_Future.irreversible(function(cb) {
		stx_stream_CycleLift.submit(stx_stream_Work.toCycle(eu_ohmrun_FletcherLift.environment(self,p,function(ok) {
			cb(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ok));
		},function(no) {
			cb(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no));
		},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 230, className : "eu.ohmrun.FletcherLift", methodName : "future"}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
			var val = fn(new tink_core_FutureTrigger());
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("terminal AFTER unit()");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
			return val;
		},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 230, className : "eu.ohmrun.FletcherLift", methodName : "future"});
	});
};
eu_ohmrun_FletcherLift.produce = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,i,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 243, className : "eu.ohmrun.FletcherLift", methodName : "produce"}),function(ok) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(no)),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 245, className : "eu.ohmrun.FletcherLift", methodName : "produce"}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 240, className : "eu.ohmrun.FletcherLift", methodName : "produce"});
};
var eu_ohmrun_Fletcher = {};
eu_ohmrun_Fletcher.ctx = function(wildcard,environment,ok,no) {
	return eu_ohmrun_fletcher_core_Context.make(environment,ok,no);
};
eu_ohmrun_Fletcher._new = function(self) {
	return self;
};
eu_ohmrun_Fletcher.lift = function(self) {
	return eu_ohmrun_Fletcher._new(self);
};
eu_ohmrun_Fletcher.prj = function(this1) {
	return this1;
};
eu_ohmrun_Fletcher.get_self = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
eu_ohmrun_Fletcher.fromApi = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_Fletcher.unit = function() {
	return new eu_ohmrun_fletcher_term_AnonSync(function(x) {
		return x;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_Fletcher.constant = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var value = self;
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 62, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "constant"});
};
eu_ohmrun_Fletcher.pure = function(self) {
	return eu_ohmrun_Fletcher.constant(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,self));
};
eu_ohmrun_Fletcher.fromFun1R = function(self) {
	return new eu_ohmrun_fletcher_term_AnonSync(self,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_Fletcher.fromFunXR = function(self) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return self();
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_Fletcher.forward = function(f,p,pos) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(k) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("forward called " + Std.string(p));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 85, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "forward"}));
		var ft = new tink_core_FutureTrigger();
		var fst = f.defer(p,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(t_sink) {
			var result = t_sink(ft);
			return result;
		},pos)));
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("FORWARD before apply");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 103, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "forward"}));
		var snd = k.apply(ft);
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("FORWARD after apply");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 105, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "forward"}));
		return stx_stream_WorkLift.seq(fst,snd);
	}));
};
eu_ohmrun_Fletcher.Sync = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_Fletcher.FlatMap = function(self,fn) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 116, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "FlatMap"}),function(ok) {
			return eu_ohmrun_Fletcher.forward(fn(ok),p,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 117, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "FlatMap"});
		},function(no) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 115, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "FlatMap"});
};
eu_ohmrun_Fletcher.Anon = function(self,pos) {
	return new eu_ohmrun_fletcher_term_Anon(self,pos);
};
eu_ohmrun_Fletcher.Then = function(self,that,pos) {
	return new eu_ohmrun_fletcher_term_Then(self,that,pos);
};
eu_ohmrun_Fletcher.Delay = function(ms) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var bang = tink_core_Future.map(stx_stream_Timeout.prj(stx_stream_Timeout._new(ms)),function(_) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ipt);
		});
		var self = cont;
		var self1 = cont;
		var ft = bang;
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 129, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Delay"});
};
var eu_ohmrun_FletcherWildcards = function() { };
$hxClasses["eu.ohmrun.FletcherWildcards"] = eu_ohmrun_FletcherWildcards;
eu_ohmrun_FletcherWildcards.__name__ = "eu.ohmrun.FletcherWildcards";
eu_ohmrun_FletcherWildcards.attempt = function(wildcard,self,pos) {
	switch(self._hx_index) {
	case 0:
		var r = self.r;
		return eu_ohmrun_fletcher_Attempt.pure(r);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Attempt.fromUpshot(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Upshot(fn);
	case 3:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn);
	case 4:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromUnary1Produce(fn);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Provide(fn);
	}
};
eu_ohmrun_FletcherWildcards.produce = function(wildcard,self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Produce.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Produce.Sync(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.Thunk(fn);
	case 3:
		var refuse = self.Refuse;
		return eu_ohmrun_fletcher_Produce.fromRefuse(refuse);
	case 4:
		var pledge = self.pledge;
		return eu_ohmrun_fletcher_Produce.fromPledge(pledge);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.fromFunXProduce(fn);
	case 6:
		var fletcher = self.fletcher;
		return eu_ohmrun_fletcher_Produce.fromFletcher(fletcher);
	}
};
eu_ohmrun_FletcherWildcards.arrange = function(wildcard,self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Arrange.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Arrange.fromUpshot(res);
	case 2:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Attempt(f);
	case 3:
		var s = self.f;
		return eu_ohmrun_fletcher_Arrange.fromArrangeArgFun1Convert(s);
	case 4:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Modulate(f);
	}
};
eu_ohmrun_FletcherWildcards.modulate = function(wildcard,self) {
	return eu_ohmrun_fletcher_ModulateArg.toModulate(self);
};
eu_ohmrun_FletcherWildcards.command = function(wildcard,self) {
	return eu_ohmrun_fletcher_CommandArg.toCommand(self);
};
eu_ohmrun_FletcherWildcards.recover = function(wildcard,self) {
	return self;
};
eu_ohmrun_FletcherWildcards.convert = function(wildcard,self) {
	return eu_ohmrun_fletcher_ConvertArg.bump(self);
};
var eu_ohmrun_LiftProvideLoad = function() { };
$hxClasses["eu.ohmrun.LiftProvideLoad"] = eu_ohmrun_LiftProvideLoad;
eu_ohmrun_LiftProvideLoad.__name__ = "eu.ohmrun.LiftProvideLoad";
eu_ohmrun_LiftProvideLoad.load = function(self,arrowlet) {
	return new eu_ohmrun_fletcher_Completion(self,arrowlet,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 383, className : "eu.ohmrun.LiftProvideLoad", methodName : "load"});
};
var eu_ohmrun_Pml = function() { };
$hxClasses["eu.ohmrun.Pml"] = eu_ohmrun_Pml;
eu_ohmrun_Pml.__name__ = "eu.ohmrun.Pml";
eu_ohmrun_Pml.pml = function(wildcard) {
	return new eu_ohmrun_pml_Module();
};
var eu_ohmrun_AtomLift = function() { };
$hxClasses["eu.ohmrun.AtomLift"] = eu_ohmrun_AtomLift;
eu_ohmrun_AtomLift.__name__ = "eu.ohmrun.AtomLift";
eu_ohmrun_AtomLift.toString = function(atom) {
	switch(atom._hx_index) {
	case 0:
		var s = atom.s;
		return "" + s;
	case 1:
		var b = atom.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var fl = atom.fl;
		return "" + Std.string(fl);
	case 3:
		var str = atom.str;
		return str;
	case 4:
		return "<null>";
	}
};
var eu_ohmrun_fletcher_ArrangeArgSum = $hxEnums["eu.ohmrun.fletcher.ArrangeArgSum"] = { __ename__:"eu.ohmrun.fletcher.ArrangeArgSum",__constructs__:null
	,ArrangeArgPure: ($_=function(o) { return {_hx_index:0,o:o,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgPure",$_.__params__ = ["o"],$_)
	,ArrangeArgUpshot: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgUpshot",$_.__params__ = ["res"],$_)
	,ArrangeArgFun1Attempt: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgFun1Attempt",$_.__params__ = ["f"],$_)
	,ArrangeArgFun1Convert: ($_=function(f) { return {_hx_index:3,f:f,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgFun1Convert",$_.__params__ = ["f"],$_)
	,ArrangeArgFun1Modulate: ($_=function(f) { return {_hx_index:4,f:f,__enum__:"eu.ohmrun.fletcher.ArrangeArgSum",toString:$estr}; },$_._hx_name="ArrangeArgFun1Modulate",$_.__params__ = ["f"],$_)
};
eu_ohmrun_fletcher_ArrangeArgSum.__constructs__ = [eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgPure,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgUpshot,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Attempt,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Convert,eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Modulate];
var eu_ohmrun_fletcher_ArrangeArg = {};
eu_ohmrun_fletcher_ArrangeArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ArrangeArg.lift = function(self) {
	return eu_ohmrun_fletcher_ArrangeArg._new(self);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgFun1Modulate = function(f) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Modulate(f);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgFun1Attempt = function(f) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Attempt(f);
};
eu_ohmrun_fletcher_ArrangeArg.fromArrangeArgFun1Convert = function(f) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgFun1Convert(f);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgUpshot = function(res) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgUpshot(res);
};
eu_ohmrun_fletcher_ArrangeArg.fromArgPure = function(o) {
	return eu_ohmrun_fletcher_ArrangeArgSum.ArrangeArgPure(o);
};
eu_ohmrun_fletcher_ArrangeArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ArrangeArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ArrangeArg.lift(this1);
};
var eu_ohmrun_fletcher_ArrangeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ArrangeLift"] = eu_ohmrun_fletcher_ArrangeLift;
eu_ohmrun_fletcher_ArrangeLift.__name__ = "eu.ohmrun.fletcher.ArrangeLift";
eu_ohmrun_fletcher_ArrangeLift.state = function(self) {
	return eu_ohmrun_FletcherLift.map(eu_ohmrun_FletcherLift.broach(self),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tp,chk) {
		var fn = function(_) {
			return stx_nano_CoupleLift.snd(_);
		};
		var self;
		switch(tp._hx_index) {
		case 0:
			var t = tp.t;
			self = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = tp.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		var self1 = self;
		var self;
		switch(self1._hx_index) {
		case 0:
			var _g = self1.t;
			switch(chk._hx_index) {
			case 0:
				var tt = chk.t;
				var t = _g;
				self = stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
				break;
			case 1:
				var e = chk.e;
				self = stx_nano_UpshotSum.Reject(e);
				break;
			}
			break;
		case 1:
			var _g = self1.e;
			if(chk._hx_index == 1) {
				var ee = chk.e;
				var e = _g;
				self = stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
			} else {
				var e = _g;
				self = stx_nano_UpshotSum.Reject(e);
			}
			break;
		}
		var fn = function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		};
		var self1;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			self1 = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = self.e;
			self1 = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self1;
	}),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 158, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "state"});
};
eu_ohmrun_fletcher_ArrangeLift.attempt = function(self,attempt) {
	return eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Attempt.toModulate(attempt)));
};
eu_ohmrun_fletcher_ArrangeLift.errata = function(self,fn) {
	return eu_ohmrun_Fletcher.Anon(function(res,cont) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 179, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "errata"}),function(res) {
				var self;
				switch(res._hx_index) {
				case 0:
					var t = res.t;
					self = stx_nano_Upshot.accept(t);
					break;
				case 1:
					var e = res.e;
					self = stx_nano_Upshot.reject(fn(e));
					break;
				}
				return self;
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = res.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 188, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "errata"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 175, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "errata"});
};
eu_ohmrun_fletcher_ArrangeLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ArrangeLift.errata(self,function(oc) {
		return stx_fail_Refuse.errate(oc,fn);
	});
};
eu_ohmrun_fletcher_ArrangeLift.convert = function(self,that) {
	return eu_ohmrun_fletcher_Modulate._.convert(self,that);
};
eu_ohmrun_fletcher_ArrangeLift.cover = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(res,cont) {
		var self1 = cont;
		var self2 = self;
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = i;
		var fn = function(tII) {
			return _g(tI,tII);
		};
		var self3;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self3 = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self3 = stx_nano_UpshotSum.Reject(e);
			break;
		}
		var receiver = eu_ohmrun_Fletcher.forward(self2,self3,{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 206, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "cover"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 203, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "cover"});
};
eu_ohmrun_fletcher_ArrangeLift.split = function(self,that) {
	var a = eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.broach(self),function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(resInput,resOutput) {
			var self;
			switch(resOutput._hx_index) {
			case 0:
				var t = resOutput.t;
				var o = t;
				var fn = function(couple) {
					return stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(couple),o,stx_nano_CoupleLift.snd(couple));
				};
				var self1;
				switch(resInput._hx_index) {
				case 0:
					var t = resInput.t;
					self1 = stx_nano_UpshotSum.Accept(fn(t));
					break;
				case 1:
					var e = resInput.e;
					self1 = stx_nano_UpshotSum.Reject(e);
					break;
				}
				self = self1;
				break;
			case 1:
				var e = resOutput.e;
				self = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self;
		});
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 213, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "split"});
	var b = eu_ohmrun_fletcher_ModulateLift.modulate(eu_ohmrun_FletcherLift.map(a,function(res) {
		var fn = function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,a,c);
			});
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 222, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "split"}),eu_ohmrun_fletcher_Arrange.toModulate(that));
	var c = eu_ohmrun_FletcherLift.map(a,function(res) {
		var fn = function(tr) {
			return stx_nano_TripleLift.detriple(tr,function(a,b,c) {
				return b;
			});
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 229, className : "eu.ohmrun.fletcher.ArrangeLift", methodName : "split"});
	var d = eu_ohmrun_fletcher_ModulateLift.map(eu_ohmrun_fletcher_Modulate._.split(b,c),function(tp) {
		return stx_nano_CoupleLift.swap(tp);
	});
	return d;
};
eu_ohmrun_fletcher_ArrangeLift.map = function(self,that) {
	return eu_ohmrun_Fletcher._.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		var _e = res;
		return (function(fn) {
			var fn1 = fn;
			var self;
			switch(_e._hx_index) {
			case 0:
				var t = _e.t;
				self = stx_nano_UpshotSum.Accept(fn1(t));
				break;
			case 1:
				var e = _e.e;
				self = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self;
		})(that);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
var eu_ohmrun_fletcher_Arrange = {};
eu_ohmrun_fletcher_Arrange._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Arrange.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Arrange.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Arrange.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Arrange.fromUpshot(res);
	case 2:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Attempt(f);
	case 3:
		var s = self.f;
		return eu_ohmrun_fletcher_Arrange.fromArrangeArgFun1Convert(s);
	case 4:
		var f = self.f;
		return eu_ohmrun_fletcher_Arrange.fromFun1Modulate(f);
	}
};
eu_ohmrun_fletcher_Arrange.pure = function(o) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver;
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			break;
		case 1:
			var e = i.e;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 58, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "pure"}));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			break;
		}
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 53, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "pure"});
};
eu_ohmrun_fletcher_Arrange.fromUpshot = function(res) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver;
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			break;
		case 1:
			var e = i.e;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 69, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromUpshot"}));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			break;
		}
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 64, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromUpshot"});
};
eu_ohmrun_fletcher_Arrange.fromFun1Attempt = function(f) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 78, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Attempt"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 79, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Attempt"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 75, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Attempt"});
};
eu_ohmrun_fletcher_Arrange.fromFunResAttempt = function(f) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 87, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResAttempt"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 88, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResAttempt"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 84, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResAttempt"});
};
eu_ohmrun_fletcher_Arrange.fromFun1Modulate = function(f) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(t)),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 96, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Modulate"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 97, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Modulate"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 93, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFun1Modulate"});
};
eu_ohmrun_fletcher_Arrange.fromFunResModulate = function(f) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(f(stx_nano_CoupleLift.fst(t)),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(t)),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 105, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResModulate"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 106, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResModulate"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 102, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromFunResModulate"});
};
eu_ohmrun_fletcher_Arrange.fromArrangeArgFun1Convert = function(f) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(f(stx_nano_CoupleLift.fst(t)),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 114, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromArrangeArgFun1Convert"}),stx_nano_CoupleLift.snd(t),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 114, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromArrangeArgFun1Convert"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 115, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromArrangeArgFun1Convert"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 111, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "fromArrangeArgFun1Convert"});
};
eu_ohmrun_fletcher_Arrange.bind_fold = function(fn,iterable) {
	return stx_nano_IterLift.lfold1(stx_nano_IterLift.map(stx_nano_IterLift.map(stx_nano_lift_LiftIterableToIter.toIter(iterable),function(t) {
		var _g = fn;
		var a1 = t;
		return function(a2) {
			return _g(a1,a2);
		};
	}),eu_ohmrun_fletcher_Arrange.fromFun1Modulate),function(next,memo) {
		return eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_Arrange._.state(memo),next);
	});
};
eu_ohmrun_fletcher_Arrange.fromFun2R = function(fn) {
	return eu_ohmrun_fletcher_Arrange.modifier(fn);
};
eu_ohmrun_fletcher_Arrange.modifier = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(res,cont) {
		var fn1 = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(i,s) {
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i,s)));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		});
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn1(t);
		case 1:
			var e = res.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 139, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "modifier"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Arrange.hx", lineNumber : 135, className : "eu.ohmrun.fletcher._Arrange.Arrange_Impl_", methodName : "modifier"});
};
eu_ohmrun_fletcher_Arrange.split = function(this1,that) {
	return eu_ohmrun_fletcher_Arrange._.split(this1,that);
};
eu_ohmrun_fletcher_Arrange.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Arrange.toModulate = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_AttemptArgSum = $hxEnums["eu.ohmrun.fletcher.AttemptArgSum"] = { __ename__:"eu.ohmrun.fletcher.AttemptArgSum",__constructs__:null
	,AttemptArgPure: ($_=function(r) { return {_hx_index:0,r:r,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgPure",$_.__params__ = ["r"],$_)
	,AttemptArgUpshot: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgUpshot",$_.__params__ = ["res"],$_)
	,AttemptArgFun1Upshot: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Upshot",$_.__params__ = ["fn"],$_)
	,AttemptArgFun1Produce: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Produce",$_.__params__ = ["fn"],$_)
	,AttemptArgUnary1Produce: ($_=function(fn) { return {_hx_index:4,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgUnary1Produce",$_.__params__ = ["fn"],$_)
	,AttemptArgFun1Provide: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.AttemptArgSum",toString:$estr}; },$_._hx_name="AttemptArgFun1Provide",$_.__params__ = ["fn"],$_)
};
eu_ohmrun_fletcher_AttemptArgSum.__constructs__ = [eu_ohmrun_fletcher_AttemptArgSum.AttemptArgPure,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUpshot,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Upshot,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Produce,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUnary1Produce,eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Provide];
var eu_ohmrun_fletcher_AttemptArg = {};
eu_ohmrun_fletcher_AttemptArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_AttemptArg.lift = function(self) {
	return eu_ohmrun_fletcher_AttemptArg._new(self);
};
eu_ohmrun_fletcher_AttemptArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_AttemptArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_AttemptArg.lift(this1);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Provide = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Provide(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgUnary1Produce = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUnary1Produce(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Produce = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Produce(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgFun1Upshot = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgFun1Upshot(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgUpshot = function(fn) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgUpshot(fn);
};
eu_ohmrun_fletcher_AttemptArg.fromArgPure = function(r) {
	return eu_ohmrun_fletcher_AttemptArgSum.AttemptArgPure(r);
};
var eu_ohmrun_fletcher_AttemptLift = function() { };
$hxClasses["eu.ohmrun.fletcher.AttemptLift"] = eu_ohmrun_fletcher_AttemptLift;
eu_ohmrun_fletcher_AttemptLift.__name__ = "eu.ohmrun.fletcher.AttemptLift";
eu_ohmrun_fletcher_AttemptLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_AttemptLift.then = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 145, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "then"}));
};
eu_ohmrun_fletcher_AttemptLift.rectify = function(self,next) {
	return eu_ohmrun_Fletcher.lift(new eu_ohmrun_fletcher_term_Then(eu_ohmrun_fletcher_AttemptLift.lift(self),next,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 148, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "rectify"}));
};
eu_ohmrun_fletcher_AttemptLift.resolve = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_ResolveLift.toModulate(next))));
};
eu_ohmrun_fletcher_AttemptLift.reclaim = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_fletcher_AttemptLift.attempt(eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_ConvertLift.toModulate(next)),eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(prd,0,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 161, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "reclaim"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 159, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "reclaim"}))));
};
eu_ohmrun_fletcher_AttemptLift.recover = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Recover.toModulate(next))));
};
eu_ohmrun_fletcher_AttemptLift.convert = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_ConvertLift.toModulate(next));
};
eu_ohmrun_fletcher_AttemptLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.map(self,function(oc) {
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Upshot.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Upshot.reject(fn(e));
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 173, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "errata"}));
};
eu_ohmrun_fletcher_AttemptLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.map(self,function(oc) {
		var fn1 = fn;
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Upshot.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Upshot.reject(stx_fail_Refuse.errate(e,fn1));
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 176, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "errate"}));
};
eu_ohmrun_fletcher_AttemptLift.attempt = function(self,next) {
	return eu_ohmrun_fletcher_AttemptLift.then(self,eu_ohmrun_fletcher_Attempt.toModulate(next));
};
eu_ohmrun_fletcher_AttemptLift.reframe = function(self) {
	return eu_ohmrun_fletcher_ModulateLift.reframe(eu_ohmrun_fletcher_Attempt.toModulate(eu_ohmrun_fletcher_AttemptLift.lift(self)));
};
eu_ohmrun_fletcher_AttemptLift.broach = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_AttemptLift.map(eu_ohmrun_fletcher_AttemptLift.lift(self),function(o) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,ipt,o);
		}),ipt,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 189, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "broach"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 186, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "broach"});
};
eu_ohmrun_fletcher_AttemptLift.provide = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,i,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 200, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "provide"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 199, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "provide"});
};
eu_ohmrun_fletcher_AttemptLift.arrange = function(self,then) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 208, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "arrange"}),function(ok) {
			var then1 = then;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tII = p;
			var fn = function(tI) {
				return _g(tI,tII);
			};
			var self;
			switch(ok._hx_index) {
			case 0:
				var t = ok.t;
				self = stx_nano_UpshotSum.Accept(fn(t));
				break;
			case 1:
				var e = ok.e;
				self = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return eu_ohmrun_Fletcher.forward(then1,self,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 209, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "arrange"});
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 206, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "arrange"}));
};
eu_ohmrun_fletcher_AttemptLift.mapi = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.mapi(eu_ohmrun_fletcher_AttemptLift.lift(self),that));
};
eu_ohmrun_fletcher_AttemptLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_AttemptLift.execute = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_ExecuteLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),0,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 227, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "execute"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 228, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "execute"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 225, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "execute"}),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 223, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "execute"});
};
eu_ohmrun_fletcher_AttemptLift.command = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(eu_ohmrun_fletcher_AttemptLift.lift(self),eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),2).toLogApi().comply(new stx_log_EntryCtr().pure(ipt),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 240, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"}));
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_CommandLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),t,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 242, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 243, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 238, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"}),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 236, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "command"});
};
eu_ohmrun_fletcher_AttemptLift.map = function(self,fn) {
	return eu_ohmrun_Fletcher._.map(self,function(res) {
		var fn1 = fn;
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_UpshotSum.Accept(fn1(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 252, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "map"});
};
eu_ohmrun_fletcher_AttemptLift.flat_map = function(self,fn) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_map(eu_ohmrun_Fletcher.forward(self,ipt,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 261, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"}),function(res) {
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = eu_ohmrun_Fletcher.forward(fn(t),ipt,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 263, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"});
				break;
			case 1:
				var e = res.e;
				receiver = eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 264, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"})),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 264, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"});
				break;
			}
			return receiver;
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 259, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "flat_map"});
};
eu_ohmrun_fletcher_AttemptLift.produce = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,i,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 271, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "produce"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 271, className : "eu.ohmrun.fletcher.AttemptLift", methodName : "produce"});
};
eu_ohmrun_fletcher_AttemptLift.adjust = function(self,fn) {
	return eu_ohmrun_fletcher_AttemptLift.lift(eu_ohmrun_Fletcher._.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
var eu_ohmrun_fletcher_Attempt = {};
eu_ohmrun_fletcher_Attempt._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Attempt.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var r = self.r;
		return eu_ohmrun_fletcher_Attempt.pure(r);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Attempt.fromUpshot(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Upshot(fn);
	case 3:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn);
	case 4:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromUnary1Produce(fn);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Attempt.fromFun1Provide(fn);
	}
};
eu_ohmrun_fletcher_Attempt.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Attempt.unit = function() {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 64, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "unit"});
};
eu_ohmrun_fletcher_Attempt.pure = function(o) {
	return eu_ohmrun_fletcher_Attempt.fromUpshot(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Attempt.fromUpshot = function(res) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,res);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 74, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromUpshot"});
};
eu_ohmrun_fletcher_Attempt.fromFun1Upshot = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn(pI));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 80, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1Upshot"});
};
eu_ohmrun_fletcher_Attempt.fromFun1Produce = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(fn(pI),0,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 89, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1Produce"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 88, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1Produce"});
};
eu_ohmrun_fletcher_Attempt.fromUnary1Produce = function(fn) {
	return eu_ohmrun_fletcher_Attempt.fromFun1Produce(fn);
};
eu_ohmrun_fletcher_Attempt.fromFun1Provide = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(pI,cont) {
		var rest = fn(pI);
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_ProvideLift.convert(rest,eu_ohmrun_fletcher_Convert.fromFletcher(new eu_ohmrun_fletcher_term_AnonSync(function(t) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}))),0,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 106, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1Provide"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 99, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1Provide"});
};
eu_ohmrun_fletcher_Attempt.fromFun1R = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(i)));
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 116, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "fromFun1R"});
};
eu_ohmrun_fletcher_Attempt.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Attempt.toModulate = function(this1) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(this1,t,{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 126, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "toModulate"});
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 127, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "toModulate"}));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this3 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this3,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Attempt.hx", lineNumber : 123, className : "eu.ohmrun.fletcher._Attempt.Attempt_Impl_", methodName : "toModulate"});
};
eu_ohmrun_fletcher_Attempt.environment = function(this1,i,success,failure) {
	var self = eu_ohmrun_fletcher_Attempt.toModulate(this1);
	var success1 = success;
	var failure1 = failure;
	var tmp = failure1;
	failure1 = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 251, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "environment"});
};
eu_ohmrun_fletcher_Attempt.mapi = function(this1,that) {
	return eu_ohmrun_fletcher_Attempt._.mapi(this1,that);
};
var eu_ohmrun_fletcher_CommandArgSum = $hxEnums["eu.ohmrun.fletcher.CommandArgSum"] = { __ename__:"eu.ohmrun.fletcher.CommandArgSum",__constructs__:null
	,CommandArgFun1Void: ($_=function(fn) { return {_hx_index:0,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1Void",$_.__params__ = ["fn"],$_)
	,CommandArgFun1Report: ($_=function(fn) { return {_hx_index:1,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1Report",$_.__params__ = ["fn"],$_)
	,CommandArgFun1OptionRefuse: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandArgFun1OptionRefuse",$_.__params__ = ["fn"],$_)
	,CommandFun1Execute: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"eu.ohmrun.fletcher.CommandArgSum",toString:$estr}; },$_._hx_name="CommandFun1Execute",$_.__params__ = ["fn"],$_)
};
eu_ohmrun_fletcher_CommandArgSum.__constructs__ = [eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Void,eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Report,eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1OptionRefuse,eu_ohmrun_fletcher_CommandArgSum.CommandFun1Execute];
var eu_ohmrun_fletcher_CommandArg = {};
eu_ohmrun_fletcher_CommandArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_CommandArg.lift = function(self) {
	return eu_ohmrun_fletcher_CommandArg._new(self);
};
eu_ohmrun_fletcher_CommandArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_CommandArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_CommandArg.lift(this1);
};
eu_ohmrun_fletcher_CommandArg.fromCommandFun1Execute = function(fn) {
	return eu_ohmrun_fletcher_CommandArg.lift(eu_ohmrun_fletcher_CommandArgSum.CommandFun1Execute(fn));
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1Report = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Report(fn);
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1OptionRefuse = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1OptionRefuse(fn);
};
eu_ohmrun_fletcher_CommandArg.fromCommandArgFun1Void = function(fn) {
	return eu_ohmrun_fletcher_CommandArgSum.CommandArgFun1Void(fn);
};
eu_ohmrun_fletcher_CommandArg.toCommand = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Void(x);
	case 1:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Report(x);
	case 2:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1OptionRefuse(x);
	case 3:
		var x = this1.fn;
		return eu_ohmrun_fletcher_Command.fromFun1Execute(x);
	}
};
var eu_ohmrun_fletcher_CommandLift = function() { };
$hxClasses["eu.ohmrun.fletcher.CommandLift"] = eu_ohmrun_fletcher_CommandLift;
eu_ohmrun_fletcher_CommandLift.__name__ = "eu.ohmrun.fletcher.CommandLift";
eu_ohmrun_fletcher_CommandLift.toModulate = function(command) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var okI = t;
			var self = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(command,okI,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 132, className : "eu.ohmrun.fletcher.CommandLift", methodName : "toModulate"}),function(okII) {
				if(okII == null) {
					return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,okI));
				} else {
					switch(okII._hx_index) {
					case 0:
						var v = okII.v;
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 134, className : "eu.ohmrun.fletcher.CommandLift", methodName : "toModulate"}));
					case 1:
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,okI));
					}
				}
			},function(er) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,er);
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 139, className : "eu.ohmrun.fletcher.CommandLift", methodName : "toModulate"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 131, className : "eu.ohmrun.fletcher.CommandLift", methodName : "toModulate"});
};
eu_ohmrun_fletcher_CommandLift.produce = function(command,prod) {
	return new eu_ohmrun_fletcher_term_Then(command,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),2).toLogApi().comply(new stx_log_EntryCtr().pure(ipt),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 149, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"}));
		if(ipt == null) {
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(prod,0,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 152, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 151, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"}));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			case 1:
				var self2 = cont;
				var receiver = eu_ohmrun_Fletcher.forward(prod,0,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 152, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"});
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			}
		}
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 147, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"}),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 145, className : "eu.ohmrun.fletcher.CommandLift", methodName : "produce"});
};
var eu_ohmrun_fletcher_Command = {};
eu_ohmrun_fletcher_Command._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Command.unit = function() {
	return eu_ohmrun_fletcher_Command._new(new eu_ohmrun_fletcher_term_AnonSync(function(i) {
		return stx_nano_Report.unit();
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_Command.lift = function(self) {
	return eu_ohmrun_fletcher_Command._new(self);
};
eu_ohmrun_fletcher_Command.bump = function(self) {
	return eu_ohmrun_fletcher_CommandArg.toCommand(self);
};
eu_ohmrun_fletcher_Command.fromFun1Void = function(fn) {
	var self = fn;
	return eu_ohmrun_fletcher_Command._new(new eu_ohmrun_fletcher_term_AnonSync(stx_fn_UnaryLift.then(function(p) {
		self(p);
		return p;
	},function(_) {
		return stx_nano_Report.unit();
	}),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_Command.fromFun1Report = function(fn) {
	return eu_ohmrun_fletcher_Command._new(new eu_ohmrun_fletcher_term_AnonSync(function(i) {
		return fn(i);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_Command.fromFun1OptionRefuse = function(fn) {
	return eu_ohmrun_fletcher_Command._new(new eu_ohmrun_fletcher_term_AnonSync(function(i) {
		return stx_nano_Report.fromOption(fn(i));
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_Command.fromFletcher = function(self) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 70, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFletcher"}),function(_) {
			var f = null;
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 71, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFletcher"}))));
		},function(e) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_fail_RefuseLift.report(stx_nano_Defect.toRefuse(e)));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 69, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFletcher"}));
};
eu_ohmrun_fletcher_Command.fromFun1Execute = function(fn) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),2).toLogApi().comply(new stx_log_EntryCtr().pure(i),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 81, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFun1Execute"}));
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(fn(i),0,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 82, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFun1Execute"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 79, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "fromFun1Execute"}));
};
eu_ohmrun_fletcher_Command.toModulate = function(this1) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var ok = t;
			var self = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(this1,ok,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 91, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "toModulate"}),function(report) {
				if(report == null) {
					return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
				} else {
					switch(report._hx_index) {
					case 0:
						var v = report.v;
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 93, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "toModulate"}));
					case 1:
						return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
					}
				}
			},function(e) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			});
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 99, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "toModulate"}));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this3 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this3,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 89, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "toModulate"});
};
eu_ohmrun_fletcher_Command.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Command.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Command.and = function(this1,that) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.split(eu_ohmrun_fletcher_Command.get_self(this1),that),function(tp) {
		return stx_nano_ReportLift.concat(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 111, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "and"}));
};
eu_ohmrun_fletcher_Command.errata = function(this1,fn) {
	return eu_ohmrun_FletcherLift.map(eu_ohmrun_fletcher_Command.get_self(this1),function(report) {
		return stx_nano_Report.errata(report,fn);
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 117, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "errata"});
};
eu_ohmrun_fletcher_Command.provide = function(this1,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(this1,i,{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 121, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "provide"});
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Command.hx", lineNumber : 121, className : "eu.ohmrun.fletcher._Command.Command_Impl_", methodName : "provide"});
};
eu_ohmrun_fletcher_Command.get_self = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Completion = function(context,process,pos) {
	eu_ohmrun_FletcherCls.call(this,pos);
	this.context = context;
	this.process = process;
};
$hxClasses["eu.ohmrun.fletcher.Completion"] = eu_ohmrun_fletcher_Completion;
eu_ohmrun_fletcher_Completion.__name__ = "eu.ohmrun.fletcher.Completion";
eu_ohmrun_fletcher_Completion.__super__ = eu_ohmrun_FletcherCls;
eu_ohmrun_fletcher_Completion.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	context: null
	,process: null
	,defer: function(p,cont) {
		var _gthis = this;
		var self = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(this.process,this.context.environment,{ fileName : "eu/ohmrun/fletcher/Completion.hx", lineNumber : 14, className : "eu.ohmrun.fletcher.Completion", methodName : "defer"}),function(ok) {
			_gthis.context.on_value(ok);
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,0);
		},function(no) {
			_gthis.context.on_error(no);
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_Defect.unit());
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	}
	,__class__: eu_ohmrun_fletcher_Completion
});
var eu_ohmrun_fletcher_ConvertArgSum = $hxEnums["eu.ohmrun.fletcher.ConvertArgSum"] = { __ename__:"eu.ohmrun.fletcher.ConvertArgSum",__constructs__:null
	,ConvertArgFun1R: ($_=function(fn) { return {_hx_index:0,fn:fn,__enum__:"eu.ohmrun.fletcher.ConvertArgSum",toString:$estr}; },$_._hx_name="ConvertArgFun1R",$_.__params__ = ["fn"],$_)
	,ConvertArgLift: ($_=function(x) { return {_hx_index:1,x:x,__enum__:"eu.ohmrun.fletcher.ConvertArgSum",toString:$estr}; },$_._hx_name="ConvertArgLift",$_.__params__ = ["x"],$_)
};
eu_ohmrun_fletcher_ConvertArgSum.__constructs__ = [eu_ohmrun_fletcher_ConvertArgSum.ConvertArgFun1R,eu_ohmrun_fletcher_ConvertArgSum.ConvertArgLift];
var eu_ohmrun_fletcher_ConvertArg = {};
eu_ohmrun_fletcher_ConvertArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ConvertArg.lift = function(self) {
	return eu_ohmrun_fletcher_ConvertArg._new(self);
};
eu_ohmrun_fletcher_ConvertArg.fromArgFun1R = function(self) {
	return eu_ohmrun_fletcher_ConvertArg.lift(eu_ohmrun_fletcher_ConvertArgSum.ConvertArgFun1R(self));
};
eu_ohmrun_fletcher_ConvertArg.fromArgLift = function(self) {
	return eu_ohmrun_fletcher_ConvertArg.lift(eu_ohmrun_fletcher_ConvertArgSum.ConvertArgLift(self));
};
eu_ohmrun_fletcher_ConvertArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ConvertArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ConvertArg.lift(this1);
};
eu_ohmrun_fletcher_ConvertArg.bump = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var fn = this1.fn;
		return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
	case 1:
		var x = this1.x;
		return x;
	}
};
var eu_ohmrun_fletcher_ConvertLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ConvertLift"] = eu_ohmrun_fletcher_ConvertLift;
eu_ohmrun_fletcher_ConvertLift.__name__ = "eu.ohmrun.fletcher.ConvertLift";
eu_ohmrun_fletcher_ConvertLift.toModulate = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,t,{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 86, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "toModulate"}),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 87, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "toModulate"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 85, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "toModulate"});
};
eu_ohmrun_fletcher_ConvertLift.then = function(self,that) {
	return eu_ohmrun_Fletcher._.then(self,that);
};
eu_ohmrun_fletcher_ConvertLift.provide = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		return self.defer(i,cont);
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 100, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "provide"});
};
eu_ohmrun_fletcher_ConvertLift.convert = function(self,that) {
	return eu_ohmrun_Fletcher._.then(self,that);
};
eu_ohmrun_fletcher_ConvertLift.first = function(self) {
	return eu_ohmrun_Fletcher._.first(self);
};
eu_ohmrun_fletcher_ConvertLift.flat_map = function(self,fn) {
	return eu_ohmrun_fletcher_Convert.fromFletcher(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(rI,cont) {
		return fn(rI).defer(stx_pico_Nada.fromDynamic(rI),cont);
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 117, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "flat_map"}),{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 115, className : "eu.ohmrun.fletcher.ConvertLift", methodName : "flat_map"}));
};
var eu_ohmrun_fletcher_Convert = {};
eu_ohmrun_fletcher_Convert._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Convert.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Convert.unit = function() {
	return new eu_ohmrun_fletcher_term_AnonSync(function(i) {
		return i;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Convert.fromFun1Provide = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self(i),0,{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 42, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "fromFun1Provide"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 42, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "fromFun1Provide"});
};
eu_ohmrun_fletcher_Convert.fromConvertProvide = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 48, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "fromConvertProvide"}),function(ok) {
			return eu_ohmrun_Fletcher.forward(ok,0,{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 49, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "fromConvertProvide"});
		},function(er) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,er),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 47, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "fromConvertProvide"});
};
eu_ohmrun_fletcher_Convert.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Convert.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Convert.Fun = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Convert.fromFun1R = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Convert.fromUnary = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Convert.fromFletcher = function(arw) {
	return arw;
};
eu_ohmrun_fletcher_Convert.environment = function(this1,i,success) {
	return eu_ohmrun_Fletcher._.environment(this1,i,success,function(e) {
		throw haxe_Exception.thrown(e);
	},{ fileName : "eu/ohmrun/fletcher/Convert.hx", lineNumber : 74, className : "eu.ohmrun.fletcher._Convert.Convert_Impl_", methodName : "environment"});
};
var eu_ohmrun_fletcher_DiffuseLift = function() { };
$hxClasses["eu.ohmrun.fletcher.DiffuseLift"] = eu_ohmrun_fletcher_DiffuseLift;
eu_ohmrun_fletcher_DiffuseLift.__name__ = "eu.ohmrun.fletcher.DiffuseLift";
eu_ohmrun_fletcher_DiffuseLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_DiffuseLift.attempt = function(self,that) {
	return eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(chk,cont) {
		var self = cont;
		var receiver;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(that,stx_nano_Upshot._.toChunk,{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 62, className : "eu.ohmrun.fletcher.DiffuseLift", methodName : "attempt"}),v,{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 62, className : "eu.ohmrun.fletcher.DiffuseLift", methodName : "attempt"});
			break;
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			break;
		case 2:
			var e = chk.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			break;
		}
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 59, className : "eu.ohmrun.fletcher.DiffuseLift", methodName : "attempt"}));
};
eu_ohmrun_fletcher_DiffuseLift.adjust = function(self,that) {
	return eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(chk,cont) {
		var self = cont;
		var receiver;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_UpshotLift.toChunk(that(v)));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			break;
		case 1:
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			}));
			break;
		case 2:
			var e = chk.err;
			var value2 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value2);
				return trg;
			}));
			break;
		}
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 72, className : "eu.ohmrun.fletcher.DiffuseLift", methodName : "adjust"}));
};
var eu_ohmrun_fletcher_Diffuse = {};
eu_ohmrun_fletcher_Diffuse._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Diffuse.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Diffuse.unit = function() {
	return new eu_ohmrun_fletcher_term_AnonSync(function(chk) {
		return chk;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Diffuse.fromFunIOptionR = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = fn(v);
			var r;
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				r = stx_nano_ChunkSum.Val(t);
				break;
			case 1:
				r = stx_nano_ChunkSum.Tap;
				break;
			}
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value2 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value2);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 20, className : "eu.ohmrun.fletcher._Diffuse.Diffuse_Impl_", methodName : "fromFunIOptionR"});
};
eu_ohmrun_fletcher_Diffuse.fromOptionIR = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(fn(haxe_ds_Option.Some(v))));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(fn(haxe_ds_Option.None)));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value2 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value2);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Diffuse.hx", lineNumber : 36, className : "eu.ohmrun.fletcher._Diffuse.Diffuse_Impl_", methodName : "fromOptionIR"});
};
eu_ohmrun_fletcher_Diffuse.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Diffuse.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Diffuse.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
var eu_ohmrun_fletcher_Execute = {};
eu_ohmrun_fletcher_Execute._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Execute.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Execute.pure = function(e) {
	return eu_ohmrun_Fletcher.pure(stx_nano_Report.pure(e));
};
eu_ohmrun_fletcher_Execute.unit = function() {
	return eu_ohmrun_Fletcher.pure(stx_nano_Report.unit());
};
eu_ohmrun_fletcher_Execute.bind_fold = function(fn,arr) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return eu_ohmrun_fletcher_Provide._.flat_map(eu_ohmrun_fletcher_Execute.toProvide(memo),function(report) {
			return fn(next,report);
		});
	},eu_ohmrun_Fletcher.pure(stx_nano_Report.unit()));
};
eu_ohmrun_fletcher_Execute.sequence = function(fn,arr) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		return eu_ohmrun_fletcher_ExecuteLift.fold_mod(memo,function(report) {
			var self;
			if(report == null) {
				self = fn(next);
			} else {
				switch(report._hx_index) {
				case 0:
					var v = report.v;
					self = eu_ohmrun_Fletcher.pure(stx_nano_Report.pure(v));
					break;
				case 1:
					self = fn(next);
					break;
				}
			}
			return self;
		});
	},eu_ohmrun_Fletcher.pure(stx_nano_Report.unit()));
};
eu_ohmrun_fletcher_Execute.toProvide = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.fromFunXR = function(fn) {
	var self = fn;
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return self();
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Execute.fromThunk = function(fn) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		fn();
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 46, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "fromThunk"})));
		}
	});
};
eu_ohmrun_fletcher_Execute.fromFunXExecute = function(fn) {
	return fn();
};
eu_ohmrun_fletcher_Execute.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Execute.fromOption = function(err) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		return stx_nano_Report.fromOption(err);
	});
};
eu_ohmrun_fletcher_Execute.fromRefuse = function(err) {
	return eu_ohmrun_fletcher_Execute.fromFunXR(function() {
		return stx_nano_Report.pure(err);
	});
};
eu_ohmrun_fletcher_Execute.environment = function(this1,success,failure,pos) {
	var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var tmp = pos;
	var v = stx_log_Stringify.fromString("execute environment " + (tmp == null ? "null" : stx_nano_Position.toString(tmp)));
	new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 63, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "environment"}));
	if(success == null) {
		success = function() {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("execute complete");
			new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 65, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "environment"}));
		};
	}
	if(failure == null) {
		failure = function(e) {
			stx_fail_RefuseLift.report(e);
		};
	}
	return eu_ohmrun_Fletcher._.environment(this1,0,function(report) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),1).toLogApi().comply(new stx_log_EntryCtr().thunk(function() {
			return "report";
		}),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 74, className : "eu.ohmrun.fletcher._Execute.Execute_Impl_", methodName : "environment"}));
		if(report == null) {
			success();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				failure(v);
				break;
			case 1:
				success();
				break;
			}
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	},pos);
};
var eu_ohmrun_fletcher_ExecuteLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ExecuteLift"] = eu_ohmrun_fletcher_ExecuteLift;
eu_ohmrun_fletcher_ExecuteLift.__name__ = "eu.ohmrun.fletcher.ExecuteLift";
eu_ohmrun_fletcher_ExecuteLift.errata = function(self,fn) {
	return eu_ohmrun_FletcherLift.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(report) {
		return stx_nano_Report.errata(report,fn);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_ExecuteLift.errate = function(self,fn) {
	return eu_ohmrun_FletcherLift.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(report) {
		return stx_nano_Report.errata(report,function(e) {
			return stx_fail_Refuse.errate(e,fn);
		});
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_ExecuteLift.deliver = function(self,fn) {
	return new eu_ohmrun_fletcher_term_Then(eu_ohmrun_Fletcher.lift(self),new eu_ohmrun_fletcher_term_AnonSync(function(report) {
		fn(report);
		return 0;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 100, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "deliver"});
};
eu_ohmrun_fletcher_ExecuteLift.crack = function(self) {
	return eu_ohmrun_fletcher_ExecuteLift.deliver(self,function(report) {
		if(report != null) {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	});
};
eu_ohmrun_fletcher_ExecuteLift.then = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,that,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 119, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "then"});
};
eu_ohmrun_fletcher_ExecuteLift.execute = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 130, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "execute"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(v));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			case 1:
				var self2 = cont;
				var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 130, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "execute"});
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			}
		}
	},{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 127, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "execute"}),{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 125, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "execute"});
};
eu_ohmrun_fletcher_ExecuteLift.produce = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 142, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "produce"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 141, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "produce"}));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			case 1:
				var self2 = cont;
				var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 142, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "produce"});
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			}
		}
	},{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 139, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "produce"}),{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 137, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "produce"});
};
eu_ohmrun_fletcher_ExecuteLift.propose = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		if(ipt == null) {
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 155, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "propose"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		} else {
			switch(ipt._hx_index) {
			case 0:
				var v = ipt.v;
				var self1 = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(v));
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			case 1:
				var self2 = cont;
				var receiver = eu_ohmrun_Fletcher.forward(next,0,{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 155, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "propose"});
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			}
		}
	},{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 152, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "propose"}),{ fileName : "eu/ohmrun/fletcher/Execute.hx", lineNumber : 150, className : "eu.ohmrun.fletcher.ExecuteLift", methodName : "propose"});
};
eu_ohmrun_fletcher_ExecuteLift.fold_mod = function(self,fn) {
	return eu_ohmrun_Fletcher.FlatMap(eu_ohmrun_Fletcher.lift(self),function(report) {
		return fn(report);
	});
};
eu_ohmrun_fletcher_ExecuteLift.and = function(self,that) {
	return eu_ohmrun_fletcher_ExecuteLift.execute(self,that);
};
var eu_ohmrun_fletcher_FiberLift = function() { };
$hxClasses["eu.ohmrun.fletcher.FiberLift"] = eu_ohmrun_fletcher_FiberLift;
eu_ohmrun_fletcher_FiberLift.__name__ = "eu.ohmrun.fletcher.FiberLift";
eu_ohmrun_fletcher_FiberLift.then = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(eu_ohmrun_fletcher_Fiber.prj(self),that,{ fileName : "eu/ohmrun/fletcher/Fiber.hx", lineNumber : 35, className : "eu.ohmrun.fletcher.FiberLift", methodName : "then"});
};
var eu_ohmrun_fletcher_Fiber = {};
eu_ohmrun_fletcher_Fiber.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Fiber.work = function(this1) {
	return this1.defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})));
};
eu_ohmrun_fletcher_Fiber.cycle = function(this1) {
	return stx_stream_Work.toCycle(this1.defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}))));
};
eu_ohmrun_fletcher_Fiber.submit = function(this1,pos) {
	stx_stream_CycleLift.submit(stx_stream_Work.toCycle(this1.defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))),pos);
};
eu_ohmrun_fletcher_Fiber.crunch = function(this1) {
	stx_stream_CycleLift.crunch(stx_stream_Work.toCycle(this1.defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))));
};
eu_ohmrun_fletcher_Fiber.fromCompletion = function(self) {
	return eu_ohmrun_Fletcher.lift(self);
};
eu_ohmrun_fletcher_Fiber.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Logging = function() { };
$hxClasses["eu.ohmrun.fletcher.Logging"] = eu_ohmrun_fletcher_Logging;
eu_ohmrun_fletcher_Logging.__name__ = "eu.ohmrun.fletcher.Logging";
eu_ohmrun_fletcher_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Logging.hx", lineNumber : 5, className : "eu.ohmrun.fletcher.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var eu_ohmrun_fletcher_ModulateArgSum = $hxEnums["eu.ohmrun.fletcher.ModulateArgSum"] = { __ename__:"eu.ohmrun.fletcher.ModulateArgSum",__constructs__:null
	,ModulateArgFunResRes0: ($_=function(fn) { return {_hx_index:0,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFunResRes0",$_.__params__ = ["fn"],$_)
	,ModulateArgFun1Produce: ($_=function(arw) { return {_hx_index:1,arw:arw,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1Produce",$_.__params__ = ["arw"],$_)
	,ModulateArgAttempt: ($_=function(self) { return {_hx_index:2,self:self,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgAttempt",$_.__params__ = ["self"],$_)
	,ModulateArgFletcher: ($_=function(arw) { return {_hx_index:3,arw:arw,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFletcher",$_.__params__ = ["arw"],$_)
	,ModulateArgFun1Upshot: ($_=function(fn) { return {_hx_index:4,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1Upshot",$_.__params__ = ["fn"],$_)
	,ModulateArgFun1R: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgFun1R",$_.__params__ = ["fn"],$_)
	,ModulateArgUpshot: ($_=function(ocR) { return {_hx_index:6,ocR:ocR,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgUpshot",$_.__params__ = ["ocR"],$_)
	,ModulateArgPure: ($_=function(o) { return {_hx_index:7,o:o,__enum__:"eu.ohmrun.fletcher.ModulateArgSum",toString:$estr}; },$_._hx_name="ModulateArgPure",$_.__params__ = ["o"],$_)
};
eu_ohmrun_fletcher_ModulateArgSum.__constructs__ = [eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFunResRes0,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Produce,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgAttempt,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFletcher,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Upshot,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1R,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgUpshot,eu_ohmrun_fletcher_ModulateArgSum.ModulateArgPure];
var eu_ohmrun_fletcher_ModulateArg = {};
eu_ohmrun_fletcher_ModulateArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ModulateArg.lift = function(self) {
	return eu_ohmrun_fletcher_ModulateArg._new(self);
};
eu_ohmrun_fletcher_ModulateArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ModulateArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ModulateArg.lift(this1);
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFunResRes0 = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFunResRes0(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1Produce = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Produce(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgAttempt = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgAttempt(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFletcher = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFletcher(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1Upshot = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1Upshot(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgFun1R = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgFun1R(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgUpshot = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgUpshot(self));
};
eu_ohmrun_fletcher_ModulateArg.fromModulateArgPure = function(o) {
	return eu_ohmrun_fletcher_ModulateArg.lift(eu_ohmrun_fletcher_ModulateArgSum.ModulateArgPure(o));
};
eu_ohmrun_fletcher_ModulateArg.toModulate = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var fn = this1.fn;
		return eu_ohmrun_fletcher_Modulate.fromFunResRes0(fn);
	case 1:
		var arw = this1.arw;
		return eu_ohmrun_fletcher_Modulate.fromFun1Produce(arw);
	case 2:
		var self = this1.self;
		return eu_ohmrun_fletcher_Modulate.fromAttempt(self);
	case 3:
		var arw = this1.arw;
		return eu_ohmrun_fletcher_Modulate.fromFletcher(arw);
	case 4:
		var fn = this1.fn;
		var fn1 = fn;
		return new eu_ohmrun_fletcher_term_AnonSync(function(ocI) {
			switch(ocI._hx_index) {
			case 0:
				var t = ocI.t;
				return fn1(t);
			case 1:
				var e = ocI.e;
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 94, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1Upshot"});
			}
		},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
	case 5:
		var fn = this1.fn;
		return eu_ohmrun_fletcher_Modulate.fromFun1R(fn);
	case 6:
		var ocR = this1.ocR;
		return eu_ohmrun_fletcher_Modulate.fromUpshot(ocR);
	case 7:
		var o = this1.o;
		return eu_ohmrun_fletcher_Modulate.pure(o);
	}
};
var eu_ohmrun_fletcher_ModulateApi = function() { };
$hxClasses["eu.ohmrun.fletcher.ModulateApi"] = eu_ohmrun_fletcher_ModulateApi;
eu_ohmrun_fletcher_ModulateApi.__name__ = "eu.ohmrun.fletcher.ModulateApi";
eu_ohmrun_fletcher_ModulateApi.__isInterface__ = true;
eu_ohmrun_fletcher_ModulateApi.__interfaces__ = [eu_ohmrun_FletcherApi];
var eu_ohmrun_fletcher_ModulateLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ModulateLift"] = eu_ohmrun_fletcher_ModulateLift;
eu_ohmrun_fletcher_ModulateLift.__name__ = "eu.ohmrun.fletcher.ModulateLift";
eu_ohmrun_fletcher_ModulateLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_ModulateLift.or = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self1 = cont;
			var receiver = stx_pico_EitherLift.fold(t,function(lhs) {
				return eu_ohmrun_Fletcher.forward(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,lhs),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 189, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "or"});
			},function(rhs) {
				return eu_ohmrun_Fletcher.forward(that,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,rhs),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 190, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "or"});
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 192, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "or"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 185, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "or"}));
};
eu_ohmrun_fletcher_ModulateLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self1 = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_Fletcher._.map(self,function(o) {
				var self;
				switch(o._hx_index) {
				case 0:
					var t = o.t;
					self = stx_nano_Upshot.accept(t);
					break;
				case 1:
					var e = o.e;
					self = stx_nano_Upshot.reject(fn(e));
					break;
				}
				return self;
			},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 203, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "errata"}),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 203, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "errata"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 208, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "errata"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 199, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "errata"}));
};
eu_ohmrun_fletcher_ModulateLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.errata(self,function(e) {
		return stx_fail_Refuse.errate(e,fn);
	});
};
eu_ohmrun_fletcher_ModulateLift.reframe = function(self) {
	return eu_ohmrun_fletcher_Reframe.fromModulate(eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 221, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "reframe"}),function(ok) {
			var receiver;
			switch(ok._hx_index) {
			case 0:
				var _g = ok.t;
				switch(p._hx_index) {
				case 0:
					var tt = p.t;
					var t = _g;
					receiver = stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
					break;
				case 1:
					var e = p.e;
					receiver = stx_nano_UpshotSum.Reject(e);
					break;
				}
				break;
			case 1:
				var _g = ok.e;
				if(p._hx_index == 1) {
					var ee = p.e;
					var e = _g;
					receiver = stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
				} else {
					var e = _g;
					receiver = stx_nano_UpshotSum.Reject(e);
				}
				break;
			}
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,receiver);
		},function(e) {
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 220, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "reframe"})));
};
eu_ohmrun_fletcher_ModulateLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 230, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "modulate"}));
};
eu_ohmrun_fletcher_ModulateLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_Attempt.toModulate(that));
};
eu_ohmrun_fletcher_ModulateLift.convert = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(that));
};
eu_ohmrun_fletcher_ModulateLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.convert(self,new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_ModulateLift.mapi = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_Modulate.fromFletcher(new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})),self));
};
eu_ohmrun_fletcher_ModulateLift.environment = function(self,i,success,failure) {
	var tmp = failure;
	failure = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success(t);
			break;
		case 1:
			var e = res.e;
			failure(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 251, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "environment"});
};
eu_ohmrun_fletcher_ModulateLift.produce = function(self,i) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,i,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 260, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "produce"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 260, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "produce"});
};
eu_ohmrun_fletcher_ModulateLift.reclaim = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_fletcher_ModulateLift.attempt(eu_ohmrun_fletcher_ModulateLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(that)),eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(prd,0,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 268, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "reclaim"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 267, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "reclaim"})));
};
eu_ohmrun_fletcher_ModulateLift.arrange = function(self,then) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,i,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 276, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "arrange"}),function(res) {
			var then1 = then;
			var receiver;
			switch(res._hx_index) {
			case 0:
				var _g = res.t;
				switch(i._hx_index) {
				case 0:
					var tt = i.t;
					var t = _g;
					receiver = stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
					break;
				case 1:
					var e = i.e;
					receiver = stx_nano_UpshotSum.Reject(e);
					break;
				}
				break;
			case 1:
				var _g = res.e;
				if(i._hx_index == 1) {
					var ee = i.e;
					var e = _g;
					receiver = stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
				} else {
					var e = _g;
					receiver = stx_nano_UpshotSum.Reject(e);
				}
				break;
			}
			return eu_ohmrun_Fletcher.forward(then1,receiver,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 277, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "arrange"});
		},function(e) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 276, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "arrange"}));
};
eu_ohmrun_fletcher_ModulateLift.split = function(self,that) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.split(self,that),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,stx_nano_Upshot._.zip),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 284, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "split"}));
};
eu_ohmrun_fletcher_ModulateLift.broach = function(self) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_FletcherLift.then(eu_ohmrun_Fletcher._.broach(self),new eu_ohmrun_fletcher_term_AnonSync(function(tp) {
		return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
			switch(lhs._hx_index) {
			case 0:
				var _g = lhs.t;
				switch(rhs._hx_index) {
				case 0:
					var tt = rhs.t;
					var t = _g;
					return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
				case 1:
					var e = rhs.e;
					return stx_nano_UpshotSum.Reject(e);
				}
				break;
			case 1:
				var _g = lhs.e;
				if(rhs._hx_index == 1) {
					var ee = rhs.e;
					var e = _g;
					return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
				} else {
					var e = _g;
					return stx_nano_UpshotSum.Reject(e);
				}
				break;
			}
		});
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
eu_ohmrun_fletcher_ModulateLift.flat_map = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			tmp = fn(t);
			break;
		case 1:
			var e = res.e;
			tmp = eu_ohmrun_fletcher_Modulate.fromUpshot(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 303, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "flat_map"}));
			break;
		}
		return eu_ohmrun_fletcher_Modulate.toFletcher(tmp);
	}));
};
eu_ohmrun_fletcher_ModulateLift.command = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var t = ipt.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_CommandLift.produce(that,eu_ohmrun_fletcher_Produce.pure(t)),t,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 313, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "command"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = ipt.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 314, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "command"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 311, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "command"}),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 309, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "command"});
};
eu_ohmrun_fletcher_ModulateLift.adjust = function(self,fn) {
	return eu_ohmrun_fletcher_ModulateLift.lift(eu_ohmrun_Fletcher._.map(self,function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 321, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "adjust"}));
};
var eu_ohmrun_fletcher_Modulate = {};
eu_ohmrun_fletcher_Modulate._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Modulate.fromApi = function(self) {
	return self;
};
eu_ohmrun_fletcher_Modulate.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Modulate.bump = function(self) {
	return eu_ohmrun_fletcher_ModulateArg.toModulate(self);
};
eu_ohmrun_fletcher_Modulate.unit = function() {
	return new eu_ohmrun_fletcher_term_AnonSync(function(oc) {
		return oc;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.pure = function(o) {
	return eu_ohmrun_fletcher_Modulate.fromUpshot(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Modulate.Fun = function(fn) {
	return eu_ohmrun_fletcher_Modulate.fromFun1R(fn);
};
eu_ohmrun_fletcher_Modulate.fromFun1Upshot = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return fn(t);
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 94, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1Upshot"});
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.fromFun1R = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(t));
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 97, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1R"});
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.fromUpshot = function(ocO) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(ocI) {
		switch(ocI._hx_index) {
		case 0:
			var t = ocI.t;
			return ocO;
		case 1:
			var e = ocI.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 100, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromUpshot"});
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.fromFunResRes0 = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
		case 1:
			var e = res.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 106, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFunResRes0"});
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.fromFunResUpshot = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
		case 1:
			var e = res.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 114, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFunResUpshot"});
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Modulate.fromFletcher = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver;
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,t,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 122, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFletcher"}),function(ok) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
			},function(no) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(no)),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 124, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFletcher"}));
			});
			break;
		case 1:
			var e = p.e;
			receiver = eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 126, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFletcher"})),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 31, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "value"});
			break;
		}
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 120, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFletcher"});
};
eu_ohmrun_fletcher_Modulate.fromAttempt = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self1 = cont;
			var receiver = eu_ohmrun_Fletcher.forward(self,t,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 135, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromAttempt"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self2 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 136, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromAttempt"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self2));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self2) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 134, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromAttempt"});
};
eu_ohmrun_fletcher_Modulate.fromFun1Produce = function(arw) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(arw(t),0,{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 146, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1Produce"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var self1 = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 147, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1Produce"}));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 143, className : "eu.ohmrun.fletcher._Modulate.Modulate_Impl_", methodName : "fromFun1Produce"});
};
eu_ohmrun_fletcher_Modulate.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Modulate.environment = function(this1,i,success,failure) {
	var success1 = success;
	var failure1 = failure;
	var tmp = failure1;
	failure1 = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(this1,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 251, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "environment"});
};
eu_ohmrun_fletcher_Modulate.split = function(this1,that) {
	return eu_ohmrun_fletcher_Modulate._.split(this1,that);
};
eu_ohmrun_fletcher_Modulate.mapi = function(this1,fn) {
	return eu_ohmrun_fletcher_Modulate._.mapi(this1,fn);
};
eu_ohmrun_fletcher_Modulate.convert = function(this1,that) {
	return eu_ohmrun_fletcher_Modulate._.convert(this1,that);
};
eu_ohmrun_fletcher_Modulate.broach = function(this1) {
	return eu_ohmrun_fletcher_Modulate._.broach(this1);
};
eu_ohmrun_fletcher_Modulate.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Modulate._.flat_map(this1,fn);
};
eu_ohmrun_fletcher_Modulate.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_Perform = {};
eu_ohmrun_fletcher_Perform._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Perform.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Perform.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Perform.toModulate = function(this1) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(this1,function(_) {
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,_);
		},{ fileName : "eu/ohmrun/fletcher/Perform.hx", lineNumber : 17, className : "eu.ohmrun.fletcher._Perform.Perform_Impl_", methodName : "toModulate"}),0,{ fileName : "eu/ohmrun/fletcher/Perform.hx", lineNumber : 17, className : "eu.ohmrun.fletcher._Perform.Perform_Impl_", methodName : "toModulate"});
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Perform.hx", lineNumber : 13, className : "eu.ohmrun.fletcher._Perform.Perform_Impl_", methodName : "toModulate"});
};
eu_ohmrun_fletcher_Perform.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Perform.get_self = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ProduceArgSum = $hxEnums["eu.ohmrun.fletcher.ProduceArgSum"] = { __ename__:"eu.ohmrun.fletcher.ProduceArgSum",__constructs__:null
	,ProduceArgPure: ($_=function(o) { return {_hx_index:0,o:o,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgPure",$_.__params__ = ["o"],$_)
	,ProduceArgSync: ($_=function(res) { return {_hx_index:1,res:res,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgSync",$_.__params__ = ["res"],$_)
	,ProduceArgThunk: ($_=function(fn) { return {_hx_index:2,fn:fn,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgThunk",$_.__params__ = ["fn"],$_)
	,ProduceArgRefuse: ($_=function(Refuse) { return {_hx_index:3,Refuse:Refuse,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgRefuse",$_.__params__ = ["Refuse"],$_)
	,ProduceArgPledge: ($_=function(pledge) { return {_hx_index:4,pledge:pledge,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgPledge",$_.__params__ = ["pledge"],$_)
	,ProduceArgFunXProduce: ($_=function(fn) { return {_hx_index:5,fn:fn,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgFunXProduce",$_.__params__ = ["fn"],$_)
	,ProduceArgFletcher: ($_=function(fletcher) { return {_hx_index:6,fletcher:fletcher,__enum__:"eu.ohmrun.fletcher.ProduceArgSum",toString:$estr}; },$_._hx_name="ProduceArgFletcher",$_.__params__ = ["fletcher"],$_)
};
eu_ohmrun_fletcher_ProduceArgSum.__constructs__ = [eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPure,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgSync,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgThunk,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgRefuse,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPledge,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFunXProduce,eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFletcher];
var eu_ohmrun_fletcher_ProduceArg = {};
eu_ohmrun_fletcher_ProduceArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ProduceArg.lift = function(self) {
	return eu_ohmrun_fletcher_ProduceArg._new(self);
};
eu_ohmrun_fletcher_ProduceArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ProduceArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ProduceArg.lift(this1);
};
eu_ohmrun_fletcher_ProduceArg.fromFunXProduce = function(fn) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFunXProduce(fn);
};
eu_ohmrun_fletcher_ProduceArg.fromFletcher = function(fletcher) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgFletcher(fletcher);
};
eu_ohmrun_fletcher_ProduceArg.fromPledge = function(pledge) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPledge(pledge);
};
eu_ohmrun_fletcher_ProduceArg.fromFuture = function(self) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPledge(stx_nano_Pledge.lift(tink_core_Future.map(self,function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	})));
};
eu_ohmrun_fletcher_ProduceArg.fromRefuse = function(Refuse) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgRefuse(Refuse);
};
eu_ohmrun_fletcher_ProduceArg.fromThunk = function(fn) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgThunk(fn);
};
eu_ohmrun_fletcher_ProduceArg.fromSync = function(res) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgSync(res);
};
eu_ohmrun_fletcher_ProduceArg.fromPure = function(o) {
	return eu_ohmrun_fletcher_ProduceArgSum.ProduceArgPure(o);
};
var eu_ohmrun_fletcher_ProduceLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProduceLift"] = eu_ohmrun_fletcher_ProduceLift;
eu_ohmrun_fletcher_ProduceLift.__name__ = "eu.ohmrun.fletcher.ProduceLift";
eu_ohmrun_fletcher_ProduceLift.environment = function(self,success,failure) {
	var tmp = failure;
	failure = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(self,0,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success(t);
			break;
		case 1:
			var e = res.e;
			failure(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 211, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "environment"});
};
eu_ohmrun_fletcher_ProduceLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_ProduceLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_fletcher_ProduceLift.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(oc) {
		var fn1 = fn;
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_UpshotSum.Accept(fn1(t));
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
eu_ohmrun_fletcher_ProduceLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(oc) {
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_Upshot.accept(t);
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_Upshot.reject(fn(e));
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
eu_ohmrun_fletcher_ProduceLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ProduceLift.errata(self,function(er) {
		return stx_fail_Refuse.errate(er,fn);
	});
};
eu_ohmrun_fletcher_ProduceLift.point = function(self,success) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 247, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "point"}),function(res) {
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = eu_ohmrun_Fletcher.forward(success(t),0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 249, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "point"});
				break;
			case 1:
				var e = res.e;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(e));
				receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				break;
			}
			return receiver;
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 245, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "point"});
};
eu_ohmrun_fletcher_ProduceLift.provide = function(self) {
	return eu_ohmrun_Fletcher._.map(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return t;
		case 1:
			var e = res.e;
			throw haxe_Exception.thrown(e);
		}
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 260, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "provide"});
};
eu_ohmrun_fletcher_ProduceLift.convert = function(self,then) {
	return eu_ohmrun_fletcher_ProduceLift.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Convert._.toModulate(then)),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 269, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "convert"}));
};
eu_ohmrun_fletcher_ProduceLift.recover = function(self,rec) {
	return eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Recover.toReform(rec));
};
eu_ohmrun_fletcher_ProduceLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_Attempt.toModulate(that))));
};
eu_ohmrun_fletcher_ProduceLift.deliver = function(self,fn) {
	return eu_ohmrun_FletcherLift.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			return stx_nano_Report.unit();
		case 1:
			var e = res.e;
			return stx_nano_Report.pure(e);
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_ProduceLift.reclaim = function(self,next) {
	return eu_ohmrun_fletcher_ProduceLift.attempt(eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(eu_ohmrun_fletcher_ConvertLift.toModulate(next)))),eu_ohmrun_Fletcher.Anon(function(prd,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(prd,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 296, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "reclaim"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 295, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "reclaim"}));
};
eu_ohmrun_fletcher_ProduceLift.arrange = function(self,next) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 302, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "arrange"}),function(res) {
			var next1 = next;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tII = i;
			var fn = function(tI) {
				return _g(tI,tII);
			};
			var self;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				self = stx_nano_UpshotSum.Accept(fn(t));
				break;
			case 1:
				var e = res.e;
				self = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return eu_ohmrun_Fletcher.forward(next1,self,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 303, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "arrange"});
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 301, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "arrange"});
};
eu_ohmrun_fletcher_ProduceLift.rearrange = function(self,next) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 312, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "rearrange"}),function(res) {
			return eu_ohmrun_Fletcher.forward(next,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,res,i)),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 313, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "rearrange"});
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 310, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "rearrange"});
};
eu_ohmrun_fletcher_ProduceLift.modulate = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(self,eu_ohmrun_fletcher_Modulate.toFletcher(that)));
};
eu_ohmrun_fletcher_ProduceLift.fudge = function(self) {
	var self1 = eu_ohmrun_Fletcher._.fudge(self,0);
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		return t;
	case 1:
		var e = self1.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_ProduceLift.force = function(self) {
	var self1 = eu_ohmrun_Fletcher._.force(self,0);
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		return t;
	case 1:
		var e = self1.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_ProduceLift.flat_map = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		var this1;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			this1 = that(t);
			break;
		case 1:
			var e = res.e;
			this1 = eu_ohmrun_fletcher_Produce.fromUpshot(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 334, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "flat_map"}));
			break;
		}
		return this1;
	}));
};
eu_ohmrun_fletcher_ProduceLift.fold_flat_map = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher.FlatMap(self,function(res) {
		return eu_ohmrun_fletcher_Produce.prj(that(res));
	}));
};
eu_ohmrun_fletcher_ProduceLift.then = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,that,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 348, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "then"});
};
eu_ohmrun_fletcher_ProduceLift.split = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.then(eu_ohmrun_Fletcher._.split(self,that),new eu_ohmrun_fletcher_term_AnonSync(stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
		switch(l._hx_index) {
		case 0:
			var _g = l.t;
			switch(r._hx_index) {
			case 0:
				var tt = r.t;
				var t = _g;
				return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
			case 1:
				var e = r.e;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		case 1:
			var _g = l.e;
			if(r._hx_index == 1) {
				var ee = r.e;
				var e = _g;
				return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
			} else {
				var e = _g;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		}
	}),{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
eu_ohmrun_fletcher_ProduceLift.adjust = function(self,fn) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_Fletcher._.then(self,new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = fn(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
eu_ohmrun_fletcher_ProduceLift.pledge = function(self) {
	return stx_nano_Pledge.lift(tink_core_Future.map(eu_ohmrun_Fletcher._.future(self,0),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			return t;
		case 1:
			var e = outcome.e;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(stx_nano_Defect.elide(e))),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 368, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "pledge"});
		}
	}));
};
eu_ohmrun_fletcher_ProduceLift.toModulate = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 376, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "toModulate"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 375, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "toModulate"});
};
eu_ohmrun_fletcher_ProduceLift.zip = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.lift(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.pinch(self,that),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			var _g = lhs.t;
			switch(rhs._hx_index) {
			case 0:
				var tt = rhs.t;
				var t = _g;
				return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
			case 1:
				var e = rhs.e;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		case 1:
			var _g = lhs.e;
			if(rhs._hx_index == 1) {
				var ee = rhs.e;
				var e = _g;
				return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
			} else {
				var e = _g;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		}
	}),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 382, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "zip"}));
};
eu_ohmrun_fletcher_ProduceLift.command = function(self,cmd) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(res,cont) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return cmd.defer(t,cont);
		case 1:
			var e = res.e;
			var self = cont;
			var _ = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 396, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "command"});
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(e));
			var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 393, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "command"}),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 391, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "command"});
};
var eu_ohmrun_fletcher_Produce = {};
eu_ohmrun_fletcher_Produce._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Produce.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Produce.bump = function(self) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		return eu_ohmrun_fletcher_Produce.pure(o);
	case 1:
		var res = self.res;
		return eu_ohmrun_fletcher_Produce.Sync(res);
	case 2:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.Thunk(fn);
	case 3:
		var refuse = self.Refuse;
		return eu_ohmrun_fletcher_Produce.fromRefuse(refuse);
	case 4:
		var pledge = self.pledge;
		return eu_ohmrun_fletcher_Produce.fromPledge(pledge);
	case 5:
		var fn = self.fn;
		return eu_ohmrun_fletcher_Produce.fromFunXProduce(fn);
	case 6:
		var fletcher = self.fletcher;
		return eu_ohmrun_fletcher_Produce.fromFletcher(fletcher);
	}
};
eu_ohmrun_fletcher_Produce.Sync = function(result) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 68, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Produce.Thunk = function(result) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result());
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 73, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "Thunk"});
};
eu_ohmrun_fletcher_Produce.fromFunXProduce = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self(),0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 78, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromFunXProduce"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 77, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromFunXProduce"});
};
eu_ohmrun_fletcher_Produce.fromRefuse = function(e) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 82, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromRefuse"}));
};
eu_ohmrun_fletcher_Produce.pure = function(v) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
};
eu_ohmrun_fletcher_Produce.accept = function(v) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
};
eu_ohmrun_fletcher_Produce.reject = function(e) {
	return eu_ohmrun_fletcher_Produce.Sync(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 91, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "reject"}));
};
eu_ohmrun_fletcher_Produce.fromUpshot = function(res) {
	return eu_ohmrun_fletcher_Produce.Sync(res);
};
eu_ohmrun_fletcher_Produce.fromFunXUpshot = function(fn) {
	return eu_ohmrun_fletcher_Produce.Thunk(fn);
};
eu_ohmrun_fletcher_Produce.fromPledge = function(pl) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = stx_nano_PledgeLift.fold(pl,function(x) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x));
		},function(e) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 107, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromPledge"}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 102, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromPledge"});
};
eu_ohmrun_fletcher_Produce.fromFunXR = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Produce.fromFletcher = function(arw) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(arw,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 125, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromFletcher"}),function(ok) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok));
		},function(no) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(no)),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 127, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromFletcher"}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 124, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromFletcher"});
};
eu_ohmrun_fletcher_Produce.bind_fold = function(data,fn,r) {
	return stx_nano_IterLift.lfold(data,function(next,memo) {
		return eu_ohmrun_fletcher_Produce.flat_map(memo,function(r) {
			return fn(next,r);
		});
	},eu_ohmrun_fletcher_Produce.pure(r));
};
eu_ohmrun_fletcher_Produce.parallel = function(data,fn,r) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var memo = r;
		var fail = null;
		var cell = stx_nano_Cell.make(function() {
			if(fail == null) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,memo);
			} else {
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(fail),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 148, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "parallel"});
			}
		});
		var work = null;
		var count = 0;
		var done = false;
		var trigger = new tink_core_FutureTrigger();
		var p = $getIterator(data);
		while(p.hasNext()) {
			var p1 = p.next();
			count += 1;
			var this1 = fn(p1,cell);
			var success = [(function() {
				return function(ok) {
					if(!done) {
						memo = ok;
						count -= 1;
						if(count == 0) {
							done = true;
							trigger.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,memo)));
						}
					}
				};
			})()];
			var failure = [(function() {
				return function(no) {
					fail = no;
					done = true;
					trigger.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(no),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 172, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "parallel"})));
				};
			})()];
			var tmp = failure[0];
			failure[0] = tmp != null ? tmp : (function() {
				return function(e) {
					e.crack();
				};
			})();
			work = stx_stream_WorkLift.par(work,eu_ohmrun_Fletcher._.environment(this1,0,(function(failure,success) {
				return function(res) {
					switch(res._hx_index) {
					case 0:
						var t = res.t;
						success[0](t);
						break;
					case 1:
						var e = res.e;
						failure[0](e);
						break;
					}
				};
			})(failure,success),(function() {
				return function(e) {
					throw haxe_Exception.thrown(e);
				};
			})(),{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 211, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "environment"}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon((function() {
				return function(fn) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
					var val = fn(new tink_core_FutureTrigger());
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("terminal AFTER unit()");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
					return val;
				};
			})(),{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}))));
		}
		var self = cont;
		var self1 = cont;
		var ft = trigger;
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return stx_stream_WorkLift.par(work,this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		}))));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 143, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "parallel"});
};
eu_ohmrun_fletcher_Produce.fromProvide = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,0,{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 183, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromProvide"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 182, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "fromProvide"});
};
eu_ohmrun_fletcher_Produce.environment = function(this1,success,failure) {
	var success1 = success;
	var failure1 = failure;
	var tmp = failure1;
	failure1 = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(this1,0,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 211, className : "eu.ohmrun.fletcher.ProduceLift", methodName : "environment"});
};
eu_ohmrun_fletcher_Produce.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.toPropose = function(this1) {
	return eu_ohmrun_Fletcher._.map(this1,function(res) {
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_ChunkSum.Val(t);
			break;
		case 1:
			var e = res.e;
			self = stx_nano_ChunkSum.End(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Produce.hx", lineNumber : 193, className : "eu.ohmrun.fletcher._Produce.Produce_Impl_", methodName : "toPropose"});
};
eu_ohmrun_fletcher_Produce.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Produce.fudge = function(this1) {
	var self = eu_ohmrun_Fletcher._.fudge(this1,0);
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
eu_ohmrun_fletcher_Produce.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Produce._.flat_map(this1,fn);
};
var eu_ohmrun_fletcher_Progress = function(explain,closure,product,failure) {
	this.explain = explain;
	this.closure = closure;
	this.product = product;
	this.failure = failure;
};
$hxClasses["eu.ohmrun.fletcher.Progress"] = eu_ohmrun_fletcher_Progress;
eu_ohmrun_fletcher_Progress.__name__ = "eu.ohmrun.fletcher.Progress";
eu_ohmrun_fletcher_Progress.prototype = {
	explain: null
	,closure: null
	,product: null
	,failure: null
	,__class__: eu_ohmrun_fletcher_Progress
};
var eu_ohmrun_fletcher_ProposeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProposeLift"] = eu_ohmrun_fletcher_ProposeLift;
eu_ohmrun_fletcher_ProposeLift.__name__ = "eu.ohmrun.fletcher.ProposeLift";
eu_ohmrun_fletcher_ProposeLift.flat_map = function(self,fn) {
	return eu_ohmrun_Fletcher.FlatMap(self,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			return fn(v);
		case 1:
			return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.Tap);
		case 2:
			var e = chunk.err;
			return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.End(e));
		}
	});
};
eu_ohmrun_fletcher_ProposeLift.convert = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(next,stx_nano_ChunkSum.Val,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "convert"}),v,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "convert"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 78, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "convert"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 76, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "convert"});
};
eu_ohmrun_fletcher_ProposeLift.attempt = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(next,function(res) {
				return stx_nano_UpshotLift.toChunk(res);
			},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 92, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "attempt"}),v,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 92, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "attempt"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 90, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "attempt"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 88, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "attempt"});
};
eu_ohmrun_fletcher_ProposeLift.diffuse = function(self,next) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.lift(next),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "diffuse"});
};
eu_ohmrun_fletcher_ProposeLift.or = function(self,or) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Val(v));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(or(),0,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 116, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "or"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 112, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "or"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 110, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "or"});
};
eu_ohmrun_fletcher_ProposeLift.toProduce = function(self) {
	var val = function(o) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(o));
	};
	var ers = function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 127, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "toProduce"});
	};
	var tap = function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None);
	};
	var self1 = function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			self = val(v);
			break;
		case 1:
			self = tap();
			break;
		case 2:
			var e = chk.err;
			self = ers(e);
			break;
		}
		return self;
	};
	return eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher.lift(self),self1,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 124, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "toProduce"});
};
eu_ohmrun_fletcher_ProposeLift.materialise = function(self) {
	return eu_ohmrun_Fletcher._.map(eu_ohmrun_Fletcher.lift(self),function(ipt) {
		var self;
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			self = stx_nano_ChunkSum.Val(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v));
			break;
		case 1:
			self = stx_nano_ChunkSum.Val(haxe_ds_Option.None);
			break;
		case 2:
			var e = ipt.err;
			self = stx_nano_ChunkSum.End(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 135, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "materialise"});
};
eu_ohmrun_fletcher_ProposeLift.and = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(eu_ohmrun_Fletcher.lift(self),eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			var _g = function(tI,tII) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
			};
			var tI = v;
			var receiver = function(tII) {
				return _g(tI,tII);
			};
			var receiver1 = eu_ohmrun_Fletcher.forward(eu_ohmrun_fletcher_ProposeLift.map(that,receiver),0,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 151, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "and"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 149, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "and"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 147, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "and"});
};
eu_ohmrun_fletcher_ProposeLift.command = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		switch(ipt._hx_index) {
		case 0:
			var v = ipt.v;
			var self = cont;
			var receiver = eu_ohmrun_Fletcher.forward(that,v,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 165, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "command"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.unit());
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 2:
			var e = ipt.err;
			var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_Report.pure(e));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value1);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 163, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "command"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 161, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "command"});
};
eu_ohmrun_fletcher_ProposeLift.before = function(self,fn) {
	var self1 = function(_) {
		fn();
	};
	return new eu_ohmrun_fletcher_term_Then(new eu_ohmrun_fletcher_term_AnonSync(function(p) {
		self1(p);
		return p;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),self,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 175, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "before"});
};
eu_ohmrun_fletcher_ProposeLift.after = function(self,fn) {
	var self1 = fn;
	return new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(function(p) {
		self1(p);
		return p;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 183, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "after"});
};
eu_ohmrun_fletcher_ProposeLift.environment = function(self,success,failure) {
	var tmp = failure;
	failure = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(eu_ohmrun_Fletcher.lift(self),0,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			success(haxe_ds_Option.Some(v));
			break;
		case 1:
			success(haxe_ds_Option.None);
			break;
		case 2:
			var e = chunk.err;
			failure(e);
			break;
		}
	},function(e) {
		throw haxe_Exception.thrown(e);
	},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 191, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "environment"});
};
eu_ohmrun_fletcher_ProposeLift.map = function(self,then) {
	var val = stx_fn_UnaryLift.then(then,stx_nano_ChunkSum.Val);
	var ers = stx_nano_ChunkSum.End;
	var tap = function() {
		return stx_nano_ChunkSum.Tap;
	};
	return new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(function(chk) {
		var fn;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			fn = val(v);
			break;
		case 1:
			fn = tap();
			break;
		case 2:
			var e = chk.err;
			fn = ers(e);
			break;
		}
		return fn;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 204, className : "eu.ohmrun.fletcher.ProposeLift", methodName : "map"});
};
var eu_ohmrun_fletcher_Propose = {};
eu_ohmrun_fletcher_Propose._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Propose.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Propose.fromChunk = function(chunk) {
	return eu_ohmrun_Fletcher.pure(chunk);
};
eu_ohmrun_fletcher_Propose.fromOption = function(self) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		self1 = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		self1 = stx_nano_ChunkSum.Tap;
		break;
	}
	return eu_ohmrun_Fletcher.pure(self1);
};
eu_ohmrun_fletcher_Propose.make = function(o) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_lift_LiftNano.chunk(stx_nano_Wildcard.__,o));
};
eu_ohmrun_fletcher_Propose.pure = function(o) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.Val(o));
};
eu_ohmrun_fletcher_Propose.fromRefuse = function(e) {
	return eu_ohmrun_fletcher_Propose.fromChunk(stx_nano_ChunkSum.End(e));
};
eu_ohmrun_fletcher_Propose.unit = function() {
	return eu_ohmrun_Fletcher.pure(stx_nano_ChunkSum.Tap);
};
eu_ohmrun_fletcher_Propose.fromChunkThunk = function(thunk) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return thunk();
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Propose.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Propose.elide = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Propose.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Propose.bind_fold = function(fn,iterable,seed) {
	return stx_pico_Option.fromNullT(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(iterable),function(next,memo) {
		return eu_ohmrun_FletcherLift.then(memo,eu_ohmrun_Fletcher.Anon(function(res,cont) {
			switch(res._hx_index) {
			case 0:
				var v = res.v;
				var self = cont;
				var receiver = eu_ohmrun_Fletcher.forward(fn(next,v),0,{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 50, className : "eu.ohmrun.fletcher._Propose.Propose_Impl_", methodName : "bind_fold"});
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			case 1:
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.Tap);
				return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				})));
			case 2:
				var e = res.err;
				var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_ChunkSum.End(e));
				return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value1);
					return trg;
				})));
			}
		},{ fileName : "eu/ohmrun/fletcher/Propose.hx", lineNumber : 48, className : "eu.ohmrun.fletcher._Propose.Propose_Impl_", methodName : "bind_fold"}));
	},eu_ohmrun_fletcher_Propose.pure(seed)));
};
eu_ohmrun_fletcher_Propose.flat_map = function(this1,fn) {
	return eu_ohmrun_fletcher_Propose._.flat_map(eu_ohmrun_fletcher_Propose.get_self(this1),fn);
};
var eu_ohmrun_fletcher_ProvideLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ProvideLift"] = eu_ohmrun_fletcher_ProvideLift;
eu_ohmrun_fletcher_ProvideLift.__name__ = "eu.ohmrun.fletcher.ProvideLift";
eu_ohmrun_fletcher_ProvideLift.environment = function(self,handler,pos) {
	return eu_ohmrun_Fletcher._.environment(self,0,function(o) {
		handler(o);
	},function(e) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),6).toLogApi().comply(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
		throw haxe_Exception.thrown(e);
	},pos);
};
eu_ohmrun_fletcher_ProvideLift.flat_map = function(self,fn) {
	return eu_ohmrun_Fletcher.FlatMap(self,fn);
};
eu_ohmrun_fletcher_ProvideLift.and = function(lhs,rhs) {
	return eu_ohmrun_Fletcher._.pinch(lhs,rhs);
};
eu_ohmrun_fletcher_ProvideLift.convert = function(self,that) {
	return eu_ohmrun_fletcher_ConvertLift.then(self,that);
};
eu_ohmrun_fletcher_ProvideLift.toProduce = function(self) {
	return new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 98, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "toProduce"});
};
eu_ohmrun_fletcher_ProvideLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_ProduceLift.attempt(eu_ohmrun_fletcher_ProvideLift.toProduce(self),that);
};
eu_ohmrun_fletcher_ProvideLift.map = function(self,fn) {
	return new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(function(x) {
		return fn(x);
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 105, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "map"});
};
eu_ohmrun_fletcher_ProvideLift.fudge = function(self) {
	return eu_ohmrun_Fletcher._.fudge(self,0);
};
eu_ohmrun_fletcher_ProvideLift.then = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(self,that,{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 115, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "then"});
};
eu_ohmrun_fletcher_ProvideLift.zip = function(self,that) {
	return eu_ohmrun_Fletcher._.pinch(self,that);
};
eu_ohmrun_fletcher_ProvideLift.adjust = function(self,fn) {
	return eu_ohmrun_FletcherLift.map(self,fn,{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 121, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "adjust"});
};
var eu_ohmrun_fletcher_Provide = {};
eu_ohmrun_fletcher_Provide._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Provide.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Provide.pure = function(v) {
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return v;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Provide.fromFuture = function(future) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 24, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFuture"});
};
eu_ohmrun_fletcher_Provide.fromFunXR = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 29, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunXR"});
};
eu_ohmrun_fletcher_Provide.fromFunXFuture = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var ft = tink_core_Future.map(fn(),function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunXFuture"});
};
eu_ohmrun_fletcher_Provide.fromFunTerminalWork = function(fn) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		return fn(cont);
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 39, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunTerminalWork"});
};
eu_ohmrun_fletcher_Provide.bind_fold = function(fn,arr,seed) {
	var v = seed;
	return stx_nano_IterLift.lfold(arr,function(next,memo) {
		return eu_ohmrun_fletcher_ProvideLift.convert(memo,eu_ohmrun_fletcher_Convert.fromFun1Provide(function(o) {
			return eu_ohmrun_fletcher_ConvertLift.provide(fn,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,next,o));
		}));
	},new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return v;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
};
eu_ohmrun_fletcher_Provide.toFletcher = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Provide.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Provide.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Provide.fudge = function(this1) {
	return eu_ohmrun_Fletcher._.fudge(this1,0);
};
var eu_ohmrun_fletcher_ReceiverLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReceiverLift"] = eu_ohmrun_fletcher_ReceiverLift;
eu_ohmrun_fletcher_ReceiverLift.__name__ = "eu.ohmrun.fletcher.ReceiverLift";
eu_ohmrun_fletcher_ReceiverLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_ReceiverLift.flat_fold = function(self,ok,no) {
	var uuid = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxx");
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("set up flat_fold: " + uuid);
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 73, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("call flat_fold " + uuid);
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 76, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
		return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("inside flat_fold " + uuid);
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
			return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(tink_core_Future.flatMap(tink_core_Future.flatMap(p,function(out) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("flat_fold:end " + uuid);
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 83, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_fold"}));
				var v;
				switch(out._hx_index) {
				case 0:
					var t = out.t;
					v = ok(t);
					break;
				case 1:
					var e = out.e;
					v = no(e);
					break;
				}
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}),function(rec) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(rec.apply(cont)));
			}),function(bang) {
				if(bang == null) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
				}
			}))));
		})));
	}));
};
eu_ohmrun_fletcher_ReceiverLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_core_Cont._.map(self,function(out) {
		return tink_core_Future.map(out,function(x) {
			var fn1 = fn;
			return stx_pico_OutcomeLift.flat_map(x,function(x) {
				return stx_pico_OutcomeSum.Success(fn1(x));
			});
		});
	});
};
eu_ohmrun_fletcher_ReceiverLift.flat_map = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.flat_fold(self,fn,function(e) {
		return eu_ohmrun_fletcher_Receiver.issue(stx_pico_OutcomeSum.Failure(e),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 106, className : "eu.ohmrun.fletcher.ReceiverLift", methodName : "flat_map"});
	});
};
eu_ohmrun_fletcher_ReceiverLift.tap = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.map(self,stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).command(fn));
};
eu_ohmrun_fletcher_ReceiverLift.fold_bind = function(self,ok,no) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return cont.apply(eu_ohmrun_fletcher_ReceiverInputLift.fold_bind(p,ok,no));
		})));
	}));
};
eu_ohmrun_fletcher_ReceiverLift.fold_mapp = function(self,ok,no) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(cont) {
		return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return cont.apply(eu_ohmrun_fletcher_ReceiverInputLift.fold_mapp(p,ok,no));
		})));
	}));
};
eu_ohmrun_fletcher_ReceiverLift.mod = function(self,g) {
	return eu_ohmrun_fletcher_ReceiverLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,g)));
};
eu_ohmrun_fletcher_ReceiverLift.zip = function(self,that) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(f) {
		var lhs = null;
		var rhs = null;
		var work_left = self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ocI) {
			lhs = ocI;
			return null;
		})));
		var work_right = that.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ocII) {
			rhs = ocII;
			return null;
		})));
		return stx_stream_WorkLift.seq(stx_stream_WorkLift.par(work_left,work_right),stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(tink_core_Future.irreversible(function(cb) {
			var ipt = eu_ohmrun_fletcher_ReceiverInput.zip(lhs,rhs);
			var res = f.apply(ipt);
			cb(res);
		}),function(bang) {
			if(bang == null) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
			}
		})))));
	}));
};
eu_ohmrun_fletcher_ReceiverLift.errata = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.fold_mapp(self,function(p) {
		return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,p);
	},function(e) {
		return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,fn(e));
	});
};
eu_ohmrun_fletcher_ReceiverLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ReceiverLift.errata(self,function(x) {
		return stx_nano_DefectLift.errate(x,fn);
	});
};
var eu_ohmrun_fletcher_Receiver = {};
eu_ohmrun_fletcher_Receiver.reply = function(this1) {
	return this1.apply(eu_ohmrun_fletcher_ReceiverSink.toApply(eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Unit())));
};
eu_ohmrun_fletcher_Receiver.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Receiver._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Receiver.issue = function(outcome,pos) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(fn) {
		var t = new tink_core_FutureTrigger();
		t.trigger(outcome);
		return fn.apply(t);
	}));
};
eu_ohmrun_fletcher_Receiver.thunk = function(self,pos) {
	return new eu_ohmrun_fletcher_receiver_term_Thunk(self);
};
eu_ohmrun_fletcher_Receiver.value = function(r,pos) {
	return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 31, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "value"});
};
eu_ohmrun_fletcher_Receiver.error = function(err,pos) {
	return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
};
eu_ohmrun_fletcher_Receiver.later = function(ft,pos) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(fn) {
		return fn.apply(ft);
	}));
};
eu_ohmrun_fletcher_Receiver.serve = function(this1) {
	return eu_ohmrun_fletcher_Receiver.reply(this1);
};
eu_ohmrun_fletcher_Receiver.toString = function(this1) {
	return "Receiver(" + Std.string(this1) + ")";
};
eu_ohmrun_fletcher_Receiver.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ReceiverInputLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReceiverInputLift"] = eu_ohmrun_fletcher_ReceiverInputLift;
eu_ohmrun_fletcher_ReceiverInputLift.__name__ = "eu.ohmrun.fletcher.ReceiverInputLift";
eu_ohmrun_fletcher_ReceiverInputLift.fold_bind = function(self,ok,no) {
	return tink_core_Future.flatMap(self,function(oc) {
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			return ok(t);
		case 1:
			var e = oc.e;
			return no(e);
		}
	});
};
eu_ohmrun_fletcher_ReceiverInputLift.fold_mapp = function(self,ok,no) {
	return tink_core_Future.map(self,function(oc) {
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			return ok(t);
		case 1:
			var e = oc.e;
			return no(e);
		}
	});
};
eu_ohmrun_fletcher_ReceiverInputLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(oc) {
		var fn1 = fn;
		return stx_pico_OutcomeLift.flat_map(oc,function(x) {
			return stx_pico_OutcomeSum.Success(fn1(x));
		});
	});
};
var eu_ohmrun_fletcher_ReceiverInput = {};
eu_ohmrun_fletcher_ReceiverInput._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ReceiverInput.lift = function(self) {
	return eu_ohmrun_fletcher_ReceiverInput._new(self);
};
eu_ohmrun_fletcher_ReceiverInput.zip = function(this1,that) {
	return tink_core_Future.merge(this1,eu_ohmrun_fletcher_ReceiverInput.prj(that),function(l,r) {
		return stx_nano_lift_LiftOutcomeTDefect.zip(l,r);
	});
};
eu_ohmrun_fletcher_ReceiverInput.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ReceiverInput.get_self = function(this1) {
	return eu_ohmrun_fletcher_ReceiverInput.lift(this1);
};
var eu_ohmrun_fletcher_ReceiverSink = {};
eu_ohmrun_fletcher_ReceiverSink._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ReceiverSink.lift = function(self) {
	return eu_ohmrun_fletcher_ReceiverSink._new(self);
};
eu_ohmrun_fletcher_ReceiverSink.fromApply = function(self) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(self);
};
eu_ohmrun_fletcher_ReceiverSink.seq = function(this1,that) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Seq(this1,that));
};
eu_ohmrun_fletcher_ReceiverSink.unit = function() {
	return eu_ohmrun_fletcher_ReceiverSink.lift(new eu_ohmrun_fletcher_receiver_$sink_term_Unit());
};
eu_ohmrun_fletcher_ReceiverSink.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ReceiverSink.get_self = function(this1) {
	return eu_ohmrun_fletcher_ReceiverSink.lift(this1);
};
eu_ohmrun_fletcher_ReceiverSink.toApply = function(this1) {
	return stx_pico_Apply._new(this1);
};
var eu_ohmrun_fletcher_Recover = {};
eu_ohmrun_fletcher_Recover._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Recover.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Recover.fromFunErrR = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Recover.toModulate = function(this1) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this3 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this3,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(this1,e,{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 18, className : "eu.ohmrun.fletcher._Recover.Recover_Impl_", methodName : "toModulate"}),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			});
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 13, className : "eu.ohmrun.fletcher._Recover.Recover_Impl_", methodName : "toModulate"});
};
eu_ohmrun_fletcher_Recover.toReform = function(this1) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var self = cont;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
			var this2 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
			var this3 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self));
			new stx_log_log_term_Level(this3,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return this2.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var receiver = eu_ohmrun_Fletcher.forward(this1,e,{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 25, className : "eu.ohmrun.fletcher._Recover.Recover_Impl_", methodName : "toReform"});
			var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 23, className : "eu.ohmrun.fletcher._Recover.Recover_Impl_", methodName : "toReform"});
};
eu_ohmrun_fletcher_Recover.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Recover.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
var eu_ohmrun_fletcher_RecoverLift = function() { };
$hxClasses["eu.ohmrun.fletcher.RecoverLift"] = eu_ohmrun_fletcher_RecoverLift;
eu_ohmrun_fletcher_RecoverLift.__name__ = "eu.ohmrun.fletcher.RecoverLift";
eu_ohmrun_fletcher_RecoverLift.toReform = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,e,{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 42, className : "eu.ohmrun.fletcher.RecoverLift", methodName : "toReform"}),function(ok) {
				return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ok);
			},function(_) {
				return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,_);
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 38, className : "eu.ohmrun.fletcher.RecoverLift", methodName : "toReform"});
};
eu_ohmrun_fletcher_RecoverLift.toModulate = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(p,cont) {
		switch(p._hx_index) {
		case 0:
			var t = p.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var e = p.e;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,e,{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 54, className : "eu.ohmrun.fletcher.RecoverLift", methodName : "toModulate"}),function(t) {
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Recover.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.RecoverLift", methodName : "toModulate"});
};
var eu_ohmrun_fletcher_Reform = {};
eu_ohmrun_fletcher_Reform._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Reform.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Reform.toModulate = function(this1) {
	return eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher.lift(this1),function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	},{ fileName : "eu/ohmrun/fletcher/Reform.hx", lineNumber : 13, className : "eu.ohmrun.fletcher._Reform.Reform_Impl_", methodName : "toModulate"});
};
eu_ohmrun_fletcher_Reform.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Reform.toFletcher = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ReframeLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ReframeLift"] = eu_ohmrun_fletcher_ReframeLift;
eu_ohmrun_fletcher_ReframeLift.__name__ = "eu.ohmrun.fletcher.ReframeLift";
eu_ohmrun_fletcher_ReframeLift.lift = function(wml) {
	return wml;
};
eu_ohmrun_fletcher_ReframeLift.modulate = function(self,that) {
	return new eu_ohmrun_fletcher_term_Then(eu_ohmrun_Fletcher.lift(self),eu_ohmrun_fletcher_Modulate.toFletcher(that),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 38, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "modulate"});
};
eu_ohmrun_fletcher_ReframeLift.attempt = function(self,that) {
	var fn = function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var t = chk.t;
			var tp = t;
			var self1 = stx_nano_CoupleLift.fst(tp);
			var fn = function(r) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,stx_nano_CoupleLift.snd(tp));
			};
			var self2;
			switch(self1._hx_index) {
			case 0:
				var t = self1.t;
				self2 = stx_nano_UpshotSum.Accept(fn(t));
				break;
			case 1:
				var e = self1.e;
				self2 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			self = self2;
			break;
		case 1:
			var e = chk.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	};
	var arw = eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate._.convert(eu_ohmrun_fletcher_Reframe.toModulate(self),eu_ohmrun_FletcherLift.first(that)),fn,{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 47, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "attempt"}));
	return arw;
};
eu_ohmrun_fletcher_ReframeLift.rearrange = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,ipt,{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 56, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "rearrange"}),function(res) {
			var that1 = that;
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t)));
				break;
			case 1:
				var e = res.e;
				switch(ipt._hx_index) {
				case 0:
					var t = ipt.t;
					receiver = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 60, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "rearrange"}),t));
					break;
				case 1:
					var e = ipt.e;
					receiver = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 60, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "rearrange"});
					break;
				}
				break;
			}
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(that1,receiver,{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 57, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "rearrange"}),function(res) {
				switch(res._hx_index) {
				case 0:
					var _g = res.t;
					switch(ipt._hx_index) {
					case 0:
						var tt = ipt.t;
						var t = _g;
						return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
					case 1:
						var e = ipt.e;
						return stx_nano_UpshotSum.Reject(e);
					}
					break;
				case 1:
					var _g = res.e;
					if(ipt._hx_index == 1) {
						var ee = ipt.e;
						var e = _g;
						return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
					} else {
						var e = _g;
						return stx_nano_UpshotSum.Reject(e);
					}
					break;
				}
			});
		},function(err) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,err);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "rearrange"});
};
eu_ohmrun_fletcher_ReframeLift.arrange = function(self,that) {
	var arw = eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate._.broach(eu_ohmrun_fletcher_ReframeLift.modulate(self,eu_ohmrun_fletcher_Arrange.toModulate(that))),function(res) {
		var fn = function(tp) {
			return stx_nano_CoupleLift.swap(tp);
		};
		var self;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			self = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = res.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 70, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "arrange"});
	return arw;
};
eu_ohmrun_fletcher_ReframeLift.arrangement = function(self,that) {
	return eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,stx_nano_Upshot.fromOutcome(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_CoupleLift.snd(ipt))),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "arrangement"}),function(tp) {
			var receiver;
			switch(tp._hx_index) {
			case 0:
				var t = tp.t;
				receiver = eu_ohmrun_Fletcher.forward(that(stx_nano_CoupleLift.fst(t)),stx_nano_Upshot.fromOutcome(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,ipt)),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 82, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "arrangement"});
				break;
			case 1:
				var e = tp.e;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 83, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "arrangement"}));
				receiver = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				break;
			}
			return receiver;
		},function(e) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 79, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "arrangement"});
};
eu_ohmrun_fletcher_ReframeLift.commandeer = function(self,fn) {
	return eu_ohmrun_fletcher_Command._new(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.then(eu_ohmrun_fletcher_ReframeLift.commandment(self,fn),new eu_ohmrun_fletcher_term_AnonSync(function(res) {
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				return stx_nano_Report.unit();
			case 1:
				var e = res.e;
				return stx_nano_Report.pure(e);
			}
		},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ipt),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 92, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandeer"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 91, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandeer"}));
};
eu_ohmrun_fletcher_ReframeLift.commandment = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(eu_ohmrun_Fletcher.forward(self,ipt,{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 105, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"}),function(res) {
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				var ok = t;
				var cmd = fn(stx_nano_CoupleLift.fst(ok));
				switch(ipt._hx_index) {
				case 0:
					var t = ipt.t;
					var i = t;
					return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(cmd,i,{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 110, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"}),function(report) {
						if(report == null) {
							return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(ok),i));
						} else {
							switch(report._hx_index) {
							case 0:
								var v = report.v;
								return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 112, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"});
							case 1:
								return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(ok),i));
							}
						}
					});
				case 1:
					var e = ipt.e;
					var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 116, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"}));
					return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
						trg.trigger(value);
						return trg;
					}));
				}
				break;
			case 1:
				var e = res.e;
				var value1 = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 119, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"}));
				return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value1);
					return trg;
				}));
			}
		},function(no) {
			var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 104, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "commandment"}));
};
eu_ohmrun_fletcher_ReframeLift.evaluation = function(self) {
	return eu_ohmrun_fletcher_Modulate._.map(self,function(o) {
		return stx_nano_CoupleLift.fst(o);
	});
};
eu_ohmrun_fletcher_ReframeLift.execution = function(self) {
	return eu_ohmrun_fletcher_Modulate._.map(self,function(tp) {
		return stx_nano_CoupleLift.snd(tp);
	});
};
eu_ohmrun_fletcher_ReframeLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var self1 = cont;
			var receiver = eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 137, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "errate"}),function(x) {
				var fn1 = fn;
				var self;
				switch(x._hx_index) {
				case 0:
					var t = x.t;
					self = stx_nano_Upshot.accept(t);
					break;
				case 1:
					var e = x.e;
					self = stx_nano_Upshot.reject(stx_fail_Refuse.errate(e,fn1));
					break;
				}
				return self;
			});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		case 1:
			var e = i.e;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 141, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "errate"}));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 134, className : "eu.ohmrun.fletcher.ReframeLift", methodName : "errate"}));
};
eu_ohmrun_fletcher_ReframeLift.environment = function(self,i,success,failure) {
	var success1 = success;
	var failure1 = failure;
	var tmp = failure1;
	failure1 = tmp != null ? tmp : function(e) {
		e.crack();
	};
	return eu_ohmrun_Fletcher._.environment(self,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,i),function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			success1(t);
			break;
		case 1:
			var e = res.e;
			failure1(e);
			break;
		}
	},function(err) {
		throw haxe_Exception.thrown(err);
	},{ fileName : "eu/ohmrun/fletcher/Modulate.hx", lineNumber : 251, className : "eu.ohmrun.fletcher.ModulateLift", methodName : "environment"});
};
eu_ohmrun_fletcher_ReframeLift.convert = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_fletcher_ReframeLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(eu_ohmrun_fletcher_ConvertLift.first(fn))));
};
eu_ohmrun_fletcher_ReframeLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_ReframeLift.lift(eu_ohmrun_fletcher_ReframeLift.modulate(self,eu_ohmrun_fletcher_ConvertLift.toModulate(eu_ohmrun_fletcher_ConvertLift.first(eu_ohmrun_fletcher_ConvertArg.bump(eu_ohmrun_fletcher_ConvertArg.fromArgFun1R(fn))))));
};
var eu_ohmrun_fletcher_Reframe = {};
eu_ohmrun_fletcher_Reframe._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Reframe.lift = function(wml) {
	return wml;
};
eu_ohmrun_fletcher_Reframe.pure = function(o) {
	return eu_ohmrun_Fletcher._.map(eu_ohmrun_fletcher_Modulate.unit(),function(oc) {
		var _g = function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		};
		var tI = o;
		var fn = function(tII) {
			return _g(tI,tII);
		};
		var self;
		switch(oc._hx_index) {
		case 0:
			var t = oc.t;
			self = stx_nano_UpshotSum.Accept(fn(t));
			break;
		case 1:
			var e = oc.e;
			self = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self;
	},{ fileName : "eu/ohmrun/fletcher/Reframe.hx", lineNumber : 13, className : "eu.ohmrun.fletcher._Reframe.Reframe_Impl_", methodName : "pure"});
};
eu_ohmrun_fletcher_Reframe.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Reframe.toModulate = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Reframe.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
eu_ohmrun_fletcher_Reframe.fromModulate = function(self) {
	return self;
};
var eu_ohmrun_fletcher_RegulateLift = function() { };
$hxClasses["eu.ohmrun.fletcher.RegulateLift"] = eu_ohmrun_fletcher_RegulateLift;
eu_ohmrun_fletcher_RegulateLift.__name__ = "eu.ohmrun.fletcher.RegulateLift";
var eu_ohmrun_fletcher_Regulate = {};
eu_ohmrun_fletcher_Regulate._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Regulate.lift = function(self) {
	return eu_ohmrun_fletcher_Regulate._new(self);
};
eu_ohmrun_fletcher_Regulate.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Regulate.get_self = function(this1) {
	return eu_ohmrun_fletcher_Regulate.lift(this1);
};
var eu_ohmrun_fletcher_Resolve = {};
eu_ohmrun_fletcher_Resolve._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Resolve.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Resolve.fromResolvePropose = function(self) {
	return eu_ohmrun_FletcherLift.then(self,eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(i,0,{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 17, className : "eu.ohmrun.fletcher._Resolve.Resolve_Impl_", methodName : "fromResolvePropose"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 16, className : "eu.ohmrun.fletcher._Resolve.Resolve_Impl_", methodName : "fromResolvePropose"}));
};
eu_ohmrun_fletcher_Resolve.fromFunErrPropose = function(arw) {
	return new eu_ohmrun_fletcher_term_Then(new eu_ohmrun_fletcher_term_AnonSync(arw,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),eu_ohmrun_Fletcher.Anon(function(i,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(i,0,{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 27, className : "eu.ohmrun.fletcher._Resolve.Resolve_Impl_", methodName : "fromFunErrPropose"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 26, className : "eu.ohmrun.fletcher._Resolve.Resolve_Impl_", methodName : "fromFunErrPropose"}),{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 24, className : "eu.ohmrun.fletcher._Resolve.Resolve_Impl_", methodName : "fromFunErrPropose"});
};
eu_ohmrun_fletcher_Resolve.fromErrChunk = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Resolve.unit = function() {
	return new eu_ohmrun_fletcher_term_AnonSync(function(e) {
		return stx_nano_ChunkSum.Tap;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
eu_ohmrun_fletcher_Resolve.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Resolve.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Resolve.toFletcher = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_ResolveLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ResolveLift"] = eu_ohmrun_fletcher_ResolveLift;
eu_ohmrun_fletcher_ResolveLift.__name__ = "eu.ohmrun.fletcher.ResolveLift";
eu_ohmrun_fletcher_ResolveLift.toModulate = function(self) {
	return eu_ohmrun_Fletcher.Anon(function(i,cont) {
		switch(i._hx_index) {
		case 0:
			var t = i.t;
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
			return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			})));
		case 1:
			var e = i.e;
			var e1 = e;
			var next = eu_ohmrun_Fletcher._.map(self,function(chk) {
				switch(chk._hx_index) {
				case 0:
					var v = chk.v;
					return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v);
				case 1:
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e1),{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 57, className : "eu.ohmrun.fletcher.ResolveLift", methodName : "toModulate"});
				case 2:
					var e = chk.err;
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 56, className : "eu.ohmrun.fletcher.ResolveLift", methodName : "toModulate"});
				}
			},{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 53, className : "eu.ohmrun.fletcher.ResolveLift", methodName : "toModulate"});
			var self1 = cont;
			var receiver = eu_ohmrun_Fletcher.forward(next,e1,{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 60, className : "eu.ohmrun.fletcher.ResolveLift", methodName : "toModulate"});
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive inner called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					oc.handle(function(out) {
						ip.trigger(out);
					});
					return null;
				})));
			})));
		}
	},{ fileName : "eu/ohmrun/fletcher/Resolve.hx", lineNumber : 49, className : "eu.ohmrun.fletcher.ResolveLift", methodName : "toModulate"});
};
var eu_ohmrun_fletcher_ScenarioArgSum = $hxEnums["eu.ohmrun.fletcher.ScenarioArgSum"] = { __ename__:"eu.ohmrun.fletcher.ScenarioArgSum",__constructs__:null
};
eu_ohmrun_fletcher_ScenarioArgSum.__constructs__ = [];
var eu_ohmrun_fletcher_ScenarioArg = {};
eu_ohmrun_fletcher_ScenarioArg._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_ScenarioArg.lift = function(self) {
	return eu_ohmrun_fletcher_ScenarioArg._new(self);
};
eu_ohmrun_fletcher_ScenarioArg.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_ScenarioArg.get_self = function(this1) {
	return eu_ohmrun_fletcher_ScenarioArg.lift(this1);
};
var eu_ohmrun_fletcher_ScenarioLift = function() { };
$hxClasses["eu.ohmrun.fletcher.ScenarioLift"] = eu_ohmrun_fletcher_ScenarioLift;
eu_ohmrun_fletcher_ScenarioLift.__name__ = "eu.ohmrun.fletcher.ScenarioLift";
eu_ohmrun_fletcher_ScenarioLift.lift = function(self) {
	return eu_ohmrun_fletcher_Scenario.lift(self);
};
eu_ohmrun_fletcher_ScenarioLift.attempt = function(self,that) {
	return eu_ohmrun_fletcher_Scenario.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(r,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(eu_ohmrun_fletcher_DiffuseLift.attempt(new eu_ohmrun_fletcher_term_AnonSync(function(chk) {
			return chk;
		},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),that),function(chk) {
			return stx_nano_EquityLift.rebase(r,chk);
		},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 47, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "attempt"}),stx_nano_EquityLift.has_value(r) ? stx_nano_ChunkSum.Val(r.value) : stx_nano_EquityLift.has_error(r) ? stx_nano_ChunkSum.End(r.get_error().toError()) : stx_nano_ChunkSum.Tap,{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 47, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "attempt"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 44, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "attempt"}),{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 43, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "attempt"}));
};
eu_ohmrun_fletcher_ScenarioLift.venture = function(self,that) {
	return eu_ohmrun_fletcher_Scenario.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(r,cont) {
		var self = cont;
		var receiver = stx_LiftIf.if_else(stx_nano_EquityLift.has_value(r),function() {
			return eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(that,function(n) {
				return stx_nano_Equity.make(r.asset,n.value,stx_fail_Refuse.concat(r.get_error(),n.get_error()));
			},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 61, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "venture"}),r.value,{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 61, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "venture"});
		},function() {
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_EquityLift.clear(r));
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 57, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "venture"}),{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "venture"}));
};
eu_ohmrun_fletcher_ScenarioLift.initiate = function(self,that) {
	return eu_ohmrun_fletcher_Scenario.lift(new eu_ohmrun_fletcher_term_Then(self,eu_ohmrun_Fletcher.Anon(function(r,cont) {
		var self = cont;
		var receiver = eu_ohmrun_Fletcher.forward(eu_ohmrun_FletcherLift.map(that,function(res) {
			var receiver;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				receiver = stx_nano_EquityLift.rebase(r,stx_nano_ChunkSum.Val(t));
				break;
			case 1:
				var e = res.e;
				receiver = stx_nano_EquityLift.rebase(r,stx_nano_ChunkSum.End(e));
				break;
			}
			return receiver;
		},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 77, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "initiate"}),r.asset,{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 77, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "initiate"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 74, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "initiate"}),{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 72, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "initiate"}));
};
eu_ohmrun_fletcher_ScenarioLift.errate = function(self,fn) {
	return eu_ohmrun_fletcher_Scenario.lift(eu_ohmrun_Fletcher.Anon(function(equity,cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(equity));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 92, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "errate"}));
		var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,equity.get_error());
		var v = stx_fail_Refuse.unit();
		var error;
		if(self1._hx_index == 0) {
			var v1 = self1.v;
			error = v1;
		} else {
			error = v;
		}
		var self1 = cont;
		var receiver = stx_LiftIf.if_else(stx_nano_EquityLift.has_error(equity),function() {
			var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_EquityLift.clear(equity));
			return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
				trg.trigger(value);
				return trg;
			}));
		},function() {
			return eu_ohmrun_fletcher_ReceiverLift.map(eu_ohmrun_Fletcher.forward(self,stx_nano_EquityLift.defuse(equity),{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 98, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "errate"}),function(equity) {
				return stx_nano_EquityLift.errata(equity,function(x) {
					return stx_fail_Refuse.concat(error,stx_fail_Refuse.errate(x,fn));
				});
			});
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 90, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "errate"}));
};
eu_ohmrun_fletcher_ScenarioLift.provide = function(self,p) {
	return eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_Fletcher.forward(self,p,{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 110, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "provide"});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Scenario.hx", lineNumber : 108, className : "eu.ohmrun.fletcher.ScenarioLift", methodName : "provide"});
};
var eu_ohmrun_fletcher_Scenario = {};
eu_ohmrun_fletcher_Scenario._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Scenario.lift = function(self) {
	return eu_ohmrun_fletcher_Scenario._new(self);
};
eu_ohmrun_fletcher_Scenario.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Scenario.get_self = function(this1) {
	return eu_ohmrun_fletcher_Scenario.lift(this1);
};
eu_ohmrun_fletcher_Scenario.toFletcher = function(this1) {
	return eu_ohmrun_Fletcher.lift(this1);
};
var eu_ohmrun_fletcher_Terminal = {};
eu_ohmrun_fletcher_Terminal.unit = function() {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		var val = fn(new tink_core_FutureTrigger());
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("terminal AFTER unit()");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
		return val;
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
};
eu_ohmrun_fletcher_Terminal.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Terminal._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Terminal.toSettle = function(this1) {
	return eu_ohmrun_fletcher_core_Settle._new(this1.toCont());
};
eu_ohmrun_fletcher_Terminal.toTerminal = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Terminal.prj = function(this1) {
	return this1;
};
var eu_ohmrun_fletcher_TerminalLift = function() { };
$hxClasses["eu.ohmrun.fletcher.TerminalLift"] = eu_ohmrun_fletcher_TerminalLift;
eu_ohmrun_fletcher_TerminalLift.__name__ = "eu.ohmrun.fletcher.TerminalLift";
eu_ohmrun_fletcher_TerminalLift.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_TerminalLift.error = function(self,e) {
	var value = stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,e);
	return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
};
eu_ohmrun_fletcher_TerminalLift.value = function(self,r) {
	var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,r);
	return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
};
eu_ohmrun_fletcher_TerminalLift.issue = function(self,value) {
	return eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(self),function(trg) {
		trg.trigger(value);
		return trg;
	}));
};
eu_ohmrun_fletcher_TerminalLift.later = function(self,ft,pos) {
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("later " + Std.string(self));
	new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self) + " called");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var next = new tink_core_FutureTrigger();
		var fst = self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
			ft.handle(function(res) {
				t_ipt.trigger(res);
				next.trigger(res);
			});
			return null;
		})));
		var snd = r_ipt.apply(next);
		return stx_stream_WorkLift.seq(fst,snd);
	}));
};
eu_ohmrun_fletcher_TerminalLift.tap = function(self,fn) {
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("tap " + Std.string(self));
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 77, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "tap"}));
	return eu_ohmrun_fletcher_TerminalLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(cont) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("tap " + Std.string(self) + " called");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 80, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "tap"}));
		return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			p.handle(fn);
			return cont(p);
		})));
	},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 78, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "tap"})));
};
eu_ohmrun_fletcher_TerminalLift.mod = function(self,g) {
	return eu_ohmrun_fletcher_TerminalLift.lift(eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,g)));
};
eu_ohmrun_fletcher_TerminalLift.receive = function(self,receiver) {
	var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("receive " + Std.string(self));
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
	return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive inner called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			oc.handle(function(out) {
				ip.trigger(out);
			});
			return null;
		})));
	})));
};
var eu_ohmrun_fletcher_TerminalInput = {};
eu_ohmrun_fletcher_TerminalInput._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_TerminalInput.lift = function(self) {
	return eu_ohmrun_fletcher_TerminalInput._new(self);
};
eu_ohmrun_fletcher_TerminalInput.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_TerminalInput.get_self = function(this1) {
	return eu_ohmrun_fletcher_TerminalInput._new(this1);
};
eu_ohmrun_fletcher_TerminalInput.toReceiverInput = function(this1) {
	return eu_ohmrun_fletcher_ReceiverInput.lift(this1);
};
eu_ohmrun_fletcher_TerminalInput.unit = function() {
	return new tink_core_FutureTrigger();
};
var eu_ohmrun_fletcher_TerminalSink = {};
eu_ohmrun_fletcher_TerminalSink._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_TerminalSink.lift = function(self) {
	return eu_ohmrun_fletcher_TerminalSink._new(self);
};
eu_ohmrun_fletcher_TerminalSink.seq = function(this1,that) {
	return eu_ohmrun_fletcher_TerminalSink._new(function(oc) {
		return stx_stream_WorkLift.seq(this1(oc),that(oc));
	});
};
eu_ohmrun_fletcher_TerminalSink.unit = function() {
	return eu_ohmrun_fletcher_TerminalSink._new(function(x) {
		return null;
	});
};
eu_ohmrun_fletcher_TerminalSink.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_TerminalSink.get_self = function(this1) {
	return eu_ohmrun_fletcher_TerminalSink._new(this1);
};
eu_ohmrun_fletcher_TerminalSink.reply = function(this1) {
	return this1(new tink_core_FutureTrigger());
};
var eu_ohmrun_fletcher_VentureLift = function() { };
$hxClasses["eu.ohmrun.fletcher.VentureLift"] = eu_ohmrun_fletcher_VentureLift;
eu_ohmrun_fletcher_VentureLift.__name__ = "eu.ohmrun.fletcher.VentureLift";
eu_ohmrun_fletcher_VentureLift.lift = function(self) {
	return self;
};
var eu_ohmrun_fletcher_Venture = {};
eu_ohmrun_fletcher_Venture._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_Venture.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_Venture.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Venture.get_self = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_Venture.fromFun = function(fn) {
	return new eu_ohmrun_fletcher_term_AnonSync(fn,{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
var eu_ohmrun_fletcher_core_ContApi = function() { };
$hxClasses["eu.ohmrun.fletcher.core.ContApi"] = eu_ohmrun_fletcher_core_ContApi;
eu_ohmrun_fletcher_core_ContApi.__name__ = "eu.ohmrun.fletcher.core.ContApi";
eu_ohmrun_fletcher_core_ContApi.__isInterface__ = true;
eu_ohmrun_fletcher_core_ContApi.prototype = {
	uuid: null
	,toString: null
	,apply: null
	,toCont: null
	,__class__: eu_ohmrun_fletcher_core_ContApi
};
var eu_ohmrun_fletcher_core_ContCls = function() {
	this.uuid = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxxx");
};
$hxClasses["eu.ohmrun.fletcher.core.ContCls"] = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_ContCls.__name__ = "eu.ohmrun.fletcher.core.ContCls";
eu_ohmrun_fletcher_core_ContCls.__interfaces__ = [eu_ohmrun_fletcher_core_ContApi];
eu_ohmrun_fletcher_core_ContCls.prototype = {
	apply: null
	,toCont: function() {
		return this;
	}
	,uuid: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ":" + this.uuid;
	}
	,__class__: eu_ohmrun_fletcher_core_ContCls
};
var eu_ohmrun_fletcher_core_ContLift = function() { };
$hxClasses["eu.ohmrun.fletcher.core.ContLift"] = eu_ohmrun_fletcher_core_ContLift;
eu_ohmrun_fletcher_core_ContLift.__name__ = "eu.ohmrun.fletcher.core.ContLift";
eu_ohmrun_fletcher_core_ContLift.map = function(self,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonMap(self,fn);
};
eu_ohmrun_fletcher_core_ContLift.flat_map = function(self,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonFlatMap(self,fn);
};
eu_ohmrun_fletcher_core_ContLift.zip_with = function(self,that,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonZipWith(self,that,fn);
};
eu_ohmrun_fletcher_core_ContLift.mod = function(self,fn) {
	return new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,fn);
};
var eu_ohmrun_fletcher_core_Cont = {};
eu_ohmrun_fletcher_core_Cont._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_core_Cont.lift = function(self) {
	return self;
};
eu_ohmrun_fletcher_core_Cont.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_core_Cont.get_self = function(this1) {
	return eu_ohmrun_fletcher_core_Cont.lift(this1);
};
eu_ohmrun_fletcher_core_Cont.Each = function(self,fn) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonEach(self,fn));
};
eu_ohmrun_fletcher_core_Cont.Mod = function(self,fn) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMod(self,fn));
};
eu_ohmrun_fletcher_core_Cont.Anon = function(self) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(self));
};
eu_ohmrun_fletcher_core_Cont.AnonAnon = function(self,pos) {
	return eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(self,pos));
};
var eu_ohmrun_fletcher_core_Context = {};
eu_ohmrun_fletcher_core_Context.pure = function(environment) {
	return eu_ohmrun_fletcher_core_Context.make(environment);
};
eu_ohmrun_fletcher_core_Context.make = function(environment,on_value,on_error) {
	var result = new eu_ohmrun_fletcher_core_ContextCls(environment);
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_value))) {
		result.on_value = on_value;
	}
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,on_error))) {
		result.on_error = on_error;
	}
	return result;
};
eu_ohmrun_fletcher_core_Context.fromInput = function(environment) {
	return eu_ohmrun_fletcher_core_Context.make(environment);
};
var eu_ohmrun_fletcher_core_ContextCls = function(environment) {
	this.environment = environment;
};
$hxClasses["eu.ohmrun.fletcher.core.ContextCls"] = eu_ohmrun_fletcher_core_ContextCls;
eu_ohmrun_fletcher_core_ContextCls.__name__ = "eu.ohmrun.fletcher.core.ContextCls";
eu_ohmrun_fletcher_core_ContextCls.prototype = {
	environment: null
	,on_error: function(e) {
		throw haxe_Exception.thrown(e);
	}
	,on_value: function(r) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),2).toLogApi().comply(new stx_log_EntryCtr().pure(r),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/core/ContextCls.hx", lineNumber : 12, className : "eu.ohmrun.fletcher.core.ContextCls", methodName : "on_value"}));
	}
	,__class__: eu_ohmrun_fletcher_core_ContextCls
};
var eu_ohmrun_fletcher_core_SettleLift = function() { };
$hxClasses["eu.ohmrun.fletcher.core.SettleLift"] = eu_ohmrun_fletcher_core_SettleLift;
eu_ohmrun_fletcher_core_SettleLift.__name__ = "eu.ohmrun.fletcher.core.SettleLift";
eu_ohmrun_fletcher_core_SettleLift.lift = function(self) {
	return eu_ohmrun_fletcher_core_Settle._new(self);
};
eu_ohmrun_fletcher_core_SettleLift.map = function(self,fn) {
	return eu_ohmrun_fletcher_core_SettleLift.lift(new eu_ohmrun_fletcher_core_cont_term_AnonMap(eu_ohmrun_fletcher_core_Settle.toCont(self),fn));
};
var eu_ohmrun_fletcher_core_Settle = {};
eu_ohmrun_fletcher_core_Settle._new = function(self) {
	return self;
};
eu_ohmrun_fletcher_core_Settle.lift = function(self) {
	return eu_ohmrun_fletcher_core_Settle._new(self);
};
eu_ohmrun_fletcher_core_Settle.prj = function(this1) {
	return this1;
};
eu_ohmrun_fletcher_core_Settle.get_self = function(this1) {
	return eu_ohmrun_fletcher_core_Settle._new(this1);
};
eu_ohmrun_fletcher_core_Settle.unit = function() {
	return eu_ohmrun_fletcher_core_Settle._new(new eu_ohmrun_fletcher_core_settle_term_Unit());
};
eu_ohmrun_fletcher_core_Settle.pure = function(v) {
	return eu_ohmrun_fletcher_core_Settle._new(new eu_ohmrun_fletcher_core_settle_term_Pure(v));
};
eu_ohmrun_fletcher_core_Settle.toCont = function(this1) {
	return this1.toCont();
};
var eu_ohmrun_fletcher_core_cont_term_Anon = function(_apply) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this._apply = _apply;
	this.done = false;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Anon"] = eu_ohmrun_fletcher_core_cont_term_Anon;
eu_ohmrun_fletcher_core_cont_term_Anon.__name__ = "eu.ohmrun.fletcher.core.cont.term.Anon";
eu_ohmrun_fletcher_core_cont_term_Anon.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_Anon.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	_apply: null
	,done: null
	,apply: function(p) {
		if(!this.done) {
			this.done = true;
			return this._apply(p);
		} else {
			throw haxe_Exception.thrown("already called");
		}
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Anon
});
var eu_ohmrun_fletcher_core_cont_term_AnonAnon = function(_apply,pos) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this._apply = _apply;
	this.pos = pos;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonAnon"] = eu_ohmrun_fletcher_core_cont_term_AnonAnon;
eu_ohmrun_fletcher_core_cont_term_AnonAnon.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonAnon";
eu_ohmrun_fletcher_core_cont_term_AnonAnon.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_AnonAnon.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	pos: null
	,_apply: null
	,res: null
	,apply: function(p) {
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(p) + " " + (this.pos == null ? "null" : stx_nano_Position.toString(this.pos)));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/core/cont/term/AnonAnon.hx", lineNumber : 14, className : "eu.ohmrun.fletcher.core.cont.term.AnonAnon", methodName : "apply"}));
		this.res = this._apply($bind(p,p.apply));
		return this.res;
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonAnon
});
var eu_ohmrun_fletcher_core_cont_term_Delegate = function(delegate) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this.delegate = delegate;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Delegate"] = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Delegate.__name__ = "eu.ohmrun.fletcher.core.cont.term.Delegate";
eu_ohmrun_fletcher_core_cont_term_Delegate.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_Delegate.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	delegate: null
	,__class__: eu_ohmrun_fletcher_core_cont_term_Delegate
});
var eu_ohmrun_fletcher_core_cont_term_Each = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Each"] = eu_ohmrun_fletcher_core_cont_term_Each;
eu_ohmrun_fletcher_core_cont_term_Each.__name__ = "eu.ohmrun.fletcher.core.cont.term.Each";
eu_ohmrun_fletcher_core_cont_term_Each.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Each.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	each: null
	,apply: function(fn) {
		var _gthis = this;
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			_gthis.each(p);
			return fn.apply(p);
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Each
});
var eu_ohmrun_fletcher_core_cont_term_AnonEach = function(delegate,_each) {
	eu_ohmrun_fletcher_core_cont_term_Each.call(this,delegate);
	this._each = _each;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonEach"] = eu_ohmrun_fletcher_core_cont_term_AnonEach;
eu_ohmrun_fletcher_core_cont_term_AnonEach.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonEach";
eu_ohmrun_fletcher_core_cont_term_AnonEach.__super__ = eu_ohmrun_fletcher_core_cont_term_Each;
eu_ohmrun_fletcher_core_cont_term_AnonEach.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Each.prototype,{
	_each: null
	,each: function(p) {
		this._each(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonEach
});
var eu_ohmrun_fletcher_core_cont_term_FlatMap = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.FlatMap"] = eu_ohmrun_fletcher_core_cont_term_FlatMap;
eu_ohmrun_fletcher_core_cont_term_FlatMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.FlatMap";
eu_ohmrun_fletcher_core_cont_term_FlatMap.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_FlatMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	flat_map: null
	,apply: function(fn) {
		var _gthis = this;
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return _gthis.flat_map(p).apply(fn);
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_FlatMap
});
var eu_ohmrun_fletcher_core_cont_term_AnonFlatMap = function(delegate,_flat_map) {
	eu_ohmrun_fletcher_core_cont_term_FlatMap.call(this,delegate);
	this._flat_map = _flat_map;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonFlatMap"] = eu_ohmrun_fletcher_core_cont_term_AnonFlatMap;
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonFlatMap";
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.__super__ = eu_ohmrun_fletcher_core_cont_term_FlatMap;
eu_ohmrun_fletcher_core_cont_term_AnonFlatMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_FlatMap.prototype,{
	_flat_map: null
	,flat_map: function(p) {
		return this._flat_map(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonFlatMap
});
var eu_ohmrun_fletcher_core_cont_term_Map = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Map"] = eu_ohmrun_fletcher_core_cont_term_Map;
eu_ohmrun_fletcher_core_cont_term_Map.__name__ = "eu.ohmrun.fletcher.core.cont.term.Map";
eu_ohmrun_fletcher_core_cont_term_Map.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Map.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	map: null
	,apply: function(fn) {
		var _gthis = this;
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("map " + Std.string(this) + " " + Std.string(fn));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/core/cont/term/Map.hx", lineNumber : 8, className : "eu.ohmrun.fletcher.core.cont.term.Map", methodName : "apply"}));
		return this.delegate.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("map apply " + Std.string(_gthis.delegate) + " " + Std.string(fn));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/core/cont/term/Map.hx", lineNumber : 12, className : "eu.ohmrun.fletcher.core.cont.term.Map", methodName : "apply"}));
			var next = _gthis.map(p);
			var done = fn.apply(next);
			return done;
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Map
});
var eu_ohmrun_fletcher_core_cont_term_AnonMap = function(delegate,_map) {
	eu_ohmrun_fletcher_core_cont_term_Map.call(this,delegate);
	this._map = _map;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonMap"] = eu_ohmrun_fletcher_core_cont_term_AnonMap;
eu_ohmrun_fletcher_core_cont_term_AnonMap.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonMap";
eu_ohmrun_fletcher_core_cont_term_AnonMap.__super__ = eu_ohmrun_fletcher_core_cont_term_Map;
eu_ohmrun_fletcher_core_cont_term_AnonMap.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Map.prototype,{
	_map: null
	,map: function(p) {
		return this._map(p);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonMap
});
var eu_ohmrun_fletcher_core_cont_term_Mod = function(delegate) {
	eu_ohmrun_fletcher_core_cont_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.Mod"] = eu_ohmrun_fletcher_core_cont_term_Mod;
eu_ohmrun_fletcher_core_cont_term_Mod.__name__ = "eu.ohmrun.fletcher.core.cont.term.Mod";
eu_ohmrun_fletcher_core_cont_term_Mod.__super__ = eu_ohmrun_fletcher_core_cont_term_Delegate;
eu_ohmrun_fletcher_core_cont_term_Mod.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Delegate.prototype,{
	mod: null
	,apply: function(fn) {
		return this.mod(this.delegate.apply(fn));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_Mod
});
var eu_ohmrun_fletcher_core_cont_term_AnonMod = function(delegate,_mod) {
	eu_ohmrun_fletcher_core_cont_term_Mod.call(this,delegate);
	this._mod = _mod;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonMod"] = eu_ohmrun_fletcher_core_cont_term_AnonMod;
eu_ohmrun_fletcher_core_cont_term_AnonMod.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonMod";
eu_ohmrun_fletcher_core_cont_term_AnonMod.__super__ = eu_ohmrun_fletcher_core_cont_term_Mod;
eu_ohmrun_fletcher_core_cont_term_AnonMod.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_Mod.prototype,{
	_mod: null
	,mod: function(r) {
		return this._mod(r);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonMod
});
var eu_ohmrun_fletcher_core_cont_term_ZipWith = function(lhs,rhs) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.ZipWith"] = eu_ohmrun_fletcher_core_cont_term_ZipWith;
eu_ohmrun_fletcher_core_cont_term_ZipWith.__name__ = "eu.ohmrun.fletcher.core.cont.term.ZipWith";
eu_ohmrun_fletcher_core_cont_term_ZipWith.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_cont_term_ZipWith.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	lhs: null
	,rhs: null
	,zip: null
	,apply: function(fn) {
		var _gthis = this;
		return this.lhs.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(p) {
			return _gthis.rhs.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(pI) {
				return fn.apply(_gthis.zip(p,pI));
			})));
		})));
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_ZipWith
});
var eu_ohmrun_fletcher_core_cont_term_AnonZipWith = function(lhs,rhs,_zip) {
	eu_ohmrun_fletcher_core_cont_term_ZipWith.call(this,lhs,rhs);
	this._zip = _zip;
};
$hxClasses["eu.ohmrun.fletcher.core.cont.term.AnonZipWith"] = eu_ohmrun_fletcher_core_cont_term_AnonZipWith;
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.__name__ = "eu.ohmrun.fletcher.core.cont.term.AnonZipWith";
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.__super__ = eu_ohmrun_fletcher_core_cont_term_ZipWith;
eu_ohmrun_fletcher_core_cont_term_AnonZipWith.prototype = $extend(eu_ohmrun_fletcher_core_cont_term_ZipWith.prototype,{
	_zip: null
	,zip: function(l,r) {
		return this._zip(l,r);
	}
	,__class__: eu_ohmrun_fletcher_core_cont_term_AnonZipWith
});
var eu_ohmrun_fletcher_core_settle_term_Pure = function(value) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this.value = value;
};
$hxClasses["eu.ohmrun.fletcher.core.settle.term.Pure"] = eu_ohmrun_fletcher_core_settle_term_Pure;
eu_ohmrun_fletcher_core_settle_term_Pure.__name__ = "eu.ohmrun.fletcher.core.settle.term.Pure";
eu_ohmrun_fletcher_core_settle_term_Pure.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_settle_term_Pure.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	value: null
	,apply: function(fn) {
		return fn.apply(this.value);
	}
	,__class__: eu_ohmrun_fletcher_core_settle_term_Pure
});
var eu_ohmrun_fletcher_core_settle_term_Unit = function() {
	eu_ohmrun_fletcher_core_ContCls.call(this);
};
$hxClasses["eu.ohmrun.fletcher.core.settle.term.Unit"] = eu_ohmrun_fletcher_core_settle_term_Unit;
eu_ohmrun_fletcher_core_settle_term_Unit.__name__ = "eu.ohmrun.fletcher.core.settle.term.Unit";
eu_ohmrun_fletcher_core_settle_term_Unit.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_core_settle_term_Unit.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	apply: function(fn) {
		return null;
	}
	,__class__: eu_ohmrun_fletcher_core_settle_term_Unit
});
var eu_ohmrun_fletcher_receiver_term_Delegate = function(delegate) {
	eu_ohmrun_fletcher_core_ContCls.call(this);
	this.delegate = delegate;
};
$hxClasses["eu.ohmrun.fletcher.receiver.term.Delegate"] = eu_ohmrun_fletcher_receiver_term_Delegate;
eu_ohmrun_fletcher_receiver_term_Delegate.__name__ = "eu.ohmrun.fletcher.receiver.term.Delegate";
eu_ohmrun_fletcher_receiver_term_Delegate.__super__ = eu_ohmrun_fletcher_core_ContCls;
eu_ohmrun_fletcher_receiver_term_Delegate.prototype = $extend(eu_ohmrun_fletcher_core_ContCls.prototype,{
	delegate: null
	,__class__: eu_ohmrun_fletcher_receiver_term_Delegate
});
var eu_ohmrun_fletcher_receiver_term_Thunk = function(delegate) {
	eu_ohmrun_fletcher_receiver_term_Delegate.call(this,delegate);
};
$hxClasses["eu.ohmrun.fletcher.receiver.term.Thunk"] = eu_ohmrun_fletcher_receiver_term_Thunk;
eu_ohmrun_fletcher_receiver_term_Thunk.__name__ = "eu.ohmrun.fletcher.receiver.term.Thunk";
eu_ohmrun_fletcher_receiver_term_Thunk.__super__ = eu_ohmrun_fletcher_receiver_term_Delegate;
eu_ohmrun_fletcher_receiver_term_Thunk.prototype = $extend(eu_ohmrun_fletcher_receiver_term_Delegate.prototype,{
	apply: function(fn) {
		return this.delegate().apply(fn);
	}
	,__class__: eu_ohmrun_fletcher_receiver_term_Thunk
});
var stx_pico_ApplyApi = function() { };
$hxClasses["stx.pico.ApplyApi"] = stx_pico_ApplyApi;
stx_pico_ApplyApi.__name__ = "stx.pico.ApplyApi";
stx_pico_ApplyApi.__isInterface__ = true;
stx_pico_ApplyApi.prototype = {
	apply: null
	,toApply: null
	,__class__: stx_pico_ApplyApi
};
var stx_pico_ApplyCls = function() { };
$hxClasses["stx.pico.ApplyCls"] = stx_pico_ApplyCls;
stx_pico_ApplyCls.__name__ = "stx.pico.ApplyCls";
stx_pico_ApplyCls.__interfaces__ = [stx_pico_ApplyApi];
stx_pico_ApplyCls.prototype = {
	apply: null
	,toApply: function() {
		return this;
	}
	,__class__: stx_pico_ApplyCls
};
var eu_ohmrun_fletcher_receiver_$sink_term_Seq = function(lhs,rhs) {
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["eu.ohmrun.fletcher.receiver_sink.term.Seq"] = eu_ohmrun_fletcher_receiver_$sink_term_Seq;
eu_ohmrun_fletcher_receiver_$sink_term_Seq.__name__ = "eu.ohmrun.fletcher.receiver_sink.term.Seq";
eu_ohmrun_fletcher_receiver_$sink_term_Seq.__super__ = stx_pico_ApplyCls;
eu_ohmrun_fletcher_receiver_$sink_term_Seq.prototype = $extend(stx_pico_ApplyCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(p) {
		return stx_stream_WorkLift.seq(this.lhs.apply(p),this.rhs.apply(p));
	}
	,__class__: eu_ohmrun_fletcher_receiver_$sink_term_Seq
});
var eu_ohmrun_fletcher_receiver_$sink_term_Unit = function() {
};
$hxClasses["eu.ohmrun.fletcher.receiver_sink.term.Unit"] = eu_ohmrun_fletcher_receiver_$sink_term_Unit;
eu_ohmrun_fletcher_receiver_$sink_term_Unit.__name__ = "eu.ohmrun.fletcher.receiver_sink.term.Unit";
eu_ohmrun_fletcher_receiver_$sink_term_Unit.__super__ = stx_pico_ApplyCls;
eu_ohmrun_fletcher_receiver_$sink_term_Unit.prototype = $extend(stx_pico_ApplyCls.prototype,{
	apply: function(p) {
		return null;
	}
	,__class__: eu_ohmrun_fletcher_receiver_$sink_term_Unit
});
var eu_ohmrun_fletcher_term_Anon = function(_defer,pos) {
	eu_ohmrun_FletcherCls.call(this,pos);
	this._defer = _defer;
};
$hxClasses["eu.ohmrun.fletcher.term.Anon"] = eu_ohmrun_fletcher_term_Anon;
eu_ohmrun_fletcher_term_Anon.__name__ = "eu.ohmrun.fletcher.term.Anon";
eu_ohmrun_fletcher_term_Anon.__interfaces__ = [eu_ohmrun_FletcherApi];
eu_ohmrun_fletcher_term_Anon.__super__ = eu_ohmrun_FletcherCls;
eu_ohmrun_fletcher_term_Anon.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	_defer: null
	,defer: function(p,cont) {
		return this._defer(p,cont);
	}
	,__class__: eu_ohmrun_fletcher_term_Anon
});
var eu_ohmrun_fletcher_term_Sync = function(pos) {
	this.source = pos;
};
$hxClasses["eu.ohmrun.fletcher.term.Sync"] = eu_ohmrun_fletcher_term_Sync;
eu_ohmrun_fletcher_term_Sync.__name__ = "eu.ohmrun.fletcher.term.Sync";
eu_ohmrun_fletcher_term_Sync.__interfaces__ = [eu_ohmrun_FletcherApi];
eu_ohmrun_fletcher_term_Sync.prototype = {
	source: null
	,defer: function(p,cont) {
		var self = cont;
		var value = this.apply(p);
		var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	}
	,apply: null
	,stx_tag: null
	,get_stx_tag: function() {
		return -1;
	}
	,toFletcher: function() {
		return this;
	}
	,__class__: eu_ohmrun_fletcher_term_Sync
};
var eu_ohmrun_fletcher_term_AnonSync = function(_apply,pos) {
	eu_ohmrun_fletcher_term_Sync.call(this,pos);
	this._apply = _apply;
};
$hxClasses["eu.ohmrun.fletcher.term.AnonSync"] = eu_ohmrun_fletcher_term_AnonSync;
eu_ohmrun_fletcher_term_AnonSync.__name__ = "eu.ohmrun.fletcher.term.AnonSync";
eu_ohmrun_fletcher_term_AnonSync.__super__ = eu_ohmrun_fletcher_term_Sync;
eu_ohmrun_fletcher_term_AnonSync.prototype = $extend(eu_ohmrun_fletcher_term_Sync.prototype,{
	_apply: null
	,apply: function(p) {
		return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this._apply(p));
	}
	,__class__: eu_ohmrun_fletcher_term_AnonSync
});
var eu_ohmrun_fletcher_term_Then = function(lhs,rhs,pos) {
	eu_ohmrun_FletcherCls.call(this,pos);
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["eu.ohmrun.fletcher.term.Then"] = eu_ohmrun_fletcher_term_Then;
eu_ohmrun_fletcher_term_Then.__name__ = "eu.ohmrun.fletcher.term.Then";
eu_ohmrun_fletcher_term_Then.__super__ = eu_ohmrun_FletcherCls;
eu_ohmrun_fletcher_term_Then.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	lhs: null
	,rhs: null
	,defer: function(pI,cont) {
		var _gthis = this;
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + (this.source == null ? "null" : stx_nano_Position.toString(this.source)) + " " + Std.string(pI));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/term/Then.hx", lineNumber : 12, className : "eu.ohmrun.fletcher.term.Then", methodName : "defer"}));
		var a = eu_ohmrun_Fletcher.forward(this.lhs,pI,{ fileName : "eu/ohmrun/fletcher/term/Then.hx", lineNumber : 13, className : "eu.ohmrun.fletcher.term.Then", methodName : "defer"});
		var self = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.flat_fold(a,function(ok) {
			return eu_ohmrun_Fletcher.forward(_gthis.rhs,ok,{ fileName : "eu/ohmrun/fletcher/term/Then.hx", lineNumber : 15, className : "eu.ohmrun.fletcher.term.Then", methodName : "defer"});
		},function(no) {
			return eu_ohmrun_fletcher_Receiver.issue(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no),{ fileName : "eu/ohmrun/fletcher/Receiver.hx", lineNumber : 34, className : "eu.ohmrun.fletcher._Receiver.Receiver_Impl_", methodName : "error"});
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	}
	,__class__: eu_ohmrun_fletcher_term_Then
});
var eu_ohmrun_pml_AtomSum = $hxEnums["eu.ohmrun.pml.AtomSum"] = { __ename__:"eu.ohmrun.pml.AtomSum",__constructs__:null
	,AnSym: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"eu.ohmrun.pml.AtomSum",toString:$estr}; },$_._hx_name="AnSym",$_.__params__ = ["s"],$_)
	,B: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"eu.ohmrun.pml.AtomSum",toString:$estr}; },$_._hx_name="B",$_.__params__ = ["b"],$_)
	,N: ($_=function(fl) { return {_hx_index:2,fl:fl,__enum__:"eu.ohmrun.pml.AtomSum",toString:$estr}; },$_._hx_name="N",$_.__params__ = ["fl"],$_)
	,Str: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"eu.ohmrun.pml.AtomSum",toString:$estr}; },$_._hx_name="Str",$_.__params__ = ["str"],$_)
	,Nul: {_hx_name:"Nul",_hx_index:4,__enum__:"eu.ohmrun.pml.AtomSum",toString:$estr}
};
eu_ohmrun_pml_AtomSum.__constructs__ = [eu_ohmrun_pml_AtomSum.AnSym,eu_ohmrun_pml_AtomSum.B,eu_ohmrun_pml_AtomSum.N,eu_ohmrun_pml_AtomSum.Str,eu_ohmrun_pml_AtomSum.Nul];
var eu_ohmrun_pml_AtomLift = function() { };
$hxClasses["eu.ohmrun.pml.AtomLift"] = eu_ohmrun_pml_AtomLift;
eu_ohmrun_pml_AtomLift.__name__ = "eu.ohmrun.pml.AtomLift";
eu_ohmrun_pml_AtomLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var s = self.s;
		return "" + s;
	case 1:
		var b = self.b;
		if(b == null) {
			return "null";
		} else {
			return "" + b;
		}
		break;
	case 2:
		var fl = self.fl;
		return Std.string(fl);
	case 3:
		var str = self.str;
		return "" + str;
	case 4:
		return "";
	}
};
eu_ohmrun_pml_AtomLift.toPrimitive = function(self) {
	switch(self._hx_index) {
	case 0:
		var s = self.s;
		return stx_om_spine_SpineSum.Primate(stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Textal(s)));
	case 1:
		var b = self.b;
		return stx_om_spine_SpineSum.Primate(stx_nano_PrimitiveDef.PBool(b));
	case 2:
		var _g = self.fl;
		switch(_g._hx_index) {
		case 0:
			var fl = _g.fl;
			return stx_om_spine_SpineSum.Primate(stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(fl))));
		case 1:
			var fl = _g.int;
			return stx_om_spine_SpineSum.Primate(stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(fl))));
		}
		break;
	case 3:
		var str = self.str;
		return stx_om_spine_SpineSum.Primate(stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Textal(str)));
	case 4:
		return stx_om_spine_SpineSum.Unknown;
	}
};
var eu_ohmrun_pml_Atom = {};
eu_ohmrun_pml_Atom._new = function(self) {
	return self;
};
eu_ohmrun_pml_Atom.lift = function(self) {
	return eu_ohmrun_pml_Atom._new(self);
};
eu_ohmrun_pml_Atom.prj = function(this1) {
	return this1;
};
eu_ohmrun_pml_Atom.get_self = function(this1) {
	return eu_ohmrun_pml_Atom.lift(this1);
};
var eu_ohmrun_pml_Extract = function() { };
$hxClasses["eu.ohmrun.pml.Extract"] = eu_ohmrun_pml_Extract;
eu_ohmrun_pml_Extract.__name__ = "eu.ohmrun.pml.Extract";
eu_ohmrun_pml_Extract.handle_head = function(f) {
	return function(input) {
		var chk = input.content.head();
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return f(v);
		case 1:
			return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("empty input"));
		case 2:
			var e = chk.err;
			return stx_parse_lift_LiftParseFailureCodeResult.toParseResult_with(e,input);
		}
	};
};
eu_ohmrun_pml_Extract.unpack = function() {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			if(x._hx_index == 2) {
				var xs = x.list;
				var n = stx_ds_LinkedList.rfold(xs,function(next,memo) {
					return stx_parse_ParseInput.prepend(memo,next);
				},stx_parse_ParseInput.prepend(input.copy(input.content.drop(1)),eu_ohmrun_pml_PExprSum.PValue(eu_ohmrun_pml_AtomSum.Nul)));
				return stx_LiftParse.nil(n);
			} else {
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("Head not a group, but " + (x == null ? "null" : eu_ohmrun_pml_PExpr.toString(x))));
			}
		}))(input);
	},haxe_ds_Option.Some("unpack"),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 19, className : "eu.ohmrun.pml.Extract", methodName : "unpack"});
};
eu_ohmrun_pml_Extract.wordish = function() {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			switch(x._hx_index) {
			case 0:
				var x1 = x.name;
				return stx_LiftParse.ok(input.copy(input.content.drop(1)),x1);
			case 4:
				var _g = x.value;
				switch(_g._hx_index) {
				case 0:
					var s = _g.s;
					return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
				case 3:
					var s = _g.str;
					return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
				default:
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not wordish but " + (x == null ? "null" : eu_ohmrun_pml_PExpr.toString(x))));
				}
				break;
			default:
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not wordish but " + (x == null ? "null" : eu_ohmrun_pml_PExpr.toString(x))));
			}
		}))(input);
	},haxe_ds_Option.Some("wordish"),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 36, className : "eu.ohmrun.pml.Extract", methodName : "wordish"});
};
eu_ohmrun_pml_Extract.nul = function(name) {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			if(x._hx_index == 4) {
				if(x.value._hx_index == 4) {
					return stx_LiftParse.nil(input.copy(input.content.drop(1)));
				} else {
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not Nul " + name));
				}
			} else {
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not Nul " + name));
			}
		}))(input);
	},haxe_ds_Option.Some("nul " + name),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 49, className : "eu.ohmrun.pml.Extract", methodName : "nul"});
};
eu_ohmrun_pml_Extract.symbol = function(name) {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			if(x._hx_index == 4) {
				var _g = x.value;
				if(_g._hx_index == 0) {
					var _g1 = _g.s;
					var s = _g1;
					if(s == name) {
						return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
					} else {
						var s = _g1;
						return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("symbol should be " + name + ", but is " + s));
					}
				} else {
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("" + (x == null ? "null" : eu_ohmrun_pml_PExpr.toString(x)) + " not a symbol"));
				}
			} else {
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("" + (x == null ? "null" : eu_ohmrun_pml_PExpr.toString(x)) + " not a symbol"));
			}
		}))(input);
	},haxe_ds_Option.Some("symbol"),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 63, className : "eu.ohmrun.pml.Extract", methodName : "symbol"});
};
eu_ohmrun_pml_Extract.text = function(name) {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			switch(x._hx_index) {
			case 0:
				var _g = x.name;
				var s = _g;
				if(s == name) {
					return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
				} else {
					var s = _g;
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("text should be " + name + ", but is " + s));
				}
				break;
			case 4:
				var _g = x.value;
				switch(_g._hx_index) {
				case 0:
					var _g1 = _g.s;
					var s = _g1;
					if(s == name) {
						return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
					} else {
						var s = _g1;
						return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("text should be " + name + ", but is " + s));
					}
					break;
				case 3:
					var _g1 = _g.str;
					var s = _g1;
					if(s == name) {
						return stx_LiftParse.ok(input.copy(input.content.drop(1)),s);
					} else {
						var s = _g1;
						return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("text should be " + name + ", but is " + s));
					}
					break;
				default:
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not any type of text"));
				}
				break;
			default:
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("not any type of text"));
			}
		}))(input);
	},haxe_ds_Option.Some("string"),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 77, className : "eu.ohmrun.pml.Extract", methodName : "text"});
};
eu_ohmrun_pml_Extract.matches = function(p) {
	return new stx_parse_parser_term_Anon(function(ipt) {
		var _g = ipt.content.head();
		if(_g._hx_index == 0) {
			var _g1 = _g.v;
			switch(_g1._hx_index) {
			case 0:
				var s = _g1.name;
				var result = p.apply(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(s)));
				if(result.get_error().is_defined() == false) {
					var self = result.value;
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),t);
					case 1:
						return stx_LiftParse.nil(ipt.copy(ipt.content.drop(1)));
					}
				} else {
					return stx_parse_ParseResult.make(ipt,haxe_ds_Option.None,result.get_error());
				}
				break;
			case 4:
				var _g = _g1.value;
				switch(_g._hx_index) {
				case 0:
					var s = _g.s;
					var result = p.apply(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(s)));
					if(result.get_error().is_defined() == false) {
						var self = result.value;
						switch(self._hx_index) {
						case 0:
							var t = self.v;
							return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),t);
						case 1:
							return stx_LiftParse.nil(ipt.copy(ipt.content.drop(1)));
						}
					} else {
						return stx_parse_ParseResult.make(ipt,haxe_ds_Option.None,result.get_error());
					}
					break;
				case 3:
					var s = _g.str;
					var result = p.apply(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(s)));
					if(result.get_error().is_defined() == false) {
						var self = result.value;
						switch(self._hx_index) {
						case 0:
							var t = self.v;
							return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),t);
						case 1:
							return stx_LiftParse.nil(ipt.copy(ipt.content.drop(1)));
						}
					} else {
						return stx_parse_ParseResult.make(ipt,haxe_ds_Option.None,result.get_error());
					}
					break;
				default:
					return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("not any type of text"));
				}
				break;
			default:
				return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("not any type of text"));
			}
		} else {
			return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("not any type of text"));
		}
	},haxe_ds_Option.Some("matches"),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 95, className : "eu.ohmrun.pml.Extract", methodName : "matches"});
};
eu_ohmrun_pml_Extract.imbibe = function(p,name) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(eu_ohmrun_pml_Extract.unpack(),p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),eu_ohmrun_pml_Extract.nul(name),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
};
eu_ohmrun_pml_Extract.fmap = function(f,name) {
	return new stx_parse_parser_term_Anon(function(input) {
		return (eu_ohmrun_pml_Extract.handle_head(function(x) {
			var _g = f(x);
			switch(_g._hx_index) {
			case 0:
				var x = _g.v;
				return stx_LiftParse.ok(input.copy(input.content.drop(1)),x);
			case 1:
				return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("failed " + name));
			}
		}))(input);
	},stx_pico_Option.fromNullT(name),{ fileName : "eu/ohmrun/pml/Extract.hx", lineNumber : 121, className : "eu.ohmrun.pml.Extract", methodName : "fmap"});
};
var eu_ohmrun_pml_Logging = function() { };
$hxClasses["eu.ohmrun.pml.Logging"] = eu_ohmrun_pml_Logging;
eu_ohmrun_pml_Logging.__name__ = "eu.ohmrun.pml.Logging";
eu_ohmrun_pml_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "eu/ohmrun/pml/Logging.hx", lineNumber : 9, className : "eu.ohmrun.pml.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var eu_ohmrun_pml_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["eu.ohmrun.pml.Module"] = eu_ohmrun_pml_Module;
eu_ohmrun_pml_Module.__name__ = "eu.ohmrun.pml.Module";
eu_ohmrun_pml_Module.__super__ = stx_pico_Clazz;
eu_ohmrun_pml_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	parse: function(string) {
		return eu_ohmrun_pml_PExpr.parse(string);
	}
	,parseI: function() {
		var p = new stx_parse_pml_Parser();
		var l = stx_parse_pml_Lexer;
		return function(input) {
			var a = l.main.apply(input);
			if(a.get_error().is_defined() == false) {
				var self = a.value;
				switch(self._hx_index) {
				case 0:
					var t = self.v;
					return p.main().apply(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj(t))));
				case 1:
					return stx_LiftParse.no(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array([])),stx_fail_ParseFailureCode.fromString("no lexed tokens"));
				}
			} else {
				return stx_parse_ParseResult.make(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj([]))),haxe_ds_Option.None,a.get_error());
			}
		};
	}
	,__class__: eu_ohmrun_pml_Module
});
var eu_ohmrun_pml_Num = $hxEnums["eu.ohmrun.pml.Num"] = { __ename__:"eu.ohmrun.pml.Num",__constructs__:null
	,KLFloat: ($_=function(fl) { return {_hx_index:0,fl:fl,__enum__:"eu.ohmrun.pml.Num",toString:$estr}; },$_._hx_name="KLFloat",$_.__params__ = ["fl"],$_)
	,KLInt: ($_=function(int) { return {_hx_index:1,int:int,__enum__:"eu.ohmrun.pml.Num",toString:$estr}; },$_._hx_name="KLInt",$_.__params__ = ["int"],$_)
};
eu_ohmrun_pml_Num.__constructs__ = [eu_ohmrun_pml_Num.KLFloat,eu_ohmrun_pml_Num.KLInt];
var eu_ohmrun_pml_PExprSum = $hxEnums["eu.ohmrun.pml.PExprSum"] = { __ename__:"eu.ohmrun.pml.PExprSum",__constructs__:null
	,PLabel: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PLabel",$_.__params__ = ["name"],$_)
	,PApply: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PApply",$_.__params__ = ["name"],$_)
	,PGroup: ($_=function(list) { return {_hx_index:2,list:list,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PGroup",$_.__params__ = ["list"],$_)
	,PArray: ($_=function(array) { return {_hx_index:3,array:array,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PArray",$_.__params__ = ["array"],$_)
	,PValue: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PValue",$_.__params__ = ["value"],$_)
	,PEmpty: {_hx_name:"PEmpty",_hx_index:5,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}
	,PAssoc: ($_=function(map) { return {_hx_index:6,map:map,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PAssoc",$_.__params__ = ["map"],$_)
	,PSet: ($_=function(arr) { return {_hx_index:7,arr:arr,__enum__:"eu.ohmrun.pml.PExprSum",toString:$estr}; },$_._hx_name="PSet",$_.__params__ = ["arr"],$_)
};
eu_ohmrun_pml_PExprSum.__constructs__ = [eu_ohmrun_pml_PExprSum.PLabel,eu_ohmrun_pml_PExprSum.PApply,eu_ohmrun_pml_PExprSum.PGroup,eu_ohmrun_pml_PExprSum.PArray,eu_ohmrun_pml_PExprSum.PValue,eu_ohmrun_pml_PExprSum.PEmpty,eu_ohmrun_pml_PExprSum.PAssoc,eu_ohmrun_pml_PExprSum.PSet];
var eu_ohmrun_pml_PExprLift = function() { };
$hxClasses["eu.ohmrun.pml.PExprLift"] = eu_ohmrun_pml_PExprLift;
eu_ohmrun_pml_PExprLift.__name__ = "eu.ohmrun.pml.PExprLift";
eu_ohmrun_pml_PExprLift.eq = function(inner) {
	return new stx_assert_pml_eq_PExpr(inner);
};
eu_ohmrun_pml_PExprLift.lt = function(inner) {
	return new stx_assert_pml_ord_PExpr(inner);
};
eu_ohmrun_pml_PExprLift.comparable = function(inner) {
	return new stx_assert_pml_comparable_PExpr(inner);
};
eu_ohmrun_pml_PExprLift.get_string = function(self) {
	switch(self._hx_index) {
	case 0:
		var name = self.name;
		return haxe_ds_Option.Some(name);
	case 1:
		var name = self.name;
		return haxe_ds_Option.Some(name);
	case 4:
		var _g = self.value;
		switch(_g._hx_index) {
		case 0:
			var name = _g.s;
			return haxe_ds_Option.Some(name);
		case 3:
			var name = _g.str;
			return haxe_ds_Option.Some(name);
		default:
			return haxe_ds_Option.None;
		}
		break;
	default:
		return haxe_ds_Option.None;
	}
};
eu_ohmrun_pml_PExprLift.tokenize = function(self) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var name = self.name;
			return stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTData(haxe_ds_Either.Left(":" + name))]);
		case 1:
			var name = self.name;
			return stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTData(haxe_ds_Either.Left("#" + name))]);
		case 2:
			var list = self.list;
			return stx_nano_ClusterLift.snoc(stx_nano_Cluster.concat(stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTLParen]),stx_ds_LinkedList.lfold(list,function(next,memo) {
				return stx_nano_Cluster.concat(memo,rec(next));
			},stx_nano_Cluster.lift([]))),eu_ohmrun_pml_PTokenSum.PTRParen);
		case 3:
			var array = self.array;
			return stx_nano_ClusterLift.snoc(stx_nano_Cluster.concat(stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTLSquareBracket]),stx_nano_ClusterLift.lfold(array,function(next,memo) {
				return stx_nano_Cluster.concat(memo,rec(next));
			},stx_nano_Cluster.lift([]))),eu_ohmrun_pml_PTokenSum.PTRSquareBracket);
		case 4:
			var value = self.value;
			return [eu_ohmrun_pml_PTokenSum.PTData(haxe_ds_Either.Right(value))];
		case 5:
			return [eu_ohmrun_pml_PTokenSum.PTLParen,eu_ohmrun_pml_PTokenSum.PTRParen];
		case 6:
			var map = self.map;
			return stx_nano_ClusterLift.snoc(stx_nano_Cluster.concat(stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTLBracket]),stx_nano_ClusterLift.lfold(map,function(next,memo) {
				var l = next.l;
				var r = next.r;
				return stx_nano_Cluster.concat(memo,stx_nano_Cluster.concat(rec(l),rec(r)));
			},stx_nano_Cluster.lift([]))),eu_ohmrun_pml_PTokenSum.PTRBracket);
		case 7:
			var arr = self.arr;
			return stx_nano_ClusterLift.snoc(stx_nano_Cluster.concat(stx_nano_Cluster.lift([eu_ohmrun_pml_PTokenSum.PTHashLBracket]),stx_nano_ClusterLift.lfold(arr,function(next,memo) {
				return stx_nano_Cluster.concat(memo,rec(next));
			},stx_nano_Cluster.lift([]))),eu_ohmrun_pml_PTokenSum.PTRBracket);
		}
	};
	return rec(self);
};
var eu_ohmrun_pml_PExpr = {};
eu_ohmrun_pml_PExpr._new = function(self) {
	return self;
};
eu_ohmrun_pml_PExpr.parse = function(str) {
	var timer = stx_nano_Timer.unit();
	var this1 = eu_ohmrun_pml_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("lex");
	new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/pml/PExpr.hx", lineNumber : 22, className : "eu.ohmrun.pml._PExpr.PExpr_Impl_", methodName : "parse"}));
	var p = new stx_parse_pml_Parser();
	var l = stx_parse_pml_Lexer;
	var reader = stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(str));
	return eu_ohmrun_fletcher_ProduceLift.provide(eu_ohmrun_fletcher_ModulateLift.produce(eu_ohmrun_fletcher_ModulateLift.reclaim(eu_ohmrun_fletcher_Modulate.pure(l.main.apply(reader)),eu_ohmrun_fletcher_Convert.Fun(function(tkns) {
		var this1 = eu_ohmrun_pml_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("lex expr: " + stx_nano_Timer.since(timer));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/pml/PExpr.hx", lineNumber : 29, className : "eu.ohmrun.pml._PExpr.PExpr_Impl_", methodName : "parse"}));
		timer = stx_nano_Timer.start(timer);
		var this1 = eu_ohmrun_pml_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(tkns));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/pml/PExpr.hx", lineNumber : 31, className : "eu.ohmrun.pml._PExpr.PExpr_Impl_", methodName : "parse"}));
		return stx_LiftIf.if_else(tkns.get_error().is_defined() == false,function() {
			var self = tkns.value;
			var arr;
			if(self._hx_index == 0) {
				var v = self.v;
				arr = v;
			} else {
				arr = [];
			}
			var reader = stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj(arr)));
			var self = function(_) {
				var this1 = eu_ohmrun_pml_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("parse expr: " + stx_nano_Timer.since(timer));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/pml/PExpr.hx", lineNumber : 38, className : "eu.ohmrun.pml._PExpr.PExpr_Impl_", methodName : "parse"}));
			};
			return eu_ohmrun_fletcher_ProduceLift.convert(eu_ohmrun_fletcher_Produce.pure(p.main().apply(reader)),new eu_ohmrun_fletcher_term_AnonSync(function(p) {
				self(p);
				return p;
			},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}));
		},function() {
			return eu_ohmrun_fletcher_Produce.pure(stx_parse_ParseResult.make(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj([]))),null,tkns.get_error()));
		});
	})),stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,reader)));
};
eu_ohmrun_pml_PExpr.lift = function(self) {
	return eu_ohmrun_pml_PExpr._new(self);
};
eu_ohmrun_pml_PExpr.prj = function(this1) {
	return this1;
};
eu_ohmrun_pml_PExpr.get_self = function(this1) {
	return eu_ohmrun_pml_PExpr.lift(this1);
};
eu_ohmrun_pml_PExpr.toString = function(this1) {
	return eu_ohmrun_pml_PExpr.toString_with(this1,Std.string);
};
eu_ohmrun_pml_PExpr.toString_with = function(this1,fn,opt) {
	if(opt == null) {
		opt = { width : 130, indent : " "};
	}
	if(opt.width == null) {
		opt.width = 130;
	}
	if(opt.indent == null) {
		opt.indent = " ";
	}
	var rec = null;
	rec = function(self,ind) {
		if(ind == null) {
			ind = 0;
		}
		var gap = stx_nano_IterLift.lfold(stx_nano_Iter.range(0,ind),function(n,m) {
			return "" + m + opt.indent;
		},"");
		if(self == null) {
			return "";
		} else {
			switch(self._hx_index) {
			case 0:
				var name = self.name;
				return ":" + name;
			case 1:
				var name = self.name;
				return "#" + name;
			case 2:
				var array = self.list;
				var ind1 = ind + 1;
				var items = stx_ds_LinkedList.map(array,function(self) {
					return rec(self,ind1);
				});
				var length = stx_ds_LinkedList.lfold(items,function(n,m) {
					return m + n.length;
				},ind);
				var horizontal = length < opt.width;
				return stx_LiftIf.if_else(horizontal,function() {
					return "(" + stx_ds_LinkedList.join(items," ") + ")";
				},function() {
					return "(\n " + gap + stx_ds_LinkedList.join(items," \n " + gap) + ("\n" + gap + ")");
				});
			case 3:
				var array = self.array;
				var ind2 = ind + 1;
				var items1 = stx_nano_ClusterLift.map(array,function(self) {
					return rec(self,ind2);
				});
				var length = stx_nano_ClusterLift.lfold(items1,function(n,m) {
					return m + n.length;
				},ind);
				var horizontal = length < opt.width;
				return stx_LiftIf.if_else(horizontal,function() {
					return "[" + items1.join(" ") + "]";
				},function() {
					return "[\n " + gap + items1.join(" \n " + gap) + ("\n" + gap + "]");
				});
			case 4:
				var value = self.value;
				return fn(value);
			case 5:
				return "()";
			case 6:
				var map = self.map;
				var fn1 = function(k,v) {
					return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,rec(k,ind + 1),rec(v,ind + 1));
				};
				var items2 = stx_nano_ClusterLift.map(map,function(tp) {
					var l = tp.l;
					var r = tp.r;
					return fn1(l,r);
				});
				var horizontal_test = stx_nano_ClusterLift.map(items2,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
					return "" + l + " " + r;
				}));
				var length = stx_nano_ClusterLift.lfold(horizontal_test,function(n,m) {
					return m + n.length + 2;
				},ind);
				var showing;
				if(length > opt.width) {
					var widest = stx_nano_ClusterLift.lfold(horizontal_test,function(n,m) {
						var l = n.length;
						if(l > m) {
							return l;
						} else {
							return m;
						}
					},0);
					if(widest > opt.width) {
						var next = stx_nano_ClusterLift.lfold(stx_nano_ClusterLift.map(items2,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
							return "" + gap + l + "\n" + gap + r;
						})),function(n,m) {
							return "" + m + "\n" + n;
						},"");
						showing = "" + gap + "\n{\n" + next + "\n";
					} else {
						var next = stx_nano_ClusterLift.lfold(stx_nano_ClusterLift.map(items2,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
							return "" + gap + l + " " + r;
						})),function(n,m) {
							return "" + m + "\n" + n;
						},"");
						showing = "" + gap + "\n{\n" + next + "\n";
					}
				} else {
					var data = stx_nano_ClusterLift.lfold(horizontal_test,function(n,m) {
						if(m == "") {
							return n;
						} else {
							return "" + m + " " + n;
						}
					},"");
					showing = "{" + data + "}";
				}
				return showing;
			case 7:
				var array = self.arr;
				var ind3 = ind + 1;
				var items2 = stx_nano_ClusterLift.map(array,function(self) {
					return rec(self,ind3);
				});
				var length = stx_nano_ClusterLift.lfold(items2,function(n,m) {
					return m + n.length;
				},ind);
				var horizontal = length < opt.width;
				return stx_LiftIf.if_else(horizontal,function() {
					return "#{" + items2.join(" ") + "}";
				},function() {
					return "{\n " + gap + items2.join(" \n " + gap) + ("\n" + gap + "}");
				});
			}
		}
	};
	return rec(this1);
};
eu_ohmrun_pml_PExpr.data_only = function(this1) {
	if(this1._hx_index == 2) {
		var xs = this1.list;
		return stx_ds_LinkedList.lfold(xs,function(n,m) {
			if(m._hx_index == 0) {
				var arr = m.v;
				if(n._hx_index == 4) {
					var value = n.value;
					return haxe_ds_Option.Some(stx_nano_ClusterLift.snoc(arr,value));
				} else {
					return haxe_ds_Option.None;
				}
			} else {
				return haxe_ds_Option.None;
			}
		},haxe_ds_Option.Some([]));
	} else {
		return haxe_ds_Option.None;
	}
};
var eu_ohmrun_pml_PTokenSum = $hxEnums["eu.ohmrun.pml.PTokenSum"] = { __ename__:"eu.ohmrun.pml.PTokenSum",__constructs__:null
	,PTLParen: {_hx_name:"PTLParen",_hx_index:0,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTRParen: {_hx_name:"PTRParen",_hx_index:1,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTHashLBracket: {_hx_name:"PTHashLBracket",_hx_index:2,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTLBracket: {_hx_name:"PTLBracket",_hx_index:3,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTRBracket: {_hx_name:"PTRBracket",_hx_index:4,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTLSquareBracket: {_hx_name:"PTLSquareBracket",_hx_index:5,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTRSquareBracket: {_hx_name:"PTRSquareBracket",_hx_index:6,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
	,PTData: ($_=function(v) { return {_hx_index:7,v:v,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}; },$_._hx_name="PTData",$_.__params__ = ["v"],$_)
	,PTEof: {_hx_name:"PTEof",_hx_index:8,__enum__:"eu.ohmrun.pml.PTokenSum",toString:$estr}
};
eu_ohmrun_pml_PTokenSum.__constructs__ = [eu_ohmrun_pml_PTokenSum.PTLParen,eu_ohmrun_pml_PTokenSum.PTRParen,eu_ohmrun_pml_PTokenSum.PTHashLBracket,eu_ohmrun_pml_PTokenSum.PTLBracket,eu_ohmrun_pml_PTokenSum.PTRBracket,eu_ohmrun_pml_PTokenSum.PTLSquareBracket,eu_ohmrun_pml_PTokenSum.PTRSquareBracket,eu_ohmrun_pml_PTokenSum.PTData,eu_ohmrun_pml_PTokenSum.PTEof];
eu_ohmrun_pml_PTokenSum.__meta__ = { obj : { 'stx.meta.sum' : null}};
var eu_ohmrun_pml_PTokenLift = function() { };
$hxClasses["eu.ohmrun.pml.PTokenLift"] = eu_ohmrun_pml_PTokenLift;
eu_ohmrun_pml_PTokenLift.__name__ = "eu.ohmrun.pml.PTokenLift";
eu_ohmrun_pml_PTokenLift.lift = function(self) {
	return self;
};
var eu_ohmrun_pml_PToken = {};
eu_ohmrun_pml_PToken._new = function(self) {
	return self;
};
eu_ohmrun_pml_PToken.lift = function(self) {
	return self;
};
eu_ohmrun_pml_PToken.prj = function(this1) {
	return this1;
};
eu_ohmrun_pml_PToken.get_self = function(this1) {
	return this1;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,keys: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.toString();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(i.high != b_high || i.low != b_low)) {
			break;
		}
		var r = haxe_Int64.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high1,low1);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		divisor = b == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b) : new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
		var b1 = 1;
		b1 &= 63;
		mask = b1 == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1) : new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		var b = 1;
		b &= 63;
		mask = b == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b) : new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
		var b1 = 1;
		b1 &= 63;
		divisor = b1 == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1) : new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	f: null
	,prev: null
	,next: null
	,isBlocking: null
	,nextRun: null
	,priority: null
	,stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.pending = null;
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.content = null;
haxe_Resource.listNames = function() {
	var _g = [];
	var _g1 = 0;
	var _g2 = haxe_Resource.content;
	while(_g1 < _g2.length) {
		var x = _g2[_g1];
		++_g1;
		_g.push(x.name);
	}
	return _g;
};
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return HxOverrides.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__:"haxe.ds.Either",__constructs__:null
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Left",$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_._hx_name="Right",$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__constructs__ = [haxe_ds_Either.Left,haxe_ds_Either.Right];
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:"haxe.ds.Option",__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_ds__$StringMap_StringMapKeyValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
haxe_ds__$StringMap_StringMapKeyValueIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		var key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_rtti_CType = $hxEnums["haxe.rtti.CType"] = { __ename__:"haxe.rtti.CType",__constructs__:null
	,CUnknown: {_hx_name:"CUnknown",_hx_index:0,__enum__:"haxe.rtti.CType",toString:$estr}
	,CEnum: ($_=function(name,params) { return {_hx_index:1,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CEnum",$_.__params__ = ["name","params"],$_)
	,CClass: ($_=function(name,params) { return {_hx_index:2,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CClass",$_.__params__ = ["name","params"],$_)
	,CTypedef: ($_=function(name,params) { return {_hx_index:3,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CTypedef",$_.__params__ = ["name","params"],$_)
	,CFunction: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CFunction",$_.__params__ = ["args","ret"],$_)
	,CAnonymous: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAnonymous",$_.__params__ = ["fields"],$_)
	,CDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CDynamic",$_.__params__ = ["t"],$_)
	,CAbstract: ($_=function(name,params) { return {_hx_index:7,name:name,params:params,__enum__:"haxe.rtti.CType",toString:$estr}; },$_._hx_name="CAbstract",$_.__params__ = ["name","params"],$_)
};
haxe_rtti_CType.__constructs__ = [haxe_rtti_CType.CUnknown,haxe_rtti_CType.CEnum,haxe_rtti_CType.CClass,haxe_rtti_CType.CTypedef,haxe_rtti_CType.CFunction,haxe_rtti_CType.CAnonymous,haxe_rtti_CType.CDynamic,haxe_rtti_CType.CAbstract];
var haxe_rtti_Rights = $hxEnums["haxe.rtti.Rights"] = { __ename__:"haxe.rtti.Rights",__constructs__:null
	,RNormal: {_hx_name:"RNormal",_hx_index:0,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RNo: {_hx_name:"RNo",_hx_index:1,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RCall: ($_=function(m) { return {_hx_index:2,m:m,__enum__:"haxe.rtti.Rights",toString:$estr}; },$_._hx_name="RCall",$_.__params__ = ["m"],$_)
	,RMethod: {_hx_name:"RMethod",_hx_index:3,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RDynamic: {_hx_name:"RDynamic",_hx_index:4,__enum__:"haxe.rtti.Rights",toString:$estr}
	,RInline: {_hx_name:"RInline",_hx_index:5,__enum__:"haxe.rtti.Rights",toString:$estr}
};
haxe_rtti_Rights.__constructs__ = [haxe_rtti_Rights.RNormal,haxe_rtti_Rights.RNo,haxe_rtti_Rights.RCall,haxe_rtti_Rights.RMethod,haxe_rtti_Rights.RDynamic,haxe_rtti_Rights.RInline];
var haxe_rtti_TypeTree = $hxEnums["haxe.rtti.TypeTree"] = { __ename__:"haxe.rtti.TypeTree",__constructs__:null
	,TPackage: ($_=function(name,full,subs) { return {_hx_index:0,name:name,full:full,subs:subs,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TPackage",$_.__params__ = ["name","full","subs"],$_)
	,TClassdecl: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TClassdecl",$_.__params__ = ["c"],$_)
	,TEnumdecl: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TEnumdecl",$_.__params__ = ["e"],$_)
	,TTypedecl: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TTypedecl",$_.__params__ = ["t"],$_)
	,TAbstractdecl: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"haxe.rtti.TypeTree",toString:$estr}; },$_._hx_name="TAbstractdecl",$_.__params__ = ["a"],$_)
};
haxe_rtti_TypeTree.__constructs__ = [haxe_rtti_TypeTree.TPackage,haxe_rtti_TypeTree.TClassdecl,haxe_rtti_TypeTree.TEnumdecl,haxe_rtti_TypeTree.TTypedecl,haxe_rtti_TypeTree.TAbstractdecl];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_rtti_Rtti = function() { };
$hxClasses["haxe.rtti.Rtti"] = haxe_rtti_Rtti;
haxe_rtti_Rtti.__name__ = "haxe.rtti.Rtti";
haxe_rtti_Rtti.getRtti = function(c) {
	var rtti = Reflect.field(c,"__rtti");
	if(rtti == null) {
		throw haxe_Exception.thrown("Class " + c.__name__ + " has no RTTI information, consider adding @:rtti");
	}
	var x = Xml.parse(rtti).firstElement();
	var infos = new haxe_rtti_XmlParser().processElement(x);
	if(infos._hx_index == 1) {
		var c = infos.c;
		return c;
	} else {
		var t = infos;
		throw haxe_Exception.thrown("Enum mismatch: expected TClassDecl but found " + Std.string(t));
	}
};
haxe_rtti_Rtti.hasRtti = function(c) {
	return Lambda.has(Type.getClassFields(c),"__rtti");
};
var haxe_rtti_XmlParser = function() {
	this.root = [];
};
$hxClasses["haxe.rtti.XmlParser"] = haxe_rtti_XmlParser;
haxe_rtti_XmlParser.__name__ = "haxe.rtti.XmlParser";
haxe_rtti_XmlParser.prototype = {
	root: null
	,curplatform: null
	,mkPath: function(p) {
		return p;
	}
	,mkTypeParams: function(p) {
		var pl = p.split(":");
		if(pl[0] == "") {
			return [];
		}
		return pl;
	}
	,mkRights: function(r) {
		switch(r) {
		case "dynamic":
			return haxe_rtti_Rights.RDynamic;
		case "inline":
			return haxe_rtti_Rights.RInline;
		case "method":
			return haxe_rtti_Rights.RMethod;
		case "null":
			return haxe_rtti_Rights.RNo;
		default:
			return haxe_rtti_Rights.RCall(r);
		}
	}
	,xerror: function(c) {
		var tmp;
		if(c.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			tmp = c.nodeName;
		}
		throw haxe_Exception.thrown("Invalid " + tmp);
	}
	,processElement: function(x) {
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var c = x;
		var _g;
		if(c.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(c.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c.nodeType == null ? "null" : XmlType.toString(c.nodeType)));
			}
			_g = c.nodeName;
		}
		switch(_g) {
		case "abstract":
			return haxe_rtti_TypeTree.TAbstractdecl(this.xabstract(c));
		case "class":
			return haxe_rtti_TypeTree.TClassdecl(this.xclass(c));
		case "enum":
			return haxe_rtti_TypeTree.TEnumdecl(this.xenum(c));
		case "typedef":
			return haxe_rtti_TypeTree.TTypedecl(this.xtypedef(c));
		default:
			return this.xerror(c);
		}
	}
	,xmeta: function(x) {
		var ml = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(x,"m");
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(m,"e");
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				pl.push(haxe_xml_Access.get_innerHTML(p));
			}
			ml.push({ name : haxe_xml__$Access_AttribAccess.resolve(m,"n"), params : pl});
		}
		return ml;
	}
	,xoverloads: function(x) {
		var l = [];
		var m = x.elements();
		while(m.hasNext()) {
			var m1 = m.next();
			l.push(this.xclassfield(m1));
		}
		return l;
	}
	,xpath: function(x) {
		var path = this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path"));
		var params = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			params.push(this.xtype(c1));
		}
		return { path : path, params : params};
	}
	,xclass: function(x) {
		var csuper = null;
		var doc = null;
		var tdynamic = null;
		var interfaces = [];
		var fields = [];
		var statics = [];
		var meta = [];
		var isInterface = x.exists("interface");
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "extends":
				if(isInterface) {
					interfaces.push(this.xpath(c1));
				} else {
					csuper = this.xpath(c1);
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "haxe_dynamic":
				var x1 = c1.firstElement();
				if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
				}
				tdynamic = this.xtype(x1);
				break;
			case "implements":
				interfaces.push(this.xpath(c1));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			default:
				if(c1.exists("static")) {
					statics.push(this.xclassfield(c1));
				} else {
					fields.push(this.xclassfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), isFinal : x.exists("final"), isInterface : isInterface, params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), superClass : csuper, interfaces : interfaces, fields : fields, statics : statics, tdynamic : tdynamic, platforms : this.defplat(), meta : meta};
	}
	,xclassfield: function(x,defPublic) {
		if(defPublic == null) {
			defPublic = false;
		}
		var e = x.elements();
		var t = this.xtype(e.next());
		var doc = null;
		var meta = [];
		var overloads = null;
		var c = e;
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "overloads":
				overloads = this.xoverloads(c1);
				break;
			default:
				this.xerror(c1);
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		return { name : tmp, type : t, isPublic : x.exists("public") || defPublic, isFinal : x.exists("final"), isOverride : x.exists("override"), line : haxe_xml__$Access_HasAttribAccess.resolve(x,"line") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(x,"line")) : null, doc : doc, get : haxe_xml__$Access_HasAttribAccess.resolve(x,"get") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"get")) : haxe_rtti_Rights.RNormal, set : haxe_xml__$Access_HasAttribAccess.resolve(x,"set") ? this.mkRights(haxe_xml__$Access_AttribAccess.resolve(x,"set")) : haxe_rtti_Rights.RNormal, params : haxe_xml__$Access_HasAttribAccess.resolve(x,"params") ? this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")) : [], platforms : this.defplat(), meta : meta, overloads : overloads, expr : haxe_xml__$Access_HasAttribAccess.resolve(x,"expr") ? haxe_xml__$Access_AttribAccess.resolve(x,"expr") : null};
	}
	,xenum: function(x) {
		var cl = [];
		var doc = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					cl.push(this.xenumfield(c1));
				}
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), isExtern : x.exists("extern"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), constructors : cl, platforms : this.defplat(), meta : meta};
	}
	,xenumfield: function(x) {
		var args = null;
		var docElements = x.elementsNamed("haxe_doc");
		var xdoc = docElements.hasNext() ? docElements.next() : null;
		var meta = haxe_xml__$Access_HasNodeAccess.resolve(x,"meta") ? this.xmeta(haxe_xml__$Access_NodeAccess.resolve(x,"meta")) : [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(x,"a")) {
			var names = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var elts = x.elements();
			args = [];
			var _g = 0;
			while(_g < names.length) {
				var c = names[_g];
				++_g;
				var opt = false;
				if(c.charAt(0) == "?") {
					opt = true;
					c = HxOverrides.substr(c,1,null);
				}
				args.push({ name : c, opt : opt, t : this.xtype(elts.next())});
			}
		}
		var tmp;
		if(x.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			tmp = x.nodeName;
		}
		var tmp1;
		if(xdoc == null) {
			tmp1 = null;
		} else {
			if(xdoc.nodeType != Xml.Document && xdoc.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (xdoc.nodeType == null ? "null" : XmlType.toString(xdoc.nodeType)));
			}
			tmp1 = haxe_xml_Access.get_innerData(xdoc);
		}
		return { name : tmp, args : args, doc : tmp1, meta : meta, platforms : this.defplat()};
	}
	,xabstract: function(x) {
		var doc = null;
		var impl = null;
		var athis = null;
		var meta = [];
		var to = [];
		var from = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g;
			if(c1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				_g = c1.nodeName;
			}
			switch(_g) {
			case "from":
				var t = c1.elements();
				while(t.hasNext()) {
					var t1 = t.next();
					var x1 = t1.firstElement();
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
					}
					from.push({ t : this.xtype(x1), field : haxe_xml__$Access_HasAttribAccess.resolve(t1,"field") ? haxe_xml__$Access_AttribAccess.resolve(t1,"field") : null});
				}
				break;
			case "haxe_doc":
				doc = haxe_xml_Access.get_innerData(c1);
				break;
			case "impl":
				impl = this.xclass(haxe_xml__$Access_NodeAccess.resolve(c1,"class"));
				break;
			case "meta":
				meta = this.xmeta(c1);
				break;
			case "this":
				var x2 = c1.firstElement();
				if(x2.nodeType != Xml.Document && x2.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (x2.nodeType == null ? "null" : XmlType.toString(x2.nodeType)));
				}
				athis = this.xtype(x2);
				break;
			case "to":
				var t2 = c1.elements();
				while(t2.hasNext()) {
					var t3 = t2.next();
					var x3 = t3.firstElement();
					if(x3.nodeType != Xml.Document && x3.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Invalid nodeType " + (x3.nodeType == null ? "null" : XmlType.toString(x3.nodeType)));
					}
					to.push({ t : this.xtype(x3), field : haxe_xml__$Access_HasAttribAccess.resolve(t3,"field") ? haxe_xml__$Access_AttribAccess.resolve(t3,"field") : null});
				}
				break;
			default:
				this.xerror(c1);
			}
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), platforms : this.defplat(), meta : meta, athis : athis, to : to, from : from, impl : impl};
	}
	,xtypedef: function(x) {
		var doc = null;
		var t = null;
		var meta = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			var tmp;
			if(c1.nodeType == Xml.Document) {
				tmp = "Document";
			} else {
				if(c1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
				}
				tmp = c1.nodeName;
			}
			if(tmp == "haxe_doc") {
				doc = haxe_xml_Access.get_innerData(c1);
			} else {
				var tmp1;
				if(c1.nodeType == Xml.Document) {
					tmp1 = "Document";
				} else {
					if(c1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (c1.nodeType == null ? "null" : XmlType.toString(c1.nodeType)));
					}
					tmp1 = c1.nodeName;
				}
				if(tmp1 == "meta") {
					meta = this.xmeta(c1);
				} else {
					t = this.xtype(c1);
				}
			}
		}
		var types = new haxe_ds_StringMap();
		if(this.curplatform != null) {
			types.h[this.curplatform] = t;
		}
		return { file : haxe_xml__$Access_HasAttribAccess.resolve(x,"file") ? haxe_xml__$Access_AttribAccess.resolve(x,"file") : null, path : this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")), module : haxe_xml__$Access_HasAttribAccess.resolve(x,"module") ? this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"module")) : null, doc : doc, isPrivate : x.exists("private"), params : this.mkTypeParams(haxe_xml__$Access_AttribAccess.resolve(x,"params")), type : t, types : types, platforms : this.defplat(), meta : meta};
	}
	,xtype: function(x) {
		var _g;
		if(x.nodeType == Xml.Document) {
			_g = "Document";
		} else {
			if(x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			_g = x.nodeName;
		}
		switch(_g) {
		case "a":
			var fields = [];
			var f = x.elements();
			while(f.hasNext()) {
				var f1 = f.next();
				var f2 = this.xclassfield(f1,true);
				f2.platforms = [];
				fields.push(f2);
			}
			return haxe_rtti_CType.CAnonymous(fields);
		case "c":
			return haxe_rtti_CType.CClass(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "d":
			var t = null;
			var tx = x.firstElement();
			if(tx != null) {
				if(tx.nodeType != Xml.Document && tx.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (tx.nodeType == null ? "null" : XmlType.toString(tx.nodeType)));
				}
				t = this.xtype(tx);
			}
			return haxe_rtti_CType.CDynamic(t);
		case "e":
			return haxe_rtti_CType.CEnum(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "f":
			var args = [];
			var aname = haxe_xml__$Access_AttribAccess.resolve(x,"a").split(":");
			var eargs_current = 0;
			var eargs_array = aname;
			var evalues = haxe_xml__$Access_HasAttribAccess.resolve(x,"v") ? new haxe_iterators_ArrayIterator(haxe_xml__$Access_AttribAccess.resolve(x,"v").split(":")) : null;
			var e = x.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var opt = false;
				var a = eargs_current < eargs_array.length ? eargs_array[eargs_current++] : null;
				if(a == null) {
					a = "";
				}
				if(a.charAt(0) == "?") {
					opt = true;
					a = HxOverrides.substr(a,1,null);
				}
				var v = evalues == null || evalues.current >= evalues.array.length ? null : evalues.array[evalues.current++];
				args.push({ name : a, opt : opt, t : this.xtype(e1), value : v == "" ? null : v});
			}
			var ret = args[args.length - 1];
			HxOverrides.remove(args,ret);
			return haxe_rtti_CType.CFunction(args,ret.t);
		case "t":
			return haxe_rtti_CType.CTypedef(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		case "unknown":
			return haxe_rtti_CType.CUnknown;
		case "x":
			return haxe_rtti_CType.CAbstract(this.mkPath(haxe_xml__$Access_AttribAccess.resolve(x,"path")),this.xtypeparams(x));
		default:
			return this.xerror(x);
		}
	}
	,xtypeparams: function(x) {
		var p = [];
		var c = x.elements();
		while(c.hasNext()) {
			var c1 = c.next();
			p.push(this.xtype(c1));
		}
		return p;
	}
	,defplat: function() {
		var l = [];
		if(this.curplatform != null) {
			l.push(this.curplatform);
		}
		return l;
	}
	,__class__: haxe_rtti_XmlParser
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasAttribAccess = {};
haxe_xml__$Access_HasAttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	return this1.exists(name);
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml__$Access_NodeListAccess = {};
haxe_xml__$Access_NodeListAccess.resolve = function(this1,name) {
	var l = [];
	var x = this1.elementsNamed(name);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x1.nodeType == null ? "null" : XmlType.toString(x1.nodeType)));
		}
		l.push(x1);
	}
	return l;
};
var haxe_xml_Access = {};
haxe_xml_Access.get_innerData = function(this1) {
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var it_current = 0;
	var it_array = this1.children;
	if(it_current >= it_array.length) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	var v = it_array[it_current++];
	if(it_current < it_array.length) {
		var n = it_array[it_current++];
		var tmp;
		if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
			if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
			}
			tmp = StringTools.trim(v.nodeValue) == "";
		} else {
			tmp = false;
		}
		if(tmp) {
			if(it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
			var n2 = it_array[it_current++];
			var tmp;
			if(n2.nodeType == Xml.PCData) {
				if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n2.nodeType == null ? "null" : XmlType.toString(n2.nodeType)));
				}
				tmp = StringTools.trim(n2.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp && it_current >= it_array.length) {
				if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (n.nodeType == null ? "null" : XmlType.toString(n.nodeType)));
				}
				return n.nodeValue;
			}
		}
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not only have data");
	}
	if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
		var tmp;
		if(this1.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			tmp = this1.nodeName;
		}
		throw haxe_Exception.thrown(tmp + " does not have data");
	}
	if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (v.nodeType == null ? "null" : XmlType.toString(v.nodeType)));
	}
	return v.nodeValue;
};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var stx_LiftAssert = function() { };
$hxClasses["stx.LiftAssert"] = stx_LiftAssert;
stx_LiftAssert.__name__ = "stx.LiftAssert";
stx_LiftAssert.that = function(stx,pos) {
	return new stx_assert_Module(pos);
};
stx_LiftAssert.assert = function(__,pos) {
	return new stx_assert_module_Crunch(pos);
};
stx_LiftAssert.expect = function(b,err) {
	if(b) {
		return stx_nano_Report.unit();
	} else {
		return stx_nano_Report.pure(err);
	}
};
var stx_AssertCtr = function() { };
$hxClasses["stx.AssertCtr"] = stx_AssertCtr;
stx_AssertCtr.__name__ = "stx.AssertCtr";
stx_AssertCtr.Assert = function(wildcard) {
	return stx_Nano.stx(stx_nano_Wildcard.__);
};
stx_AssertCtr.Comparable = function(stub) {
	return new stx_assert_stub_Comparable();
};
var stx_LiftCoroutine = function() { };
$hxClasses["stx.LiftCoroutine"] = stx_LiftCoroutine;
stx_LiftCoroutine.__name__ = "stx.LiftCoroutine";
stx_LiftCoroutine.e_coroutine = function(digests,note) {
	return new stx_coroutine_core_Digest(note);
};
stx_LiftCoroutine.upcast = function(wildcard,spx) {
	return spx;
};
stx_LiftCoroutine.quit = function(wildcard,er) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(er)));
};
stx_LiftCoroutine.exit = function(wildcard,er) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(er)));
};
stx_LiftCoroutine.halt = function(wildcard,ret) {
	return stx_coroutine_core_CoroutineSum.Halt(ret);
};
stx_LiftCoroutine.term = function(wildcard,cause) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
};
stx_LiftCoroutine.stop = function(wildcard) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
};
stx_LiftCoroutine.prod = function(wildcard,v) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v));
};
stx_LiftCoroutine.wait = function(wildcard,fn) {
	return stx_coroutine_core_CoroutineSum.Wait(fn);
};
stx_LiftCoroutine.emit = function(wildcard,head,next) {
	return stx_coroutine_core_CoroutineSum.Emit(head,next);
};
stx_LiftCoroutine.hold = function(wildcard,h) {
	return stx_coroutine_core_CoroutineSum.Hold(h);
};
stx_LiftCoroutine.lazy = function(wildcard,self) {
	return stx_coroutine_core_Held.lazy(self);
};
stx_LiftCoroutine.into = function(wildcard,fn) {
	return fn;
};
stx_LiftCoroutine.tran = function(wildcard,fn) {
	var fn1 = fn;
	return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	}));
};
stx_LiftCoroutine.coroutine = function(wildcard) {
	return new stx_coroutine_Module();
};
var stx_LiftSource = function() { };
$hxClasses["stx.LiftSource"] = stx_LiftSource;
stx_LiftSource.__name__ = "stx.LiftSource";
var stx_RedBlackSum = $hxEnums["stx.RedBlackSum"] = { __ename__:"stx.RedBlackSum",__constructs__:null
	,Red: {_hx_name:"Red",_hx_index:0,__enum__:"stx.RedBlackSum",toString:$estr}
	,Black: {_hx_name:"Black",_hx_index:1,__enum__:"stx.RedBlackSum",toString:$estr}
};
stx_RedBlackSum.__constructs__ = [stx_RedBlackSum.Red,stx_RedBlackSum.Black];
var stx_LiftLinkedList = function() { };
$hxClasses["stx.LiftLinkedList"] = stx_LiftLinkedList;
stx_LiftLinkedList.__name__ = "stx.LiftLinkedList";
stx_LiftLinkedList.ds = function(ls) {
	return ls;
};
var stx_LiftArrayToLinkedList = function() { };
$hxClasses["stx.LiftArrayToLinkedList"] = stx_LiftArrayToLinkedList;
stx_LiftArrayToLinkedList.__name__ = "stx.LiftArrayToLinkedList";
stx_LiftArrayToLinkedList.toLinkedList = function(array) {
	return stx_lift_ArrayLift.rfold(array,function(next,memo) {
		return stx_ds_LinkedList.cons(memo,next);
	},stx_ds_LinkedList.unit());
};
var stx_LiftClusterToLinkedList = function() { };
$hxClasses["stx.LiftClusterToLinkedList"] = stx_LiftClusterToLinkedList;
stx_LiftClusterToLinkedList.__name__ = "stx.LiftClusterToLinkedList";
stx_LiftClusterToLinkedList.toLinkedList = function(array) {
	return stx_nano_ClusterLift.rfold(array,function(next,memo) {
		return stx_ds_LinkedList.cons(memo,next);
	},stx_ds_LinkedList.unit());
};
var stx_LiftStringMap = function() { };
$hxClasses["stx.LiftStringMap"] = stx_LiftStringMap;
stx_LiftStringMap.__name__ = "stx.LiftStringMap";
stx_LiftStringMap.ds = function(m) {
	var nm = stx_ds_RedBlackMap.make(stx_assert_Comparable.String());
	var h = m.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var key1 = _g_key;
		var val = _g_value;
		nm = stx_ds_RedBlackMap.set(nm,key1,val);
	}
	return nm;
};
var stx_Fail = function() { };
$hxClasses["stx.Fail"] = stx_Fail;
stx_Fail.__name__ = "stx.Fail";
stx_Fail.explain = function(self) {
	return stx_fail_Digest.Foreign(self.details());
};
var stx_Fn = function() { };
$hxClasses["stx.Fn"] = stx_Fn;
stx_Fn.__name__ = "stx.Fn";
stx_Fn.fn = function(wildcard) {
	return new stx_fn_Module();
};
stx_Fn.f = function(wildcard,f) {
	switch(f._hx_index) {
	case 0:
		var f1 = f.f;
		return function(_) {
			f1();
			return 0;
		};
	case 1:
		var f2 = f.f;
		return function(x) {
			f2(x);
			return 0;
		};
	case 2:
		var f3 = f.f;
		return function(x) {
			return f3(x);
		};
	}
};
stx_Fn._0x = function(fn) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Block.lift);
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_fn_Block.unit();
	}
};
stx_Fn._1x = function(fn) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn),stx_fn_Sink.lift);
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return function(p) {
		};
	}
};
stx_Fn._1r = function() {
	return stx_fn_Unary.unit();
};
var stx_LiftCurriedBinary = function() { };
$hxClasses["stx.LiftCurriedBinary"] = stx_LiftCurriedBinary;
stx_LiftCurriedBinary.__name__ = "stx.LiftCurriedBinary";
stx_LiftCurriedBinary.uncurry = function(f) {
	return function(p1,p2) {
		return (f(p1))(p2);
	};
};
var stx_LiftCurriedTernary = function() { };
$hxClasses["stx.LiftCurriedTernary"] = stx_LiftCurriedTernary;
stx_LiftCurriedTernary.__name__ = "stx.LiftCurriedTernary";
stx_LiftCurriedTernary.uncurry = function(f) {
	return function(p1,p2,p3) {
		return ((f(p1))(p2))(p3);
	};
};
var stx_LiftFn = function() { };
$hxClasses["stx.LiftFn"] = stx_LiftFn;
stx_LiftFn.__name__ = "stx.LiftFn";
stx_LiftFn.pinch = function(fn0) {
	return function(x) {
		return fn0(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x));
	};
};
stx_LiftFn.repeat = function(fn) {
	return function(v) {
		var i = null;
		var o = null;
		_hx_loop1: while(true) {
			var _g = fn(i);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				i = v;
				break;
			case 1:
				var v1 = _g.v;
				o = v1;
				break _hx_loop1;
			}
		}
		return o;
	};
};
var stx_LiftUnary = function() { };
$hxClasses["stx.LiftUnary"] = stx_LiftUnary;
stx_LiftUnary.__name__ = "stx.LiftUnary";
stx_LiftUnary.fn = function(f) {
	return f;
};
var stx_LiftThunk = function() { };
$hxClasses["stx.LiftThunk"] = stx_LiftThunk;
stx_LiftThunk.__name__ = "stx.LiftThunk";
stx_LiftThunk.fn = function(fn) {
	return fn;
};
var stx_LiftBlock = function() { };
$hxClasses["stx.LiftBlock"] = stx_LiftBlock;
stx_LiftBlock.__name__ = "stx.LiftBlock";
stx_LiftBlock.fn = function(f) {
	return f;
};
var stx_LiftBinary = function() { };
$hxClasses["stx.LiftBinary"] = stx_LiftBinary;
stx_LiftBinary.__name__ = "stx.LiftBinary";
stx_LiftBinary.fn = function(fn) {
	return stx_fn_Binary._new(fn);
};
stx_LiftBinary.bind1 = function(fn,p) {
	var _g = fn;
	var a1 = p;
	return function(a2) {
		return _g(a1,a2);
	};
};
var stx_LiftPerhapsConstructor = function() { };
$hxClasses["stx.LiftPerhapsConstructor"] = stx_LiftPerhapsConstructor;
stx_LiftPerhapsConstructor.__name__ = "stx.LiftPerhapsConstructor";
stx_LiftPerhapsConstructor.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return fn(v);
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftPerhaps = function() { };
$hxClasses["stx.LiftPerhaps"] = stx_LiftPerhaps;
stx_LiftPerhaps.__name__ = "stx.LiftPerhaps";
stx_LiftPerhaps.perhaps = function(fn) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return haxe_ds_Option.Some(fn(v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
var stx_LiftTernary = function() { };
$hxClasses["stx.LiftTernary"] = stx_LiftTernary;
stx_LiftTernary.__name__ = "stx.LiftTernary";
stx_LiftTernary.fn = function(fn) {
	return fn;
};
var stx_LiftIf = function() { };
$hxClasses["stx.LiftIf"] = stx_LiftIf;
stx_LiftIf.__name__ = "stx.LiftIf";
stx_LiftIf.if_else = function(b,yes,no) {
	if(b) {
		return yes();
	} else {
		return no();
	}
};
var stx_Fp = function() { };
$hxClasses["stx.Fp"] = stx_Fp;
stx_Fp.__name__ = "stx.Fp";
stx_Fp.handle = function(opt) {
};
stx_Fp.with = function(wildcard,a,b) {
	return function(c) {
		return stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,a,b,c);
	};
};
var stx_LiftFp = function() { };
$hxClasses["stx.LiftFp"] = stx_LiftFp;
stx_LiftFp.__name__ = "stx.LiftFp";
var stx_In = {};
stx_In._new = function(x) {
	return x;
};
var stx_OfI = {};
stx_OfI._new = function(x) {
	return x;
};
var stx_Of = {};
stx_Of._new = function(o) {
	return o;
};
var stx_MeetSemiLatticeApi = function() { };
$hxClasses["stx.MeetSemiLatticeApi"] = stx_MeetSemiLatticeApi;
stx_MeetSemiLatticeApi.__name__ = "stx.MeetSemiLatticeApi";
stx_MeetSemiLatticeApi.__isInterface__ = true;
stx_MeetSemiLatticeApi.prototype = {
	meet: null
	,'with': null
	,__class__: stx_MeetSemiLatticeApi
};
var stx_JoinSemiLatticeApi = function() { };
$hxClasses["stx.JoinSemiLatticeApi"] = stx_JoinSemiLatticeApi;
stx_JoinSemiLatticeApi.__name__ = "stx.JoinSemiLatticeApi";
stx_JoinSemiLatticeApi.__isInterface__ = true;
stx_JoinSemiLatticeApi.prototype = {
	join: null
	,'with': null
	,__class__: stx_JoinSemiLatticeApi
};
var stx_LatticeApi = function() { };
$hxClasses["stx.LatticeApi"] = stx_LatticeApi;
stx_LatticeApi.__name__ = "stx.LatticeApi";
stx_LatticeApi.__isInterface__ = true;
stx_LatticeApi.__interfaces__ = [stx_MeetSemiLatticeApi,stx_JoinSemiLatticeApi];
var stx_LiftLog = function() { };
$hxClasses["stx.LiftLog"] = stx_LiftLog;
stx_LiftLog.__name__ = "stx.LiftLog";
stx_LiftLog.log = function(wildcard) {
	return stx_log_Log.ZERO;
};
stx_LiftLog.logger = function(wildcard) {
	return new stx_log_Module();
};
stx_LiftLog.scope = function(stx,pos,method) {
	var scoping = stx_log_LogPosition.fromPos(pos).get_scoping();
	if(method != null) {
		scoping = scoping.with_method(method);
	}
	return scoping;
};
stx_LiftLog.stamp = function(pos) {
	return stx_log_LogPosition.pure(pos);
};
var stx_nano_lift_LiftNano = function() { };
$hxClasses["stx.nano.lift.LiftNano"] = stx_nano_lift_LiftNano;
stx_nano_lift_LiftNano.__name__ = "stx.nano.lift.LiftNano";
stx_nano_lift_LiftNano.nano = function(wildcard) {
	return new stx_nano_Module();
};
stx_nano_lift_LiftNano.arrd = function(wildcard,arr) {
	return arr;
};
stx_nano_lift_LiftNano.if_else = function(b,_if,_else) {
	if(b) {
		return _if();
	} else {
		return _else();
	}
};
stx_nano_lift_LiftNano.here = function(wildcard,pos) {
	return pos;
};
stx_nano_lift_LiftNano.uuid = function(v,value) {
	if(value == null) {
		value = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
	}
	var reg = new EReg("[xy]","g");
	return reg.map(value,function(reg) {
		var r = Math.random() * 16 | 0 | 0;
		var v = reg.matched(0) == "x" ? r : r & 3 | 8;
		return StringTools.hex(v);
	}).toLowerCase();
};
stx_nano_lift_LiftNano.sep = function(_) {
	var out = "/";
	return out;
};
stx_nano_lift_LiftNano.option = function(wildcard,v) {
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_nano_lift_LiftNano.accept = function(wildcard,t) {
	return stx_nano_Upshot.accept(t);
};
stx_nano_lift_LiftNano.reject = function(wildcard,e,pos) {
	return stx_nano_Upshot.reject(stx_nano_CTR.apply(e,pos));
};
stx_nano_lift_LiftNano.decline = function(wildcard,except) {
	return stx_fail_DeclineSum.EXTERNAL(except);
};
stx_nano_lift_LiftNano.success = function(wildcard,t) {
	return stx_pico_Outcome.success(t);
};
stx_nano_lift_LiftNano.failure = function(wildcard,e) {
	return stx_pico_Outcome.failure(e);
};
stx_nano_lift_LiftNano.fault = function(wildcard,pos) {
	return stx_nano_Fault._new(pos);
};
stx_nano_lift_LiftNano.couple = function(wildcard,tI,tII) {
	return function(fn) {
		fn(tI,tII);
	};
};
stx_nano_lift_LiftNano.pair = function(wildcard,tI,tII) {
	return new tink_core_MPair(tI,tII);
};
stx_nano_lift_LiftNano.decouple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,fn);
	};
};
stx_nano_lift_LiftNano.triple = function(wildcard,tI,tII,tIII) {
	return function(fn) {
		fn(tI,tII,tIII);
	};
};
stx_nano_lift_LiftNano.detriple = function(wildcard,fn) {
	return function(tp) {
		return stx_nano_TripleLift.detriple(tp,fn);
	};
};
stx_nano_lift_LiftNano.toCouple = function(self) {
	return self;
};
stx_nano_lift_LiftNano.lbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(lhs._hx_index) {
		case 0:
			var t = lhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,t,rhs));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.rbump = function(wildcard,tp) {
	return stx_nano_CoupleLift.decouple(tp,function(lhs,rhs) {
		var tmp;
		switch(rhs._hx_index) {
		case 0:
			var t = rhs.v;
			tmp = haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,t));
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
		return tmp;
	});
};
stx_nano_lift_LiftNano.fromPos = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.future = function(wildcard) {
	var trigger = new tink_core_FutureTrigger();
	var future = trigger;
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,trigger,future);
};
stx_nano_lift_LiftNano.tracer = function(v,pos) {
	return function(t) {
		haxe_Log.trace(t,pos);
		return t;
	};
};
stx_nano_lift_LiftNano.trace = function(v,pos) {
	var infos = pos;
	return function(d) {
		haxe_Log.trace(d,infos);
	};
};
stx_nano_lift_LiftNano.perform = function(__,fn) {
	return function(v) {
		fn();
		return v;
	};
};
stx_nano_lift_LiftNano.execute = function(__,fn) {
	return function(v) {
		var _g = fn();
		if(_g._hx_index == 0) {
			var e = _g.v;
			return stx_nano_UpshotSum.Reject(e);
		} else {
			return stx_nano_lift_LiftNano.accept(__,v);
		}
	};
};
stx_nano_lift_LiftNano.left = function(__,tI) {
	return haxe_ds_Either.Left(tI);
};
stx_nano_lift_LiftNano.right = function(__,tII) {
	return haxe_ds_Either.Right(tII);
};
stx_nano_lift_LiftNano.either = function(either) {
	return stx_pico_EitherLift.fold(either,function(l) {
		return l;
	},function(r) {
		return r;
	});
};
stx_nano_lift_LiftNano.crack = function(wildcard,e) {
	throw haxe_Exception.thrown(e);
};
stx_nano_lift_LiftNano.report = function(wildcard,f,pos) {
	if(f == null) {
		return stx_nano_Report.unit();
	} else {
		return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos)));
	}
};
stx_nano_lift_LiftNano.definition = function(wildcard,t) {
	return js_Boot.getClass(t);
};
stx_nano_lift_LiftNano.identifier = function(self) {
	return stx_pico_Identifier._new(self.__name__);
};
stx_nano_lift_LiftNano.locals = function(self) {
	return Type.getInstanceFields(self);
};
stx_nano_lift_LiftNano.vblock = function(wildcard,t) {
	return function() {
	};
};
stx_nano_lift_LiftNano.not = function(bool) {
	return !bool;
};
stx_nano_lift_LiftNano.toPosition = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_lift_LiftNano.chunk = function(_,v) {
	if(v == null) {
		return stx_nano_ChunkSum.Tap;
	} else {
		return stx_nano_ChunkSum.Val(v);
	}
};
stx_nano_lift_LiftNano.way = function(wildcard,str) {
	if(str == null) {
		return stx_nano_Way.unit();
	} else {
		return stx_nano_Way.fromStringDotted(str);
	}
};
stx_nano_lift_LiftNano.toIdentifier = function(pos) {
	return stx_pico_Identifier.lift(stx_nano_Position.get_className(stx_nano_Position.fromPos(pos)));
};
stx_nano_lift_LiftNano.toAlert = function(ft) {
	return stx_nano_Alert.lift(ft);
};
stx_nano_lift_LiftNano.toString = function(pos) {
	var id = stx_nano_lift_LiftNano.toIdentifier(pos);
	var fn = stx_nano_Position.get_methodName(stx_nano_lift_LiftNano.toPosition(pos));
	return "" + (id == null ? "null" : stx_pico_Identifier.toString(id)) + "." + fn;
};
stx_nano_lift_LiftNano.toIdent = function(self) {
	return stx_nano_Ident.fromIdentifier(self);
};
stx_nano_lift_LiftNano.ancestors = function(type,until) {
	var o = [];
	var t = type;
	while(t != null) {
		o = stx_nano_ClusterLift.snoc(o,t);
		t = t.__super__;
	}
	if(until != null) {
		o = stx_nano_ClusterLift.whilst(o,function(x) {
			return stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,x)) != stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,until));
		});
		o = stx_nano_ClusterLift.snoc(o,until);
	}
	return o;
};
var stx_Nano = function() { };
$hxClasses["stx.Nano"] = stx_Nano;
stx_Nano.__name__ = "stx.Nano";
stx_Nano.digests = function(wildcard) {
	return wildcard;
};
stx_Nano.stx = function(wildcard) {
	return STX.STX;
};
var stx_Maps = function() { };
$hxClasses["stx.Maps"] = stx_Maps;
stx_Maps.__name__ = "stx.Maps";
stx_Maps.map_into = function(self,fn,memo) {
	var _g = self.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var k = _g1.key;
		var v = _g1.value;
		memo.set(k,fn(v));
	}
	return memo;
};
var stx_PicoNano = function() { };
$hxClasses["stx.PicoNano"] = stx_PicoNano;
stx_PicoNano.__name__ = "stx.PicoNano";
var stx_LiftArrayToCluster = function() { };
$hxClasses["stx.LiftArrayToCluster"] = stx_LiftArrayToCluster;
stx_LiftArrayToCluster.__name__ = "stx.LiftArrayToCluster";
stx_LiftArrayToCluster.toCluster = function(self) {
	return stx_nano_Cluster.lift(self);
};
stx_LiftArrayToCluster.imm = function(self) {
	return stx_nano_Cluster.lift(self);
};
var stx_Tup2 = $hxEnums["stx.Tup2"] = { __ename__:"stx.Tup2",__constructs__:null
	,tuple2: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.Tup2",toString:$estr}; },$_._hx_name="tuple2",$_.__params__ = ["l","r"],$_)
};
stx_Tup2.__constructs__ = [stx_Tup2.tuple2];
var stx_Tup2Lift = function() { };
$hxClasses["stx.Tup2Lift"] = stx_Tup2Lift;
stx_Tup2Lift.__name__ = "stx.Tup2Lift";
stx_Tup2Lift.detuple = function(wildcard,fn) {
	return function(tp) {
		var l = tp.l;
		var r = tp.r;
		return fn(l,r);
	};
};
stx_Tup2Lift.reduce = function(self,fn) {
	var l = self.l;
	var r = self.r;
	return fn(l,r);
};
stx_Tup2Lift.fst = function(self) {
	var l = self.l;
	var r = self.r;
	return l;
};
stx_Tup2Lift.snd = function(self) {
	var l = self.l;
	var r = self.r;
	return r;
};
stx_Tup2Lift.mapl = function(self,fn) {
	var l = self.l;
	var r = self.r;
	return stx_Tup2.tuple2(fn(l),r);
};
var stx_Tup3 = $hxEnums["stx.Tup3"] = { __ename__:"stx.Tup3",__constructs__:null
	,tuple3: ($_=function(tI,tII,tIII) { return {_hx_index:0,tI:tI,tII:tII,tIII:tIII,__enum__:"stx.Tup3",toString:$estr}; },$_._hx_name="tuple3",$_.__params__ = ["tI","tII","tIII"],$_)
};
stx_Tup3.__constructs__ = [stx_Tup3.tuple3];
var stx_LiftPos = function() { };
$hxClasses["stx.LiftPos"] = stx_LiftPos;
stx_LiftPos.__name__ = "stx.LiftPos";
stx_LiftPos.lift = function(pos) {
	return stx_nano_Position._new(pos);
};
var stx_LiftArrayClassWithUnderscore = function() { };
$hxClasses["stx.LiftArrayClassWithUnderscore"] = stx_LiftArrayClassWithUnderscore;
stx_LiftArrayClassWithUnderscore.__name__ = "stx.LiftArrayClassWithUnderscore";
stx_LiftArrayClassWithUnderscore.graft = function(clazz) {
	return stx_lift_ArrayLift;
};
var stx_LiftFutureToSlot = function() { };
$hxClasses["stx.LiftFutureToSlot"] = stx_LiftFutureToSlot;
stx_LiftFutureToSlot.__name__ = "stx.LiftFutureToSlot";
stx_LiftFutureToSlot.toSlot = function(ft,pos) {
	return stx_nano_Slot.Guard(ft,pos);
};
var stx_LiftLazyFutureToSlot = function() { };
$hxClasses["stx.LiftLazyFutureToSlot"] = stx_LiftLazyFutureToSlot;
stx_LiftLazyFutureToSlot.__name__ = "stx.LiftLazyFutureToSlot";
stx_LiftLazyFutureToSlot.toSlot = function(fn) {
	return stx_nano_Slot.Guard(fn(),{ fileName : "stx/Nano.hx", lineNumber : 257, className : "stx.LiftLazyFutureToSlot", methodName : "toSlot"});
};
var stx_LiftEnumValue = function() { };
$hxClasses["stx.LiftEnumValue"] = stx_LiftEnumValue;
stx_LiftEnumValue.__name__ = "stx.LiftEnumValue";
stx_LiftEnumValue.lift = function(self) {
	return stx_nano_EnumValue.lift(self);
};
var stx_Parse = function() { };
$hxClasses["stx.Parse"] = stx_Parse;
stx_Parse.__name__ = "stx.Parse";
stx_Parse.string = function(self) {
	return stx_parse_parsers_StringParsers;
};
stx_Parse.mergeString = function(a,b) {
	return a + b;
};
stx_Parse.mergeArray = function(a,b) {
	return a.concat(b);
};
stx_Parse.mergeOption = function(a,b) {
	if(b._hx_index == 0) {
		var v = b.v;
		a += v;
		return a;
	} else {
		return "";
	}
};
stx_Parse.mergeTAndArray = function(a,b) {
	return [a].concat(b);
};
stx_Parse.mergeOptionAndArray = function(a,b) {
	var tmp;
	switch(a._hx_index) {
	case 0:
		var t = a.v;
		tmp = [t].concat(b);
		break;
	case 1:
		tmp = b;
		break;
	}
	return tmp;
};
var stx_LiftParse = function() { };
$hxClasses["stx.LiftParse"] = stx_LiftParse;
stx_LiftParse.__name__ = "stx.LiftParse";
stx_LiftParse.parse = function(wildcard) {
	return new stx_parse_Module();
};
stx_LiftParse.ok = function(rest,match) {
	return stx_parse_ParseResult.make(rest,haxe_ds_Option.Some(match),null);
};
stx_LiftParse.nil = function(rest) {
	return stx_parse_ParseResult.make(rest,haxe_ds_Option.None,null);
};
stx_LiftParse.failure = function(self,rest) {
	return stx_parse_ParseResult.make(rest,haxe_ds_Option.None,self);
};
stx_LiftParse.no = function(rest,message,fatal) {
	if(fatal == null) {
		fatal = false;
	}
	return stx_parse_ParseResult.make(rest,haxe_ds_Option.None,stx_LiftParse.erration(rest,message,fatal));
};
stx_LiftParse.cache = function(parser) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_LAnon(parser,{ fileName : "stx/Parse.hx", lineNumber : 75, className : "stx.LiftParse", methodName : "cache"}));
};
stx_LiftParse.erration = function(rest,message,fatal) {
	if(fatal == null) {
		fatal = false;
	}
	return stx_fail_Refuse.pure(stx_fail_ParseFailure.make(stx_parse_ParseInput.get_content(rest).index,message,fatal));
};
stx_LiftParse.sub = function(p,p0) {
	return new stx_parse_parser_term_Sub(p,p0,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 11, className : "stx.parse.Parsers", methodName : "Sub"});
};
stx_LiftParse.tagged = function(p,tag) {
	p.tag = haxe_ds_Option.Some(tag);
	return new stx_parse_parser_term_TagRefuse(p,tag,{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
};
stx_LiftParse.succeed = function(v) {
	return new stx_parse_parser_term_Succeed(v,{ fileName : "stx/Parse.hx", lineNumber : 88, className : "stx.LiftParse", methodName : "succeed"});
};
var stx_LiftParseFailure = function() { };
$hxClasses["stx.LiftParseFailure"] = stx_LiftParseFailure;
stx_LiftParseFailure.__name__ = "stx.LiftParseFailure";
stx_LiftParseFailure.is_parse_fail = function(self) {
	return stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(self.get_error())),function(next,memo) {
		return stx_LiftIf.if_else(memo,function() {
			return true;
		},function() {
			var self = next.get_data();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				if(t._hx_index == 1) {
					var x = t.v;
					return x.msg != stx_fail_ParseFailureCode.fromString(stx_fail_ParseFailure.FAIL);
				} else {
					return false;
				}
				break;
			case 1:
				return false;
			}
		});
	},false);
};
stx_LiftParseFailure.is_fatal = function(self) {
	return stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(self.get_error())),function(next,memo) {
		return stx_LiftIf.if_else(memo,function() {
			return true;
		},function() {
			var self = next.get_data();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_fail_DeclineLift.fold(t,function(x) {
					return x.fatal;
				},function(_) {
					return false;
				});
			case 1:
				return false;
			}
		});
	},false);
};
stx_LiftParseFailure.toString = function(self) {
	return stx_nano_IterLift.lfold1(stx_nano_IterLift.map(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(stx_nano_Defect.toRefuse(self))),function(x) {
		var self = x.get_data();
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			return stx_fail_DeclineLift.fold(t,function(okI) {
				if(okI == null) {
					return "null";
				} else {
					return stx_fail_ParseFailure.toString(okI);
				}
			},function(_) {
				return "";
			});
		case 1:
			return "";
		}
	}),function(n,m) {
		return "" + m + "," + n;
	});
};
var stx_Pico = $hxEnums["stx.Pico"] = { __ename__:"stx.Pico",__constructs__:null
	,Pico: {_hx_name:"Pico",_hx_index:0,__enum__:"stx.Pico",toString:$estr}
};
stx_Pico.__constructs__ = [stx_Pico.Pico];
var stx_PosLift = function() { };
$hxClasses["stx.PosLift"] = stx_PosLift;
stx_PosLift.__name__ = "stx.PosLift";
stx_PosLift.toString = function(pos) {
	if(pos == null) {
		return "<no_pos>";
	}
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + f + ":" + ln;
};
var stx_Tag = {};
stx_Tag.ofAny = function(t) {
	return null;
};
var stx_ExceptionApi = function() { };
$hxClasses["stx.ExceptionApi"] = stx_ExceptionApi;
stx_ExceptionApi.__name__ = "stx.ExceptionApi";
stx_ExceptionApi.__isInterface__ = true;
stx_ExceptionApi.prototype = {
	get_message: null
	,get_stack: null
	,get_native: null
	,details: null
	,__class__: stx_ExceptionApi
};
var stx_PkgLift = function() { };
$hxClasses["stx.PkgLift"] = stx_PkgLift;
stx_PkgLift.__name__ = "stx.PkgLift";
stx_PkgLift.pkg = function(_,pos) {
	var p = stx_pkg_Scope.fromPosInfos(pos);
	return stx_pkg_Pkg.fromScope(p);
};
var stx_Show = function() { };
$hxClasses["stx.Show"] = stx_Show;
stx_Show.__name__ = "stx.Show";
stx_Show.show = function(wildcard,v) {
	return (stx_Show.make(v))(v);
};
stx_Show.__show__ = function(impl) {
	return function(v) {
		if(null == v) {
			return "null";
		} else {
			return impl(v);
		}
	};
};
stx_Show.make = function(t) {
	return stx_Show.make0(Type.typeof(t));
};
stx_Show.make0 = function(v) {
	switch(v._hx_index) {
	case 0:
		return stx__$Show_NullShow.toString;
	case 1:
		return stx_Show.__show__(stx__$Show_IntShow.toString);
	case 2:
		return stx_Show.__show__(stx__$Show_FloatShow.toString);
	case 3:
		return stx_Show.__show__(stx__$Show_BoolShow.toString);
	case 4:
		return stx_Show.__show__(stx__$Show_ObjectShow.toString);
	case 5:
		return stx_Show.__show__(function(v) {
			return "<function>";
		});
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == String) {
			return stx_Show.__show__(Std.string);
		} else {
			var c = _g;
			if(c == Array) {
				return stx_Show.__show__(stx__$Show_ArrayShow.toString);
			} else {
				var c = _g;
				if(c == haxe_ds_List) {
					return stx_Show.__show__(stx__$Show_ListShow.toString);
				} else {
					var c = _g;
					if(HxOverrides.remove(Type.getInstanceFields(c),"toString")) {
						return stx_Show.__show__(function(v) {
							return Reflect.field(v,"toString").apply(v,[]);
						});
					} else {
						return stx_Show.__show__(function(v) {
							var c = js_Boot.getClass(v);
							return c.__name__;
						});
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		return stx_Show.__show__(stx__$Show_EnumShow.toString);
	case 8:
		return stx_Show.__show__(function(v) {
			return "<unknown>";
		});
	}
};
var stx__$Show_ListShow = function() { };
$hxClasses["stx._Show.ListShow"] = stx__$Show_ListShow;
stx__$Show_ListShow.__name__ = "stx._Show.ListShow";
stx__$Show_ListShow.toString = function(lst) {
	return stx__$Show_IterableShow.toString(lst);
};
var stx__$Show_NullShow = function() { };
$hxClasses["stx._Show.NullShow"] = stx__$Show_NullShow;
stx__$Show_NullShow.__name__ = "stx._Show.NullShow";
stx__$Show_NullShow.toString = function(v) {
	return "null";
};
var stx__$Show_EnumShow = function() { };
$hxClasses["stx._Show.EnumShow"] = stx__$Show_EnumShow;
stx__$Show_EnumShow.__name__ = "stx._Show.EnumShow";
stx__$Show_EnumShow.toString = function(v) {
	var e = v;
	var buf = $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
	var params = Type.enumParameters(v);
	if(params.length == 0) {
		return buf;
	} else {
		buf += "(";
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			var p = params[i];
			buf += (stx_Show.make(p))(p);
			if(i < params.length - 1) {
				buf += ", ";
			}
		}
		buf += ")";
		return buf;
	}
};
var stx__$Show_ObjectShow = function() { };
$hxClasses["stx._Show.ObjectShow"] = stx__$Show_ObjectShow;
stx__$Show_ObjectShow.__name__ = "stx._Show.ObjectShow";
stx__$Show_ObjectShow.toString = function(v) {
	if(Reflect.fields(v).length == 0) {
		return Std.string(v);
	}
	var buf = [];
	var _g = 0;
	var _g1 = Reflect.fields(v);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		var i = Reflect.field(v,k);
		buf.push(k + ":" + (stx_Show.make(i))(i));
	}
	return "{" + buf.join(",") + "}";
};
var stx__$Show_ArrayShow = function() { };
$hxClasses["stx._Show.ArrayShow"] = stx__$Show_ArrayShow;
stx__$Show_ArrayShow.__name__ = "stx._Show.ArrayShow";
stx__$Show_ArrayShow.toString = function(v) {
	return stx__$Show_ArrayShow.toStringWith(v,stx_Show.make(v[0]));
};
stx__$Show_ArrayShow.toStringWith = function(v,show) {
	var result = new Array(v.length);
	var _g = 0;
	var _g1 = v.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = show(v[i]);
	}
	return "[" + result.join(", ") + "]";
};
stx__$Show_ArrayShow.mkString = function(arr,sep,show) {
	if(sep == null) {
		sep = ", ";
	}
	var isFirst = true;
	return Lambda.fold(arr,function(b,a) {
		var prefix;
		if(isFirst) {
			isFirst = false;
			prefix = "";
		} else {
			prefix = sep;
		}
		if(null == show) {
			show = stx_Show.make(b);
		}
		return a + prefix + show(b);
	},"");
};
var stx__$Show_IterableShow = function() { };
$hxClasses["stx._Show.IterableShow"] = stx__$Show_IterableShow;
stx__$Show_IterableShow.__name__ = "stx._Show.IterableShow";
stx__$Show_IterableShow.toString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	return stx__$Show_IterableShow.mkString(i,show,prefix,suffix,sep);
};
stx__$Show_IterableShow.mkString = function(i,show,prefix,suffix,sep) {
	if(sep == null) {
		sep = ", ";
	}
	if(suffix == null) {
		suffix = ")";
	}
	if(prefix == null) {
		prefix = "(";
	}
	if(show == null) {
		show = Std.string;
	}
	var s = prefix;
	var isFirst = true;
	var t = $getIterator(i);
	while(t.hasNext()) {
		var t1 = t.next();
		if(isFirst) {
			isFirst = false;
		} else {
			s += sep;
		}
		s += show(t1);
	}
	return s + suffix;
};
var stx__$Show_IntShow = function() { };
$hxClasses["stx._Show.IntShow"] = stx__$Show_IntShow;
stx__$Show_IntShow.__name__ = "stx._Show.IntShow";
stx__$Show_IntShow.toString = function(v) {
	return "" + v;
};
var stx__$Show_FloatShow = function() { };
$hxClasses["stx._Show.FloatShow"] = stx__$Show_FloatShow;
stx__$Show_FloatShow.__name__ = "stx._Show.FloatShow";
stx__$Show_FloatShow.toString = function(v) {
	return "" + v;
};
var stx__$Show_StackItemShow = function() { };
$hxClasses["stx._Show.StackItemShow"] = stx__$Show_StackItemShow;
stx__$Show_StackItemShow.__name__ = "stx._Show.StackItemShow";
stx__$Show_StackItemShow.toString = function(s) {
	switch(s._hx_index) {
	case 0:
		return "function";
	case 1:
		var m = s.m;
		return m;
	case 2:
		var _g = s.file;
		var _g = s.column;
		var si = s.s;
		var line = s.line;
		return stx__$Show_StackItemShow.toString(si) + (":" + line);
	case 3:
		var classname = s.classname;
		var method = s.method;
		return "" + classname + "." + method;
	case 4:
		var v = s.v;
		return "@" + v;
	}
};
var stx__$Show_BoolShow = function() { };
$hxClasses["stx._Show.BoolShow"] = stx__$Show_BoolShow;
stx__$Show_BoolShow.__name__ = "stx._Show.BoolShow";
stx__$Show_BoolShow.toString = function(v) {
	if(v) {
		return "true";
	} else {
		return "false";
	}
};
var stx_Stream = {};
stx_Stream._new = function(self) {
	return self;
};
stx_Stream.lift = function(self) {
	return stx_Stream._new(self);
};
stx_Stream.fromArray = function(self) {
	var f = stx_nano_ChunkSum.Val;
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(self[i]);
	}
	return stx_Stream.lift(stx_nano_Signal.fromArray(stx_lift_ArrayLift.snoc(result,stx_nano_ChunkSum.End())));
};
stx_Stream.fromCluster = function(self) {
	return stx_Stream.lift(stx_nano_Signal.fromArray(stx_nano_Cluster.prj(stx_nano_ClusterLift.snoc(stx_nano_ClusterLift.map(self,stx_nano_ChunkSum.Val),stx_nano_ChunkSum.End()))));
};
stx_Stream.fromFuture = function(self) {
	var self1 = function() {
		return self;
	};
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self1().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
stx_Stream.window = function(this1,buffer) {
	return stx_Stream.lift(stx_stream_Window.toSignal(stx_stream_Window.make(this1,buffer)));
};
stx_Stream.fromThunkFuture = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
stx_Stream.pure = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		cb(stx_nano_ChunkSum.Val(self));
		cb(stx_nano_ChunkSum.End());
		return new tink_core_SimpleLink(function() {
		});
	}));
};
stx_Stream.effect = function(self) {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		self();
		cb(stx_nano_ChunkSum.End());
		return new tink_core_SimpleLink(function() {
		});
	}));
};
stx_Stream.unit = function() {
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		cb(stx_nano_ChunkSum.End());
		return new tink_core_SimpleLink(function() {
		});
	}));
};
stx_Stream.make = function(f,init) {
	return stx_Stream.lift(new tink_core__$Signal_Suspendable(f,init));
};
stx_Stream.map = function(this1,fn) {
	return tink_core_Signal.map(this1,function(chunk) {
		return stx_nano_ChunkLift.map(chunk,fn);
	});
};
stx_Stream.prj = function(this1) {
	return this1;
};
stx_Stream.get_self = function(this1) {
	return stx_Stream.lift(this1);
};
var stx_StreamLift = function() { };
$hxClasses["stx.StreamLift"] = stx_StreamLift;
stx_StreamLift.__name__ = "stx.StreamLift";
stx_StreamLift.lift = function(self) {
	return stx_Stream.lift(self);
};
stx_StreamLift.seq = function(self,that) {
	var id = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxx");
	var ended = false;
	return stx_StreamLift.lift(stx_nano_Signal.make(function(cb) {
		var cbII = null;
		var cbI = self.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				cb(stx_nano_ChunkSum.Val(v));
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
				switch(self._hx_index) {
				case 0:
					var t = self.v;
					cb(stx_nano_ChunkSum.End(t));
					break;
				case 1:
					cbII = that.listen(function(chunk) {
						switch(chunk._hx_index) {
						case 0:
							var v = chunk.v;
							if(!ended) {
								cb(stx_nano_ChunkSum.Val(v));
							} else {
								var cb1 = cb;
								var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/Stream.hx", lineNumber : 133, className : "stx.StreamLift", methodName : "seq"});
								cb1(stx_nano_ChunkSum.End(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
									return stx_stream_core_Errors.e_end_called_twice(_);
								},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))));
							}
							break;
						case 1:
							break;
						case 2:
							var e = chunk.err;
							ended = true;
							cb(stx_nano_ChunkSum.End(e));
							break;
						}
					});
					break;
				}
				break;
			}
		});
		return new tink_core_SimpleLink(function() {
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cbI));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cbII));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
		});
	}));
};
stx_StreamLift.flat_map = function(self,fn) {
	var cancelled = false;
	var streams = [];
	var id = Math.random();
	return stx_StreamLift.lift(new tink_core__$Signal_Suspendable(function(cb) {
		var callbackI = null;
		var callback = self.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				var val = v;
				if(!cancelled) {
					new stx_log_log_term_Level(stx_stream_Logging.log(stx_nano_Wildcard.__),1).toLogApi().comply(new stx_log_EntryCtr().thunk(function() {
						return "" + Std.string(val);
					}),stx_log_LogPosition.fromPos({ fileName : "stx/Stream.hx", lineNumber : 178, className : "stx.StreamLift", methodName : "flat_map"}));
					streams.push(fn(val));
				}
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
				switch(self._hx_index) {
				case 0:
					var t = self.v;
					cancelled = true;
					streams = [];
					cb(stx_nano_ChunkSum.End(t));
					break;
				case 1:
					var self = stx_lift_ArrayLift.lfold1(streams,stx_StreamLift.seq);
					var v = stx_Stream.unit();
					var this1;
					if(self._hx_index == 0) {
						var v1 = self.v;
						this1 = v1;
					} else {
						this1 = v;
					}
					callbackI = this1.listen(function(chunk) {
						cb(chunk);
					});
					break;
				}
				break;
			}
		});
		return new tink_core_SimpleLink(function() {
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,callback));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
			var link = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,callbackI));
			while(link.hasNext()) {
				var link1 = link.next();
				if(link1 != null) {
					link1.cancel();
				}
			}
		});
	},null));
};
stx_StreamLift.next = function(self) {
	return tink_core_Signal.nextTime(stx_Stream.prj(self));
};
stx_StreamLift.errata = function(self,fn) {
	return stx_StreamLift.lift(tink_core_Signal.map(stx_Stream.prj(self),function(chk) {
		return stx_nano_ChunkLift.errata(chk,fn);
	}));
};
stx_StreamLift.errate = function(self,fn) {
	return stx_StreamLift.lift(tink_core_Signal.map(stx_Stream.prj(self),function(chk) {
		return stx_nano_ChunkLift.errate(chk,fn);
	}));
};
var stx_Test = function() { };
$hxClasses["stx.Test"] = stx_Test;
stx_Test.__name__ = "stx.Test";
stx_Test.poke = function(wildcard,arr) {
	var _g = arr;
	var f = function(t) {
		return stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,t);
	};
	var tmp = function() {
		var result = new Array(_g.length);
		var _g1 = 0;
		var _g2 = _g.length;
		while(_g1 < _g2) {
			var i = _g1++;
			result[i] = f(_g[i]);
		}
		return result;
	};
	new stx_log_log_term_Level(stx_log_Log.ZERO,2).toLogApi().comply(new stx_log_EntryCtr().thunk(tmp),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/Test.hx", lineNumber : 11, className : "stx.Test", methodName : "poke"}));
	var f1 = ($_=new stx_assert_Module({ fileName : "src/main/haxe/stx/Test.hx", lineNumber : 12, className : "stx.Test", methodName : "poke"}),$bind($_,$_.iz));
	var result = new Array(arr.length);
	var _g1 = 0;
	var _g2 = arr.length;
	while(_g1 < _g2) {
		var i = _g1++;
		result[i] = f1(arr[i]);
	}
	var self = stx_lift_ArrayLift.lfold1(result,($_=new stx_assert_Module({ fileName : "src/main/haxe/stx/Test.hx", lineNumber : 13, className : "stx.Test", methodName : "poke"}),$bind($_,$_.or)));
	var v = new stx_assert_Module({ fileName : "src/main/haxe/stx/Test.hx", lineNumber : 14, className : "stx.Test", methodName : "poke"}).never();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_assert_Predicate.check(tmp);
};
stx_Test.test = function(wildcard) {
	return new stx_test_Module();
};
stx_Test.explain = function(wildcard,val,ctr) {
	return new stx_Explain(val,ctr);
};
var stx_Explain = function(val,ctr) {
	this.val = val;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = Std.string;
	}
	this.ctr = tmp;
};
$hxClasses["stx.Explain"] = stx_Explain;
stx_Explain.__name__ = "stx.Explain";
stx_Explain.prototype = {
	val: null
	,ctr: null
	,should: function() {
		return new stx_Explainers(this);
	}
	,match: function(sentence,args) {
		var arr = [this.ctr(this.val)];
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,args);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = [];
		}
		return new stx_Explained(sentence,arr.concat(tmp));
	}
	,__class__: stx_Explain
};
var stx_Explainers = function(explain) {
	this.explain = explain;
};
$hxClasses["stx.Explainers"] = stx_Explainers;
stx_Explainers.__name__ = "stx.Explainers";
stx_Explainers.prototype = {
	explain: null
	,go: function(rest,args) {
		return this.explain.match("%s should " + rest,args);
	}
	,be_like: function(v) {
		return this.go("be like %s.",[v]);
	}
	,be: function(v,words) {
		if(words == null) {
			words = "";
		}
		var s = words == "" ? "be %s" : "be " + words + " %s";
		return this.go("" + s,[v]);
	}
	,be_equal_to: function(v) {
		return this.go("be equal to %s",[v]);
	}
	,contain: function(v) {
		return this.go("contain %s",[v]);
	}
	,exist: function() {
		return this.go("should exist.");
	}
	,raises: function(e) {
		return this.go("raise error: %s",[e]);
	}
	,__class__: stx_Explainers
};
var stx_Explained = function(sentence,values) {
	this.sentence = sentence;
	this.values = values;
};
$hxClasses["stx.Explained"] = stx_Explained;
stx_Explained.__name__ = "stx.Explained";
stx_Explained.prototype = {
	sentence: null
	,values: null
	,toString: function() {
		var tmp = this.sentence;
		var _this = this.values;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = "" + _this[i];
		}
		return Printf.format(tmp,result);
	}
	,__class__: stx_Explained
};
var stx_assert_AssertionApi = function() { };
$hxClasses["stx.assert.AssertionApi"] = stx_assert_AssertionApi;
stx_assert_AssertionApi.__name__ = "stx.assert.AssertionApi";
stx_assert_AssertionApi.__isInterface__ = true;
stx_assert_AssertionApi.prototype = {
	comply: null
	,asAssertionApi: null
	,__class__: stx_assert_AssertionApi
};
var stx_assert_Assertion = {};
stx_assert_Assertion.bindI = function(this1,l) {
	return new stx_assert_predicate_term_AssertionPredicate(this1,l);
};
stx_assert_Assertion.equals = function(pos) {
	return new stx_assert_assertion_term_Equals(pos);
};
stx_assert_Assertion.alike = function(pos) {
	return new stx_assert_assertion_term_Alike(pos);
};
stx_assert_Assertion.gt = function(pos) {
	return new stx_assert_assertion_term_GreaterThan(pos);
};
stx_assert_Assertion.gt_eq = function(pos) {
	return new stx_assert_assertion_term_GreaterThanOrEquals(pos);
};
stx_assert_Assertion.lt = function(pos) {
	return new stx_assert_assertion_term_LessThan(pos);
};
stx_assert_Assertion.lt_eq = function(pos) {
	return new stx_assert_assertion_term_LessThanOrEquals(pos);
};
stx_assert_Assertion.Anon = function(fn) {
	return new stx_assert_assertion_term_Anon(fn,{ fileName : "stx/assert/Assertion.hx", lineNumber : 38, className : "stx.assert._Assertion.Assertion_Impl_", methodName : "Anon"});
};
stx_assert_Assertion.Errata = function(self,fn) {
	return new stx_assert_assertion_term_Errata(self.asAssertionApi(),fn,{ fileName : "stx/assert/Assertion.hx", lineNumber : 41, className : "stx.assert._Assertion.Assertion_Impl_", methodName : "Errata"});
};
var stx_assert_OrderableApi = function() { };
$hxClasses["stx.assert.OrderableApi"] = stx_assert_OrderableApi;
stx_assert_OrderableApi.__name__ = "stx.assert.OrderableApi";
stx_assert_OrderableApi.__isInterface__ = true;
stx_assert_OrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_OrderableApi
};
var stx_assert_EqualableApi = function() { };
$hxClasses["stx.assert.EqualableApi"] = stx_assert_EqualableApi;
stx_assert_EqualableApi.__name__ = "stx.assert.EqualableApi";
stx_assert_EqualableApi.__isInterface__ = true;
stx_assert_EqualableApi.prototype = {
	eq: null
	,__class__: stx_assert_EqualableApi
};
var stx_assert_ComparableApi = function() { };
$hxClasses["stx.assert.ComparableApi"] = stx_assert_ComparableApi;
stx_assert_ComparableApi.__name__ = "stx.assert.ComparableApi";
stx_assert_ComparableApi.__isInterface__ = true;
stx_assert_ComparableApi.__interfaces__ = [stx_assert_OrderableApi,stx_assert_EqualableApi];
stx_assert_ComparableApi.prototype = {
	toComparable: null
	,__class__: stx_assert_ComparableApi
};
var stx_assert_ComparableCls = function() { };
$hxClasses["stx.assert.ComparableCls"] = stx_assert_ComparableCls;
stx_assert_ComparableCls.__name__ = "stx.assert.ComparableCls";
stx_assert_ComparableCls.__interfaces__ = [stx_assert_ComparableApi];
stx_assert_ComparableCls.prototype = {
	eq: null
	,lt: null
	,toComparable: function() {
		return this;
	}
	,__class__: stx_assert_ComparableCls
};
var stx_assert_Comparable = {};
stx_assert_Comparable._new = function(self) {
	return self;
};
stx_assert_Comparable.Register = function() {
	return new stx_assert_comparable_term_Register();
};
stx_assert_Comparable.Int = function() {
	return new stx_assert_comparable_term_Int();
};
stx_assert_Comparable.String = function() {
	return new stx_assert_comparable_term_String();
};
stx_assert_Comparable.Couple = function(l,r) {
	return new stx_assert_comparable_term_Couple(l,r);
};
stx_assert_Comparable.Primitive = function() {
	return new stx_assert_comparable_term_Primitive();
};
stx_assert_Comparable.Anon = function(eq,lt) {
	return new stx_assert_comparable_term_Anon(eq,lt);
};
stx_assert_Comparable.Cluster = function(inner) {
	return new stx_assert_comparable_term_Cluster(inner);
};
stx_assert_Comparable.Lazy = function(eq,lt) {
	return new stx_assert_comparable_term_Lazy(eq,lt);
};
stx_assert_Comparable.KV = function(K,V) {
	return new stx_assert_comparable_term_KV(K,V);
};
stx_assert_Comparable.copy = function(this1,eq,lt) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,eq);
	var v = this1.eq();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,lt);
	var v = this1.lt();
	var tmp1;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp1 = v1;
	} else {
		tmp1 = v;
	}
	return stx_assert_Comparable.Anon(tmp,tmp1);
};
stx_assert_Comparable.is_greater_or_equal = function(this1,self,that) {
	return stx_LiftIf.if_else(stx_assert_EqualedSum.is_equal(this1.eq().comply(self,that)),function() {
		return true;
	},function() {
		return stx_assert_OrderedLift.is_less_than(this1.lt().comply(that,self));
	});
};
var stx_assert_ComparativeSum = $hxEnums["stx.assert.ComparativeSum"] = { __ename__:"stx.assert.ComparativeSum",__constructs__:null
	,GT: {_hx_name:"GT",_hx_index:0,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,GTEQ: {_hx_name:"GTEQ",_hx_index:1,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LT: {_hx_name:"LT",_hx_index:2,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,LTEQ: {_hx_name:"LTEQ",_hx_index:3,__enum__:"stx.assert.ComparativeSum",toString:$estr}
	,EQ: {_hx_name:"EQ",_hx_index:4,__enum__:"stx.assert.ComparativeSum",toString:$estr}
};
stx_assert_ComparativeSum.__constructs__ = [stx_assert_ComparativeSum.GT,stx_assert_ComparativeSum.GTEQ,stx_assert_ComparativeSum.LT,stx_assert_ComparativeSum.LTEQ,stx_assert_ComparativeSum.EQ];
var stx_assert_Comparative = {};
stx_assert_Comparative._new = function(self) {
	return self;
};
stx_assert_Comparative.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return ">";
	case 1:
		return ">=";
	case 2:
		return "<";
	case 3:
		return "<=";
	case 4:
		return "==";
	}
};
var stx_assert_Compare = {};
stx_assert_Compare._new = function(self) {
	return self;
};
stx_assert_Compare.pure = function(v) {
	return stx_assert__$Compare_CompareSum.Value(v);
};
stx_assert_Compare.and = function(this1,that) {
	return stx_assert__$Compare_CompareSum.And(this1,that);
};
stx_assert_Compare.or = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Or(this1,that);
};
stx_assert_Compare.not = function(this1) {
	return stx_assert__$Compare_CompareSum.Not(this1);
};
stx_assert_Compare.gt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GT,that);
};
stx_assert_Compare.gtEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that);
};
stx_assert_Compare.lt = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LT,that);
};
stx_assert_Compare.ltEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.LTEQ,that);
};
stx_assert_Compare.eq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.EQ,that);
};
stx_assert_Compare.nEq = function(this1,that) {
	return stx_assert__$Compare_CompareSum.Not(stx_assert__$Compare_CompareSum.Binop(this1,stx_assert_ComparativeSum.GTEQ,that));
};
stx_assert_Compare.get_self = function(this1) {
	return this1;
};
var stx_assert__$Compare_CompareSum = $hxEnums["stx.assert._Compare.CompareSum"] = { __ename__:"stx.assert._Compare.CompareSum",__constructs__:null
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v"],$_)
	,And: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="And",$_.__params__ = ["l","r"],$_)
	,Or: ($_=function(l,r) { return {_hx_index:2,l:l,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Or",$_.__params__ = ["l","r"],$_)
	,Not: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Not",$_.__params__ = ["e"],$_)
	,Binop: ($_=function(l,op,r) { return {_hx_index:4,l:l,op:op,r:r,__enum__:"stx.assert._Compare.CompareSum",toString:$estr}; },$_._hx_name="Binop",$_.__params__ = ["l","op","r"],$_)
};
stx_assert__$Compare_CompareSum.__constructs__ = [stx_assert__$Compare_CompareSum.Value,stx_assert__$Compare_CompareSum.And,stx_assert__$Compare_CompareSum.Or,stx_assert__$Compare_CompareSum.Not,stx_assert__$Compare_CompareSum.Binop];
var stx_assert_EqApi = function() { };
$hxClasses["stx.assert.EqApi"] = stx_assert_EqApi;
stx_assert_EqApi.__name__ = "stx.assert.EqApi";
stx_assert_EqApi.__isInterface__ = true;
stx_assert_EqApi.prototype = {
	comply: null
	,toEqApi: null
	,__class__: stx_assert_EqApi
};
var stx_assert_EqCls = function() { };
$hxClasses["stx.assert.EqCls"] = stx_assert_EqCls;
stx_assert_EqCls.__name__ = "stx.assert.EqCls";
stx_assert_EqCls.__interfaces__ = [stx_assert_EqApi];
stx_assert_EqCls.prototype = {
	comply: null
	,toEqApi: function() {
		return this;
	}
	,__class__: stx_assert_EqCls
};
var stx_assert_EqCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.EqCtr"] = stx_assert_EqCtr;
stx_assert_EqCtr.__name__ = "stx.assert.EqCtr";
stx_assert_EqCtr.__super__ = stx_pico_Clazz;
stx_assert_EqCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_assert_EqCtr
});
var stx_assert_Eq = {};
stx_assert_Eq._new = function(self) {
	return self;
};
stx_assert_Eq.lift = function(self) {
	return self;
};
stx_assert_Eq.toAssertion = function(this1,pos) {
	return new stx_assert_eq_term_EqAssertion(this1,pos);
};
stx_assert_Eq.Int = function() {
	return new stx_assert_eq_term_Int();
};
stx_assert_Eq.Int64 = function() {
	return new stx_assert_eq_term_Int64();
};
stx_assert_Eq.String = function() {
	return new stx_assert_eq_term_String();
};
stx_assert_Eq.Couple = function(l,r) {
	return new stx_assert_eq_term_Couple(l,r);
};
stx_assert_Eq.KV = function(l,r) {
	return new stx_assert_eq_term_KV(l,r);
};
stx_assert_Eq.Anon = function(fn) {
	return new stx_assert_eq_term_Anon(fn);
};
stx_assert_Eq.Nada = function() {
	return new stx_assert_eq_term_Nada();
};
stx_assert_Eq.Bool = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Float = function() {
	return stx_assert_Eq.Anon(function(l,r) {
		if(l == r) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Eq.Array = function(inner) {
	return new stx_assert_eq_term_Array(inner);
};
stx_assert_Eq.Record = function(inner) {
	return new stx_assert_eq_term_Record(inner);
};
stx_assert_Eq.Cluster = function(inner) {
	return new stx_assert_eq_term_Cluster(inner);
};
stx_assert_Eq.Primitive = function() {
	return new stx_assert_eq_term_Primitive();
};
stx_assert_Eq.Option = function(inner) {
	return new stx_assert_eq_term_Option(inner);
};
stx_assert_Eq.EnumValueIndex = function() {
	return new stx_assert_eq_term_EnumValueIndex();
};
stx_assert_Eq.NullOr = function(inner) {
	return new stx_assert_eq_term_NullOr(inner);
};
stx_assert_Eq.Ident = function() {
	return new stx_assert_eq_term_Ident();
};
stx_assert_Eq.Register = function() {
	return new stx_assert_eq_term_Register();
};
stx_assert_Eq.Tup2 = function(l,r) {
	return new stx_assert_eq_term_Tup2(l,r);
};
stx_assert_Eq.StringMap = function(inner) {
	return new stx_assert_eq_term_StringMap(inner);
};
var stx_assert_Equal = function() { };
$hxClasses["stx.assert.Equal"] = stx_assert_Equal;
stx_assert_Equal.__name__ = "stx.assert.Equal";
stx_assert_Equal.getEqualFor = function(v) {
	return stx_assert_Equal.getEqualForType(Type.typeof(v));
};
stx_assert_Equal.getEqualForType = function(v) {
	var tmp;
	switch(v._hx_index) {
	case 0:
		tmp = new stx_assert_eq_term_Null();
		break;
	case 1:
		tmp = new stx_assert_eq_term_Int();
		break;
	case 2:
		tmp = new stx_assert_eq_term_Float();
		break;
	case 3:
		tmp = new stx_assert_eq_term_Bool();
		break;
	case 4:
		tmp = new stx_assert_eq_term_Object();
		break;
	case 5:
		tmp = new stx_assert_eq_term_Function();
		break;
	case 6:
		var _g = v.c;
		var c = _g;
		if(c == haxe_ds_StringMap) {
			tmp = new stx_assert_eq_term_Map(new stx_assert_eq_term_Deferred());
		} else {
			var c = _g;
			if(c == stx_assert_eq_term_Array) {
				tmp = new stx_assert_eq_term_Array(new stx_assert_eq_term_Deferred());
			} else {
				var c = _g;
				if(c == stx_assert_eq_term_Date) {
					tmp = new stx_assert_eq_term_Date();
				} else {
					var c = _g;
					if(c == stx_assert_eq_term_String) {
						tmp = new stx_assert_eq_term_String();
					} else {
						var c = _g;
						tmp = HxOverrides.remove(Type.getInstanceFields(c),"equals") ? new stx_assert_eq_term_HasFunction().elide() : new stx_assert_eq_term_UnsupportedClass();
					}
				}
			}
		}
		break;
	case 7:
		var _g = v.e;
		tmp = new stx_assert_eq_term_Enum();
		break;
	case 8:
		tmp = new stx_assert_eq_term_Unknown();
		break;
	}
	return new stx_assert_eq_term_NotNull(tmp);
};
var stx_assert_Equalable = {};
stx_assert_Equalable._new = function(self) {
	return self;
};
var stx_assert_EqualedSum = {};
stx_assert_EqualedSum.is_ok = function(this1) {
	return this1;
};
stx_assert_EqualedSum.is_equal = function(this1) {
	return this1;
};
stx_assert_EqualedSum.are_equal = function(this1) {
	return this1;
};
stx_assert_EqualedSum.is_not_equal = function(this1) {
	return !this1;
};
stx_assert_EqualedSum.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(this1 && stx_assert_EqualedSum.is_ok(that));
};
var stx_assert_Equaled = {};
stx_assert_Equaled.fromBool = function(b) {
	if(b) {
		return stx_assert_Equaled.AreEqual;
	} else {
		return stx_assert_Equaled.NotEqual;
	}
};
stx_assert_Equaled.and = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) && stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Equaled.or = function(this1,that) {
	return stx_assert_Equaled.fromBool(stx_assert_Equaled.toBool(this1) || stx_assert_Equaled.toBool(that));
};
stx_assert_Equaled.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
var stx_assert_Module = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.Module"] = stx_assert_Module;
stx_assert_Module.__name__ = "stx.assert.Module";
stx_assert_Module.__super__ = stx_pico_Clazz;
stx_assert_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,equals: function() {
		return stx_assert_Assertion.equals(this.pos);
	}
	,alike: function() {
		return new stx_assert_assertion_term_Alike(this.pos);
	}
	,gt: function() {
		return stx_assert_Assertion.gt(this.pos);
	}
	,gt_eq: function() {
		return new stx_assert_assertion_term_GreaterThanOrEquals(this.pos);
	}
	,lt: function() {
		return new stx_assert_assertion_term_LessThan(this.pos);
	}
	,lt_eq: function() {
		return new stx_assert_assertion_term_LessThanOrEquals(this.pos);
	}
	,always: function() {
		return stx_assert_Predicate.always(this.pos);
	}
	,never: function() {
		return stx_assert_Predicate.never(this.pos);
	}
	,iz: function(clazz) {
		return new stx_assert_predicate_term_Is(clazz,this.pos);
	}
	,throws: function() {
		return new stx_assert_predicate_term_Throws(this.pos);
	}
	,'void': function() {
		return new stx_assert_predicate_term_Void(this.pos);
	}
	,exists: function() {
		return new stx_assert_predicate_term_Exists(this.pos);
	}
	,matches: function(reg,opt) {
		return new stx_assert_predicate_term_Matches(this.pos,reg,opt,{ fileName : "stx/assert/Predicate.hx", lineNumber : 50, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "matches"});
	}
	,ands: function(self,rest) {
		return stx_assert_Predicate._.ands(self,rest);
	}
	,ors: function(self,rest) {
		return stx_assert_Predicate._.ors(self,rest);
	}
	,and: function(self,that) {
		return stx_assert_Predicate._.and(self,that);
	}
	,or: function(self,that) {
		return stx_assert_Predicate._.or(self,that);
	}
	,xor: function(self,that) {
		return stx_assert_Predicate._.xor(self,that);
	}
	,not: function(self) {
		return stx_assert_Predicate._.not(self);
	}
	,__class__: stx_assert_Module
});
var stx_assert_OrdApi = function() { };
$hxClasses["stx.assert.OrdApi"] = stx_assert_OrdApi;
stx_assert_OrdApi.__name__ = "stx.assert.OrdApi";
stx_assert_OrdApi.__isInterface__ = true;
stx_assert_OrdApi.prototype = {
	comply: null
	,toOrdApi: null
	,__class__: stx_assert_OrdApi
};
var stx_assert_OrdCls = function() { };
$hxClasses["stx.assert.OrdCls"] = stx_assert_OrdCls;
stx_assert_OrdCls.__name__ = "stx.assert.OrdCls";
stx_assert_OrdCls.__interfaces__ = [stx_assert_OrdApi];
stx_assert_OrdCls.prototype = {
	comply: null
	,toOrdApi: function() {
		return this;
	}
	,__class__: stx_assert_OrdCls
};
var stx_assert_Ord = {};
stx_assert_Ord._new = function(self) {
	return self;
};
stx_assert_Ord.lift = function(self) {
	return self;
};
stx_assert_Ord.toAssertion = function(this1) {
	return new stx_assert_ord_term_OrdAssertion(this1,{ fileName : "stx/assert/Ord.hx", lineNumber : 39, className : "stx.assert._Ord.Ord_Impl_", methodName : "toAssertion"}).asAssertionApi();
};
stx_assert_Ord.Int = function() {
	return new stx_assert_ord_term_Int();
};
stx_assert_Ord.Int64 = function() {
	return new stx_assert_ord_term_Int64();
};
stx_assert_Ord.Float = function() {
	return new stx_assert_ord_term_Float();
};
stx_assert_Ord.String = function() {
	return new stx_assert_ord_term_String();
};
stx_assert_Ord.Couple = function(l,r) {
	return new stx_assert_ord_term_Couple(l,r);
};
stx_assert_Ord.KV = function(l,r) {
	return new stx_assert_ord_term_KV(l,r);
};
stx_assert_Ord.Anon = function(fn) {
	return new stx_assert_ord_term_Anon(fn);
};
stx_assert_Ord.Bool = function() {
	return stx_assert_Ord.Anon(function(lhs,rhs) {
		if(lhs == rhs) {
			return false;
		} else if(lhs == false) {
			return true;
		} else {
			return false;
		}
	});
};
stx_assert_Ord.Primitive = function() {
	return new stx_assert_ord_term_Primitive();
};
stx_assert_Ord.Array = function(inner) {
	return new stx_assert_ord_term_Array(inner);
};
stx_assert_Ord.Record = function(inner) {
	return new stx_assert_ord_term_Record(inner);
};
stx_assert_Ord.Cluster = function(inner) {
	return new stx_assert_ord_term_Cluster(inner);
};
stx_assert_Ord.Option = function(inner) {
	return new stx_assert_ord_term_Option(inner);
};
stx_assert_Ord.NullOr = function(inner) {
	return new stx_assert_ord_term_NullOr(inner).toOrdApi();
};
stx_assert_Ord.EnumValueIndex = function() {
	return new stx_assert_ord_term_EnumValueIndex();
};
stx_assert_Ord.Ident = function() {
	return new stx_assert_ord_term_Ident();
};
stx_assert_Ord.Register = function() {
	return new stx_assert_ord_term_Register();
};
stx_assert_Ord.Exists = function() {
	return new stx_assert_ord_term_Exists();
};
var stx_assert_Orderable = {};
stx_assert_Orderable._new = function(self) {
	return self;
};
stx_assert_Orderable.Anon = function(self) {
	return new stx_assert_orderable_term_Anon(stx_assert_Ord.Anon(self));
};
var stx_assert_OrderedSum = {};
stx_assert_OrderedSum.is_ok = function(this1) {
	return this1;
};
var stx_assert_Ordered = {};
stx_assert_Ordered._new = function(self) {
	return self;
};
stx_assert_Ordered.fromBool = function(b) {
	if(b) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.toBool = function(this1) {
	if(this1) {
		return true;
	} else {
		return false;
	}
};
stx_assert_Ordered.or = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) || stx_assert_Ordered.toBool(that));
};
stx_assert_Ordered.not = function(this1) {
	if(this1) {
		return false;
	} else {
		return true;
	}
};
stx_assert_Ordered.and = function(this1,that) {
	return stx_assert_Ordered.fromBool(stx_assert_Ordered.toBool(this1) && stx_assert_Ordered.toBool(that));
};
var stx_assert_OrderedLift = function() { };
$hxClasses["stx.assert.OrderedLift"] = stx_assert_OrderedLift;
stx_assert_OrderedLift.__name__ = "stx.assert.OrderedLift";
stx_assert_OrderedLift.is_not_less_than = function(self) {
	if(self == false) {
		return true;
	} else {
		return false;
	}
};
stx_assert_OrderedLift.is_less_than = function(self) {
	if(self == false) {
		return false;
	} else {
		return true;
	}
};
var stx_assert_PartialOrdered = {};
stx_assert_PartialOrdered._new = function(self) {
	return self;
};
stx_assert_PartialOrdered.lift = function(self) {
	return stx_assert_PartialOrdered._new(self);
};
stx_assert_PartialOrdered.unorderable = function() {
	return stx_assert_PartialOrdered.lift(null);
};
stx_assert_PartialOrdered.prj = function(this1) {
	return this1;
};
stx_assert_PartialOrdered.get_self = function(this1) {
	return stx_assert_PartialOrdered.lift(this1);
};
var stx_assert_PartialOrdApi = function() { };
$hxClasses["stx.assert.PartialOrdApi"] = stx_assert_PartialOrdApi;
stx_assert_PartialOrdApi.__name__ = "stx.assert.PartialOrdApi";
stx_assert_PartialOrdApi.__isInterface__ = true;
stx_assert_PartialOrdApi.prototype = {
	comply: null
	,__class__: stx_assert_PartialOrdApi
};
var stx_assert_PartialOrderableApi = function() { };
$hxClasses["stx.assert.PartialOrderableApi"] = stx_assert_PartialOrderableApi;
stx_assert_PartialOrderableApi.__name__ = "stx.assert.PartialOrderableApi";
stx_assert_PartialOrderableApi.__isInterface__ = true;
stx_assert_PartialOrderableApi.prototype = {
	lt: null
	,__class__: stx_assert_PartialOrderableApi
};
var stx_assert_PartialComparableApi = function() { };
$hxClasses["stx.assert.PartialComparableApi"] = stx_assert_PartialComparableApi;
stx_assert_PartialComparableApi.__name__ = "stx.assert.PartialComparableApi";
stx_assert_PartialComparableApi.__isInterface__ = true;
stx_assert_PartialComparableApi.__interfaces__ = [stx_assert_PartialOrderableApi,stx_assert_EqualableApi];
var stx_assert_PredicateApi = function() { };
$hxClasses["stx.assert.PredicateApi"] = stx_assert_PredicateApi;
stx_assert_PredicateApi.__name__ = "stx.assert.PredicateApi";
stx_assert_PredicateApi.__isInterface__ = true;
stx_assert_PredicateApi.prototype = {
	apply: null
	,__class__: stx_assert_PredicateApi
};
var stx_assert_PredicateLift = function() { };
$hxClasses["stx.assert.PredicateLift"] = stx_assert_PredicateLift;
stx_assert_PredicateLift.__name__ = "stx.assert.PredicateLift";
stx_assert_PredicateLift.ands = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_And(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 81, className : "stx.assert.PredicateLift", methodName : "ands"});
	},self);
};
stx_assert_PredicateLift.ors = function(self,rest) {
	return Lambda.fold(rest,function(next,memo) {
		return new stx_assert_predicate_term_Or(memo,next,{ fileName : "stx/assert/Predicate.hx", lineNumber : 90, className : "stx.assert.PredicateLift", methodName : "ors"});
	},self);
};
stx_assert_PredicateLift.and = function(self,that) {
	return new stx_assert_predicate_term_And(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 98, className : "stx.assert.PredicateLift", methodName : "and"});
};
stx_assert_PredicateLift.or = function(self,that) {
	return new stx_assert_predicate_term_Or(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 105, className : "stx.assert.PredicateLift", methodName : "or"});
};
stx_assert_PredicateLift.xor = function(self,that) {
	return new stx_assert_predicate_term_XOr(self,that,{ fileName : "stx/assert/Predicate.hx", lineNumber : 111, className : "stx.assert.PredicateLift", methodName : "xor"});
};
stx_assert_PredicateLift.not = function(self) {
	return new stx_assert_predicate_term_Not(self,{ fileName : "stx/assert/Predicate.hx", lineNumber : 117, className : "stx.assert.PredicateLift", methodName : "not"});
};
stx_assert_PredicateLift.errata = function(self,fn) {
	return new stx_assert_predicate_term_Transform(self,fn,{ fileName : "stx/assert/Predicate.hx", lineNumber : 121, className : "stx.assert.PredicateLift", methodName : "errata"});
};
stx_assert_PredicateLift.errate = function(self,fn) {
	return stx_assert_PredicateLift.errata(self,function(err) {
		return stx_fail_Refuse.errate(err,fn);
	});
};
stx_assert_PredicateLift.map_i = function(self,fn) {
	return stx_assert_Predicate.Anon(function(v) {
		return self.apply(fn(v));
	});
};
var stx_assert_Predicate = {};
stx_assert_Predicate._new = function(v) {
	return v;
};
stx_assert_Predicate.Natural = function(method,pos) {
	return new stx_assert_predicate_term_Natural(method,pos);
};
stx_assert_Predicate.NaturalReport = function(method,e,pos) {
	return new stx_assert_predicate_term_NaturalReport(method,e,pos);
};
stx_assert_Predicate.Anon = function(method) {
	return new stx_assert_predicate_term_Anon(method);
};
stx_assert_Predicate.unit = function() {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 28, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "unit"});
};
stx_assert_Predicate.always = function(pos) {
	return new stx_assert_predicate_term_Always({ fileName : "stx/assert/Predicate.hx", lineNumber : 32, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "always"});
};
stx_assert_Predicate.never = function(pos) {
	return new stx_assert_predicate_term_Never(pos);
};
stx_assert_Predicate.iz = function(pos,clazz) {
	return new stx_assert_predicate_term_Is(clazz,pos);
};
stx_assert_Predicate.throws = function(pos) {
	return new stx_assert_predicate_term_Throws(pos);
};
stx_assert_Predicate.void = function(pos) {
	return new stx_assert_predicate_term_Void(pos);
};
stx_assert_Predicate.exists = function(pos) {
	return new stx_assert_predicate_term_Exists(pos);
};
stx_assert_Predicate.matches = function(pos,reg,opt) {
	return new stx_assert_predicate_term_Matches(pos,reg,opt,{ fileName : "stx/assert/Predicate.hx", lineNumber : 50, className : "stx.assert._Predicate.Predicate_Impl_", methodName : "matches"});
};
stx_assert_Predicate.ordef = function(this1,l,r) {
	if(stx_nano_ReportLift.is_defined(this1.apply(l))) {
		return r;
	} else {
		return l;
	}
};
stx_assert_Predicate.fudge = function(this1,v) {
	var self = this1.apply(v);
	if(self == null) {
		return v;
	} else {
		switch(self._hx_index) {
		case 0:
			var v1 = self.v;
			throw haxe_Exception.thrown(v1);
		case 1:
			return v;
		}
	}
};
stx_assert_Predicate.bindI = function(this1,v) {
	var _g = this1;
	var p = v;
	return function() {
		return _g.apply(p);
	};
};
stx_assert_Predicate.check = function(this1) {
	return function(x) {
		return this1.apply(x) == stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	};
};
stx_assert_Predicate.crunch = function(this1,v) {
	var self = this1.apply(v);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
};
var stx_assert_assertion_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Base"] = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Base.__name__ = "stx.assert.assertion.term.Base";
stx_assert_assertion_term_Base.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Base.__super__ = stx_pico_Clazz;
stx_assert_assertion_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,comply: function(a,b) {
		return stx_nano_Report.unit();
	}
	,error: function(l,r,pos) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
		return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Base
});
var stx_assert_assertion_term_Alike = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.Alike"] = stx_assert_assertion_term_Alike;
stx_assert_assertion_term_Alike.__name__ = "stx.assert.assertion.term.Alike";
stx_assert_assertion_term_Alike.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Alike.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		return stx_LiftAssert.expect(a._hx_index == b._hx_index,this.error(null,null,{ fileName : "stx/assert/assertion/term/Alike.hx", lineNumber : 8, className : "stx.assert.assertion.term.Alike", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_Alike
});
var stx_assert_assertion_term_Anon = function(delegate,pos) {
	this.delegate = delegate;
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Anon"] = stx_assert_assertion_term_Anon;
stx_assert_assertion_term_Anon.__name__ = "stx.assert.assertion.term.Anon";
stx_assert_assertion_term_Anon.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Anon.prototype = {
	pos: null
	,delegate: function(a,b) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/assert/assertion/term/Anon.hx", lineNumber : 10, className : "stx.assert.assertion.term.Anon", methodName : "delegate"});
		return stx_nano_Report.pure(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_nano_Digests.e_unimplemented(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	}
	,comply: function(a,b) {
		return this.delegate(a,b);
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Anon
};
var stx_assert_assertion_term_Equals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.Equals"] = stx_assert_assertion_term_Equals;
stx_assert_assertion_term_Equals.__name__ = "stx.assert.assertion.term.Equals";
stx_assert_assertion_term_Equals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_Equals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		return stx_LiftAssert.expect(a == b,this.error(null,null,{ fileName : "stx/assert/assertion/term/Equals.hx", lineNumber : 9, className : "stx.assert.assertion.term.Equals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_Equals
});
var stx_assert_assertion_term_Errata = function(delegate,errata,pos) {
	this.delegate = delegate;
	this.errata = errata;
	this.pos = pos;
};
$hxClasses["stx.assert.assertion.term.Errata"] = stx_assert_assertion_term_Errata;
stx_assert_assertion_term_Errata.__name__ = "stx.assert.assertion.term.Errata";
stx_assert_assertion_term_Errata.__interfaces__ = [stx_assert_AssertionApi];
stx_assert_assertion_term_Errata.prototype = {
	delegate: null
	,errata: null
	,pos: null
	,comply: function(lhs,rhs) {
		return stx_nano_Report.errata(this.delegate.comply(lhs,rhs),this.errata);
	}
	,asAssertionApi: function() {
		return this;
	}
	,__class__: stx_assert_assertion_term_Errata
};
var stx_assert_assertion_term_GreaterThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.GreaterThan"] = stx_assert_assertion_term_GreaterThan;
stx_assert_assertion_term_GreaterThan.__name__ = "stx.assert.assertion.term.GreaterThan";
stx_assert_assertion_term_GreaterThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l > r,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThan.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThan", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThan
});
var stx_assert_assertion_term_GreaterThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.GreaterThanOrEquals"] = stx_assert_assertion_term_GreaterThanOrEquals;
stx_assert_assertion_term_GreaterThanOrEquals.__name__ = "stx.assert.assertion.term.GreaterThanOrEquals";
stx_assert_assertion_term_GreaterThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_GreaterThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l >= r,this.error(null,null,{ fileName : "stx/assert/assertion/term/GreaterThanOrEquals.hx", lineNumber : 11, className : "stx.assert.assertion.term.GreaterThanOrEquals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_GreaterThanOrEquals
});
var stx_assert_assertion_term_LessThan = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.LessThan"] = stx_assert_assertion_term_LessThan;
stx_assert_assertion_term_LessThan.__name__ = "stx.assert.assertion.term.LessThan";
stx_assert_assertion_term_LessThan.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThan.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l < r,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThan.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThan", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_LessThan
});
var stx_assert_assertion_term_LessThanOrEquals = function(pos) {
	stx_assert_assertion_term_Base.call(this,pos);
};
$hxClasses["stx.assert.assertion.term.LessThanOrEquals"] = stx_assert_assertion_term_LessThanOrEquals;
stx_assert_assertion_term_LessThanOrEquals.__name__ = "stx.assert.assertion.term.LessThanOrEquals";
stx_assert_assertion_term_LessThanOrEquals.__super__ = stx_assert_assertion_term_Base;
stx_assert_assertion_term_LessThanOrEquals.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	comply: function(a,b) {
		var l = a;
		var r = b;
		return stx_LiftAssert.expect(l <= r,this.error(null,null,{ fileName : "stx/assert/assertion/term/LessThanOrEquals.hx", lineNumber : 10, className : "stx.assert.assertion.term.LessThanOrEquals", methodName : "comply"}));
	}
	,__class__: stx_assert_assertion_term_LessThanOrEquals
});
var stx_assert_comparable_term_Anon = function(_eq,_lt) {
	this._eq = _eq;
	this._lt = _lt;
};
$hxClasses["stx.assert.comparable.term.Anon"] = stx_assert_comparable_term_Anon;
stx_assert_comparable_term_Anon.__name__ = "stx.assert.comparable.term.Anon";
stx_assert_comparable_term_Anon.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Anon.prototype = $extend(stx_assert_ComparableCls.prototype,{
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_comparable_term_Anon
});
var stx_assert_comparable_term_Base = function(_eq,_ord) {
	this._eq = _eq;
	this._lt = _ord;
};
$hxClasses["stx.assert.comparable.term.Base"] = stx_assert_comparable_term_Base;
stx_assert_comparable_term_Base.__name__ = "stx.assert.comparable.term.Base";
stx_assert_comparable_term_Base.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Base.prototype = $extend(stx_assert_ComparableCls.prototype,{
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_comparable_term_Base
});
var stx_assert_comparable_term_Cluster = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.comparable.term.Cluster"] = stx_assert_comparable_term_Cluster;
stx_assert_comparable_term_Cluster.__name__ = "stx.assert.comparable.term.Cluster";
stx_assert_comparable_term_Cluster.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Cluster.prototype = $extend(stx_assert_ComparableCls.prototype,{
	delegate: null
	,eq: function() {
		return stx_assert_Eq.Cluster(this.delegate.eq());
	}
	,lt: function() {
		return stx_assert_Ord.Cluster(this.delegate.lt());
	}
	,__class__: stx_assert_comparable_term_Cluster
});
var stx_assert_comparable_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.comparable.term.Couple"] = stx_assert_comparable_term_Couple;
stx_assert_comparable_term_Couple.__name__ = "stx.assert.comparable.term.Couple";
stx_assert_comparable_term_Couple.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Couple.prototype = $extend(stx_assert_ComparableCls.prototype,{
	l: null
	,r: null
	,eq: function() {
		return stx_assert_Eq.Couple(this.l.eq(),this.r.eq());
	}
	,lt: function() {
		return stx_assert_Ord.Couple(this.l.lt(),this.r.lt());
	}
	,__class__: stx_assert_comparable_term_Couple
});
var stx_assert_comparable_term_Int = function() {
};
$hxClasses["stx.assert.comparable.term.Int"] = stx_assert_comparable_term_Int;
stx_assert_comparable_term_Int.__name__ = "stx.assert.comparable.term.Int";
stx_assert_comparable_term_Int.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Int.prototype = $extend(stx_assert_ComparableCls.prototype,{
	eq: function() {
		return stx_assert_Eq.Int();
	}
	,lt: function() {
		return stx_assert_Ord.Int();
	}
	,__class__: stx_assert_comparable_term_Int
});
var stx_assert_comparable_term_KV = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.comparable.term.KV"] = stx_assert_comparable_term_KV;
stx_assert_comparable_term_KV.__name__ = "stx.assert.comparable.term.KV";
stx_assert_comparable_term_KV.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_KV.prototype = $extend(stx_assert_ComparableCls.prototype,{
	l: null
	,r: null
	,eq: function() {
		return stx_assert_Eq.KV(this.l.eq(),this.r.eq());
	}
	,lt: function() {
		return stx_assert_Ord.KV(this.l.lt(),this.r.lt());
	}
	,__class__: stx_assert_comparable_term_KV
});
var stx_assert_comparable_term_Lazy = function(_eq,_lt) {
	this._eq = _eq;
	this._lt = _lt;
};
$hxClasses["stx.assert.comparable.term.Lazy"] = stx_assert_comparable_term_Lazy;
stx_assert_comparable_term_Lazy.__name__ = "stx.assert.comparable.term.Lazy";
stx_assert_comparable_term_Lazy.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Lazy.prototype = $extend(stx_assert_ComparableCls.prototype,{
	_eq: null
	,_lt: null
	,eq: function() {
		return this._eq;
	}
	,lt: function() {
		return this._lt;
	}
	,__class__: stx_assert_comparable_term_Lazy
});
var stx_assert_comparable_term_Primitive = function() {
};
$hxClasses["stx.assert.comparable.term.Primitive"] = stx_assert_comparable_term_Primitive;
stx_assert_comparable_term_Primitive.__name__ = "stx.assert.comparable.term.Primitive";
stx_assert_comparable_term_Primitive.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Primitive.prototype = $extend(stx_assert_ComparableCls.prototype,{
	eq: function() {
		return stx_assert_Eq.Primitive();
	}
	,lt: function() {
		return stx_assert_Ord.Primitive();
	}
	,__class__: stx_assert_comparable_term_Primitive
});
var stx_assert_comparable_term_Register = function() {
};
$hxClasses["stx.assert.comparable.term.Register"] = stx_assert_comparable_term_Register;
stx_assert_comparable_term_Register.__name__ = "stx.assert.comparable.term.Register";
stx_assert_comparable_term_Register.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_Register.prototype = $extend(stx_assert_ComparableCls.prototype,{
	eq: function() {
		return stx_assert_Eq.Register();
	}
	,lt: function() {
		return stx_assert_Ord.Register();
	}
	,__class__: stx_assert_comparable_term_Register
});
var stx_assert_comparable_term_String = function() {
};
$hxClasses["stx.assert.comparable.term.String"] = stx_assert_comparable_term_String;
stx_assert_comparable_term_String.__name__ = "stx.assert.comparable.term.String";
stx_assert_comparable_term_String.__super__ = stx_assert_ComparableCls;
stx_assert_comparable_term_String.prototype = $extend(stx_assert_ComparableCls.prototype,{
	eq: function() {
		return stx_assert_Eq.String();
	}
	,lt: function() {
		return stx_assert_Ord.String();
	}
	,__class__: stx_assert_comparable_term_String
});
var stx_assert_eq_term_Anon = function(self) {
	this.delegate = self;
};
$hxClasses["stx.assert.eq.term.Anon"] = stx_assert_eq_term_Anon;
stx_assert_eq_term_Anon.__name__ = "stx.assert.eq.term.Anon";
stx_assert_eq_term_Anon.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Anon.prototype = $extend(stx_assert_EqCls.prototype,{
	delegate: null
	,comply: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_eq_term_Anon
});
var stx_assert_eq_term_Array = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.Array"] = stx_assert_eq_term_Array;
stx_assert_eq_term_Array.__name__ = "stx.assert.eq.term.Array";
stx_assert_eq_term_Array.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Array.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(a,b) {
		var ok = true;
		if(a.length != b.length) {
			return false;
		}
		var _g = 0;
		var _g1 = a.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var lhs = a[i];
			var rhs = b[i];
			ok = this.inner.comply(lhs,rhs);
			if(!stx_assert_EqualedSum.is_ok(ok)) {
				break;
			}
		}
		return ok;
	}
	,__class__: stx_assert_eq_term_Array
});
var stx_assert_eq_term_Base = function() {
};
$hxClasses["stx.assert.eq.term.Base"] = stx_assert_eq_term_Base;
stx_assert_eq_term_Base.__name__ = "stx.assert.eq.term.Base";
stx_assert_eq_term_Base.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Base.prototype = $extend(stx_assert_EqCls.prototype,{
	__class__: stx_assert_eq_term_Base
});
var stx_assert_eq_term_Bool = function() {
};
$hxClasses["stx.assert.eq.term.Bool"] = stx_assert_eq_term_Bool;
stx_assert_eq_term_Bool.__name__ = "stx.assert.eq.term.Bool";
stx_assert_eq_term_Bool.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Bool.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Bool
});
var stx_assert_eq_term_Cluster = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.Cluster"] = stx_assert_eq_term_Cluster;
stx_assert_eq_term_Cluster.__name__ = "stx.assert.eq.term.Cluster";
stx_assert_eq_term_Cluster.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Cluster.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		if(stx_nano_Cluster.get_length(lhs) != stx_nano_Cluster.get_length(rhs)) {
			return false;
		} else {
			var same = true;
			var _g = 0;
			var _g1 = stx_nano_Cluster.get_length(lhs);
			while(_g < _g1) {
				var i = _g++;
				same = this.inner.comply(lhs[i],rhs[i]);
				if(!stx_assert_EqualedSum.is_ok(same)) {
					break;
				}
			}
			return same;
		}
	}
	,__class__: stx_assert_eq_term_Cluster
});
var stx_assert_eq_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.eq.term.Couple"] = stx_assert_eq_term_Couple;
stx_assert_eq_term_Couple.__name__ = "stx.assert.eq.term.Couple";
stx_assert_eq_term_Couple.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Couple.prototype = $extend(stx_assert_EqCls.prototype,{
	l: null
	,r: null
	,comply: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Equaled.and(_gthis.l.comply(l0,l1),_gthis.r.comply(r0,r1));
			});
		});
	}
	,__class__: stx_assert_eq_term_Couple
});
var stx_assert_eq_term_Date = function() {
};
$hxClasses["stx.assert.eq.term.Date"] = stx_assert_eq_term_Date;
stx_assert_eq_term_Date.__name__ = "stx.assert.eq.term.Date";
stx_assert_eq_term_Date.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Date.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a.getTime() == b.getTime()) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Date
});
var stx_assert_eq_term_Deferred = function() {
};
$hxClasses["stx.assert.eq.term.Deferred"] = stx_assert_eq_term_Deferred;
stx_assert_eq_term_Deferred.__name__ = "stx.assert.eq.term.Deferred";
stx_assert_eq_term_Deferred.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Deferred.prototype = $extend(stx_assert_EqCls.prototype,{
	eq: null
	,comply: function(a,b) {
		if(this.eq == null) {
			if(a == null) {
				this.eq = stx_assert_Equal.getEqualFor(a);
			} else {
				this.eq = stx_assert_Equal.getEqualFor(b);
			}
		}
		return this.eq.comply(a,b);
	}
	,__class__: stx_assert_eq_term_Deferred
});
var stx_assert_eq_term_Enum = function() {
};
$hxClasses["stx.assert.eq.term.Enum"] = stx_assert_eq_term_Enum;
stx_assert_eq_term_Enum.__name__ = "stx.assert.eq.term.Enum";
stx_assert_eq_term_Enum.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Enum.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(0 != a._hx_index - b._hx_index) {
			return false;
		} else {
			var pa = Type.enumParameters(a);
			var pb = Type.enumParameters(b);
			var b = true;
			var _g = 0;
			var _g1 = pa.length;
			while(_g < _g1) {
				var i = _g++;
				if(!stx_assert_EqualedSum.is_ok(stx_assert_Equal.getEqualFor(pa[i]).comply(a[i],pb[i]))) {
					b = false;
					break;
				}
			}
			return b;
		}
	}
	,__class__: stx_assert_eq_term_Enum
});
var stx_assert_eq_term_EnumValueIndex = function() {
};
$hxClasses["stx.assert.eq.term.EnumValueIndex"] = stx_assert_eq_term_EnumValueIndex;
stx_assert_eq_term_EnumValueIndex.__name__ = "stx.assert.eq.term.EnumValueIndex";
stx_assert_eq_term_EnumValueIndex.__super__ = stx_assert_EqCls;
stx_assert_eq_term_EnumValueIndex.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(lhs,rhs) {
		var l = stx_LiftEnumValue.lift(lhs);
		var r = stx_LiftEnumValue.lift(rhs);
		if(stx_nano_EnumValue.get_index(l) == stx_nano_EnumValue.get_index(r)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_EnumValueIndex
});
var stx_assert_eq_term_EqAssertion = function(eq,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.EqAssertion"] = stx_assert_eq_term_EqAssertion;
stx_assert_eq_term_EqAssertion.__name__ = "stx.assert.eq.term.EqAssertion";
stx_assert_eq_term_EqAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_eq_term_EqAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	eq: null
	,comply: function(a,b) {
		var tmp = stx_assert_Equaled.toBool(this.eq.comply(a,b));
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		return stx_LiftAssert.expect(tmp,stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	}
	,__class__: stx_assert_eq_term_EqAssertion
});
var stx_assert_eq_term_Float = function() {
};
$hxClasses["stx.assert.eq.term.Float"] = stx_assert_eq_term_Float;
stx_assert_eq_term_Float.__name__ = "stx.assert.eq.term.Float";
stx_assert_eq_term_Float.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Float.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Float
});
var stx_assert_eq_term_Function = function() {
};
$hxClasses["stx.assert.eq.term.Function"] = stx_assert_eq_term_Function;
stx_assert_eq_term_Function.__name__ = "stx.assert.eq.term.Function";
stx_assert_eq_term_Function.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Function.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Function
});
var stx_assert_eq_term_HasFunction = function() {
};
$hxClasses["stx.assert.eq.term.HasFunction"] = stx_assert_eq_term_HasFunction;
stx_assert_eq_term_HasFunction.__name__ = "stx.assert.eq.term.HasFunction";
stx_assert_eq_term_HasFunction.__super__ = stx_assert_EqCls;
stx_assert_eq_term_HasFunction.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a.equals(b)) {
			return true;
		} else {
			return false;
		}
	}
	,elide: function() {
		return this;
	}
	,__class__: stx_assert_eq_term_HasFunction
});
var stx_assert_eq_term_Ident = function() {
};
$hxClasses["stx.assert.eq.term.Ident"] = stx_assert_eq_term_Ident;
stx_assert_eq_term_Ident.__name__ = "stx.assert.eq.term.Ident";
stx_assert_eq_term_Ident.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Ident.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(lhs,rhs) {
		var eq = stx_assert_Eq.String().comply(lhs.name,rhs.name);
		if(stx_assert_EqualedSum.is_ok(eq)) {
			var _g = lhs.pack;
			var _g1 = rhs.pack;
			if(_g == null) {
				if(_g1 == null) {
					eq = true;
				} else {
					var x = _g1;
					var value = stx_nano_Cluster.toIterable(x);
					eq = (((value) instanceof Array) ? value : null).length <= 0 ? true : stx_assert_Eq.NullOr(stx_assert_Eq.Cluster(stx_assert_Eq.String())).comply(lhs.pack,rhs.pack);
				}
			} else if(_g1 == null) {
				var x = _g;
				var value = stx_nano_Cluster.toIterable(x);
				eq = (((value) instanceof Array) ? value : null).length <= 0 ? true : stx_assert_Eq.NullOr(stx_assert_Eq.Cluster(stx_assert_Eq.String())).comply(lhs.pack,rhs.pack);
			} else {
				eq = stx_assert_Eq.NullOr(stx_assert_Eq.Cluster(stx_assert_Eq.String())).comply(lhs.pack,rhs.pack);
			}
		}
		return eq;
	}
	,__class__: stx_assert_eq_term_Ident
});
var stx_assert_eq_term_Int = function() {
};
$hxClasses["stx.assert.eq.term.Int"] = stx_assert_eq_term_Int;
stx_assert_eq_term_Int.__name__ = "stx.assert.eq.term.Int";
stx_assert_eq_term_Int.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Int.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Int
});
var stx_assert_eq_term_Int64 = function() {
};
$hxClasses["stx.assert.eq.term.Int64"] = stx_assert_eq_term_Int64;
stx_assert_eq_term_Int64.__name__ = "stx.assert.eq.term.Int64";
stx_assert_eq_term_Int64.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Int64.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a.high == b.high && a.low == b.low) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Int64
});
var stx_assert_eq_term_KV = function(key,val) {
	this.key = key;
	this.val = val;
};
$hxClasses["stx.assert.eq.term.KV"] = stx_assert_eq_term_KV;
stx_assert_eq_term_KV.__name__ = "stx.assert.eq.term.KV";
stx_assert_eq_term_KV.__super__ = stx_assert_EqCls;
stx_assert_eq_term_KV.prototype = $extend(stx_assert_EqCls.prototype,{
	key: null
	,val: null
	,comply: function(a,b) {
		var ord = this.key.comply(a.key,b.key);
		if(stx_assert_EqualedSum.is_equal(ord)) {
			ord = this.val.comply(a.val,b.val);
		}
		return ord;
	}
	,__class__: stx_assert_eq_term_KV
});
var stx_assert_eq_term_Map = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.Map"] = stx_assert_eq_term_Map;
stx_assert_eq_term_Map.__name__ = "stx.assert.eq.term.Map";
stx_assert_eq_term_Map.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Map.prototype = $extend(stx_assert_EqCls.prototype,{
	eq: null
	,comply: function(a,b) {
		var ok = true;
		var _g = a.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!b.exists(key)) {
				break;
			}
			ok = stx_assert_Equaled.toBool(this.eq.comply(val,b.get(key)));
			if(!ok) {
				break;
			}
		}
		var _g = b.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var val = _g1.value;
			if(!a.exists(key)) {
				break;
			}
		}
		if(ok) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Map
});
var stx_assert_eq_term_Nada = function() {
};
$hxClasses["stx.assert.eq.term.Nada"] = stx_assert_eq_term_Nada;
stx_assert_eq_term_Nada.__name__ = "stx.assert.eq.term.Nada";
stx_assert_eq_term_Nada.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Nada.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		return stx_assert_Equaled.AreEqual;
	}
	,__class__: stx_assert_eq_term_Nada
});
var stx_assert_eq_term_NotNull = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.NotNull"] = stx_assert_eq_term_NotNull;
stx_assert_eq_term_NotNull.__name__ = "stx.assert.eq.term.NotNull";
stx_assert_eq_term_NotNull.__super__ = stx_assert_EqCls;
stx_assert_eq_term_NotNull.prototype = $extend(stx_assert_EqCls.prototype,{
	eq: null
	,comply: function(a,b) {
		if(a == null) {
			if(b == null) {
				return true;
			} else {
				return false;
			}
		} else if(b == null) {
			return false;
		} else {
			return this.eq.comply(a,b);
		}
	}
	,__class__: stx_assert_eq_term_NotNull
});
var stx_assert_eq_term_Null = function() {
};
$hxClasses["stx.assert.eq.term.Null"] = stx_assert_eq_term_Null;
stx_assert_eq_term_Null.__name__ = "stx.assert.eq.term.Null";
stx_assert_eq_term_Null.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Null.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == null && b == null) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Null
});
var stx_assert_eq_term_NullOr = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.NullOr"] = stx_assert_eq_term_NullOr;
stx_assert_eq_term_NullOr.__name__ = "stx.assert.eq.term.NullOr";
stx_assert_eq_term_NullOr.__super__ = stx_assert_EqCls;
stx_assert_eq_term_NullOr.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		if(lhs == null && rhs == null) {
			return true;
		} else if(lhs == null || rhs == null) {
			return false;
		} else {
			return this.inner.comply(lhs,rhs);
		}
	}
	,__class__: stx_assert_eq_term_NullOr
});
var stx_assert_eq_term_Object = function() {
};
$hxClasses["stx.assert.eq.term.Object"] = stx_assert_eq_term_Object;
stx_assert_eq_term_Object.__name__ = "stx.assert.eq.term.Object";
stx_assert_eq_term_Object.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Object.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		var o = true;
		var _g = 0;
		var _g1 = Reflect.fields(a);
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			var va = Reflect.field(a,key);
			if(!stx_assert_EqualedSum.is_ok(stx_assert_Equal.getEqualFor(va).comply(va,Reflect.field(b,key)))) {
				o = false;
				break;
			}
		}
		return o;
	}
	,__class__: stx_assert_eq_term_Object
});
var stx_assert_eq_term_Option = function(eq) {
	this.eq = eq;
};
$hxClasses["stx.assert.eq.term.Option"] = stx_assert_eq_term_Option;
stx_assert_eq_term_Option.__name__ = "stx.assert.eq.term.Option";
stx_assert_eq_term_Option.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Option.prototype = $extend(stx_assert_EqCls.prototype,{
	eq: null
	,comply: function(a,b) {
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				var r = b.v;
				var l = a.v;
				return this.eq.comply(l,r);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				return stx_assert_Equaled.fromBool(true);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		}
	}
	,__class__: stx_assert_eq_term_Option
});
var stx_assert_eq_term_Primitive = function() {
};
$hxClasses["stx.assert.eq.term.Primitive"] = stx_assert_eq_term_Primitive;
stx_assert_eq_term_Primitive.__name__ = "stx.assert.eq.term.Primitive";
stx_assert_eq_term_Primitive.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Primitive.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return true;
			} else if(lhs._hx_index == rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				var rhs1 = rhs.b;
				var lhs1 = lhs.b;
				return stx_assert_Eq.Bool().comply(lhs1,rhs1);
			} else if(lhs._hx_index == rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			var _g = lhs.sprig;
			switch(_g._hx_index) {
			case 0:
				if(rhs._hx_index == 2) {
					var _g1 = rhs.sprig;
					if(_g1._hx_index == 0) {
						var rhs1 = _g1.str;
						var lhs1 = _g.str;
						return stx_assert_Eq.String().comply(lhs1,rhs1);
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
				} else if(lhs._hx_index == rhs._hx_index) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				var _g1 = _g.byte;
				switch(_g1._hx_index) {
				case 0:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 0) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Eq.Int().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 1:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 1) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Eq.Int64().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 2:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 2) {
								var rhs1 = _g2.f;
								var lhs1 = _g1.f;
								return stx_assert_Eq.Float().comply(lhs1,rhs1);
							} else if(lhs._hx_index == rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index == rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index == rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				}
				break;
			}
			break;
		}
	}
	,__class__: stx_assert_eq_term_Primitive
});
var stx_assert_eq_term_Record = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.Record"] = stx_assert_eq_term_Record;
stx_assert_eq_term_Record.__name__ = "stx.assert.eq.term.Record";
stx_assert_eq_term_Record.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Record.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(a,b) {
		var _gthis = this;
		return stx_assert_Eq.Cluster(stx_assert_Eq.Anon(function(lhs,rhs) {
			return stx_assert_Equaled.and(stx_assert_Eq.String().comply(stx_nano_KVLift.fst(lhs),stx_nano_KVLift.fst(rhs)),_gthis.inner.comply((stx_nano_KVLift.snd(lhs))(),(stx_nano_KVLift.snd(rhs))()));
		})).comply(stx_nano_Record.prj(a),stx_nano_Record.prj(b));
	}
	,__class__: stx_assert_eq_term_Record
});
var stx_assert_eq_term_Register = function() {
};
$hxClasses["stx.assert.eq.term.Register"] = stx_assert_eq_term_Register;
stx_assert_eq_term_Register.__name__ = "stx.assert.eq.term.Register";
stx_assert_eq_term_Register.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Register.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(lhs,rhs) {
		if(stx_nano_Register.equals(lhs,rhs)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_Register
});
var stx_assert_eq_term_String = function() {
};
$hxClasses["stx.assert.eq.term.String"] = stx_assert_eq_term_String;
stx_assert_eq_term_String.__name__ = "stx.assert.eq.term.String";
stx_assert_eq_term_String.__super__ = stx_assert_EqCls;
stx_assert_eq_term_String.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(a == b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_String
});
var stx_assert_eq_term_StringMap = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.eq.term.StringMap"] = stx_assert_eq_term_StringMap;
stx_assert_eq_term_StringMap.__name__ = "stx.assert.eq.term.StringMap";
stx_assert_eq_term_StringMap.__super__ = stx_assert_EqCls;
stx_assert_eq_term_StringMap.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		var h = lhs.h;
		var lhs_keys_h = h;
		var lhs_keys_keys = Object.keys(h);
		var lhs_keys_length = lhs_keys_keys.length;
		var lhs_keys_current = 0;
		var h = rhs.h;
		var rhs_keys_h = h;
		var rhs_keys_keys = Object.keys(h);
		var rhs_keys_length = rhs_keys_keys.length;
		var rhs_keys_current = 0;
		var get_str_compare = function(lstr,rstr) {
			if(lstr.length < rstr.length) {
				return haxe_ds_Either.Left(true);
			} else if(lstr.length == rstr.length) {
				var self = stx_nano_IterLift.lfold(stx_nano_IterLift.zip(stx_nano_Chars._.toIter(lstr),stx_nano_Chars._.toIter(rstr)),function(next,memo) {
					switch(memo._hx_index) {
					case 0:
						var _g = memo.v;
						switch(_g._hx_index) {
						case 0:
							if(_g.v) {
								return haxe_ds_Option.Some(haxe_ds_Either.Left(true));
							} else {
								return haxe_ds_Option.Some(haxe_ds_Either.Left(false));
							}
							break;
						case 1:
							if(_g.v) {
								return stx_nano_CoupleLift.decouple(next,function(l,r) {
									var lcode = stx_nano_CharsLift.cca(l,0);
									var rcode = stx_nano_CharsLift.cca(r,0);
									return stx_LiftIf.if_else(lcode == rcode,function() {
										return haxe_ds_Option.Some(haxe_ds_Either.Right(true));
									},function() {
										if(lcode < rcode) {
											return haxe_ds_Option.Some(haxe_ds_Either.Left(true));
										} else {
											return haxe_ds_Option.None;
										}
									});
								});
							} else {
								return haxe_ds_Option.Some(haxe_ds_Either.Right(false));
							}
							break;
						}
						break;
					case 1:
						return stx_nano_CoupleLift.decouple(next,function(l,r) {
							var lcode = stx_nano_CharsLift.cca(l,0);
							var rcode = stx_nano_CharsLift.cca(r,0);
							return stx_LiftIf.if_else(lcode == rcode,function() {
								return haxe_ds_Option.Some(haxe_ds_Either.Right(true));
							},function() {
								if(lcode < rcode) {
									return haxe_ds_Option.Some(haxe_ds_Either.Left(true));
								} else {
									return haxe_ds_Option.None;
								}
							});
						});
					}
				},haxe_ds_Option.None);
				if(self._hx_index == 0) {
					var v = self.v;
					return v;
				} else {
					return haxe_ds_Either.Left(false);
				}
			} else {
				return haxe_ds_Either.Left(false);
			}
		};
		var set_add = function(arr,str) {
			var res = arr.length == 0 ? { value : [str], input : haxe_ds_Option.None} : stx_lift_ArrayLift.lfold(arr,function(next,memo) {
				var _g = memo.input;
				switch(_g._hx_index) {
				case 0:
					var str = _g.v;
					var r = get_str_compare(str,next);
					switch(r._hx_index) {
					case 0:
						if(r.v) {
							return { value : stx_lift_ArrayLift.snoc(memo.value,next), input : haxe_ds_Option.Some(str)};
						} else {
							return { value : stx_lift_ArrayLift.snoc(stx_lift_ArrayLift.snoc(memo.value,next),str), input : haxe_ds_Option.None};
						}
						break;
					case 1:
						if(r.v) {
							return { value : stx_lift_ArrayLift.snoc(memo.value,next), input : haxe_ds_Option.None};
						} else {
							return { value : stx_lift_ArrayLift.snoc(memo.value,next), input : haxe_ds_Option.None};
						}
						break;
					}
					break;
				case 1:
					return memo;
				}
			},{ value : [], input : haxe_ds_Option.Some(str)});
			return res.value;
		};
		if(stx_lift_IterableLift.size(lhs) == stx_lift_IterableLift.size(rhs)) {
			var set = [];
			var h = lhs.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var x = _g_keys[_g_current++];
				set = set_add(set,x);
			}
			var h = rhs.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var x = _g_keys[_g_current++];
				set = set_add(set,x);
			}
			var eq = true;
			var _g = 0;
			while(_g < set.length) {
				var x = set[_g];
				++_g;
				var l = lhs.h[x];
				var r = rhs.h[x];
				eq = l == r;
				if(!eq) {
					break;
				}
			}
			if(eq) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,__class__: stx_assert_eq_term_StringMap
});
var stx_assert_eq_term_Tup2 = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.eq.term.Tup2"] = stx_assert_eq_term_Tup2;
stx_assert_eq_term_Tup2.__name__ = "stx.assert.eq.term.Tup2";
stx_assert_eq_term_Tup2.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Tup2.prototype = $extend(stx_assert_EqCls.prototype,{
	l: null
	,r: null
	,comply: function(a,b) {
		var lII = b.l;
		var rII = b.r;
		var rI = a.r;
		var lI = a.l;
		return stx_assert_Equaled.and(this.l.comply(lI,lII),this.r.comply(rI,rII));
	}
	,__class__: stx_assert_eq_term_Tup2
});
var stx_assert_eq_term_Unknown = function() {
};
$hxClasses["stx.assert.eq.term.Unknown"] = stx_assert_eq_term_Unknown;
stx_assert_eq_term_Unknown.__name__ = "stx.assert.eq.term.Unknown";
stx_assert_eq_term_Unknown.__super__ = stx_assert_EqCls;
stx_assert_eq_term_Unknown.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		if(Object.prototype.hasOwnProperty.call(a,"equals")) {
			return new stx_assert_eq_term_HasFunction().comply(a,b);
		} else {
			return new stx_assert_eq_term_Object().comply(a,b);
		}
	}
	,__class__: stx_assert_eq_term_Unknown
});
var stx_assert_eq_term_UnsupportedClass = function() {
};
$hxClasses["stx.assert.eq.term.UnsupportedClass"] = stx_assert_eq_term_UnsupportedClass;
stx_assert_eq_term_UnsupportedClass.__name__ = "stx.assert.eq.term.UnsupportedClass";
stx_assert_eq_term_UnsupportedClass.__super__ = stx_assert_EqCls;
stx_assert_eq_term_UnsupportedClass.prototype = $extend(stx_assert_EqCls.prototype,{
	comply: function(a,b) {
		return stx_assert_Equaled.and(new stx_assert_eq_term_Object().comply(a,b),js_Boot.getClass(a) == js_Boot.getClass(b) && true);
	}
	,__class__: stx_assert_eq_term_UnsupportedClass
});
var stx_assert_module_Crunch = function(pos) {
	stx_pico_Clazz.call(this);
	this.module = new stx_assert_Module(pos);
};
$hxClasses["stx.assert.module.Crunch"] = stx_assert_module_Crunch;
stx_assert_module_Crunch.__name__ = "stx.assert.module.Crunch";
stx_assert_module_Crunch.__super__ = stx_pico_Clazz;
stx_assert_module_Crunch.prototype = $extend(stx_pico_Clazz.prototype,{
	module: null
	,equals: function(lhs,rhs) {
		var this1 = this.module.equals().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,alike: function(lhs,rhs) {
		var this1 = this.module.alike().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,gt: function(lhs,rhs) {
		var this1 = this.module.gt().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,gt_eq: function(lhs,rhs) {
		var this1 = this.module.gt_eq().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,lt: function(lhs,rhs) {
		var this1 = this.module.lt().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,lt_eq: function(lhs,rhs) {
		var this1 = this.module.lt_eq().comply(lhs,rhs);
		if(this1._hx_index == 0) {
			var e = this1.v;
			throw haxe_Exception.thrown(e);
		}
	}
	,always: function(t) {
		var self = this.module.always().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,never: function(t) {
		var self = this.module.never().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,iz: function(a,clazz) {
		var self = this.module.iz(clazz).apply(a);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,throws: function(fn) {
		var self = this.module.throws().apply(fn);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,'void': function(t) {
		var self = this.module.void().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,exists: function(t) {
		var self = this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,matches: function(string,reg,opt) {
		var self = this.module.matches(reg,opt).apply(string);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,__class__: stx_assert_module_Crunch
});
var stx_assert_om_eq_term_Signature = function(inner) {
	stx_assert_eq_term_Base.call(this);
	this.inner = inner;
};
$hxClasses["stx.assert.om.eq.term.Signature"] = stx_assert_om_eq_term_Signature;
stx_assert_om_eq_term_Signature.__name__ = "stx.assert.om.eq.term.Signature";
stx_assert_om_eq_term_Signature.__super__ = stx_assert_eq_term_Base;
stx_assert_om_eq_term_Signature.prototype = $extend(stx_assert_eq_term_Base.prototype,{
	inner: null
	,comply: function(a,b) {
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				return stx_assert_Equaled.fromBool(true);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				var rhs = b.v;
				var lhs = a.v;
				return this.inner.comply(lhs,rhs);
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		case 2:
			if(b._hx_index == 2) {
				var s1 = b.s;
				var s0 = a.s;
				if(Type.enumEq(stx_nano_PrimitiveType.prj(s0),stx_nano_PrimitiveType.prj(s1))) {
					return stx_assert_Equaled.fromBool(true);
				} else {
					return stx_assert_Equaled.fromBool(false);
				}
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		case 3:
			if(b._hx_index == 3) {
				var fn1 = b.fn;
				var fn0 = a.fn;
				return this.comply(fn0(),fn1());
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		case 4:
			if(b._hx_index == 4) {
				var arr1 = b.arr;
				var arr0 = a.arr;
				return stx_assert_Equaled.fromBool(stx_nano_Record.equals(arr0,arr1,this));
			} else {
				return stx_assert_Equaled.fromBool(false);
			}
			break;
		default:
			return stx_assert_Equaled.fromBool(false);
		}
	}
	,__class__: stx_assert_om_eq_term_Signature
});
var stx_assert_om_eq_term_Spine = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.om.eq.term.Spine"] = stx_assert_om_eq_term_Spine;
stx_assert_om_eq_term_Spine.__name__ = "stx.assert.om.eq.term.Spine";
stx_assert_om_eq_term_Spine.__super__ = stx_assert_EqCls;
stx_assert_om_eq_term_Spine.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(a,b) {
		var _gthis = this;
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				var rhs = b.v;
				var lhs = a.v;
				return this.inner.comply(lhs,rhs);
			} else {
				return false;
			}
			break;
		case 2:
			var _g = a.sc;
			switch(_g._hx_index) {
			case 1:
				if(b._hx_index == 2) {
					var _g1 = b.sc;
					if(_g1._hx_index == 1) {
						var b1 = _g1.b;
						var b0 = _g.b;
						return stx_assert_Equaled.fromBool(b0 == b1);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 2:
				var _g1 = _g.sprig;
				switch(_g1._hx_index) {
				case 0:
					if(b._hx_index == 2) {
						var _g = b.sc;
						if(_g._hx_index == 2) {
							var _g2 = _g.sprig;
							if(_g2._hx_index == 0) {
								var b1 = _g2.str;
								var b0 = _g1.str;
								return stx_assert_Equaled.fromBool(b0 == b1);
							} else {
								return false;
							}
						} else {
							return false;
						}
					} else {
						return false;
					}
					break;
				case 1:
					var _g = _g1.byte;
					if(_g._hx_index == 0) {
						if(b._hx_index == 2) {
							var _g1 = b.sc;
							if(_g1._hx_index == 2) {
								var _g2 = _g1.sprig;
								if(_g2._hx_index == 1) {
									var _g1 = _g2.byte;
									if(_g1._hx_index == 0) {
										var b1 = _g1.int;
										var b0 = _g.int;
										return stx_assert_Equaled.fromBool(b0 == b1);
									} else {
										var b0 = _g;
										var b1 = _g1;
										return stx_assert_Equaled.fromBool(b0 == b1);
									}
								} else {
									return false;
								}
							} else {
								return false;
							}
						} else {
							return false;
						}
					} else if(b._hx_index == 2) {
						var _g1 = b.sc;
						if(_g1._hx_index == 2) {
							var _g2 = _g1.sprig;
							if(_g2._hx_index == 1) {
								var b0 = _g;
								var b1 = _g2.byte;
								return stx_assert_Equaled.fromBool(b0 == b1);
							} else {
								return false;
							}
						} else {
							return false;
						}
					} else {
						return false;
					}
					break;
				}
				break;
			default:
				return false;
			}
			break;
		case 3:
			if(b._hx_index == 3) {
				var arr1 = b.arr;
				var arr0 = a.arr;
				return new stx_assert_eq_term_Record(this).comply(arr0,arr1);
			} else {
				return false;
			}
			break;
		case 4:
			if(b._hx_index == 4) {
				var arr1 = b.arr;
				var arr0 = a.arr;
				return stx_assert_Eq.Cluster(stx_assert_Eq.Anon(function(lhs,rhs) {
					return _gthis.comply(lhs(),rhs());
				})).comply(arr0,arr1);
			} else {
				return false;
			}
			break;
		}
	}
	,__class__: stx_assert_om_eq_term_Spine
});
var stx_assert_ord_term_Anon = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.ord.term.Anon"] = stx_assert_ord_term_Anon;
stx_assert_ord_term_Anon.__name__ = "stx.assert.ord.term.Anon";
stx_assert_ord_term_Anon.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Anon.prototype = $extend(stx_assert_OrdCls.prototype,{
	delegate: null
	,comply: function(lhs,rhs) {
		return this.delegate(lhs,rhs);
	}
	,__class__: stx_assert_ord_term_Anon
});
var stx_assert_ord_term_Array = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Array"] = stx_assert_ord_term_Array;
stx_assert_ord_term_Array.__name__ = "stx.assert.ord.term.Array";
stx_assert_ord_term_Array.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Array.prototype = $extend(stx_assert_OrdCls.prototype,{
	inner: null
	,comply: function(v1,v2) {
		var n = v1.length - v2.length;
		if(n != 0) {
			if(n > 0) {
				return false;
			} else {
				return true;
			}
		} else if(v1.length == 0) {
			return false;
		} else {
			var v = false;
			var _g = 0;
			var _g1 = v1.length;
			while(_g < _g1) {
				var i = _g++;
				v = this.inner.comply(v1[i],v2[i]);
				if(v == true) {
					break;
				}
			}
			return v;
		}
	}
	,__class__: stx_assert_ord_term_Array
});
var stx_assert_ord_term_Cluster = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Cluster"] = stx_assert_ord_term_Cluster;
stx_assert_ord_term_Cluster.__name__ = "stx.assert.ord.term.Cluster";
stx_assert_ord_term_Cluster.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Cluster.prototype = $extend(stx_assert_OrdCls.prototype,{
	inner: null
	,comply: function(v1,v2) {
		var n = stx_nano_Cluster.get_length(v1) - stx_nano_Cluster.get_length(v2);
		if(n != 0) {
			if(n > 0) {
				return false;
			} else {
				return true;
			}
		} else if(stx_nano_Cluster.get_length(v1) == 0) {
			return false;
		} else {
			var v = false;
			var _g = 0;
			var _g1 = stx_nano_Cluster.get_length(v1);
			while(_g < _g1) {
				var i = _g++;
				v = this.inner.comply(v1[i],v2[i]);
				if(v == true) {
					break;
				}
			}
			return v;
		}
	}
	,__class__: stx_assert_ord_term_Cluster
});
var stx_assert_ord_term_Couple = function(l,r) {
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.ord.term.Couple"] = stx_assert_ord_term_Couple;
stx_assert_ord_term_Couple.__name__ = "stx.assert.ord.term.Couple";
stx_assert_ord_term_Couple.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Couple.prototype = $extend(stx_assert_OrdCls.prototype,{
	l: null
	,r: null
	,comply: function(a,b) {
		var _gthis = this;
		return stx_nano_CoupleLift.decouple(a,function(l0,r0) {
			return stx_nano_CoupleLift.decouple(b,function(l1,r1) {
				return stx_assert_Ordered.or(_gthis.l.comply(l0,l1),_gthis.r.comply(r0,r1));
			});
		});
	}
	,__class__: stx_assert_ord_term_Couple
});
var stx_assert_ord_term_EnumValueIndex = function() {
};
$hxClasses["stx.assert.ord.term.EnumValueIndex"] = stx_assert_ord_term_EnumValueIndex;
stx_assert_ord_term_EnumValueIndex.__name__ = "stx.assert.ord.term.EnumValueIndex";
stx_assert_ord_term_EnumValueIndex.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_EnumValueIndex.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(lhs,rhs) {
		var l = stx_LiftEnumValue.lift(lhs);
		var r = stx_LiftEnumValue.lift(rhs);
		if(stx_nano_EnumValue.get_index(l) < stx_nano_EnumValue.get_index(r)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_EnumValueIndex
});
var stx_assert_ord_term_Exists = function() {
};
$hxClasses["stx.assert.ord.term.Exists"] = stx_assert_ord_term_Exists;
stx_assert_ord_term_Exists.__name__ = "stx.assert.ord.term.Exists";
stx_assert_ord_term_Exists.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Exists.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(lhs,rhs) {
		if(lhs == null) {
			if(rhs == null) {
				return false;
			} else {
				var x = rhs;
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Exists
});
var stx_assert_ord_term_Float = function() {
};
$hxClasses["stx.assert.ord.term.Float"] = stx_assert_ord_term_Float;
stx_assert_ord_term_Float.__name__ = "stx.assert.ord.term.Float";
stx_assert_ord_term_Float.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Float.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Float
});
var stx_assert_ord_term_Ident = function() {
};
$hxClasses["stx.assert.ord.term.Ident"] = stx_assert_ord_term_Ident;
stx_assert_ord_term_Ident.__name__ = "stx.assert.ord.term.Ident";
stx_assert_ord_term_Ident.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Ident.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(thiz,that) {
		var ord = stx_assert_Ord.String().comply(thiz.name,that.name);
		if(stx_assert_OrderedLift.is_not_less_than(ord)) {
			ord = stx_assert_Ord.NullOr(stx_assert_Ord.Cluster(stx_assert_Ord.String())).comply(thiz.pack,that.pack);
		}
		return ord;
	}
	,__class__: stx_assert_ord_term_Ident
});
var stx_assert_ord_term_Int = function() {
};
$hxClasses["stx.assert.ord.term.Int"] = stx_assert_ord_term_Int;
stx_assert_ord_term_Int.__name__ = "stx.assert.ord.term.Int";
stx_assert_ord_term_Int.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Int.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Int
});
var stx_assert_ord_term_Int64 = function() {
};
$hxClasses["stx.assert.ord.term.Int64"] = stx_assert_ord_term_Int64;
stx_assert_ord_term_Int64.__name__ = "stx.assert.ord.term.Int64";
stx_assert_ord_term_Int64.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Int64.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(a,b) {
		var v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		if((a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Int64
});
var stx_assert_ord_term_KV = function(key,val) {
	this.key = key;
	this.val = val;
};
$hxClasses["stx.assert.ord.term.KV"] = stx_assert_ord_term_KV;
stx_assert_ord_term_KV.__name__ = "stx.assert.ord.term.KV";
stx_assert_ord_term_KV.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_KV.prototype = $extend(stx_assert_OrdCls.prototype,{
	key: null
	,val: null
	,comply: function(a,b) {
		return stx_assert_Ordered.and(this.key.comply(a.key,b.key),this.val.comply(a.val,b.val));
	}
	,__class__: stx_assert_ord_term_KV
});
var stx_assert_ord_term_NullOr = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.NullOr"] = stx_assert_ord_term_NullOr;
stx_assert_ord_term_NullOr.__name__ = "stx.assert.ord.term.NullOr";
stx_assert_ord_term_NullOr.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_NullOr.prototype = $extend(stx_assert_OrdCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		if(lhs == null) {
			if(rhs == null) {
				return false;
			} else {
				var x = rhs;
				return true;
			}
		} else if(rhs == null) {
			var x = lhs;
			return false;
		} else {
			var x = lhs;
			var y = rhs;
			return this.inner.comply(x,y);
		}
	}
	,__class__: stx_assert_ord_term_NullOr
});
var stx_assert_ord_term_Option = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.ord.term.Option"] = stx_assert_ord_term_Option;
stx_assert_ord_term_Option.__name__ = "stx.assert.ord.term.Option";
stx_assert_ord_term_Option.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Option.prototype = $extend(stx_assert_OrdCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		var _gthis = this;
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftOptionNano.zip(lhs,rhs),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
			return _gthis.inner.comply(l,r);
		}));
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Option
});
var stx_assert_ord_term_OrdAssertion = function(ord,pos) {
	stx_assert_assertion_term_Base.call(this,pos);
	this.ord = ord;
};
$hxClasses["stx.assert.ord.term.OrdAssertion"] = stx_assert_ord_term_OrdAssertion;
stx_assert_ord_term_OrdAssertion.__name__ = "stx.assert.ord.term.OrdAssertion";
stx_assert_ord_term_OrdAssertion.__super__ = stx_assert_assertion_term_Base;
stx_assert_ord_term_OrdAssertion.prototype = $extend(stx_assert_assertion_term_Base.prototype,{
	ord: null
	,comply: function(a,b) {
		var tmp = stx_assert_Ordered.toBool(this.ord.comply(a,b));
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		return stx_LiftAssert.expect(tmp,stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),a,b))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	}
	,__class__: stx_assert_ord_term_OrdAssertion
});
var stx_assert_ord_term_Primitive = function() {
};
$hxClasses["stx.assert.ord.term.Primitive"] = stx_assert_ord_term_Primitive;
stx_assert_ord_term_Primitive.__name__ = "stx.assert.ord.term.Primitive";
stx_assert_ord_term_Primitive.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Primitive.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(lhs,rhs) {
		switch(lhs._hx_index) {
		case 0:
			if(rhs._hx_index == 0) {
				return false;
			} else if(lhs._hx_index < rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(rhs._hx_index == 1) {
				var rhs1 = rhs.b;
				var lhs1 = lhs.b;
				return stx_assert_Ord.Bool().comply(lhs1,rhs1);
			} else if(lhs._hx_index < rhs._hx_index) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			var _g = lhs.sprig;
			switch(_g._hx_index) {
			case 0:
				if(rhs._hx_index == 2) {
					var _g1 = rhs.sprig;
					if(_g1._hx_index == 0) {
						var rhs1 = _g1.str;
						var lhs1 = _g.str;
						return stx_assert_Ord.String().comply(lhs1,rhs1);
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
				} else if(lhs._hx_index < rhs._hx_index) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				var _g1 = _g.byte;
				switch(_g1._hx_index) {
				case 0:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 0) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Ord.Int().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 1:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 1) {
								var rhs1 = _g2.int;
								var lhs1 = _g1.int;
								return stx_assert_Ord.Int64().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				case 2:
					if(rhs._hx_index == 2) {
						var _g = rhs.sprig;
						if(_g._hx_index == 1) {
							var _g2 = _g.byte;
							if(_g2._hx_index == 2) {
								var rhs1 = _g2.f;
								var lhs1 = _g1.f;
								return stx_assert_Ord.Float().comply(lhs1,rhs1);
							} else if(lhs._hx_index < rhs._hx_index) {
								return true;
							} else {
								return false;
							}
						} else if(lhs._hx_index < rhs._hx_index) {
							return true;
						} else {
							return false;
						}
					} else if(lhs._hx_index < rhs._hx_index) {
						return true;
					} else {
						return false;
					}
					break;
				}
				break;
			}
			break;
		}
	}
	,__class__: stx_assert_ord_term_Primitive
});
var stx_assert_ord_term_Record = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.ord.term.Record"] = stx_assert_ord_term_Record;
stx_assert_ord_term_Record.__name__ = "stx.assert.ord.term.Record";
stx_assert_ord_term_Record.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Record.prototype = $extend(stx_assert_OrdCls.prototype,{
	delegate: null
	,comply: function(lhs,rhs) {
		var _gthis = this;
		var delegate_delegate = stx_assert_Ord.Anon(function(lhs,rhs) {
			return stx_assert_Ordered.and(stx_assert_Ord.String().comply(stx_nano_KVLift.fst(lhs),stx_nano_KVLift.fst(rhs)),_gthis.delegate.comply((stx_nano_KVLift.snd(lhs))(),(stx_nano_KVLift.snd(rhs))()));
		});
		return stx_assert_Ord.Cluster(delegate_delegate).comply(stx_nano_Record.prj(lhs),stx_nano_Record.prj(rhs));
	}
	,__class__: stx_assert_ord_term_Record
});
var stx_assert_ord_term_Register = function() {
};
$hxClasses["stx.assert.ord.term.Register"] = stx_assert_ord_term_Register;
stx_assert_ord_term_Register.__name__ = "stx.assert.ord.term.Register";
stx_assert_ord_term_Register.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_Register.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(lhs,rhs) {
		if(stx_nano_Register.less_than(lhs,rhs)) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_Register
});
var stx_assert_ord_term_String = function() {
};
$hxClasses["stx.assert.ord.term.String"] = stx_assert_ord_term_String;
stx_assert_ord_term_String.__name__ = "stx.assert.ord.term.String";
stx_assert_ord_term_String.__super__ = stx_assert_OrdCls;
stx_assert_ord_term_String.prototype = $extend(stx_assert_OrdCls.prototype,{
	comply: function(a,b) {
		if(a < b) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: stx_assert_ord_term_String
});
var stx_assert_orderable_term_Anon = function(delegate) {
};
$hxClasses["stx.assert.orderable.term.Anon"] = stx_assert_orderable_term_Anon;
stx_assert_orderable_term_Anon.__name__ = "stx.assert.orderable.term.Anon";
stx_assert_orderable_term_Anon.__interfaces__ = [stx_assert_OrderableApi];
stx_assert_orderable_term_Anon.prototype = {
	delegate: null
	,lt: function() {
		return this.delegate;
	}
	,__class__: stx_assert_orderable_term_Anon
};
var stx_assert_pml_comparable_PExpr = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.pml.comparable.PExpr"] = stx_assert_pml_comparable_PExpr;
stx_assert_pml_comparable_PExpr.__name__ = "stx.assert.pml.comparable.PExpr";
stx_assert_pml_comparable_PExpr.__super__ = stx_assert_ComparableCls;
stx_assert_pml_comparable_PExpr.prototype = $extend(stx_assert_ComparableCls.prototype,{
	inner: null
	,eq: function() {
		return new stx_assert_pml_eq_PExpr(this.inner.eq());
	}
	,lt: function() {
		return new stx_assert_pml_ord_PExpr(this.inner.lt());
	}
	,__class__: stx_assert_pml_comparable_PExpr
});
var stx_assert_pml_eq_PExpr = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.pml.eq.PExpr"] = stx_assert_pml_eq_PExpr;
stx_assert_pml_eq_PExpr.__name__ = "stx.assert.pml.eq.PExpr";
stx_assert_pml_eq_PExpr.__super__ = stx_assert_EqCls;
stx_assert_pml_eq_PExpr.prototype = $extend(stx_assert_EqCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		var _gthis = this;
		if(lhs == null) {
			if(rhs == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(lhs._hx_index) {
			case 0:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 0) {
					var rhs1 = rhs.name;
					var lhs1 = lhs.name;
					return stx_assert_Eq.String().comply(lhs1,rhs1);
				} else {
					return false;
				}
				break;
			case 2:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 2) {
					var rhs1 = rhs.list;
					var lhs1 = lhs.list;
					return stx_ds_LinkedList.lfold(stx_ds_LinkedList.zip(lhs1,stx_ds_LinkedList.toIterable(rhs1)),function(tp,m) {
						if(m == false) {
							return false;
						} else {
							return _gthis.comply(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
						}
					},true);
				} else {
					return false;
				}
				break;
			case 4:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 4) {
					var rhs1 = rhs.value;
					var lhs1 = lhs.value;
					return this.inner.comply(lhs1,rhs1);
				} else {
					return false;
				}
				break;
			case 5:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 5) {
					return true;
				} else {
					return false;
				}
				break;
			default:
				if(rhs == null) {
					return false;
				} else {
					return false;
				}
			}
		}
	}
	,__class__: stx_assert_pml_eq_PExpr
});
var stx_assert_pml_ord_PExpr = function(inner) {
	this.inner = inner;
};
$hxClasses["stx.assert.pml.ord.PExpr"] = stx_assert_pml_ord_PExpr;
stx_assert_pml_ord_PExpr.__name__ = "stx.assert.pml.ord.PExpr";
stx_assert_pml_ord_PExpr.__super__ = stx_assert_OrdCls;
stx_assert_pml_ord_PExpr.prototype = $extend(stx_assert_OrdCls.prototype,{
	inner: null
	,comply: function(lhs,rhs) {
		var _gthis = this;
		if(lhs == null) {
			if(rhs == null) {
				return false;
			} else {
				return true;
			}
		} else {
			switch(lhs._hx_index) {
			case 0:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 0) {
					var rhs1 = rhs.name;
					var lhs1 = lhs.name;
					return stx_assert_Ord.String().comply(lhs1,rhs1);
				} else if(stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(lhs)) < stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(rhs))) {
					return true;
				} else {
					return false;
				}
				break;
			case 2:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 2) {
					var rhs1 = rhs.list;
					var lhs1 = lhs.list;
					return stx_ds_LinkedList.lfold(stx_ds_LinkedList.zip(lhs1,stx_ds_LinkedList.toIterable(rhs1)),function(tp,m) {
						if(m == true) {
							return true;
						} else {
							return _gthis.comply(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
						}
					},false);
				} else if(stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(lhs)) < stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(rhs))) {
					return true;
				} else {
					return false;
				}
				break;
			case 4:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 4) {
					var rhs1 = rhs.value;
					var lhs1 = lhs.value;
					return this.inner.comply(lhs1,rhs1);
				} else if(stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(lhs)) < stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(rhs))) {
					return true;
				} else {
					return false;
				}
				break;
			case 5:
				if(rhs == null) {
					return false;
				} else if(rhs._hx_index == 5) {
					return false;
				} else if(stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(lhs)) < stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(rhs))) {
					return true;
				} else {
					return false;
				}
				break;
			default:
				if(rhs == null) {
					return false;
				} else if(stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(lhs)) < stx_nano_EnumValue.get_index(stx_nano_EnumValue.pure(rhs))) {
					return true;
				} else {
					return false;
				}
			}
		}
	}
	,__class__: stx_assert_pml_ord_PExpr
});
var stx_assert_predicate_term_Open = function(pos) {
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.Open"] = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Open.__name__ = "stx.assert.predicate.term.Open";
stx_assert_predicate_term_Open.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Open.prototype = {
	pos: null
	,get_pos: function() {
		return this.pos;
	}
	,apply: function(v) {
		return stx_nano_Report.unit();
	}
	,error: function() {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.get_pos());
		return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_nano_Digests.e_undefined(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
	}
	,__class__: stx_assert_predicate_term_Open
};
var stx_assert_predicate_term_Always = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Always"] = stx_assert_predicate_term_Always;
stx_assert_predicate_term_Always.__name__ = "stx.assert.predicate.term.Always";
stx_assert_predicate_term_Always.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Always.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	apply: function(v) {
		return stx_nano_Report.unit();
	}
	,__class__: stx_assert_predicate_term_Always
});
var stx_assert_predicate_term_And = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.And"] = stx_assert_predicate_term_And;
stx_assert_predicate_term_And.__name__ = "stx.assert.predicate.term.And";
stx_assert_predicate_term_And.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_And.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var lr = this.l.apply(v);
		var rr = stx_nano_Report.unit();
		if(!stx_nano_ReportLift.is_defined(lr)) {
			rr = this.r.apply(v);
		}
		return stx_nano_ReportLift.concat(lr,rr);
	}
	,__class__: stx_assert_predicate_term_And
});
var stx_assert_predicate_term_Anon = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.assert.predicate.term.Anon"] = stx_assert_predicate_term_Anon;
stx_assert_predicate_term_Anon.__name__ = "stx.assert.predicate.term.Anon";
stx_assert_predicate_term_Anon.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Anon.prototype = {
	delegate: null
	,apply: function(p) {
		return this.delegate(p);
	}
	,__class__: stx_assert_predicate_term_Anon
};
var stx_assert_predicate_term_AssertionPredicate = function(delegate,data) {
	this.delegate = delegate;
	this.data = data;
};
$hxClasses["stx.assert.predicate.term.AssertionPredicate"] = stx_assert_predicate_term_AssertionPredicate;
stx_assert_predicate_term_AssertionPredicate.__name__ = "stx.assert.predicate.term.AssertionPredicate";
stx_assert_predicate_term_AssertionPredicate.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_AssertionPredicate.prototype = {
	delegate: null
	,data: null
	,apply: function(v) {
		return stx_nano_Report.errata(this.delegate.comply(this.data,v),function(x) {
			return x;
		});
	}
	,__class__: stx_assert_predicate_term_AssertionPredicate
};
var stx_assert_predicate_term_Base = function(pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.Base"] = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Base.__name__ = "stx.assert.predicate.term.Base";
stx_assert_predicate_term_Base.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_Base.__super__ = stx_pico_Clazz;
stx_assert_predicate_term_Base.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,apply: function(v) {
		return stx_nano_Report.fromStdOption(haxe_ds_Option.None);
	}
	,error: function(l,r) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this.pos);
		return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),l,r))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
	}
	,__class__: stx_assert_predicate_term_Base
});
var stx_assert_predicate_term_Exists = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Exists"] = stx_assert_predicate_term_Exists;
stx_assert_predicate_term_Exists.__name__ = "stx.assert.predicate.term.Exists";
stx_assert_predicate_term_Exists.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Exists.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(v) {
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,v),function(_) {
			return true;
		});
		var bool;
		if(self._hx_index == 0) {
			var v = self.v;
			bool = v;
		} else {
			bool = false;
		}
		return stx_LiftAssert.expect(bool,this.error());
	}
	,__class__: stx_assert_predicate_term_Exists
});
var stx_assert_predicate_term_Is = function(type,pos) {
	stx_assert_predicate_term_Base.call(this,pos);
	this.type = type;
};
$hxClasses["stx.assert.predicate.term.Is"] = stx_assert_predicate_term_Is;
stx_assert_predicate_term_Is.__name__ = "stx.assert.predicate.term.Is";
stx_assert_predicate_term_Is.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Is.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	type: null
	,apply: function(v) {
		var bool = js_Boot.__instanceof(v,this.type);
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/assert/predicate/term/Is.hx", lineNumber : 12, className : "stx.assert.predicate.term.Is", methodName : "apply"});
		var err = stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_AssertFailure.PredicateFailed(js_Boot.getClass(this),v))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
		return stx_LiftAssert.expect(bool,err);
	}
	,__class__: stx_assert_predicate_term_Is
});
var stx_assert_predicate_term_Matches = function(fault,match,opt,pos) {
	if(opt == null) {
		opt = "g";
	}
	stx_assert_predicate_term_Base.call(this,pos);
	this.fault = fault;
	this.match = match;
	this.opt = opt;
};
$hxClasses["stx.assert.predicate.term.Matches"] = stx_assert_predicate_term_Matches;
stx_assert_predicate_term_Matches.__name__ = "stx.assert.predicate.term.Matches";
stx_assert_predicate_term_Matches.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Matches.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	fault: null
	,match: null
	,opt: null
	,apply: function(v) {
		var err = this.error("~/" + this.match + "/" + this.opt,v);
		var ereg = new EReg(this.match,this.opt);
		ereg.match(v);
		var bool = ereg.matched(0) == null;
		return stx_LiftAssert.expect(bool,err);
	}
	,__class__: stx_assert_predicate_term_Matches
});
var stx_assert_predicate_term_Natural = function(method,pos) {
	this.method = method;
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Natural"] = stx_assert_predicate_term_Natural;
stx_assert_predicate_term_Natural.__name__ = "stx.assert.predicate.term.Natural";
stx_assert_predicate_term_Natural.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Natural.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	method: null
	,apply: function(v) {
		if(this.method(v)) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(this.error());
		}
	}
	,__class__: stx_assert_predicate_term_Natural
});
var stx_assert_predicate_term_NaturalReport = function(delegate,report,pos) {
	this.delegate = delegate;
	this.report = report;
	this.pos = pos;
};
$hxClasses["stx.assert.predicate.term.NaturalReport"] = stx_assert_predicate_term_NaturalReport;
stx_assert_predicate_term_NaturalReport.__name__ = "stx.assert.predicate.term.NaturalReport";
stx_assert_predicate_term_NaturalReport.__interfaces__ = [stx_assert_PredicateApi];
stx_assert_predicate_term_NaturalReport.prototype = {
	pos: null
	,report: null
	,delegate: null
	,apply: function(p) {
		var _gthis = this;
		return stx_LiftIf.if_else(this.delegate(p),stx_nano_Report.unit,function() {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,_gthis.pos);
			return stx_fail_RefuseLift.report(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(_gthis.report)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		});
	}
	,__class__: stx_assert_predicate_term_NaturalReport
};
var stx_assert_predicate_term_Never = function(pos) {
	stx_assert_predicate_term_Open.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Never"] = stx_assert_predicate_term_Never;
stx_assert_predicate_term_Never.__name__ = "stx.assert.predicate.term.Never";
stx_assert_predicate_term_Never.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Never.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	apply: function(v) {
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Never
});
var stx_assert_predicate_term_Not = function(predicate,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.predicate = predicate;
};
$hxClasses["stx.assert.predicate.term.Not"] = stx_assert_predicate_term_Not;
stx_assert_predicate_term_Not.__name__ = "stx.assert.predicate.term.Not";
stx_assert_predicate_term_Not.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Not.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	predicate: null
	,apply: function(v) {
		var self = this.predicate.apply(v);
		var bool;
		if(self == null) {
			bool = false;
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				bool = true;
				break;
			case 1:
				bool = false;
				break;
			}
		}
		return stx_LiftAssert.expect(bool,this.error());
	}
	,__class__: stx_assert_predicate_term_Not
});
var stx_assert_predicate_term_Or = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.Or"] = stx_assert_predicate_term_Or;
stx_assert_predicate_term_Or.__name__ = "stx.assert.predicate.term.Or";
stx_assert_predicate_term_Or.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Or.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var resI = this.l.apply(v);
		var resII = this.r.apply(v);
		if(stx_nano_ReportLift.is_defined(resI) && stx_nano_ReportLift.is_defined(resII)) {
			return stx_nano_ReportLift.concat(resI,resII);
		} else {
			return stx_nano_Report.unit();
		}
	}
	,__class__: stx_assert_predicate_term_Or
});
var stx_assert_predicate_term_Throws = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Throws"] = stx_assert_predicate_term_Throws;
stx_assert_predicate_term_Throws.__name__ = "stx.assert.predicate.term.Throws";
stx_assert_predicate_term_Throws.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Throws.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(block) {
		try {
			block();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return stx_nano_Report.unit();
		}
		return stx_nano_Report.pure(this.error());
	}
	,__class__: stx_assert_predicate_term_Throws
});
var stx_assert_predicate_term_Transform = function(delegate,transform,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.transform = transform;
	this.delegate = delegate;
};
$hxClasses["stx.assert.predicate.term.Transform"] = stx_assert_predicate_term_Transform;
stx_assert_predicate_term_Transform.__name__ = "stx.assert.predicate.term.Transform";
stx_assert_predicate_term_Transform.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_Transform.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	transform: null
	,delegate: null
	,apply: function(v) {
		return stx_nano_Report.errata(this.delegate.apply(v),this.transform);
	}
	,__class__: stx_assert_predicate_term_Transform
});
var stx_assert_predicate_term_Void = function(pos) {
	stx_assert_predicate_term_Base.call(this,pos);
};
$hxClasses["stx.assert.predicate.term.Void"] = stx_assert_predicate_term_Void;
stx_assert_predicate_term_Void.__name__ = "stx.assert.predicate.term.Void";
stx_assert_predicate_term_Void.__super__ = stx_assert_predicate_term_Base;
stx_assert_predicate_term_Void.prototype = $extend(stx_assert_predicate_term_Base.prototype,{
	apply: function(v) {
		return stx_LiftAssert.expect(v == null,this.error());
	}
	,__class__: stx_assert_predicate_term_Void
});
var stx_assert_predicate_term_XOr = function(l,r,pos) {
	stx_assert_predicate_term_Open.call(this,pos);
	this.l = l;
	this.r = r;
};
$hxClasses["stx.assert.predicate.term.XOr"] = stx_assert_predicate_term_XOr;
stx_assert_predicate_term_XOr.__name__ = "stx.assert.predicate.term.XOr";
stx_assert_predicate_term_XOr.__super__ = stx_assert_predicate_term_Open;
stx_assert_predicate_term_XOr.prototype = $extend(stx_assert_predicate_term_Open.prototype,{
	l: null
	,r: null
	,apply: function(v) {
		var lr = this.l.apply(v);
		var rr = this.r.apply(v);
		return stx_LiftAssert.expect(!stx_nano_ReportLift.is_defined(lr) && !stx_nano_ReportLift.is_defined(rr),this.error());
	}
	,__class__: stx_assert_predicate_term_XOr
});
var stx_assert_stub_Comparable = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.assert.stub.Comparable"] = stx_assert_stub_Comparable;
stx_assert_stub_Comparable.__name__ = "stx.assert.stub.Comparable";
stx_assert_stub_Comparable.__super__ = stx_pico_Clazz;
stx_assert_stub_Comparable.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_assert_stub_Comparable
});
var stx_coroutine_Failure = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.coroutine.Failure"] = stx_coroutine_Failure;
stx_coroutine_Failure.__name__ = "stx.coroutine.Failure";
stx_coroutine_Failure.__super__ = stx_pico_Clazz;
stx_coroutine_Failure.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_coroutine_Failure
});
var stx_coroutine_Logging = function() { };
$hxClasses["stx.coroutine.Logging"] = stx_coroutine_Logging;
stx_coroutine_Logging.__name__ = "stx.coroutine.Logging";
stx_coroutine_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/Logging.hx", lineNumber : 5, className : "stx.coroutine.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_coroutine_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.coroutine.Module"] = stx_coroutine_Module;
stx_coroutine_Module.__name__ = "stx.coroutine.Module";
stx_coroutine_Module.__super__ = stx_pico_Clazz;
stx_coroutine_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	failure: function() {
		return new stx_coroutine_Failure();
	}
	,__class__: stx_coroutine_Module
});
var stx_coroutine_core_CauseSum = $hxEnums["stx.coroutine.core.CauseSum"] = { __ename__:"stx.coroutine.core.CauseSum",__constructs__:null
	,Stop: {_hx_name:"Stop",_hx_index:0,__enum__:"stx.coroutine.core.CauseSum",toString:$estr}
	,Exit: ($_=function(err) { return {_hx_index:1,err:err,__enum__:"stx.coroutine.core.CauseSum",toString:$estr}; },$_._hx_name="Exit",$_.__params__ = ["err"],$_)
};
stx_coroutine_core_CauseSum.__constructs__ = [stx_coroutine_core_CauseSum.Stop,stx_coroutine_core_CauseSum.Exit];
var stx_coroutine_core_Cause = {};
stx_coroutine_core_Cause._new = function(self) {
	return self;
};
stx_coroutine_core_Cause.fromRefuse = function(e) {
	return stx_coroutine_core_CauseSum.Exit(e);
};
stx_coroutine_core_Cause.early = function(e) {
	return stx_coroutine_core_CauseSum.Exit(e);
};
var stx_coroutine_core_CauseLift = function() { };
$hxClasses["stx.coroutine.core.CauseLift"] = stx_coroutine_core_CauseLift;
stx_coroutine_core_CauseLift.__name__ = "stx.coroutine.core.CauseLift";
stx_coroutine_core_CauseLift.toOption = function(self) {
	switch(self._hx_index) {
	case 0:
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Cause.hx", lineNumber : 30, className : "stx.coroutine.core.CauseLift", methodName : "toOption"});
		return haxe_ds_Option.Some(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_coroutine_core_Errors.e_coroutine_stop(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	case 1:
		var err = self.err;
		return haxe_ds_Option.Some(err);
	}
};
stx_coroutine_core_CauseLift.next = function(thiz,that) {
	switch(thiz._hx_index) {
	case 0:
		switch(that._hx_index) {
		case 0:
			return stx_coroutine_core_CauseSum.Stop;
		case 1:
			var err = that.err;
			return stx_coroutine_core_CauseSum.Exit(err);
		}
		break;
	case 1:
		var _g = thiz.err;
		if(that._hx_index == 1) {
			var e1 = that.err;
			var e0 = _g;
			return stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.concat(e0,e1));
		} else {
			var err = _g;
			return stx_coroutine_core_CauseSum.Exit(err);
		}
		break;
	}
};
var stx_coroutine_core_ControlSum = $hxEnums["stx.coroutine.core.ControlSum"] = { __ename__:"stx.coroutine.core.ControlSum",__constructs__:null
	,Push: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.coroutine.core.ControlSum",toString:$estr}; },$_._hx_name="Push",$_.__params__ = ["v"],$_)
	,Quit: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.coroutine.core.ControlSum",toString:$estr}; },$_._hx_name="Quit",$_.__params__ = ["v"],$_)
};
stx_coroutine_core_ControlSum.__constructs__ = [stx_coroutine_core_ControlSum.Push,stx_coroutine_core_ControlSum.Quit];
var stx_coroutine_core_Control = {};
stx_coroutine_core_Control.lift = function(self) {
	return stx_coroutine_core_Control._new(self);
};
stx_coroutine_core_Control._new = function(self) {
	return self;
};
stx_coroutine_core_Control.unit = function() {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.None));
};
stx_coroutine_core_Control.fromError = function(c) {
	return stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.Some(c));
};
stx_coroutine_core_Control.quit = function(c) {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Quit(c));
};
stx_coroutine_core_Control.push = function(v) {
	return stx_coroutine_core_Control.lift(stx_coroutine_core_ControlSum.Push(v));
};
var stx_coroutine_core_ControlLift = function() { };
$hxClasses["stx.coroutine.core.ControlLift"] = stx_coroutine_core_ControlLift;
stx_coroutine_core_ControlLift.__name__ = "stx.coroutine.core.ControlLift";
stx_coroutine_core_ControlLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return stx_coroutine_core_ControlSum.Push(fn(v));
	case 1:
		var v = self.v;
		return stx_coroutine_core_ControlSum.Quit(v);
	}
};
stx_coroutine_core_ControlLift.fold = function(self,push,quit,none) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return push(v);
	case 1:
		var _g = self.v;
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			return quit(v);
		case 1:
			return none();
		}
		break;
	}
};
var stx_coroutine_core_CoroutineSum = $hxEnums["stx.coroutine.core.CoroutineSum"] = { __ename__:"stx.coroutine.core.CoroutineSum",__constructs__:null
	,Emit: ($_=function(o,next) { return {_hx_index:0,o:o,next:next,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Emit",$_.__params__ = ["o","next"],$_)
	,Wait: ($_=function(tran) { return {_hx_index:1,tran:tran,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Wait",$_.__params__ = ["tran"],$_)
	,Hold: ($_=function(held) { return {_hx_index:2,held:held,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Hold",$_.__params__ = ["held"],$_)
	,Halt: ($_=function(r) { return {_hx_index:3,r:r,__enum__:"stx.coroutine.core.CoroutineSum",toString:$estr}; },$_._hx_name="Halt",$_.__params__ = ["r"],$_)
};
stx_coroutine_core_CoroutineSum.__constructs__ = [stx_coroutine_core_CoroutineSum.Emit,stx_coroutine_core_CoroutineSum.Wait,stx_coroutine_core_CoroutineSum.Hold,stx_coroutine_core_CoroutineSum.Halt];
var stx_coroutine_core_ReturnSum = $hxEnums["stx.coroutine.core.ReturnSum"] = { __ename__:"stx.coroutine.core.ReturnSum",__constructs__:null
	,Terminated: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"stx.coroutine.core.ReturnSum",toString:$estr}; },$_._hx_name="Terminated",$_.__params__ = ["c"],$_)
	,Production: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.coroutine.core.ReturnSum",toString:$estr}; },$_._hx_name="Production",$_.__params__ = ["v"],$_)
};
stx_coroutine_core_ReturnSum.__constructs__ = [stx_coroutine_core_ReturnSum.Terminated,stx_coroutine_core_ReturnSum.Production];
var stx_coroutine_core_CoroutineLift = function() { };
$hxClasses["stx.coroutine.core.CoroutineLift"] = stx_coroutine_core_CoroutineLift;
stx_coroutine_core_CoroutineLift.__name__ = "stx.coroutine.core.CoroutineLift";
stx_coroutine_core_CoroutineLift.append = function(prc0,prc1) {
	switch(prc0._hx_index) {
	case 0:
		var head = prc0.o;
		var tail = prc0.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.append(tail,prc1));
	case 1:
		var arw = prc0.tran;
		var prc11 = prc1;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,function(prc0) {
			return stx_coroutine_core_CoroutineLift.append(prc0,prc11);
		}));
	case 2:
		var ft = prc0.held;
		var prc12 = prc1;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(prc0) {
			return stx_coroutine_core_CoroutineLift.append(prc0,prc12);
		}))));
	case 3:
		var _g = prc0.r;
		if(_g._hx_index == 0) {
			var _g1 = _g.c;
			if(_g1._hx_index == 0) {
				return prc1();
			} else {
				var cause = _g1;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			}
		} else {
			var e = _g;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.frame = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.frame(rest,that));
	case 1:
		var fn = self.tran;
		return stx_coroutine_core_CoroutineLift.append(stx_coroutine_pack_Tunnel.toCoroutineStop(that),function() {
			return self;
		});
	case 2:
		var held = self.held;
		var that1 = that;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(function(self) {
			return stx_coroutine_core_CoroutineLift.frame(self,that1);
		}))));
	case 3:
		var halt = self.r;
		return stx_coroutine_core_CoroutineLift.append(stx_coroutine_pack_Tunnel.toCoroutineStop(that),function() {
			return self;
		});
	}
};
stx_coroutine_core_CoroutineLift.cons = function(spx,o) {
	return stx_coroutine_core_CoroutineSum.Emit(o,spx);
};
stx_coroutine_core_CoroutineLift.provide = function(self,i) {
	var i1 = i;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.provide(self,i1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return arw(stx_coroutine_core_ControlSum.Push(i));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 69, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(_);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)))));
			case 1:
				var e = _g1.err;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 70, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.concat(e,stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(_);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))))));
			}
			break;
		case 1:
			var v = _g.v;
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 68, className : "stx.coroutine.core.CoroutineLift", methodName : "provide"});
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
				return stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine(_);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)))));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(fn(head),f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var r = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.map_i = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineLift.map_i(next,fn));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(i) {
			return stx_coroutine_core_CoroutineLift.map_i(tran(stx_coroutine_core_ControlLift.map(i,fn)),fn);
		});
	case 2:
		var held = self.held;
		var fn1 = fn;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(function(self) {
			return stx_coroutine_core_CoroutineLift.map_i(self,fn1);
		}))));
	case 3:
		var r = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.errata = function(prc,fn) {
	var fn1 = fn;
	var f = function(prc) {
		return stx_coroutine_core_CoroutineLift.errata(prc,fn1);
	};
	switch(prc._hx_index) {
	case 0:
		var o = prc.o;
		var next = prc.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var fn2 = prc.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(ctl) {
			return stx_coroutine_core_ControlLift.fold(ctl,function(v) {
				return f(fn2(stx_coroutine_core_ControlSum.Push(v)));
			},function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		});
	case 2:
		var ft = prc.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(v) {
			return f(v);
		},{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 101, className : "stx.coroutine.core.CoroutineLift", methodName : "errata"})));
	case 3:
		var _g = prc.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			case 1:
				var e = _g1.err;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(fn(e))));
			}
			break;
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map_r = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map_r(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(r)));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.map_or_halt = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.map_or_halt(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_pico_EitherLift.fold(fn(head),function(l) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(l));
		},function(r) {
			return stx_coroutine_core_CoroutineSum.Emit(r,f(rest));
		});
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.relate = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = fn(o);
			if(self1 == null) {
				return rec(next);
			} else {
				switch(self1._hx_index) {
				case 0:
					var v = self1.v;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(v)));
				case 1:
					return rec(next);
				}
			}
			break;
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return stx_coroutine_pack_Relate.lift(rec(self));
};
stx_coroutine_core_CoroutineLift.filter = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_LiftIf.if_else(fn(o),function() {
				return stx_coroutine_core_CoroutineSum.Emit(o,rec(next));
			},function() {
				return rec(next);
			});
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return rec(self);
};
stx_coroutine_core_CoroutineLift.map_filter = function(self,fn) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = fn(o);
			switch(self1._hx_index) {
			case 0:
				var t = self1.v;
				return stx_coroutine_core_CoroutineSum.Emit(t,rec(next));
			case 1:
				return rec(next);
			}
			break;
		case 1:
			var fn1 = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn1,rec));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var e = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(e);
		}
	};
	return rec(self);
};
stx_coroutine_core_CoroutineLift.partial = function(self,capture) {
	return stx_coroutine_core_CoroutineLift.map_filter(self,function(o) {
		var self = capture(o);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			t(o);
			return stx_pico_Option.unit();
		case 1:
			return stx_pico_Option.pure(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.window = function(self,capture) {
	var stage = 0;
	return stx_coroutine_core_CoroutineLift.map_filter(self,function(o) {
		switch(stage) {
		case 0:
			var self = capture(o);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				stage = 1;
				t(o);
				return haxe_ds_Option.None;
			case 1:
				return haxe_ds_Option.Some(o);
			}
			break;
		case 1:
			var self = capture(o);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				t(o);
				return haxe_ds_Option.None;
			case 1:
				stage = 2;
				return haxe_ds_Option.Some(o);
			}
			break;
		default:
			return haxe_ds_Option.Some(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.immediate = function(self,effect) {
	var fn = function() {
		return self;
	};
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_fletcher_FiberLift.then(effect,eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 29, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunXR"}))));
};
stx_coroutine_core_CoroutineLift.flat_map_r = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.flat_map_r(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,f(rest));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var e = _g.c;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
		case 1:
			var r = _g.v;
			return fn(r);
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.one = function(v) {
	return stx_coroutine_core_CoroutineSum.Emit(v,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
};
stx_coroutine_core_CoroutineLift.mod = function(self,fn) {
	switch(self._hx_index) {
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,fn));
	case 2:
		var slot = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(stx_coroutine_core_Held.convert(slot,eu_ohmrun_fletcher_Convert.Fun(fn))));
	default:
		return fn(self);
	}
};
stx_coroutine_core_CoroutineLift.toString = function(self) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return "!<" + Std.string(head) + ">" + recurse(rest);
		case 1:
			var arw = self.tran;
			return "->";
		case 2:
			var h = self.held;
			return "[?]";
		case 3:
			var _g = self.r;
			if(_g._hx_index == 0) {
				if(_g.c._hx_index == 0) {
					return "#.";
				} else {
					var e = _g;
					return "#" + Std.string(e);
				}
			} else {
				var e = _g;
				return "#" + Std.string(e);
			}
			break;
		}
	};
	return recurse(self);
};
stx_coroutine_core_CoroutineLift.escape = function(self) {
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_core_CoroutineLift.mod(rest,stx_coroutine_core_CoroutineLift.escape);
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineLift.mod(arw(stx_coroutine_core_ControlSum.Quit(haxe_ds_Option.None)),stx_coroutine_core_CoroutineLift.escape);
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(h,eu_ohmrun_fletcher_Convert.Fun(stx_coroutine_core_CoroutineLift.escape))));
	case 3:
		var e = self.r;
		return stx_coroutine_core_CoroutineSum.Halt(e);
	}
};
stx_coroutine_core_CoroutineLift.touch = function(self,before,after) {
	switch(self._hx_index) {
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.touch(arw,before,after));
	case 2:
		var h = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.touch(h,before,after));
	default:
		return self;
	}
};
stx_coroutine_core_CoroutineLift.on_return = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.on_return(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(tail,f));
	case 1:
		var arw = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
	case 2:
		var ft = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var ret = self.r;
		fn(ret);
		return stx_coroutine_core_CoroutineSum.Halt(ret);
	}
};
stx_coroutine_core_CoroutineLift.tap = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.tap(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		fn(stx_coroutine_core_Phase.Opt(o));
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(function(ctrl) {
			fn(stx_coroutine_core_Phase.Ipt(ctrl));
			return f(tran(ctrl));
		});
	case 2:
		var held = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var r = self.r;
		fn(stx_coroutine_core_Phase.Rtn(r));
		return stx_coroutine_core_CoroutineSum.Halt(r);
	}
};
stx_coroutine_core_CoroutineLift.hook = function(self,fn) {
	var self1 = fn;
	return stx_coroutine_core_CoroutineLift.map(self,function(p) {
		self1(p);
		return p;
	});
};
stx_coroutine_core_CoroutineLift.once = function(self,fn) {
	var done = false;
	return stx_coroutine_core_CoroutineLift.hook(self,function(o) {
		stx_LiftIf.if_else(done,function() {
			return;
		},function() {
			done = true;
			fn(o);
		});
	});
};
stx_coroutine_core_CoroutineLift.until = function(self,fn) {
	var cont = true;
	return stx_coroutine_core_CoroutineLift.hook(self,function(o) {
		if(cont) {
			cont = fn(o);
		}
	});
};
stx_coroutine_core_CoroutineLift.pause = function(self,ft) {
	var future = tink_core_Future.map(ft,function(_) {
		return self;
	});
	return stx_coroutine_core_CoroutineSum.Hold(eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 24, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFuture"}));
};
stx_coroutine_core_CoroutineLift.source = function(self,sig) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		tmp = stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineLift.source(next,sig));
		break;
	case 1:
		var arw = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(tink_core_Future.map(sig(),function(either) {
			return stx_pico_EitherLift.fold(either,function(l) {
				return stx_coroutine_core_CoroutineLift.source(arw(stx_coroutine_core_Control.push(l)),sig);
			},function(r) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(r));
			});
		}),{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 344, className : "stx.coroutine.core.CoroutineLift", methodName : "source"}));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(x) {
			return stx_coroutine_core_CoroutineLift.source(x,sig);
		}))));
		break;
	case 3:
		var done = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(done);
		break;
	}
	return stx_coroutine_pack_Source.lift(tmp);
};
stx_coroutine_core_CoroutineLift.errate = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_core_CoroutineLift.errate(self,fn1);
	};
	switch(self._hx_index) {
	case 0:
		var o = self.o;
		var next = self.next;
		return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
	case 1:
		var tran = self.tran;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(ctrl) {
			return stx_coroutine_core_ControlLift.fold(ctrl,function(ok) {
				return f(tran(stx_coroutine_core_ControlSum.Push(ok)));
			},function(no) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(no))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	case 2:
		var held = self.held;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			switch(_g1._hx_index) {
			case 0:
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			case 1:
				var r = _g1.err;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.errate(r,fn))));
			}
			break;
		case 1:
			var r = _g.v;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
		}
		break;
	}
};
stx_coroutine_core_CoroutineLift.mod_r = function(self,fn) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				var result = eu_ohmrun_FletcherLift.map(eu_ohmrun_fletcher_Produce.prj(eu_ohmrun_fletcher_ModulateLift.produce(fn,stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,r))),function(res) {
					var self;
					switch(res._hx_index) {
					case 0:
						var t = res.t;
						self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(t));
						break;
					case 1:
						var e = res.e;
						var _g = e.get_data();
						switch(_g._hx_index) {
						case 0:
							var _g1 = _g.v;
							switch(_g1._hx_index) {
							case 0:
								var code = _g1.digest;
								var self1 = e.get_pos();
								var this1;
								if(self1._hx_index == 0) {
									var v = self1.v;
									this1 = v;
								} else {
									this1 = null;
								}
								var this2 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,this1);
								self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
									return code;
								},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this2)))));
								break;
							case 1:
								var _g = _g1.v;
								switch(_g._hx_index) {
								case 0:
									self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
									break;
								case 1:
									var rejection = _g.err;
									self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(rejection)));
									break;
								}
								break;
							}
							break;
						case 1:
							self = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							break;
						}
						break;
					}
					return self;
				},{ fileName : "stx/coroutine/core/Coroutine.hx", lineNumber : 383, className : "stx.coroutine.core.CoroutineLift", methodName : "mod_r"});
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(result));
			}
			break;
		}
	};
	return stx_coroutine_core_Coroutine.lift(f(self));
};
var stx_coroutine_core_Coroutine = {};
stx_coroutine_core_Coroutine.lift = function(self) {
	return stx_coroutine_core_Coroutine._new(self);
};
stx_coroutine_core_Coroutine._new = function(self) {
	return self;
};
stx_coroutine_core_Coroutine.held = function(this1) {
	if(this1._hx_index == 2) {
		var _g = this1.held;
		return true;
	} else {
		return false;
	}
};
stx_coroutine_core_Coroutine.prj = function(this1) {
	return this1;
};
stx_coroutine_core_Coroutine.provide = function(this1,v) {
	return stx_coroutine_core_Coroutine.lift(stx_coroutine_core_Coroutine._.provide(this1,v));
};
var stx_fail_DigestApi = function() { };
$hxClasses["stx.fail.DigestApi"] = stx_fail_DigestApi;
stx_fail_DigestApi.__name__ = "stx.fail.DigestApi";
stx_fail_DigestApi.__isInterface__ = true;
stx_fail_DigestApi.prototype = {
	code: null
	,uuid: null
	,detail: null
	,__class__: stx_fail_DigestApi
};
var stx_fail_Digest = function(uuid,detail,code) {
	if(code == null) {
		code = -1;
	}
	this.uuid = uuid;
	this.detail = detail;
	this.code = code;
	var _this = stx_fail_Digest.get_register();
	if(Object.prototype.hasOwnProperty.call(_this.h,uuid)) {
		var val = stx_fail_Digest.get_register().h[uuid];
		var c = js_Boot.getClass(this);
		var identifier = c.__name__;
		if(js_Boot.getClass(val) != js_Boot.getClass(this)) {
			throw haxe_Exception.thrown("Digest identifier " + uuid + " on " + identifier + " already registered for " + Std.string(val));
		}
	} else {
		stx_fail_Digest.get_register().h[uuid] = this;
	}
};
$hxClasses["stx.fail.Digest"] = stx_fail_Digest;
stx_fail_Digest.__name__ = "stx.fail.Digest";
stx_fail_Digest.__interfaces__ = [stx_fail_DigestApi];
stx_fail_Digest.register = null;
stx_fail_Digest.get_register = function() {
	if(stx_fail_Digest.register == null) {
		return stx_fail_Digest.register = new haxe_ds_StringMap();
	} else {
		return stx_fail_Digest.register;
	}
};
stx_fail_Digest.Foreign = function(detail) {
	return new stx_fail__$Digest_DigestForeign(detail);
};
stx_fail_Digest.prototype = {
	uuid: null
	,detail: null
	,code: null
	,toString: function() {
		return "(" + this.code + ",\"" + this.uuid + "\",\"" + this.detail + "\")";
	}
	,asDigest: function() {
		return this;
	}
	,__class__: stx_fail_Digest
};
var stx_coroutine_core_Digest = function(note) {
	stx_fail_Digest.call(this,"d905e32c-edd4-4e2b-b044-fb3d643cab57","" + this.detail);
};
$hxClasses["stx.coroutine.core.Digest"] = stx_coroutine_core_Digest;
stx_coroutine_core_Digest.__name__ = "stx.coroutine.core.Digest";
stx_coroutine_core_Digest.__super__ = stx_fail_Digest;
stx_coroutine_core_Digest.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_coroutine_core_Digest
});
var stx_coroutine_core_ECoroutineStop = function() {
	stx_fail_Digest.call(this,"01FRQ77KZBWH5B94085CX40Y02","Coroutine stopped.");
};
$hxClasses["stx.coroutine.core.ECoroutineStop"] = stx_coroutine_core_ECoroutineStop;
stx_coroutine_core_ECoroutineStop.__name__ = "stx.coroutine.core.ECoroutineStop";
stx_coroutine_core_ECoroutineStop.__super__ = stx_fail_Digest;
stx_coroutine_core_ECoroutineStop.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineStop
});
var stx_coroutine_core_ECoroutineInputHung = function() {
	stx_fail_Digest.call(this,"01FRSGYFNGNMAKJT12C1GSM2Y4","Input hung");
};
$hxClasses["stx.coroutine.core.ECoroutineInputHung"] = stx_coroutine_core_ECoroutineInputHung;
stx_coroutine_core_ECoroutineInputHung.__name__ = "stx.coroutine.core.ECoroutineInputHung";
stx_coroutine_core_ECoroutineInputHung.__super__ = stx_fail_Digest;
stx_coroutine_core_ECoroutineInputHung.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineInputHung
});
var stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine = function() {
	stx_fail_Digest.call(this,"01FRSHA2FF3J3MEE5AF9RJ5YE7","Provided value to stopped coroutine");
};
$hxClasses["stx.coroutine.core.ECoroutineProvidedValueToStoppedCoroutine"] = stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine;
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.__name__ = "stx.coroutine.core.ECoroutineProvidedValueToStoppedCoroutine";
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.__super__ = stx_fail_Digest;
stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine
});
var stx_coroutine_core_Errors = function() { };
$hxClasses["stx.coroutine.core.Errors"] = stx_coroutine_core_Errors;
stx_coroutine_core_Errors.__name__ = "stx.coroutine.core.Errors";
stx_coroutine_core_Errors.e_coroutine_stop = function(digests) {
	return new stx_coroutine_core_ECoroutineStop();
};
stx_coroutine_core_Errors.e_coroutine_provided_value_to_stopped_coroutine = function(digests) {
	return new stx_coroutine_core_ECoroutineProvidedValueToStoppedCoroutine();
};
var stx_coroutine_core_Held = {};
stx_coroutine_core_Held._new = function(self) {
	return self;
};
stx_coroutine_core_Held.fromProvide = function(self) {
	return stx_coroutine_core_Held.lift(self);
};
stx_coroutine_core_Held.fromProduce = function(self) {
	return stx_coroutine_core_Held.lift(new eu_ohmrun_fletcher_term_Then(self,new eu_ohmrun_fletcher_term_AnonSync(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return t;
		case 1:
			var e = res.e;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
		}
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"}),{ fileName : "stx/coroutine/core/Held.hx", lineNumber : 14, className : "stx.coroutine.core._Held.Held_Impl_", methodName : "fromProduce"}));
};
stx_coroutine_core_Held.fromProduceI = function(self) {
	return stx_coroutine_core_Held._new(eu_ohmrun_Fletcher.Anon(function(ipt,cont) {
		var self1 = cont;
		var receiver = eu_ohmrun_fletcher_ReceiverLift.fold_mapp(eu_ohmrun_Fletcher.forward(self,0,{ fileName : "stx/coroutine/core/Held.hx", lineNumber : 30, className : "stx.coroutine.core._Held.Held_Impl_", methodName : "fromProduceI"}),function(ok) {
			var result;
			switch(ok._hx_index) {
			case 0:
				var t = ok.t;
				var f = null;
				f = function(self) {
					switch(self._hx_index) {
					case 0:
						var o = self.o;
						var next = self.next;
						var self1 = next;
						return stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
							return f(self1);
						})));
					case 1:
						var tran = self.tran;
						return stx_coroutine_core_CoroutineSum.Wait(function(ctrl) {
							switch(ctrl._hx_index) {
							case 0:
								var i = ctrl.v;
								return f(tran(stx_coroutine_core_Control.push(i)));
							case 1:
								var _g = ctrl.v;
								switch(_g._hx_index) {
								case 0:
									var e = _g.v;
									return f(tran(stx_coroutine_core_Control.quit(stx_pico_Option.fromNullT(e))));
								case 1:
									return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
								}
								break;
							}
						});
					case 2:
						var held = self.held;
						var result = stx_coroutine_core_Held.convert(held,eu_ohmrun_fletcher_Convert.Fun(f));
						return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.fromProvide(result));
					case 3:
						var _g = self.r;
						switch(_g._hx_index) {
						case 0:
							var _g1 = _g.c;
							switch(_g1._hx_index) {
							case 0:
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							case 1:
								var rejection = _g1.err;
								var result = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(rejection)));
								return result;
							}
							break;
						case 1:
							var r = _g.v;
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
						}
						break;
					}
				};
				var result1 = f(t);
				result = result1;
				break;
			case 1:
				var e = ok.e;
				var this1 = stx_nano_lift_LiftError.fault(e);
				var result1 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_nano_Digests.e_undefined(_);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)))));
				result = result1;
				break;
			}
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,result);
		},function(no) {
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,no);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self1));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return receiver.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "stx/coroutine/core/Held.hx", lineNumber : 28, className : "stx.coroutine.core._Held.Held_Impl_", methodName : "fromProduceI"}));
};
stx_coroutine_core_Held.Ready = function(data,pos) {
	var v = data;
	return new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return v;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"});
};
stx_coroutine_core_Held.Guard = function(guard,pos) {
	var future = guard;
	return stx_coroutine_core_Held.lift(eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var self = cont;
		var self1 = cont;
		var ft = tink_core_Future.map(future,function(t) {
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,t);
		});
		var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("later " + Std.string(self1));
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 52, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
		var this1 = eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_Anon(function(r_ipt) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("later " + Std.string(self1) + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 55, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "later"}));
			var next = new tink_core_FutureTrigger();
			var fst = self1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(t_ipt) {
				ft.handle(function(res) {
					t_ipt.trigger(res);
					next.trigger(res);
				});
				return null;
			})));
			var snd = r_ipt.apply(next);
			return stx_stream_WorkLift.seq(fst,snd);
		}));
		var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("receive " + Std.string(self));
		new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
		return this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
			return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive inner called");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				oc.handle(function(out) {
					ip.trigger(out);
				});
				return null;
			})));
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 24, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFuture"}));
};
stx_coroutine_core_Held.Pause = function(self) {
	var fn = self;
	return stx_coroutine_core_Held.lift(eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 29, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunXR"}));
};
stx_coroutine_core_Held.lift = function(fn) {
	return stx_coroutine_core_Held._new(fn);
};
stx_coroutine_core_Held.toCoroutine = function(this1) {
	return stx_coroutine_core_CoroutineSum.Hold(this1);
};
stx_coroutine_core_Held.pure = function(spx) {
	var v = spx;
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(new eu_ohmrun_fletcher_term_AnonSync(function(_) {
		return v;
	},{ fileName : "eu/ohmrun/Fletcher.hx", lineNumber : 112, className : "eu.ohmrun._Fletcher.Fletcher_Impl_", methodName : "Sync"})));
};
stx_coroutine_core_Held.lazy = function(spx) {
	var fn = stx_fn_Thunk.prj(spx);
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_Fletcher.Anon(function(_,cont) {
		var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,fn());
		return eu_ohmrun_fletcher_Receiver.reply(eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
			trg.trigger(value);
			return trg;
		})));
	},{ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 29, className : "eu.ohmrun.fletcher._Provide.Provide_Impl_", methodName : "fromFunXR"})));
};
stx_coroutine_core_Held.mod = function(this1,fn) {
	return stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(this1,eu_ohmrun_fletcher_Convert.Fun(fn)));
};
stx_coroutine_core_Held.touch = function(this1,before,after) {
	var self = function(_) {
		before();
	};
	var self1 = function(_) {
		after();
	};
	var tmp = function(p) {
		self1(p);
		return p;
	};
	return stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(eu_ohmrun_Fletcher._.mapi(this1,function(p) {
		self(p);
		return p;
	}),tmp,{ fileName : "stx/coroutine/core/Held.hx", lineNumber : 108, className : "stx.coroutine.core._Held.Held_Impl_", methodName : "touch"}));
};
stx_coroutine_core_Held.environment = function(this1,handler) {
	var handler1 = handler;
	return eu_ohmrun_Fletcher._.environment(this1,0,function(o) {
		handler1(o);
	},function(e) {
		new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),6).toLogApi().comply(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
		throw haxe_Exception.thrown(e);
	},{ fileName : "stx/coroutine/core/Held.hx", lineNumber : 116, className : "stx.coroutine.core._Held.Held_Impl_", methodName : "environment"});
};
stx_coroutine_core_Held.convert = function(this1,that) {
	return eu_ohmrun_fletcher_Provide._.convert(this1,that);
};
stx_coroutine_core_Held.toString = function(this1) {
	return "HELD";
};
var stx_coroutine_core_HeldLift = function() { };
$hxClasses["stx.coroutine.core.HeldLift"] = stx_coroutine_core_HeldLift;
stx_coroutine_core_HeldLift.__name__ = "stx.coroutine.core.HeldLift";
var stx_coroutine_core_Phase = $hxEnums["stx.coroutine.core.Phase"] = { __ename__:"stx.coroutine.core.Phase",__constructs__:null
	,Ipt: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Ipt",$_.__params__ = ["i"],$_)
	,Opt: ($_=function(o) { return {_hx_index:1,o:o,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Opt",$_.__params__ = ["o"],$_)
	,Rtn: ($_=function(o) { return {_hx_index:2,o:o,__enum__:"stx.coroutine.core.Phase",toString:$estr}; },$_._hx_name="Rtn",$_.__params__ = ["o"],$_)
};
stx_coroutine_core_Phase.__constructs__ = [stx_coroutine_core_Phase.Ipt,stx_coroutine_core_Phase.Opt,stx_coroutine_core_Phase.Rtn];
var stx_coroutine_core_Return = {};
stx_coroutine_core_Return.lift = function(self) {
	return stx_coroutine_core_Return._new(self);
};
stx_coroutine_core_Return._new = function(self) {
	return self;
};
stx_coroutine_core_Return.fromRefuse = function(e) {
	return stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e));
};
stx_coroutine_core_Return.fromCause = function(c) {
	return stx_coroutine_core_ReturnSum.Terminated(c);
};
stx_coroutine_core_Return.fromT = function(v) {
	return stx_coroutine_core_ReturnSum.Production(v);
};
stx_coroutine_core_Return.toCoroutine = function(this1) {
	return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_Return.lift(this1));
};
stx_coroutine_core_Return.toOptionUpshot = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var _g = this1.c;
		switch(_g._hx_index) {
		case 0:
			return haxe_ds_Option.None;
		case 1:
			var err = _g.err;
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/coroutine/core/Return.hx", lineNumber : 31, className : "stx.coroutine.core._Return.Return_Impl_", methodName : "toOptionUpshot"}));
		}
		break;
	case 1:
		var v = this1.v;
		return haxe_ds_Option.Some(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v));
	}
};
stx_coroutine_core_Return.prj = function(this1) {
	return this1;
};
var stx_coroutine_core_ReturnLift = function() { };
$hxClasses["stx.coroutine.core.ReturnLift"] = stx_coroutine_core_ReturnLift;
stx_coroutine_core_ReturnLift.__name__ = "stx.coroutine.core.ReturnLift";
stx_coroutine_core_ReturnLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var c = self.c;
		return stx_coroutine_core_ReturnSum.Terminated(c);
	case 1:
		var v = self.v;
		return stx_coroutine_core_ReturnSum.Production(fn(v));
	}
};
var stx_coroutine_core_Status = $hxEnums["stx.coroutine.core.Status"] = { __ename__:"stx.coroutine.core.Status",__constructs__:null
	,Emitting: {_hx_name:"Emitting",_hx_index:0,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Holding: {_hx_name:"Holding",_hx_index:1,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Awaiting: {_hx_name:"Awaiting",_hx_index:2,__enum__:"stx.coroutine.core.Status",toString:$estr}
	,Halted: {_hx_name:"Halted",_hx_index:3,__enum__:"stx.coroutine.core.Status",toString:$estr}
};
stx_coroutine_core_Status.__constructs__ = [stx_coroutine_core_Status.Emitting,stx_coroutine_core_Status.Holding,stx_coroutine_core_Status.Awaiting,stx_coroutine_core_Status.Halted];
var stx_coroutine_core_Transmission = {};
stx_coroutine_core_Transmission._new = function(self) {
	return self;
};
stx_coroutine_core_Transmission.lift = function(self) {
	return stx_coroutine_core_Transmission._new(self);
};
stx_coroutine_core_Transmission.fromFun1R = function(fn) {
	return stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	});
};
stx_coroutine_core_Transmission.touch = function(this1,before,after) {
	return stx_coroutine_core_Transmission.lift(function(control) {
		before();
		var value = this1(control);
		after();
		return value;
	});
};
stx_coroutine_core_Transmission.into = function(fn) {
	return fn;
};
stx_coroutine_core_Transmission.prj = function(this1) {
	return this1;
};
stx_coroutine_core_Transmission.get_self = function(this1) {
	return stx_coroutine_core_Transmission.lift(this1);
};
var stx_coroutine_core_TransmissionLift = function() { };
$hxClasses["stx.coroutine.core.TransmissionLift"] = stx_coroutine_core_TransmissionLift;
stx_coroutine_core_TransmissionLift.__name__ = "stx.coroutine.core.TransmissionLift";
stx_coroutine_core_TransmissionLift.mod = function(self,fn) {
	return stx_coroutine_core_Transmission.lift(stx_fn_UnaryLift.then(self,fn));
};
stx_coroutine_core_TransmissionLift.imply = function(self,input) {
	return self(stx_coroutine_core_ControlSum.Push(input));
};
var stx_coroutine_lift_LiftArrowlet = function() { };
$hxClasses["stx.coroutine.lift.LiftArrowlet"] = stx_coroutine_lift_LiftArrowlet;
stx_coroutine_lift_LiftArrowlet.__name__ = "stx.coroutine.lift.LiftArrowlet";
var stx_coroutine_lift_LiftFun = function() { };
$hxClasses["stx.coroutine.lift.LiftFun"] = stx_coroutine_lift_LiftFun;
stx_coroutine_lift_LiftFun.__name__ = "stx.coroutine.lift.LiftFun";
stx_coroutine_lift_LiftFun.asTunnel = function(fn) {
	return stx_coroutine_pack_Tunnel.fromFunction(fn);
};
stx_coroutine_lift_LiftFun.asRelate = function(fn) {
	return stx_coroutine_pack_Relate.fromFun1R(fn);
};
var stx_coroutine_lift_LiftIterable = function() { };
$hxClasses["stx.coroutine.lift.LiftIterable"] = stx_coroutine_lift_LiftIterable;
stx_coroutine_lift_LiftIterable.__name__ = "stx.coroutine.lift.LiftIterable";
stx_coroutine_lift_LiftIterable.asEmiter = function(itr) {
	return stx_coroutine_pack_Emiter.fromIterator(itr);
};
var stx_coroutine_lift_LiftOption = function() { };
$hxClasses["stx.coroutine.lift.LiftOption"] = stx_coroutine_lift_LiftOption;
stx_coroutine_lift_LiftOption.__name__ = "stx.coroutine.lift.LiftOption";
stx_coroutine_lift_LiftOption.asEmiter = function(opt) {
	return stx_coroutine_pack_Emiter.fromOption(opt);
};
var stx_coroutine_pack_DeriveLift = function() { };
$hxClasses["stx.coroutine.pack.DeriveLift"] = stx_coroutine_pack_DeriveLift;
stx_coroutine_pack_DeriveLift.__name__ = "stx.coroutine.pack.DeriveLift";
stx_coroutine_pack_DeriveLift.toSource = function(self) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			if(self.o == 0) {
				var next = self.next;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			} else {
				throw haxe_Exception.thrown("This is a regression");
			}
			break;
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,recurse));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(recurse))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var ret = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(ret));
			}
			break;
		}
	};
	return stx_coroutine_pack_Source.fromCoroutine(recurse(self));
};
stx_coroutine_pack_DeriveLift.complete = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_pack_DeriveLift.complete(rest,cb));
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,recurse));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(recurse))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var ret = _g.v;
				cb(ret);
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			}
			break;
		}
	};
	return stx_coroutine_pack_Effect.lift(recurse(self));
};
stx_coroutine_pack_DeriveLift.zip = function(self,that) {
	var f = null;
	f = function(self,that) {
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g = self.next;
			switch(that._hx_index) {
			case 0:
				var _g1 = that.o;
				var nII = that.next;
				var nI = _g;
				var self1 = nI;
				var that1 = nII;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self1,that1);
				}));
			case 1:
				var fn = that.tran;
				var nI = _g;
				var self2 = nI;
				var that2 = fn(stx_coroutine_core_ControlSum.Push(0));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self2,that2);
				}));
			case 2:
				var ft = that.held;
				var nI = _g;
				var self3 = nI;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(that) {
					return f(self3,that);
				}))));
			case 3:
				var _g1 = that.r;
				switch(_g1._hx_index) {
				case 0:
					var _g2 = _g1.c;
					switch(_g2._hx_index) {
					case 0:
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					case 1:
						var e = _g2.err;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
					}
					break;
				case 1:
					var r = _g1.v;
					var nI = _g;
					var self4 = nI;
					var that3 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self4,that3);
					}));
				}
				break;
			}
			break;
		case 1:
			var _g = self.tran;
			switch(that._hx_index) {
			case 0:
				var _g1 = that.o;
				var nII = that.next;
				var fn = _g;
				var self5 = fn(stx_coroutine_core_ControlSum.Push(0));
				var that4 = nII;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self5,that4);
				}));
			case 1:
				var r = that.tran;
				var l = _g;
				var self6 = l(stx_coroutine_core_ControlSum.Push(0));
				var that5 = r(stx_coroutine_core_ControlSum.Push(0));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self6,that5);
				}));
			case 2:
				var ft = that.held;
				var fn = _g;
				var self7 = fn(stx_coroutine_core_ControlSum.Push(0));
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(that) {
					return f(self7,that);
				}))));
			case 3:
				var _g1 = that.r;
				switch(_g1._hx_index) {
				case 0:
					var _g2 = _g1.c;
					switch(_g2._hx_index) {
					case 0:
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					case 1:
						var e = _g2.err;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
					}
					break;
				case 1:
					var r = _g1.v;
					var fn = _g;
					var self8 = fn(stx_coroutine_core_ControlSum.Push(0));
					var that6 = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r));
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self8,that6);
					}));
				}
				break;
			}
			break;
		case 2:
			var l = self.held;
			var r = that;
			var that7 = r;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(l,eu_ohmrun_fletcher_Convert.Fun(function(self) {
				return f(self,that7);
			}))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				switch(_g1._hx_index) {
				case 0:
					if(that._hx_index == 3) {
						var _g2 = that.r;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
							case 1:
								var e1 = _g3.err;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e1)));
							}
						} else {
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
						}
					} else {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					}
					break;
				case 1:
					var _g2 = _g1.err;
					if(that._hx_index == 3) {
						var _g1 = that.r;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								var e = _g2;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
							case 1:
								var e1 = _g3.err;
								var e0 = _g2;
								return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(stx_fail_Refuse.concat(e0,e1))));
							}
						} else {
							var l = _g;
							var r = that;
							var self = stx_coroutine_core_CoroutineSum.Halt(l);
							var that8 = r;
							return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
								return f(self,that8);
							}));
						}
					} else {
						var l = _g;
						var r = that;
						var self9 = stx_coroutine_core_CoroutineSum.Halt(l);
						var that9 = r;
						return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
							return f(self9,that9);
						}));
					}
					break;
				}
				break;
			case 1:
				var _g1 = _g.v;
				if(that._hx_index == 3) {
					var _g2 = that.r;
					switch(_g2._hx_index) {
					case 0:
						var _g3 = _g2.c;
						switch(_g3._hx_index) {
						case 0:
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
						case 1:
							var e = _g3.err;
							return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
						}
						break;
					case 1:
						var r = _g2.v;
						var l = _g1;
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r)));
					}
				} else {
					var l = _g;
					var r = that;
					var self10 = stx_coroutine_core_CoroutineSum.Halt(l);
					var that = r;
					return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
						return f(self10,that);
					}));
				}
				break;
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self,that));
};
stx_coroutine_pack_DeriveLift.secure = function(self,that) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				return stx_coroutine_pack_SecureLift.close(stx_coroutine_pack_Secure.provide(that,r));
			}
			break;
		}
	};
	return stx_coroutine_pack_Effect.lift(f(self));
};
stx_coroutine_pack_DeriveLift.map = function(self,fn) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var e = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(e));
			case 1:
				var r = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(r)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self));
};
stx_coroutine_pack_DeriveLift.produce = function(self) {
	return eu_ohmrun_fletcher_Produce.fromPledge(stx_nano_Pledge.lift(tink_core_Future.map(stx_coroutine_pack_DeriveLift.run(self),function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
			break;
		case 1:
			var e = outcome.e;
			switch(e._hx_index) {
			case 0:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 158, className : "stx.coroutine.pack.DeriveLift", methodName : "produce"});
				tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_coroutine_core_Errors.e_coroutine_stop(_);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 158, className : "stx.coroutine.pack.DeriveLift", methodName : "produce"});
				break;
			case 1:
				var e1 = e.err;
				tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e1),{ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 159, className : "stx.coroutine.pack.DeriveLift", methodName : "produce"});
				break;
			}
			break;
		}
		return tmp;
	})));
};
stx_coroutine_pack_DeriveLift.run = function(eff) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("run " + Std.string(eff));
	new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 170, className : "stx.coroutine.pack.DeriveLift", methodName : "run"}));
	var t = new tink_core_FutureTrigger();
	stx_coroutine_pack_DeriveLift.loop(eff,t);
	return t;
};
stx_coroutine_pack_DeriveLift.loop = function(eff,f) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("loop " + Std.string(eff));
	new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 176, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
	var now = eff;
	_hx_loop1: while(true) switch(now._hx_index) {
	case 0:
		var _g = now.o;
		var nxt = now.next;
		now = nxt;
		break;
	case 1:
		var fn = now.tran;
		now = fn(stx_coroutine_core_ControlSum.Push(0));
		break;
	case 2:
		var ft = now.held;
		var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("hold");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 187, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
		stx_stream_CycleLift.submit(stx_stream_Work.toCycle(stx_coroutine_core_Held.environment(ft,function(x) {
			var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("hold:release");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 190, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"}));
			stx_coroutine_pack_DeriveLift.loop(x,f);
		}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
			var val = fn(new tink_core_FutureTrigger());
			var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("terminal AFTER unit()");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
			return val;
		},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))),{ fileName : "stx/coroutine/pack/Derive.hx", lineNumber : 188, className : "stx.coroutine.pack.DeriveLift", methodName : "loop"});
		break _hx_loop1;
	case 3:
		var h = now.r;
		switch(h._hx_index) {
		case 0:
			var cause = h.c;
			f.trigger(stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,cause));
			break;
		case 1:
			var value = h.v;
			f.trigger(stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,value));
			break;
		}
		break _hx_loop1;
	}
};
var stx_coroutine_pack_Derive = {};
stx_coroutine_pack_Derive._new = function(self) {
	return self;
};
stx_coroutine_pack_Derive.lift = function(self) {
	return stx_coroutine_pack_Derive._new(self);
};
stx_coroutine_pack_Derive.fromCoroutine = function(spx) {
	return stx_coroutine_pack_Derive._new(spx);
};
stx_coroutine_pack_Derive.fromThunk = function(thk) {
	return stx_coroutine_pack_Derive.lift(stx_coroutine_core_Held.lazy(function() {
		return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(thk()));
	}));
};
stx_coroutine_pack_Derive.toCoroutine = function(this1) {
	return this1;
};
var stx_coroutine_pack_EffectLift = function() { };
$hxClasses["stx.coroutine.pack.EffectLift"] = stx_coroutine_pack_EffectLift;
stx_coroutine_pack_EffectLift.__name__ = "stx.coroutine.pack.EffectLift";
stx_coroutine_pack_EffectLift.run = function(self) {
	return tink_core_Future.map(stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(self)),function(outcome) {
		var tmp;
		switch(outcome._hx_index) {
		case 0:
			var t = outcome.t;
			tmp = haxe_ds_Option.None;
			break;
		case 1:
			var e = outcome.e;
			tmp = haxe_ds_Option.Some(e);
			break;
		}
		return tmp;
	});
};
stx_coroutine_pack_EffectLift.submit = function(eff) {
	stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(eff)).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			break;
		case 1:
			var e = res.e;
			if(e._hx_index == 1) {
				var e1 = e.err;
				new stx_log_log_term_Level(stx_log_Log.ZERO,6).toLogApi().comply(new stx_log_EntryCtr().pure(e1),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 36, className : "stx.coroutine.pack.EffectLift", methodName : "submit"}));
				throw haxe_Exception.thrown(e1);
			}
			break;
		}
	});
};
stx_coroutine_pack_EffectLift.cause_later = function(e,c) {
	var f = function(e) {
		return stx_coroutine_pack_EffectLift.cause_later(e,c);
	};
	var tmp;
	switch(e._hx_index) {
	case 0:
		var head = e.o;
		var rest = e.next;
		tmp = f(rest);
		break;
	case 1:
		var fn = e.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
		break;
	case 2:
		var pull = e.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(pull,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var _g = e.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseLift.next(cause,c)));
			break;
		case 1:
			if(_g.v == 0) {
				tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(c));
			} else {
				var e = _g;
				tmp = stx_coroutine_core_CoroutineSum.Halt(e);
			}
			break;
		}
		break;
	}
	return stx_coroutine_pack_Effect.lift(tmp);
};
stx_coroutine_pack_EffectLift.toExecute = function(self) {
	return eu_ohmrun_Fletcher.fromApi(new stx_coroutine_pack_EffectExecute(self,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 55, className : "stx.coroutine.pack.EffectLift", methodName : "toExecute"}));
};
stx_coroutine_pack_EffectLift.next = function(self,that) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var self1 = stx_coroutine_pack_Effect.fromCoroutine(next);
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
				return f(self1);
			}));
		case 1:
			var tran = self.tran;
			var fn = function(i) {
				var self = stx_coroutine_pack_Effect.fromCoroutine(tran(stx_coroutine_core_ControlSum.Push(0)));
				return stx_coroutine_core_Coroutine.provide(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
					return f(self);
				})),i);
			};
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
				return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
				},function() {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				});
			}));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.convert(held,eu_ohmrun_fletcher_Convert.Fun(function(self) {
				return f(self);
			})));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var c = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(c));
			case 1:
				var _g1 = _g.v;
				return that;
			}
			break;
		}
	};
	return f(self);
};
var stx_coroutine_pack_Effect = {};
stx_coroutine_pack_Effect.lift = function(self) {
	return stx_coroutine_pack_Effect._new(self);
};
stx_coroutine_pack_Effect._new = function(self) {
	return self;
};
stx_coroutine_pack_Effect.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Effect.fromCoroutine = function(self) {
	return stx_coroutine_pack_Effect.lift(self);
};
stx_coroutine_pack_Effect.prj = function(this1) {
	return this1;
};
var stx_coroutine_pack_EffectExecute = function(effect,pos) {
	eu_ohmrun_FletcherCls.call(this,pos);
	this.effect = effect;
};
$hxClasses["stx.coroutine.pack.EffectExecute"] = stx_coroutine_pack_EffectExecute;
stx_coroutine_pack_EffectExecute.__name__ = "stx.coroutine.pack.EffectExecute";
stx_coroutine_pack_EffectExecute.crunch1 = function(eff) {
	stx_coroutine_pack_Derive._.run(stx_coroutine_pack_Effect.prj(eff)).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			break;
		case 1:
			var e = res.e;
			throw haxe_Exception.thrown(e);
		}
	});
};
stx_coroutine_pack_EffectExecute.crunch = function(eff) {
	var cursor = eff;
	var suspended = false;
	var done = false;
	var handler = function() {
		switch(cursor._hx_index) {
		case 0:
			var _g = cursor.o;
			var tail = cursor.next;
			cursor = stx_coroutine_pack_Effect.fromCoroutine(tail);
			break;
		case 1:
			var fn = cursor.tran;
			cursor = stx_coroutine_pack_Effect.fromCoroutine(fn(stx_coroutine_core_Control.push(0)));
			break;
		case 2:
			var held = cursor.held;
			suspended = true;
			stx_stream_CycleLift.submit(stx_stream_Work.toCycle(stx_coroutine_core_Held.environment(held,function(eff) {
				cursor = stx_coroutine_pack_Effect.fromCoroutine(eff);
				suspended = false;
			}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
				var val = fn(new tink_core_FutureTrigger());
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("terminal AFTER unit()");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
				return val;
			},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"})))),{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 145, className : "stx.coroutine.pack.EffectExecute", methodName : "crunch"});
			break;
		case 3:
			var h = cursor.r;
			if(h._hx_index == 0) {
				var _g = h.c;
				if(_g._hx_index == 1) {
					var error = _g.err;
					throw haxe_Exception.thrown(error);
				}
			}
			done = true;
			break;
		}
	};
	while(!done) if(!suspended) {
		handler();
	}
};
stx_coroutine_pack_EffectExecute.__super__ = eu_ohmrun_FletcherCls;
stx_coroutine_pack_EffectExecute.prototype = $extend(eu_ohmrun_FletcherCls.prototype,{
	effect: null
	,defer: function(_,cont) {
		var _gthis = this;
		return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
			cb(_gthis.handler(_gthis.effect,function(report) {
				var self = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,report);
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				})));
			}));
		}))));
	}
	,handler: function(self,cont) {
		var _g = this;
		var cont1 = cont;
		var f = function(self) {
			return _g.handler(self,cont1);
		};
		switch(self._hx_index) {
		case 0:
			var _g1 = self.o;
			var next = self.next;
			return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
				cb(f(next));
			}))));
		case 1:
			var tran = self.tran;
			return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.irreversible(function(cb) {
				cb(f(tran(stx_coroutine_core_ControlSum.Push(0))));
			}))));
		case 2:
			var held = self.held;
			var provide = eu_ohmrun_FletcherLift.map(held,f,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 100, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"});
			return stx_stream_Work.toCycle(eu_ohmrun_Fletcher._.environment(eu_ohmrun_fletcher_ProvideLift.then(provide,eu_ohmrun_Fletcher.Anon(function(inpt,cont) {
				var self = cont;
				var value = stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,0);
				var this1 = eu_ohmrun_fletcher_core_Settle.prj(eu_ohmrun_fletcher_core_SettleLift.map(eu_ohmrun_fletcher_Terminal.toSettle(cont),function(trg) {
					trg.trigger(value);
					return trg;
				}));
				var this2 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("receive " + Std.string(self));
				new stx_log_log_term_Level(this2,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 96, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
				return stx_stream_WorkLift.seq(inpt,this1.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(oc) {
					var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("receive " + Std.string(self) + " called");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 99, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
					return self.apply(stx_pico_Apply._new(new stx_pico_apply_term_Anon(function(ip) {
						var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("receive inner called");
						new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 102, className : "eu.ohmrun.fletcher.TerminalLift", methodName : "receive"}));
						oc.handle(function(out) {
							ip.trigger(out);
						});
						return null;
					})));
				}))));
			},{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 102, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"})),0,function(o) {
			},function(e) {
				new stx_log_log_term_Level(eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__),6).toLogApi().comply(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Provide.hx", lineNumber : 75, className : "eu.ohmrun.fletcher.ProvideLift", methodName : "environment"}));
				throw haxe_Exception.thrown(e);
			},{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 101, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"}).defer(0,eu_ohmrun_fletcher_core_Cont.lift(new eu_ohmrun_fletcher_core_cont_term_AnonAnon(function(fn) {
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("terminal BEFORE unit()");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 12, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
				var val = fn(new tink_core_FutureTrigger());
				var this1 = eu_ohmrun_fletcher_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("terminal AFTER unit()");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 14, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}));
				return val;
			},{ fileName : "eu/ohmrun/fletcher/Terminal.hx", lineNumber : 11, className : "eu.ohmrun.fletcher._Terminal.Terminal_Impl_", methodName : "unit"}))));
		case 3:
			var _g1 = self.r;
			switch(_g1._hx_index) {
			case 0:
				var _g2 = _g1.c;
				switch(_g2._hx_index) {
				case 0:
					var f1 = null;
					cont(f1 == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f1(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 114, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"}))));
					return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
				case 1:
					var rejection = _g2.err;
					var _ = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 117, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"});
					cont(stx_nano_Report.pure(rejection));
					return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
				}
				break;
			case 1:
				var _g2 = _g1.v;
				var f1 = null;
				cont(f1 == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f1(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Effect.hx", lineNumber : 111, className : "stx.coroutine.pack.EffectExecute", methodName : "handler"}))));
				return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
			}
			break;
		}
	}
	,__class__: stx_coroutine_pack_EffectExecute
});
var stx_coroutine_pack_EmiterLift = function() { };
$hxClasses["stx.coroutine.pack.EmiterLift"] = stx_coroutine_pack_EmiterLift;
stx_coroutine_pack_EmiterLift.__name__ = "stx.coroutine.pack.EmiterLift";
stx_coroutine_pack_EmiterLift.lift = function(self) {
	return stx_coroutine_pack_Emiter.lift(self);
};
stx_coroutine_pack_EmiterLift.reduce = function(source,fn,memo) {
	var f = function(source,memo) {
		return stx_coroutine_pack_EmiterLift.reduce(source,fn,memo);
	};
	var c = function(memo) {
		var memo1 = memo;
		return function(source) {
			return f(source,memo1);
		};
	};
	var tmp;
	switch(source._hx_index) {
	case 0:
		var head = source.o;
		var rest = source.next;
		tmp = stx_coroutine_core_CoroutineLift.mod(rest,function(spx) {
			return stx_coroutine_pack_Derive.toCoroutine(f(stx_coroutine_pack_Emiter.fromCoroutine(spx),fn(head,memo)));
		});
		break;
	case 1:
		var arw = source.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,c(memo)));
		break;
	case 2:
		var ft = source.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(c(memo)))));
		break;
	case 3:
		var _g = source.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			break;
		case 1:
			if(_g.v == 0) {
				tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(memo));
			} else {
				throw haxe_Exception.thrown("Pattern match regression 062020");
			}
			break;
		}
		break;
	}
	return stx_coroutine_pack_Derive.lift(tmp);
};
stx_coroutine_pack_EmiterLift.toArray = function(emt) {
	return stx_coroutine_pack_EmiterLift.reduce(emt,function(next,memo) {
		return memo.concat([next]);
	},[]);
};
stx_coroutine_pack_EmiterLift.append = function(prc0,prc1) {
	var prc11 = prc1;
	var f = function(prc0) {
		return stx_coroutine_pack_EmiterLift.append(prc0,prc11);
	};
	switch(prc0._hx_index) {
	case 0:
		var head = prc0.o;
		var rest = prc0.next;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
	case 1:
		var arw = prc0.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
	case 2:
		var ft = prc0.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = prc0.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
		case 1:
			if(_g.v == 0) {
				return prc1();
			} else {
				throw haxe_Exception.thrown("Pattern match regression 30/06/2020");
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.flat_map = function(prc,fn) {
	var fn1 = fn;
	var f = function(prc) {
		return stx_coroutine_pack_EmiterLift.flat_map(prc,fn1);
	};
	switch(prc._hx_index) {
	case 0:
		var head = prc.o;
		var rest = prc.next;
		var tmp = fn(head);
		var _g = f;
		var prc1 = stx_coroutine_pack_Emiter.fromCoroutine(rest);
		return stx_coroutine_pack_EmiterLift.append(tmp,function() {
			return _g(prc1);
		});
	case 1:
		var arw = prc.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
	case 2:
		var ft = prc.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var e = prc.r;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(e));
	}
};
stx_coroutine_pack_EmiterLift.search = function(self,prd) {
	var f = function(self) {
		return stx_coroutine_pack_EmiterLift.search(self,prd);
	};
	switch(self._hx_index) {
	case 0:
		var _g = self.o;
		var _g1 = self.next;
		var head = _g;
		var rest = _g1;
		if(prd(head)) {
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.Some(head))));
		} else {
			var head = _g;
			var rest = _g1;
			var prd1 = prd;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineLift.mod(rest,function(self) {
				return stx_coroutine_pack_EmiterLift.search(self,prd1);
			}));
		}
		break;
	case 1:
		var fn = self.tran;
		return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
	case 2:
		var ft = self.held;
		return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
		case 1:
			var v = _g.v;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.None)));
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.first = function(self) {
	return stx_coroutine_pack_EmiterLift.search(self,function(v) {
		return true;
	});
};
stx_coroutine_pack_EmiterLift.last = function(self) {
	var recurse = null;
	recurse = function(self,lst) {
		var lst1 = lst;
		var f = function(self) {
			return recurse(self,lst1);
		};
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			var lst2 = haxe_ds_Option.Some(head);
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineLift.mod(rest,function(self) {
				return recurse(self,lst2);
			}));
		case 1:
			var fn = self.tran;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				if(_g.v == 0) {
					var v = lst;
					return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v)));
				} else {
					var v = lst;
					return stx_coroutine_pack_Derive.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(v)));
				}
				break;
			}
			break;
		}
	};
	return recurse(self,haxe_ds_Option.None);
};
stx_coroutine_pack_EmiterLift.at = function(self,index) {
	var recurse = null;
	recurse = function(self,count) {
		if(count == null) {
			count = 0;
		}
		var f = function(int) {
			var count = int;
			return function(self) {
				return recurse(self,count);
			};
		};
		var c = f(count);
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g1 = self.next;
			var head = _g;
			var tail = _g1;
			if(index == count) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.Some(head)));
			} else {
				var head = _g;
				var tail = _g1;
				return stx_coroutine_core_CoroutineLift.mod(tail,f(count + 1));
			}
			break;
		case 1:
			var fn = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,c));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(c))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var _g1 = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(haxe_ds_Option.None));
			}
			break;
		}
	};
	return recurse(self);
};
stx_coroutine_pack_EmiterLift.count = function(self) {
	return stx_coroutine_pack_EmiterLift.reduce(self,function(next,memo) {
		return memo++;
	},0);
};
stx_coroutine_pack_EmiterLift.until = function(self,prd) {
	var recurse = null;
	recurse = function(self,cont) {
		var cont1 = cont;
		var f = function(self) {
			return recurse(self,cont1);
		};
		if(cont) {
			switch(self._hx_index) {
			case 0:
				var head = self.o;
				var tail = self.next;
				return stx_coroutine_core_CoroutineLift.mod(tail,function(self) {
					return recurse(self,!prd(head));
				});
			case 1:
				var fn = self.tran;
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
			case 2:
				var ft = self.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
			case 3:
				var v = self.r;
				return stx_coroutine_core_CoroutineSum.Halt(v);
			}
		} else {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0));
		}
	};
	return recurse(self,true);
};
stx_coroutine_pack_EmiterLift.take = function(self,max) {
	var recurse = null;
	recurse = function(self,n) {
		var f = function(n) {
			var n1 = n;
			return function(self) {
				return recurse(self,n1);
			};
		};
		if(n >= max) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0));
		} else {
			switch(self._hx_index) {
			case 0:
				var head = self.o;
				var tail = self.next;
				return stx_coroutine_core_CoroutineSum.Emit(head,(f(n++))(tail));
			case 1:
				var fn = self.tran;
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f(n)));
			case 2:
				var ft = self.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f(n)))));
			case 3:
				var out = self.r;
				return stx_coroutine_core_CoroutineSum.Halt(out);
			}
		}
	};
	return recurse(self,1);
};
stx_coroutine_pack_EmiterLift.cons = function(self,v) {
	return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(v,self));
};
stx_coroutine_pack_EmiterLift.snoc = function(self,o) {
	var o1 = o;
	var f = function(self) {
		return stx_coroutine_pack_EmiterLift.snoc(self,o1);
	};
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var rest = self.next;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
	case 1:
		var fn = self.tran;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f)));
	case 2:
		var ft = self.held;
		return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
	case 3:
		var _g = self.r;
		switch(_g._hx_index) {
		case 0:
			var cause = _g.c;
			return self;
		case 1:
			if(_g.v == 0) {
				return stx_coroutine_pack_EmiterLift.cons(self,o);
			} else {
				return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_EmiterLift.span = function(last,start) {
	if(start == null) {
		start = 0;
	}
	var val = start;
	var recurse = null;
	recurse = function(_) {
		if(val == last) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0));
		} else {
			val += 1;
			return stx_coroutine_core_CoroutineSum.Emit(val - 1,stx_coroutine_core_CoroutineSum.Wait(recurse));
		}
	};
	return stx_coroutine_core_CoroutineSum.Wait(recurse);
};
stx_coroutine_pack_EmiterLift.filter = function(self,prd) {
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_pack_Source._.filter(stx_coroutine_pack_Source.lift(self),prd));
};
stx_coroutine_pack_EmiterLift.secure = function(self,next) {
	var recurse = null;
	recurse = function(self,next) {
		var next1 = next;
		var fl = function(self) {
			return recurse(self,next1);
		};
		var recurse1;
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var _g1 = self.next;
			switch(next._hx_index) {
			case 0:
				var head = next.o;
				var tail = next.next;
				recurse1 = recurse(self,tail);
				break;
			case 1:
				var fn = next.tran;
				var tail = _g1;
				var head = _g;
				recurse1 = recurse(tail,fn(stx_coroutine_core_ControlSum.Push(head)));
				break;
			case 2:
				var ft = next.held;
				var self1 = self;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(next) {
					return recurse(self1,next);
				}))));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			}
			break;
		case 1:
			var _g = self.tran;
			switch(next._hx_index) {
			case 0:
				var _g1 = next.o;
				var _g1 = next.next;
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
				break;
			case 2:
				var _g1 = next.held;
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			default:
				var fn = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,fl));
			}
			break;
		case 2:
			var _g = self.held;
			switch(next._hx_index) {
			case 0:
				var _g1 = next.o;
				var _g1 = next.next;
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
				break;
			case 2:
				var _g1 = next.held;
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
				break;
			case 3:
				var out = next.r;
				recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
				break;
			default:
				var ft = _g;
				recurse1 = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(fl))));
			}
			break;
		case 3:
			var out = self.r;
			recurse1 = stx_coroutine_core_CoroutineSum.Halt(out);
			break;
		}
		return stx_coroutine_pack_Effect.toCoroutine(stx_coroutine_pack_Effect.lift(recurse1));
	};
	return stx_coroutine_pack_Effect.fromCoroutine(recurse(stx_coroutine_pack_Emiter.toCoroutine(self),stx_coroutine_pack_Secure.toCoroutine(next)));
};
stx_coroutine_pack_EmiterLift.sample = function(self,fn,init) {
	var data = init;
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			var step = fn(o,data);
			switch(step._hx_index) {
			case 0:
				var v = step.v;
				data = v;
				return rec(next);
			case 1:
				return rec(next);
			case 2:
				var _g = step.err;
				if(_g == null) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
				} else {
					var err = _g;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(err)));
				}
				break;
			}
			break;
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,rec));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				if(_g1._hx_index == 0) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
				} else {
					var r = _g1;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(r));
				}
				break;
			case 1:
				var r = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(data));
			}
			break;
		}
	};
	return stx_coroutine_pack_Source.fromCoroutine(rec(self));
};
stx_coroutine_pack_EmiterLift.derive = function(self,pure,plus,zero) {
	var value = zero;
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			value = plus(pure(o),zero);
			var self1 = next;
			return stx_coroutine_core_CoroutineSum.Emit(0,stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Pause(function() {
				return f(self1);
			})));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var _g1 = _g.v;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(value));
			}
			break;
		}
	};
	return stx_coroutine_pack_Derive.fromCoroutine(f(self));
};
var stx_coroutine_pack_Emiter = {};
stx_coroutine_pack_Emiter._new = function(self) {
	return self;
};
stx_coroutine_pack_Emiter.lift = function(self) {
	return stx_coroutine_pack_Emiter._new(self);
};
stx_coroutine_pack_Emiter.pure = function(self) {
	return stx_coroutine_pack_Emiter.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(self,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0))));
};
stx_coroutine_pack_Emiter.unit = function() {
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,function(_) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		},function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Emiter.fromOption = function(opt) {
	var tmp;
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		tmp = stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),v);
		break;
	case 1:
		tmp = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		break;
	}
	return stx_coroutine_pack_Emiter.lift(tmp);
};
stx_coroutine_pack_Emiter.fromThunk = function(thk) {
	var recurse = null;
	recurse = function() {
		return stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_Held.lazy(recurse),thk());
	};
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_Held.lazy(recurse));
};
stx_coroutine_pack_Emiter.fromIterator = function(iter) {
	var recurse = null;
	recurse = function() {
		if(iter.hasNext()) {
			return stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_Held.lazy(recurse),iter.next());
		} else {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		}
	};
	return stx_coroutine_pack_Emiter.lift(stx_coroutine_core_Held.lazy(recurse));
};
stx_coroutine_pack_Emiter.fromSignal = function(self) {
	return stx_coroutine_pack_Emiter.fromTinkSignal(stx_nano_Signal.prj(self));
};
stx_coroutine_pack_Emiter.fromTinkSignal = function(self) {
	var buffer = [];
	var wake = function() {
		return;
	};
	self.listen(function(x) {
		buffer.push(x);
		wake();
	});
	var rec = null;
	rec = function(cb) {
		var f = stx_coroutine_core_CoroutineSum.Emit(buffer.shift(),stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(new tink_core__$Future_SuspendableFuture(rec),{ fileName : "stx/coroutine/pack/Emiter.hx", lineNumber : 66, className : "stx.coroutine.pack._Emiter.Emiter_Impl_", methodName : "fromTinkSignal"})));
		if(buffer.length == 0) {
			wake = function() {
				wake = function() {
				};
				cb(f);
			};
		} else {
			cb(f);
		}
		return new tink_core_SimpleLink(function() {
		});
	};
	return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(new tink_core__$Future_SuspendableFuture(rec),{ fileName : "stx/coroutine/pack/Emiter.hx", lineNumber : 63, className : "stx.coroutine.pack._Emiter.Emiter_Impl_", methodName : "fromTinkSignal"}));
};
stx_coroutine_pack_Emiter.fromCoroutine = function(self) {
	return stx_coroutine_pack_Emiter.lift(self);
};
stx_coroutine_pack_Emiter.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Emiter.ints = function() {
	var val = 0;
	var go = function() {
		var o = val;
		val += 1;
		return o;
	};
	return stx_coroutine_pack_Emiter.fromThunk(go);
};
stx_coroutine_pack_Emiter.timestamp = function() {
	return stx_coroutine_pack_Emiter.fromThunk(haxe_Timer.stamp);
};
stx_coroutine_pack_Emiter.one = function() {
	return stx_coroutine_pack_Emiter.fromThunk(function() {
		return 1;
	});
};
var stx_coroutine_pack_RelateLift = function() { };
$hxClasses["stx.coroutine.pack.RelateLift"] = stx_coroutine_pack_RelateLift;
stx_coroutine_pack_RelateLift.__name__ = "stx.coroutine.pack.RelateLift";
stx_coroutine_pack_RelateLift.toTunnel = function(self) {
	var rec = null;
	rec = function(self) {
		switch(self._hx_index) {
		case 0:
			var _g = self.o;
			var next = self.next;
			return rec(next);
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,rec));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(rec))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			case 1:
				var out = _g.v;
				return stx_coroutine_core_CoroutineSum.Emit(out,stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Tunnel.fromCoroutine(rec(self));
};
stx_coroutine_pack_RelateLift.derive = function(self) {
	var rec = null;
	rec = function(self) {
		var f = rec;
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var r = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(r);
		}
	};
	return stx_coroutine_pack_Derive.lift(rec(self));
};
var stx_coroutine_pack_Relate = {};
stx_coroutine_pack_Relate.lift = function(self) {
	return self;
};
stx_coroutine_pack_Relate._new = function(self) {
	return self;
};
stx_coroutine_pack_Relate.unit = function() {
	var recurse = null;
	recurse = function(v) {
		var fn = recurse;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	};
	var fn = recurse;
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Relate.pure = function(r) {
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(r)));
};
stx_coroutine_pack_Relate.fromFun1R = function(fn) {
	var fn1 = function(x) {
		return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(fn(x)));
	};
	return stx_coroutine_pack_Relate.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
var stx_coroutine_pack_SecureLift = function() { };
$hxClasses["stx.coroutine.pack.SecureLift"] = stx_coroutine_pack_SecureLift;
stx_coroutine_pack_SecureLift.__name__ = "stx.coroutine.pack.SecureLift";
stx_coroutine_pack_SecureLift.close = function(self) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
		case 1:
			var tran = self.tran;
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var r = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(r);
		}
	};
	return stx_coroutine_pack_Effect.lift(f(self));
};
var stx_coroutine_pack_Secure = {};
stx_coroutine_pack_Secure.lift = function(self) {
	return stx_coroutine_pack_Secure._new(self);
};
stx_coroutine_pack_Secure._new = function(self) {
	return self;
};
stx_coroutine_pack_Secure.handler = function(fn) {
	var rec = null;
	rec = function(o) {
		fn(o);
		var fn1 = rec;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		}));
	};
	var fn1 = rec;
	return stx_coroutine_pack_Secure.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Secure.nowhere = function() {
	return stx_coroutine_pack_Secure.handler(function(x) {
	});
};
stx_coroutine_pack_Secure.provide = function(this1,v) {
	return stx_coroutine_pack_Secure.lift(stx_coroutine_core_Coroutine._.provide(this1,v));
};
stx_coroutine_pack_Secure.fromHandler = function(fn) {
	return stx_coroutine_pack_Secure.handler(fn);
};
stx_coroutine_pack_Secure.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Secure.fromCoroutine = function(self) {
	return stx_coroutine_pack_Secure.lift(self);
};
var stx_coroutine_pack_SourceLift = function() { };
$hxClasses["stx.coroutine.pack.SourceLift"] = stx_coroutine_pack_SourceLift;
stx_coroutine_pack_SourceLift.__name__ = "stx.coroutine.pack.SourceLift";
stx_coroutine_pack_SourceLift.lift = function(self) {
	return stx_coroutine_pack_Source.lift(self);
};
stx_coroutine_pack_SourceLift.toEmiter = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		var f = recurse;
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
		case 1:
			var arw = self.tran;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				var ret = _g.v;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),cb(ret)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Emiter.lift(recurse(self));
};
stx_coroutine_pack_SourceLift.emiter = function(self,cb) {
	var recurse = null;
	recurse = function(self) {
		var f = recurse;
		switch(self._hx_index) {
		case 0:
			var head = self.o;
			var rest = self.next;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineLift.mod(rest,f)));
		case 1:
			var arw = self.tran;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f)));
		case 2:
			var ft = self.held;
			return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f)))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var cause = _g.c;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause)));
			case 1:
				var ret = _g.v;
				return stx_coroutine_pack_Source.fromCoroutine(stx_coroutine_core_CoroutineLift.cons(stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop)),cb(ret)));
			}
			break;
		}
	};
	return stx_coroutine_pack_Emiter.lift(recurse(self));
};
stx_coroutine_pack_SourceLift.filter = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_pack_SourceLift.filter(self,fn1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		tmp = fn(head) ? stx_coroutine_core_CoroutineSum.Emit(head,f(tail)) : stx_coroutine_core_CoroutineLift.mod(tail,f);
		break;
	case 1:
		var fn = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var t = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(t);
		break;
	}
	return stx_coroutine_pack_SourceLift.lift(tmp);
};
stx_coroutine_pack_SourceLift.map_filter = function(self,fn) {
	var fn1 = fn;
	var f = function(self) {
		return stx_coroutine_pack_SourceLift.map_filter(self,fn1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		var _g = fn(head);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			tmp = stx_coroutine_core_CoroutineSum.Emit(v,f(tail));
			break;
		case 1:
			tmp = f(tail);
			break;
		}
		break;
	case 1:
		var arw = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var t = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(t);
		break;
	}
	return stx_coroutine_pack_SourceLift.lift(tmp);
};
stx_coroutine_pack_SourceLift.derive = function(self) {
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var _m = self.o;
			var tail = self.next;
			return f(tail);
		case 1:
			var arw = self.tran;
			return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,f));
		case 2:
			var ft = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var h = self.r;
			return stx_coroutine_core_CoroutineSum.Halt(h);
		}
	};
	return stx_coroutine_pack_Derive.lift(f(self));
};
var stx_coroutine_pack_Source = {};
stx_coroutine_pack_Source.lift = function(self) {
	return stx_coroutine_pack_Source._new(self);
};
stx_coroutine_pack_Source._new = function(self) {
	return self;
};
stx_coroutine_pack_Source.fromCoroutine = function(self) {
	return stx_coroutine_pack_Source.lift(self);
};
stx_coroutine_pack_Source.toCoroutine = function(this1) {
	return this1;
};
var stx_coroutine_pack_TunnelLift = function() { };
$hxClasses["stx.coroutine.pack.TunnelLift"] = stx_coroutine_pack_TunnelLift;
stx_coroutine_pack_TunnelLift.__name__ = "stx.coroutine.pack.TunnelLift";
stx_coroutine_pack_TunnelLift.lift = function(self) {
	return stx_coroutine_pack_Tunnel.lift(self);
};
stx_coroutine_pack_TunnelLift.append = function(prc0,prc1) {
	switch(prc0._hx_index) {
	case 0:
		var head = prc0.o;
		var tail = prc0.next;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_pack_Tunnel.toCoroutine(stx_coroutine_pack_TunnelLift.append(stx_coroutine_pack_Tunnel.fromCoroutine(tail),prc1)));
	case 1:
		var arw = prc0.tran;
		var prc11 = prc1;
		return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(arw,function(prc0) {
			return stx_coroutine_pack_TunnelLift.append(prc0,prc11);
		}));
	case 2:
		var ft = prc0.held;
		var prc12 = prc1;
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(prc0) {
			return stx_coroutine_pack_TunnelLift.append(prc0,prc12);
		}))));
	case 3:
		var _g = prc0.r;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			if(_g1._hx_index == 0) {
				return prc1();
			} else {
				var cause = _g1;
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(cause));
			}
			break;
		case 1:
			if(_g.v == 0) {
				return prc1();
			} else {
				var e = _g;
				return stx_coroutine_core_CoroutineSum.Halt(e);
			}
			break;
		}
		break;
	}
};
stx_coroutine_pack_TunnelLift.flat_map = function(prc,fn) {
	var tmp;
	switch(prc._hx_index) {
	case 0:
		var head = prc.o;
		var tail = prc.next;
		var tmp1 = fn(head);
		var prc1 = stx_coroutine_pack_Tunnel.fromCoroutine(tail);
		var fn1 = fn;
		tmp = stx_coroutine_pack_TunnelLift.append(tmp1,function() {
			return stx_coroutine_pack_TunnelLift.flat_map(prc1,fn1);
		});
		break;
	case 1:
		var arw = prc.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(function(i) {
			var next = arw(i);
			return stx_coroutine_pack_Tunnel.toCoroutine(stx_coroutine_pack_TunnelLift.flat_map(stx_coroutine_pack_Tunnel.fromCoroutine(next),fn));
		});
		break;
	case 2:
		var ft = prc.held;
		var fn2 = fn;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(ft,eu_ohmrun_fletcher_Convert.Fun(function(prc) {
			return stx_coroutine_pack_TunnelLift.flat_map(prc,fn2);
		}))));
		break;
	case 3:
		var e = prc.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(e);
		break;
	}
	return stx_coroutine_pack_TunnelLift.lift(tmp);
};
stx_coroutine_pack_TunnelLift.emiter = function(self,that) {
	var this1 = stx_coroutine_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("emiter: " + Std.string(self));
	new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 100, className : "stx.coroutine.pack.TunnelLift", methodName : "emiter"}));
	var that1 = that;
	var f = function(self) {
		return stx_coroutine_pack_TunnelLift.emiter(self,that1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var head = self.o;
		var tail = self.next;
		tmp = stx_coroutine_core_CoroutineSum.Emit(head,f(stx_coroutine_pack_Tunnel.fromCoroutine(tail)));
		break;
	case 1:
		var fn = self.tran;
		switch(that._hx_index) {
		case 0:
			var head = that.o;
			var tail = that.next;
			tmp = stx_coroutine_pack_TunnelLift.emiter(stx_coroutine_pack_Tunnel.fromCoroutine(fn(stx_coroutine_core_Control.push(head))),stx_coroutine_pack_Emiter.fromCoroutine(tail));
			break;
		case 1:
			var arw = that.tran;
			tmp = stx_coroutine_pack_TunnelLift.emiter(self,stx_coroutine_pack_Emiter.fromCoroutine(arw(stx_coroutine_core_ControlSum.Push(0))));
			break;
		case 2:
			var ft = that.held;
			tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(pipe) {
				return stx_coroutine_core_Coroutine.lift(stx_coroutine_pack_TunnelLift.emiter(self,stx_coroutine_pack_Emiter.fromCoroutine(pipe)));
			},{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 113, className : "stx.coroutine.pack.TunnelLift", methodName : "emiter"})));
			break;
		case 3:
			var done = that.r;
			tmp = stx_coroutine_core_CoroutineSum.Halt(done);
			break;
		}
		break;
	case 2:
		var ft = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(ft,function(pipe) {
			return stx_coroutine_core_Coroutine.lift(stx_coroutine_pack_TunnelLift.emiter(stx_coroutine_pack_Tunnel.fromCoroutine(pipe),that));
		},{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 105, className : "stx.coroutine.pack.TunnelLift", methodName : "emiter"})));
		break;
	case 3:
		var e = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(e);
		break;
	}
	return stx_coroutine_pack_Emiter.lift(tmp);
};
stx_coroutine_pack_TunnelLift.demand = function(self,req,fn) {
	var source = stx_nano_Pledge.trigger();
	var sent = false;
	var done = false;
	var f = null;
	f = function(self) {
		switch(self._hx_index) {
		case 0:
			var o = self.o;
			var next = self.next;
			if(sent) {
				if(!done) {
					return stx_LiftIf.if_else(fn(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,o)),function() {
						done = true;
						return next;
					},function() {
						return f(next);
					});
				} else {
					return next;
				}
			} else {
				return stx_coroutine_core_CoroutineSum.Emit(o,f(next));
			}
			break;
		case 1:
			var tran = self.tran;
			if(!sent) {
				sent = true;
				return f(tran(stx_coroutine_core_Control.push(req)));
			} else {
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(tran,f));
			}
			break;
		case 2:
			var held = self.held;
			return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		case 3:
			var _g = self.r;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.c;
				switch(_g1._hx_index) {
				case 0:
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				case 1:
					var e = _g1.err;
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Exit(e)));
				}
				break;
			case 1:
				var _g1 = _g.v;
				if(!done) {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 154, className : "stx.coroutine.pack.TunnelLift", methodName : "demand"});
					var err = stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_nano_Digests.e_undefined(_);
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
					fn(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 155, className : "stx.coroutine.pack.TunnelLift", methodName : "demand"}));
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(err)));
				} else {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0));
				}
				break;
			}
			break;
		}
	};
	return stx_coroutine_pack_Tunnel.lift(f(self));
};
stx_coroutine_pack_TunnelLift.mod = function(self,fn) {
	var fn1 = stx_fn_UnaryLift.then(fn,function(x) {
		return stx_coroutine_pack_Tunnel.prj(x);
	});
	var f = function(self) {
		return stx_coroutine_pack_TunnelLift.mod(self,fn1);
	};
	var tmp;
	switch(self._hx_index) {
	case 0:
		var data = self.o;
		var next = self.next;
		tmp = stx_coroutine_core_CoroutineSum.Emit(data,f(next));
		break;
	case 1:
		var fn = self.tran;
		tmp = stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_TransmissionLift.mod(fn,f));
		break;
	case 2:
		var held = self.held;
		tmp = stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held._new(eu_ohmrun_fletcher_Provide._.convert(held,eu_ohmrun_fletcher_Convert.Fun(f))));
		break;
	case 3:
		var h = self.r;
		tmp = stx_coroutine_core_CoroutineSum.Halt(h);
		break;
	}
	return stx_coroutine_pack_TunnelLift.lift(tmp);
};
var stx_coroutine_pack_Tunnel = {};
stx_coroutine_pack_Tunnel._new = function(self) {
	return self;
};
stx_coroutine_pack_Tunnel.lift = function(self) {
	return stx_coroutine_pack_Tunnel._new(self);
};
stx_coroutine_pack_Tunnel.fromFun2CallbackVoid = function(arw) {
	var rec = null;
	rec = function(i) {
		var future = new tink_core_FutureTrigger();
		arw(i,function(o) {
			var fn = rec;
			future.trigger(stx_coroutine_core_CoroutineSum.Emit(o,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
				return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
				},function() {
					return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
				});
			}))));
		});
		return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.Guard(future,{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 22, className : "stx.coroutine.pack._Tunnel.Tunnel_Impl_", methodName : "fromFun2CallbackVoid"}));
	};
	var fn = rec;
	return stx_coroutine_pack_Tunnel.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.fromEmiterConstrucor = function(cons) {
	var fn = function(i) {
		var recurse = null;
		recurse = function(emiter) {
			switch(emiter._hx_index) {
			case 0:
				var head = emiter.o;
				var tail = emiter.next;
				return stx_coroutine_core_CoroutineSum.Emit(head,recurse(stx_coroutine_pack_Emiter.fromCoroutine(tail)));
			case 1:
				var fn = emiter.tran;
				var fn = stx_fn_UnaryLift.then(cons,recurse);
				return stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
					return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
					},function() {
						return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
					});
				}));
			case 2:
				var h = emiter.held;
				return stx_coroutine_core_CoroutineSum.Hold(stx_coroutine_core_Held.lift(eu_ohmrun_FletcherLift.map(h,function(pipe) {
					return stx_coroutine_core_Coroutine.lift(recurse(stx_coroutine_pack_Emiter.fromCoroutine(pipe)));
				},{ fileName : "stx/coroutine/pack/Tunnel.hx", lineNumber : 40, className : "stx.coroutine.pack._Tunnel.Tunnel_Impl_", methodName : "fromEmiterConstrucor"})));
			case 3:
				var r = emiter.r;
				return stx_coroutine_core_CoroutineSum.Halt(r);
			}
		};
		return recurse(cons(i));
	};
	return stx_coroutine_pack_Tunnel.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.fromFunction = function(fn) {
	var rec = null;
	rec = function(i) {
		var head = fn(i);
		var fn1 = rec;
		return stx_coroutine_core_CoroutineSum.Emit(head,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		})));
	};
	var fn1 = rec;
	return stx_coroutine_pack_Tunnel.fromCoroutine(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn1,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
};
stx_coroutine_pack_Tunnel.toCoroutine = function(this1) {
	return this1;
};
stx_coroutine_pack_Tunnel.toCoroutineStop = function(this1) {
	return stx_coroutine_core_CoroutineLift.flat_map_r(this1,function(r) {
		return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
	});
};
stx_coroutine_pack_Tunnel.fromCoroutine = function(self) {
	return stx_coroutine_pack_Tunnel.lift(self);
};
stx_coroutine_pack_Tunnel.prj = function(this1) {
	return this1;
};
var stx_ds_BinaryTreeSum = $hxEnums["stx.ds.BinaryTreeSum"] = { __ename__:"stx.ds.BinaryTreeSum",__constructs__:null
	,Empty: {_hx_name:"Empty",_hx_index:0,__enum__:"stx.ds.BinaryTreeSum",toString:$estr}
	,Split: ($_=function(v,l,r) { return {_hx_index:1,v:v,l:l,r:r,__enum__:"stx.ds.BinaryTreeSum",toString:$estr}; },$_._hx_name="Split",$_.__params__ = ["v","l","r"],$_)
};
stx_ds_BinaryTreeSum.__constructs__ = [stx_ds_BinaryTreeSum.Empty,stx_ds_BinaryTreeSum.Split];
var stx_ds_BinaryTree = {};
stx_ds_BinaryTree._new = function(self) {
	return self;
};
stx_ds_BinaryTree.value = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var _g = this1.l;
		var _g = this1.r;
		var v = this1.v;
		return v;
	}
};
stx_ds_BinaryTree.head = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_BinaryTreeSum.Empty;
	case 1:
		var _g = this1.v;
		var _g1 = this1.r;
		if(_g == null) {
			var l = this1.l;
			return l;
		} else {
			var v = _g;
			return stx_ds_BinaryTreeSum.Split(v,stx_ds_BinaryTreeSum.Empty,stx_ds_BinaryTreeSum.Empty);
		}
		break;
	}
};
stx_ds_BinaryTree.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_BinaryTreeSum.Empty;
	case 1:
		var _g = this1.v;
		var _g = this1.l;
		var r = this1.r;
		return r;
	}
};
stx_ds_BinaryTree.df = function(this1,fn,z) {
	return stx_ds_BinaryTrees.df(this1,fn,z);
};
stx_ds_BinaryTree.isEnd = function(this1) {
	if(this1._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
var stx_ds_BinaryTrees = function() { };
$hxClasses["stx.ds.BinaryTrees"] = stx_ds_BinaryTrees;
stx_ds_BinaryTrees.__name__ = "stx.ds.BinaryTrees";
stx_ds_BinaryTrees.df = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var v = btree.v;
		var l = btree.l;
		var r = btree.r;
		var a = fn(v,z);
		var b = stx_ds_BinaryTrees.df(l,fn,a);
		var c = stx_ds_BinaryTrees.df(r,fn,b);
		return c;
	}
};
stx_ds_BinaryTrees.hdf = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var v = btree.v;
		var l = btree.l;
		var r = btree.r;
		var o = fn(v,z);
		switch(o._hx_index) {
		case 0:
			var o1 = o.v;
			var b = stx_ds_BinaryTrees.hdf(l,fn,o1);
			var c = stx_ds_BinaryTrees.hdf(r,fn,b);
			return c;
		case 1:
			var o1 = o.v;
			return o1;
		}
		break;
	}
};
var stx_ds_KaryTreeSum = $hxEnums["stx.ds.KaryTreeSum"] = { __ename__:"stx.ds.KaryTreeSum",__constructs__:null
	,Nought: {_hx_name:"Nought",_hx_index:0,__enum__:"stx.ds.KaryTreeSum",toString:$estr}
	,Branch: ($_=function(x,xs) { return {_hx_index:1,x:x,xs:xs,__enum__:"stx.ds.KaryTreeSum",toString:$estr}; },$_._hx_name="Branch",$_.__params__ = ["x","xs"],$_)
};
stx_ds_KaryTreeSum.__constructs__ = [stx_ds_KaryTreeSum.Nought,stx_ds_KaryTreeSum.Branch];
var stx_ds_KaryTreeLift = function() { };
$hxClasses["stx.ds.KaryTreeLift"] = stx_ds_KaryTreeLift;
stx_ds_KaryTreeLift.__name__ = "stx.ds.KaryTreeLift";
stx_ds_KaryTreeLift.search_child = function(self,fn) {
	if(self._hx_index == 1) {
		var x = self.x;
		var xs = self.xs;
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,xs);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = stx_ds_LinkedList.unit();
		}
		return stx_ds_LinkedList.search(tmp,function(tree) {
			var self = stx_pico_OptionLift.map(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tree),function(_) {
				return stx_ds_KaryTree.value(_);
			}),fn);
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
		});
	} else {
		return haxe_ds_Option.None;
	}
};
stx_ds_KaryTreeLift.toString = function(self) {
	var rec = null;
	rec = function(v,int) {
		if(v == null) {
			return "";
		} else {
			switch(v._hx_index) {
			case 0:
				return "";
			case 1:
				var v1 = v.x;
				var rst = v.xs;
				var arr = stx_nano_ReportLift.is_defined(new stx_assert_Module({ fileName : "stx/ds/KaryTree.hx", lineNumber : 94, className : "stx.ds.KaryTreeLift", methodName : "toString"}).exists().apply(rst)) ? stx_ds_LinkedListSum.Nil : rst;
				var out = stx_ds_LinkedList.map(arr,function(next) {
					return rec(next,"" + int + " ");
				});
				var val = stx_ds_LinkedList.fold(out,function(next,memo) {
					return "" + memo + "\n" + int + next;
				},"");
				return "" + Std.string(v1) + ":\n" + val;
			}
		}
	};
	var out = rec(self,"  ");
	return "\n" + out;
};
stx_ds_KaryTreeLift.next = function(t,concat) {
	if(t._hx_index == 1) {
		var _g = t.head;
		if(_g._hx_index == 1) {
			var x = _g.x;
			var xs = _g.xs;
			var rst = t.tail;
			if(xs == null) {
				xs = stx_ds_LinkedListSum.Nil;
			}
			var t = concat(xs,rst);
			var concat1 = concat;
			return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(function() {
				return stx_ds_KaryTreeLift.next(t,concat1);
			}),haxe_ds_Option.Some(x));
		} else {
			return stx_fp_LazyStream.unit();
		}
	} else {
		return stx_fp_LazyStream.unit();
	}
};
stx_ds_KaryTreeLift.df_concat = function(l,r) {
	return stx_ds_LinkedList.concat(l,r);
};
stx_ds_KaryTreeLift.bf_concat = function(l,r) {
	return stx_ds_LinkedList.concat(r,l);
};
stx_ds_KaryTreeLift.genDF = function(node) {
	var vals = stx_ds_LinkedListSum.Cons(node,stx_ds_LinkedListSum.Nil);
	var t = vals;
	var concat = stx_ds_KaryTreeLift.df_concat;
	return function() {
		return stx_ds_KaryTreeLift.next(t,concat);
	};
};
stx_ds_KaryTreeLift.iterDF = function(node) {
	return stx_ds_KaryTreeLift.iter(stx_fp_LazyStreamTrigger.fromFn(stx_ds_KaryTreeLift.genDF(node)));
};
stx_ds_KaryTreeLift.genBF = function(node) {
	var vals = stx_ds_LinkedListSum.Cons(node,stx_ds_LinkedListSum.Nil);
	var t = vals;
	var concat = stx_ds_KaryTreeLift.bf_concat;
	return function() {
		return stx_ds_KaryTreeLift.next(t,concat);
	};
};
stx_ds_KaryTreeLift.iterBF = function(node) {
	return stx_ds_KaryTreeLift.iter(stx_fp_LazyStreamTrigger.fromFn(stx_ds_KaryTreeLift.genBF(node)));
};
stx_ds_KaryTreeLift.iter = function(generator) {
	return { iterator : function() {
		var cursor = stx_fp_LazyStream.reply(generator.next());
		return { next : function() {
			var out;
			var _g = stx_nano_CoupleLift.fst(cursor);
			if(_g._hx_index == 0) {
				var v = _g.v;
				out = v;
			} else {
				out = null;
			}
			cursor = stx_fp_LazyStream.reply(stx_nano_CoupleLift.snd(cursor).next());
			return out;
		}, hasNext : function() {
			var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(cursor)),function(ok) {
				return stx_pico_OptionLift.is_defined(ok);
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
		}};
	}};
};
var stx_ds_KaryTree = {};
stx_ds_KaryTree.unit = function() {
	return stx_ds_KaryTreeSum.Nought;
};
stx_ds_KaryTree.pure = function(v) {
	return stx_ds_KaryTreeSum.Branch(v,stx_ds_LinkedListSum.Nil);
};
stx_ds_KaryTree._new = function(self) {
	return stx_nano_ReportLift.is_defined(new stx_assert_Module({ fileName : "stx/ds/KaryTree.hx", lineNumber : 22, className : "stx.ds._KaryTree.KaryTree_Impl_", methodName : "_new"}).exists().apply(self)) ? stx_ds_KaryTreeSum.Nought : self;
};
stx_ds_KaryTree.df = function(this1) {
	return stx_ds_KaryTreeLift.iterDF(this1);
};
stx_ds_KaryTree.bf = function(this1) {
	return stx_ds_KaryTreeLift.iterBF(this1);
};
stx_ds_KaryTree.zipper = function(this1) {
	return stx_ds_kary_$tree_KaryTreeZip._new(stx_ds_LinkedListSum.Cons(this1,stx_ds_LinkedListSum.Nil));
};
stx_ds_KaryTree.value = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.xs;
		var x = this1.x;
		return x;
	} else {
		return null;
	}
};
stx_ds_KaryTree.children = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.x;
		var ls = this1.xs;
		if(ls == null) {
			return stx_ds_LinkedListSum.Nil;
		} else {
			return ls;
		}
	} else {
		return stx_ds_LinkedListSum.Nil;
	}
};
stx_ds_KaryTree.equals = function(this1,that) {
	return stx_ds_KaryTree.equals_with(this1,that,function(l,r) {
		return l == r;
	});
};
stx_ds_KaryTree.equals_with = function(this1,that,fn) {
	var handler = null;
	handler = function(ls0,ls1) {
		if(ls0 == null) {
			if(ls1 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(ls0._hx_index) {
			case 0:
				if(ls1 == null) {
					return false;
				} else if(ls1._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(ls1 == null) {
					return false;
				} else if(ls1._hx_index == 1) {
					var y = ls1.head;
					var ys = ls1.tail;
					var xs = ls0.tail;
					var x = ls0.head;
					var l = x;
					var r = y;
					if(stx_ds_KaryTree.equals(l,r)) {
						return handler(xs,ys);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			}
		}
	};
	switch(this1._hx_index) {
	case 0:
		if(that._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(that._hx_index == 1) {
			var r = that.x;
			var rs = that.xs;
			var ls = this1.xs;
			var l = this1.x;
			var o = fn(l,r);
			if(!o) {
				return o;
			} else {
				return handler(ls,rs);
			}
		} else {
			return false;
		}
		break;
	}
};
var stx_ds_LazyBinaryTreeSum = $hxEnums["stx.ds.LazyBinaryTreeSum"] = { __ename__:"stx.ds.LazyBinaryTreeSum",__constructs__:null
	,LazyEmpty: {_hx_name:"LazyEmpty",_hx_index:0,__enum__:"stx.ds.LazyBinaryTreeSum",toString:$estr}
	,LazySplit: ($_=function(v,l,r) { return {_hx_index:1,v:v,l:l,r:r,__enum__:"stx.ds.LazyBinaryTreeSum",toString:$estr}; },$_._hx_name="LazySplit",$_.__params__ = ["v","l","r"],$_)
};
stx_ds_LazyBinaryTreeSum.__constructs__ = [stx_ds_LazyBinaryTreeSum.LazyEmpty,stx_ds_LazyBinaryTreeSum.LazySplit];
var stx_ds_LazyBinaryTree = {};
stx_ds_LazyBinaryTree._new = function(self) {
	return self;
};
stx_ds_LazyBinaryTree.value = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var _g = this1.l;
		var _g = this1.r;
		var v = this1.v;
		return v;
	}
};
stx_ds_LazyBinaryTree.head = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LazyBinaryTreeSum.LazyEmpty;
	case 1:
		var _g = this1.v;
		var _g1 = this1.r;
		if(_g == null) {
			var l = this1.l;
			return l();
		} else {
			var v = _g;
			return stx_ds_LazyBinaryTreeSum.LazySplit(v,function() {
				return stx_ds_LazyBinaryTreeSum.LazyEmpty;
			},function() {
				return stx_ds_LazyBinaryTreeSum.LazyEmpty;
			});
		}
		break;
	}
};
stx_ds_LazyBinaryTree.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LazyBinaryTreeSum.LazyEmpty;
	case 1:
		var _g = this1.v;
		var _g = this1.l;
		var r = this1.r;
		return r();
	}
};
stx_ds_LazyBinaryTree.df = function(this1,fn,z) {
	return stx_ds_LazyBinaryTrees.df(this1,fn,z);
};
stx_ds_LazyBinaryTree.isEnd = function(this1) {
	if(this1._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
var stx_ds_LazyBinaryTrees = function() { };
$hxClasses["stx.ds.LazyBinaryTrees"] = stx_ds_LazyBinaryTrees;
stx_ds_LazyBinaryTrees.__name__ = "stx.ds.LazyBinaryTrees";
stx_ds_LazyBinaryTrees.df = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var v = btree.v;
		var l = btree.l;
		var r = btree.r;
		var a = fn(v,z);
		var b = stx_ds_LazyBinaryTrees.df(l(),fn,a);
		var c = stx_ds_LazyBinaryTrees.df(r(),fn,b);
		return c;
	}
};
stx_ds_LazyBinaryTrees.hdf = function(btree,fn,z) {
	switch(btree._hx_index) {
	case 0:
		return z;
	case 1:
		var v = btree.v;
		var l = btree.l;
		var r = btree.r;
		var o = fn(v,z);
		switch(o._hx_index) {
		case 0:
			var o1 = o.v;
			var b = stx_ds_LazyBinaryTrees.hdf(l(),fn,o1);
			var c = stx_ds_LazyBinaryTrees.hdf(r(),fn,b);
			return c;
		case 1:
			var o1 = o.v;
			return o1;
		}
		break;
	}
};
var stx_ds_LinkedListSum = $hxEnums["stx.ds.LinkedListSum"] = { __ename__:"stx.ds.LinkedListSum",__constructs__:null
	,Nil: {_hx_name:"Nil",_hx_index:0,__enum__:"stx.ds.LinkedListSum",toString:$estr}
	,Cons: ($_=function(head,tail) { return {_hx_index:1,head:head,tail:tail,__enum__:"stx.ds.LinkedListSum",toString:$estr}; },$_._hx_name="Cons",$_.__params__ = ["head","tail"],$_)
};
stx_ds_LinkedListSum.__constructs__ = [stx_ds_LinkedListSum.Nil,stx_ds_LinkedListSum.Cons];
var stx_ds_LinkedList = {};
stx_ds_LinkedList.unit = function() {
	return stx_ds_LinkedListSum.Nil;
};
stx_ds_LinkedList.lift = function(self) {
	return stx_ds_LinkedList._new(self);
};
stx_ds_LinkedList.pure = function(v) {
	return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil);
};
stx_ds_LinkedList._new = function(self) {
	return self;
};
stx_ds_LinkedList.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var _g = this1.head;
		var next = this1.tail;
		return next;
	}
};
stx_ds_LinkedList.cons = function(this1,v) {
	return stx_ds_LinkedList._new(stx_ds_LinkedListSum.Cons(v,this1));
};
stx_ds_LinkedList.snoc = function(this1,v) {
	var rec = null;
	rec = function(ls) {
		switch(ls._hx_index) {
		case 0:
			return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil);
		case 1:
			var head = ls.head;
			var tail = ls.tail;
			return stx_ds_LinkedListSum.Cons(head,rec(tail));
		}
	};
	return rec(this1);
};
stx_ds_LinkedList.last = function(this1) {
	var crs = this1;
	var val = null;
	while(true) if(crs._hx_index == 1) {
		var x = crs.head;
		var xs = crs.tail;
		val = x;
		crs = xs;
	} else {
		break;
	}
	return val;
};
stx_ds_LinkedList.concat = function(this1,that) {
	switch(this1._hx_index) {
	case 0:
		if(that._hx_index == 0) {
			return stx_ds_LinkedListSum.Nil;
		} else {
			var l = that;
			return l;
		}
		break;
	case 1:
		var _g = this1.head;
		var _g1 = this1.tail;
		if(that._hx_index == 0) {
			var l = this1;
			return l;
		} else if(_g1._hx_index == 0) {
			var x = _g;
			return stx_ds_LinkedListSum.Cons(x,that);
		} else {
			var xs = _g1;
			var x = _g;
			return stx_ds_LinkedListSum.Cons(x,stx_ds_LinkedList.concat(xs,that));
		}
		break;
	}
};
stx_ds_LinkedList.fromArray = function(arr) {
	return stx_lift_ArrayLift.rfold(arr,function(n,m) {
		return stx_ds_LinkedList.cons(m,n);
	},stx_ds_LinkedListSum.Nil);
};
stx_ds_LinkedList.fromCluster = function(arr) {
	return stx_nano_ClusterLift.rfold(arr,function(n,m) {
		return stx_ds_LinkedList.cons(m,n);
	},stx_ds_LinkedListSum.Nil);
};
stx_ds_LinkedList.search = function(this1,fn) {
	return stx_ds_LinkedList.fold(this1,function(next,memo) {
		return stx_pico_OptionLift.or(memo,function() {
			if(fn(next)) {
				return haxe_ds_Option.Some(next);
			} else {
				return haxe_ds_Option.None;
			}
		});
	},haxe_ds_Option.None);
};
stx_ds_LinkedList.fold = function(this1,f,b) {
	if(this1 == null) {
		return b;
	} else {
		switch(this1._hx_index) {
		case 0:
			return b;
		case 1:
			var x = this1.head;
			var xs = this1.tail;
			return stx_ds_LinkedList.fold(xs,f,f(x,b));
		}
	}
};
stx_ds_LinkedList.head = function(this1) {
	if(this1._hx_index == 1) {
		var x = this1.head;
		var xs = this1.tail;
		return x;
	} else {
		return null;
	}
};
stx_ds_LinkedList.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return $iterator(stx_ds_LinkedList)(_e);
	}};
};
stx_ds_LinkedList.toIter = function(this1) {
	var _e = this1;
	return stx_nano_Iter.lift({ iterator : function() {
		return $iterator(stx_ds_LinkedList)(_e);
	}});
};
stx_ds_LinkedList.iterator = function(this1) {
	var cursor = this1;
	return { next : function() {
		var value = null;
		if(cursor == null) {
			cursor = stx_ds_LinkedListSum.Nil;
		} else if(cursor._hx_index == 1) {
			var x = cursor.head;
			var xs = cursor.tail;
			value = x;
			cursor = xs;
		} else {
			cursor = stx_ds_LinkedListSum.Nil;
		}
		return value;
	}, hasNext : function() {
		if(cursor == null) {
			return true;
		} else if(cursor._hx_index == 0) {
			return false;
		} else {
			return true;
		}
	}};
};
stx_ds_LinkedList.map = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var x = this1.head;
		var xs = this1.tail;
		var tmp = f(x);
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,xs),function(_) {
			return stx_ds_LinkedList.map(_,f);
		});
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = null;
		}
		return stx_ds_LinkedListSum.Cons(tmp,tmp1);
	}
};
stx_ds_LinkedList.map_filter = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		return stx_ds_LinkedListSum.Nil;
	case 1:
		var x = this1.head;
		var xs = this1.tail;
		var nxt = f(x);
		if(nxt._hx_index == 0) {
			var v = nxt.v;
			return stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedList.map_filter(xs,f));
		} else {
			return stx_ds_LinkedList.map_filter(xs,f);
		}
		break;
	}
};
stx_ds_LinkedList.elemWith = function(this1,v,$with) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		var x = this1.head;
		return $with(v,x);
	} else {
		return false;
	}
};
stx_ds_LinkedList.zip_with = function(this1,that,$with) {
	var itI = $iterator(stx_ds_LinkedList)(this1);
	var itII = $getIterator(that);
	var rest = [];
	while(true) {
		var l_done = false;
		var r_done = false;
		var lhs = null;
		var rhs = null;
		if(itI.hasNext()) {
			lhs = itI.next();
		} else {
			l_done = true;
		}
		if(itII.hasNext()) {
			rhs = itII.next();
		} else {
			r_done = true;
		}
		if(l_done && r_done) {
			break;
		} else {
			rest.push($with(lhs,rhs));
		}
	}
	return stx_lift_ArrayLift.rfold(rest,function(n,m) {
		return stx_ds_LinkedList.cons(m,n);
	},stx_ds_LinkedList.unit());
};
stx_ds_LinkedList.rfold = function(this1,fn,z) {
	var rec = null;
	rec = function(next,memo) {
		switch(next._hx_index) {
		case 0:
			return memo;
		case 1:
			var x = next.head;
			var xs = next.tail;
			var nx = rec(xs,memo);
			var lx = fn(x,nx);
			return lx;
		}
	};
	return rec(this1,z);
};
stx_ds_LinkedList.lfold = function(this1,fn,z) {
	var rec = function(next,memo) {
		switch(next._hx_index) {
		case 0:
			return memo;
		case 1:
			var x = next.head;
			var xs = next.tail;
			var lx = fn(x,memo);
			var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,xs);
			var nl;
			if(self._hx_index == 0) {
				var v = self.v;
				nl = v;
			} else {
				nl = stx_ds_LinkedList.unit();
			}
			var nl1 = stx_ds_LinkedList.lfold(nl,fn,lx);
			return nl1;
		}
	};
	return rec(this1,z);
};
stx_ds_LinkedList.join = function(this1,str) {
	return stx_ds_LinkedList.lfold(stx_ds_LinkedList.map(this1,Std.string),function(n,m) {
		if(m.length == 0) {
			return "" + n;
		} else {
			return "" + m + str + n;
		}
	},"");
};
stx_ds_LinkedList.zip = function(this1,that) {
	return stx_ds_LinkedList.zip_with(this1,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
stx_ds_LinkedList.size = function(this1) {
	return stx_ds_LinkedList.fold(this1,function(n,m) {
		return m + 1;
	},0);
};
stx_ds_LinkedList.is_defined = function(this1) {
	if(this1._hx_index == 0) {
		return false;
	} else {
		return true;
	}
};
stx_ds_LinkedList.has = function(this1,v) {
	var nxt = null;
	nxt = function(ls) {
		if(ls._hx_index == 1) {
			var x = ls.head;
			var xs = ls.tail;
			if(x == v) {
				return true;
			} else {
				return nxt(xs);
			}
		} else {
			return false;
		}
	};
	return nxt(this1);
};
stx_ds_LinkedList.filter = function(this1,fn) {
	return stx_ds_LinkedList.rfold(this1,function(next,memo) {
		if(fn(next)) {
			return stx_ds_LinkedList.cons(memo,next);
		} else {
			return memo;
		}
	},stx_ds_LinkedList.unit());
};
stx_ds_LinkedList.toArray = function(this1) {
	return stx_ds_LinkedList.lfold(this1,function(n,m) {
		return stx_lift_ArrayLift.snoc(m,n);
	},[]);
};
stx_ds_LinkedList.toCluster = function(this1) {
	return stx_ds_LinkedList.lfold(this1,function(n,m) {
		return stx_nano_ClusterLift.snoc(m,n);
	},stx_nano_Cluster.lift([]));
};
var stx_ds_Logging = function() { };
$hxClasses["stx.ds.Logging"] = stx_ds_Logging;
stx_ds_Logging.__name__ = "stx.ds.Logging";
stx_ds_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/ds/Logging.hx", lineNumber : 9, className : "stx.ds.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_ds_NelSum = $hxEnums["stx.ds.NelSum"] = { __ename__:"stx.ds.NelSum",__constructs__:null
	,InitNel: ($_=function(x) { return {_hx_index:0,x:x,__enum__:"stx.ds.NelSum",toString:$estr}; },$_._hx_name="InitNel",$_.__params__ = ["x"],$_)
	,ConsNel: ($_=function(x,xs) { return {_hx_index:1,x:x,xs:xs,__enum__:"stx.ds.NelSum",toString:$estr}; },$_._hx_name="ConsNel",$_.__params__ = ["x","xs"],$_)
};
stx_ds_NelSum.__constructs__ = [stx_ds_NelSum.InitNel,stx_ds_NelSum.ConsNel];
var stx_ds_Nel = {};
stx_ds_Nel._new = function(self) {
	return self;
};
stx_ds_Nel.cons = function(this1,v) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return stx_ds_NelSum.ConsNel(v,this1);
	case 1:
		var x = this1.x;
		var xs = this1.xs;
		return stx_ds_NelSum.ConsNel(v,this1);
	}
};
var stx_ds_RedBlackClusterMapLift = function() { };
$hxClasses["stx.ds.RedBlackClusterMapLift"] = stx_ds_RedBlackClusterMapLift;
stx_ds_RedBlackClusterMapLift.__name__ = "stx.ds.RedBlackClusterMapLift";
stx_ds_RedBlackClusterMapLift.lift = function(self) {
	return self;
};
stx_ds_RedBlackClusterMapLift.mod = function(self,key,fn) {
	var self1 = self;
	var key1 = key;
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var left = tree.left;
			var label = tree.label;
			var right = tree.right;
			if(stx_assert_OrderedSum.is_ok(self1.with.lt().comply(key1,label.key))) {
				return mem(left);
			} else if(stx_assert_OrderedSum.is_ok(self1.with.lt().comply(label.key,key1))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	var self2 = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,mem(self1.data)),fn);
	var v = fn(stx_nano_Cluster.lift([]));
	var val;
	if(self2._hx_index == 0) {
		var v1 = self2.v;
		val = v1;
	} else {
		val = v;
	}
	haxe_Log.trace(val == null ? "null" : stx_nano_Cluster.toString(val),{ fileName : "stx/ds/RedBlackClusterMap.hx", lineNumber : 34, className : "stx.ds.RedBlackClusterMapLift", methodName : "mod"});
	var self2 = self;
	var key2 = key;
	var val1 = val;
	var ins = null;
	ins = function(tree,comparator) {
		var result;
		switch(tree._hx_index) {
		case 0:
			result = stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,{ key : key2, val : val1},stx_ds_RedBlackTreeSum.Leaf);
			break;
		case 1:
			var _g = tree.color;
			var _g1 = tree.left;
			var _g2 = tree.label;
			var _g3 = tree.right;
			var k = _g2.key;
			var x = _g2.val;
			var left = _g1;
			var color = _g;
			var right = _g3;
			if(stx_assert_EqualedSum.is_equal(self2.with.eq().comply(k,key2))) {
				result = stx_ds_RedBlackTreeSum.Node(color,left,{ key : key2, val : val1},right);
			} else {
				var label = _g2;
				var left = _g1;
				var color = _g;
				var right = _g3;
				result = stx_nano_Report.is_ok(comparator.comply(key2,label.key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),label,right)) : stx_nano_Report.is_ok(comparator.comply(label.key,key2)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins(right,comparator))) : tree;
			}
			break;
		}
		return result;
	};
	var self;
	var _g = ins(self2.data,stx_assert_Ord.toAssertion(self2.with.lt()));
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g1 = _g.color;
		var left = _g.left;
		var label = _g.label;
		var right = _g.right;
		self = { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self2.with};
		break;
	}
	return self;
};
var stx_ds_RedBlackClusterMap = {};
stx_ds_RedBlackClusterMap._new = function(self) {
	return self;
};
stx_ds_RedBlackClusterMap.make = function($with,data) {
	return { 'with' : $with, data : data == null ? stx_ds_RedBlackTreeSum.Leaf : data};
};
stx_ds_RedBlackClusterMap.lift = function(self) {
	return self;
};
stx_ds_RedBlackClusterMap.prj = function(this1) {
	return this1;
};
stx_ds_RedBlackClusterMap.get_self = function(this1) {
	return this1;
};
stx_ds_RedBlackClusterMap.keyValueIterator = function(this1) {
	return $keyValueIterator(stx_ds_RedBlackMap)(stx_ds_RedBlackMap.lift(this1));
};
stx_ds_RedBlackClusterMap.toRedBlackMapDef = function(this1) {
	return this1;
};
var stx_ds_RedBlackMapLift = function() { };
$hxClasses["stx.ds.RedBlackMapLift"] = stx_ds_RedBlackMapLift;
stx_ds_RedBlackMapLift.__name__ = "stx.ds.RedBlackMapLift";
stx_ds_RedBlackMapLift.set = function(self,key,val) {
	var ins = null;
	ins = function(tree,comparator) {
		var result;
		switch(tree._hx_index) {
		case 0:
			result = stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,{ key : key, val : val},stx_ds_RedBlackTreeSum.Leaf);
			break;
		case 1:
			var _g = tree.color;
			var _g1 = tree.left;
			var _g2 = tree.label;
			var _g3 = tree.right;
			var k = _g2.key;
			var x = _g2.val;
			var left = _g1;
			var color = _g;
			var right = _g3;
			if(stx_assert_EqualedSum.is_equal(self.with.eq().comply(k,key))) {
				result = stx_ds_RedBlackTreeSum.Node(color,left,{ key : key, val : val},right);
			} else {
				var label = _g2;
				var left = _g1;
				var color = _g;
				var right = _g3;
				result = stx_nano_Report.is_ok(comparator.comply(key,label.key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),label,right)) : stx_nano_Report.is_ok(comparator.comply(label.key,key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins(right,comparator))) : tree;
			}
			break;
		}
		return result;
	};
	var _g = ins(self.data,stx_assert_Ord.toAssertion(self.with.lt()));
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g1 = _g.color;
		var left = _g.left;
		var label = _g.label;
		var right = _g.right;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self.with};
	}
};
stx_ds_RedBlackMapLift.get = function(self,key) {
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var left = tree.left;
			var label = tree.label;
			var right = tree.right;
			if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(key,label.key))) {
				return mem(left);
			} else if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,mem(self.data));
};
stx_ds_RedBlackMapLift.rem = function(self,value) {
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = self.with.eq();
	var lt = self.with.lt();
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.color;
			var _g1 = l.left;
			var _g2 = l.label;
			var _g3 = l.right;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.color;
				var _g5 = r.left;
				var _g6 = r.label;
				var _g7 = r.right;
				var c1 = _g4;
				var l1 = _g5;
				var v1 = _g6;
				var r1 = _g7;
				var r0 = _g3;
				var v0 = _g2;
				var l0 = _g1;
				var c0 = _g;
				if(stx_assert_OrderedSum.is_ok(lt.comply(v0.key,v1.key))) {
					return balance(stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1));
				} else {
					var c1 = _g4;
					var l1 = _g5;
					var v1 = _g6;
					var r1 = _g7;
					var r0 = _g3;
					var v0 = _g2;
					var l0 = _g1;
					var c0 = _g;
					if(stx_assert_OrderedSum.is_ok(lt.comply(v1.key,v0.key))) {
						return balance(stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0));
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var c = data.color;
			var l = data.left;
			var v = data.label;
			var r = data.right;
			if(stx_assert_EqualedSum.is_ok(eq.comply(value,v.key))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.color;
					var _g1 = l.left;
					var _g2 = l.label;
					var _g3 = l.right;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c1 = r.color;
						var l1 = r.left;
						var v1 = r.label;
						var r1 = r.right;
						var r0 = _g3;
						var v0 = _g2;
						var l0 = _g1;
						var c0 = _g;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_OrderedSum.is_ok(lt.comply(value,v.key))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r));
			} else if(stx_assert_OrderedSum.is_ok(lt.comply(v.key,value))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r)));
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackMap.make(self.with,rec(self.data));
};
stx_ds_RedBlackMapLift.union = function(self,that) {
	var _g = $keyValueIterator(stx_ds_RedBlackMap)(that);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		var self1 = [self];
		var key1 = [key];
		var val1 = [val];
		var ins = [null];
		ins[0] = (function(ins,val,key,self) {
			return function(tree,comparator) {
				var result;
				switch(tree._hx_index) {
				case 0:
					result = stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,{ key : key[0], val : val[0]},stx_ds_RedBlackTreeSum.Leaf);
					break;
				case 1:
					var _g = tree.color;
					var _g1 = tree.left;
					var _g2 = tree.label;
					var _g3 = tree.right;
					var k = _g2.key;
					var x = _g2.val;
					var left = _g1;
					var color = _g;
					var right = _g3;
					if(stx_assert_EqualedSum.is_equal(self[0].with.eq().comply(k,key[0]))) {
						result = stx_ds_RedBlackTreeSum.Node(color,left,{ key : key[0], val : val[0]},right);
					} else {
						var label = _g2;
						var left = _g1;
						var color = _g;
						var right = _g3;
						result = stx_nano_Report.is_ok(comparator.comply(key[0],label.key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins[0](left,comparator),label,right)) : stx_nano_Report.is_ok(comparator.comply(label.key,key[0])) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins[0](right,comparator))) : tree;
					}
					break;
				}
				return result;
			};
		})(ins,val1,key1,self1);
		var _g2 = ins[0](self1[0].data,stx_assert_Ord.toAssertion(self1[0].with.lt()));
		switch(_g2._hx_index) {
		case 0:
			throw haxe_Exception.thrown("Never reach here");
		case 1:
			var _g3 = _g2.color;
			var left = _g2.left;
			var label = _g2.label;
			var right = _g2.right;
			self = { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self1[0].with};
			break;
		}
	}
	return self;
};
stx_ds_RedBlackMapLift.last = function(self) {
	var rec = null;
	rec = function(self,def) {
		switch(self._hx_index) {
		case 0:
			return def;
		case 1:
			var _g = self.color;
			var _g = self.left;
			var label = self.label;
			var right = self.right;
			return rec(right,haxe_ds_Option.Some(label));
		}
	};
	return rec(self.data,haxe_ds_Option.None);
};
stx_ds_RedBlackMapLift.size = function(self) {
	return stx_ds_RedBlackTreeLift.size(self.data);
};
stx_ds_RedBlackMapLift.unit = function(self) {
	return stx_ds_RedBlackMap.make(self.with);
};
var stx_ds_RedBlackMap = {};
stx_ds_RedBlackMap._new = function(self) {
	return self;
};
stx_ds_RedBlackMap.string = function() {
	return stx_ds_RedBlackMap.make(stx_assert_Comparable.String());
};
stx_ds_RedBlackMap.lift = function(self) {
	return stx_ds_RedBlackMap._new(self);
};
stx_ds_RedBlackMap.make = function($with,data) {
	return stx_ds_RedBlackMap.lift({ 'with' : $with, data : data == null ? stx_ds_RedBlackTreeSum.Leaf : data});
};
stx_ds_RedBlackMap.makeI = function(ord,eq) {
	return { data : stx_ds_RedBlackTreeSum.Leaf, 'with' : new stx_assert_comparable_term_Base(eq,ord)};
};
stx_ds_RedBlackMap.make_with = function(ord,eq) {
	return { data : stx_ds_RedBlackTreeSum.Leaf, 'with' : new stx_assert_comparable_term_Base(eq,ord)};
};
stx_ds_RedBlackMap.set = function(this1,k,v) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var val = v;
	var ins = null;
	ins = function(tree,comparator) {
		var result;
		switch(tree._hx_index) {
		case 0:
			result = stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,{ key : key, val : val},stx_ds_RedBlackTreeSum.Leaf);
			break;
		case 1:
			var _g = tree.color;
			var _g1 = tree.left;
			var _g2 = tree.label;
			var _g3 = tree.right;
			var k = _g2.key;
			var x = _g2.val;
			var left = _g1;
			var color = _g;
			var right = _g3;
			if(stx_assert_EqualedSum.is_equal(self.with.eq().comply(k,key))) {
				result = stx_ds_RedBlackTreeSum.Node(color,left,{ key : key, val : val},right);
			} else {
				var label = _g2;
				var left = _g1;
				var color = _g;
				var right = _g3;
				result = stx_nano_Report.is_ok(comparator.comply(key,label.key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),label,right)) : stx_nano_Report.is_ok(comparator.comply(label.key,key)) ? stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,label,ins(right,comparator))) : tree;
			}
			break;
		}
		return result;
	};
	var _g = ins(self.data,stx_assert_Ord.toAssertion(self.with.lt()));
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g1 = _g.color;
		var left = _g.left;
		var label = _g.label;
		var right = _g.right;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : self.with};
	}
};
stx_ds_RedBlackMap.put = function(this1,kv) {
	return stx_ds_RedBlackMap.set(this1,kv.key,kv.val);
};
stx_ds_RedBlackMap.concat = function(this1,iter) {
	var next = stx_ds_RedBlackMap.get_self(this1);
	var v = $getIterator(iter);
	while(v.hasNext()) {
		var v1 = v.next();
		next = stx_ds_RedBlackMap.put(next,v1);
	}
	return next;
};
stx_ds_RedBlackMap.get = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var left = tree.left;
			var label = tree.label;
			var right = tree.right;
			if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(key,label.key))) {
				return mem(left);
			} else if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,mem(self.data));
};
stx_ds_RedBlackMap.has = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var key = k;
	var mem = null;
	mem = function(tree) {
		switch(tree._hx_index) {
		case 0:
			return null;
		case 1:
			var _g = tree.color;
			var left = tree.left;
			var label = tree.label;
			var right = tree.right;
			if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(key,label.key))) {
				return mem(left);
			} else if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(label.key,key))) {
				return mem(right);
			} else {
				return label.val;
			}
			break;
		}
	};
	return stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,mem(self.data)));
};
stx_ds_RedBlackMap.rem = function(this1,k) {
	var self = stx_ds_RedBlackMap.get_self(this1);
	var value = k;
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = self.with.eq();
	var lt = self.with.lt();
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.color;
			var _g1 = l.left;
			var _g2 = l.label;
			var _g3 = l.right;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.color;
				var _g5 = r.left;
				var _g6 = r.label;
				var _g7 = r.right;
				var c1 = _g4;
				var l1 = _g5;
				var v1 = _g6;
				var r1 = _g7;
				var r0 = _g3;
				var v0 = _g2;
				var l0 = _g1;
				var c0 = _g;
				if(stx_assert_OrderedSum.is_ok(lt.comply(v0.key,v1.key))) {
					return balance(stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1));
				} else {
					var c1 = _g4;
					var l1 = _g5;
					var v1 = _g6;
					var r1 = _g7;
					var r0 = _g3;
					var v0 = _g2;
					var l0 = _g1;
					var c0 = _g;
					if(stx_assert_OrderedSum.is_ok(lt.comply(v1.key,v0.key))) {
						return balance(stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0));
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var c = data.color;
			var l = data.left;
			var v = data.label;
			var r = data.right;
			if(stx_assert_EqualedSum.is_ok(eq.comply(value,v.key))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.color;
					var _g1 = l.left;
					var _g2 = l.label;
					var _g3 = l.right;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c1 = r.color;
						var l1 = r.left;
						var v1 = r.label;
						var r1 = r.right;
						var r0 = _g3;
						var v0 = _g2;
						var l0 = _g1;
						var c0 = _g;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_OrderedSum.is_ok(lt.comply(value,v.key))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r));
			} else if(stx_assert_OrderedSum.is_ok(lt.comply(v.key,value))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r)));
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackMap.make(self.with,rec(self.data));
};
stx_ds_RedBlackMap.iterator = function(this1) {
	return $getIterator(stx_nano_IterLift.map(stx_nano_Iter.make($iterator(stx_ds_RedBlackTree._)(this1.data)),function(kv) {
		return kv.val;
	}));
};
stx_ds_RedBlackMap.keyValueIterator = function(this1) {
	return $getIterator(stx_nano_Iter.prj(stx_nano_IterLift.map(stx_nano_Iter.make($iterator(stx_ds_RedBlackTree._)(this1.data)),function(kv) {
		return { key : kv.key, value : kv.val};
	})));
};
stx_ds_RedBlackMap.union = function(this1,that) {
	return stx_ds_RedBlackMap._.union(stx_ds_RedBlackMap.get_self(this1),that);
};
stx_ds_RedBlackMap.toIter = function(this1) {
	var _e = this1;
	return stx_nano_Iter._new({ iterator : function() {
		return $iterator(stx_ds_RedBlackMap)(_e);
	}});
};
stx_ds_RedBlackMap.toIterKV = function(this1) {
	var _e = this1;
	return stx_nano_IterKV.lift({ keyValueIterator : function() {
		return $keyValueIterator(stx_ds_RedBlackMap)(_e);
	}});
};
stx_ds_RedBlackMap.get_self = function(this1) {
	return this1;
};
stx_ds_RedBlackMap.copy = function(this1,$with,data) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,$with);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = this1.with;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data);
	var tmp1;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp1 = v;
	} else {
		tmp1 = this1.data;
	}
	return stx_ds_RedBlackMap.make(tmp,tmp1);
};
stx_ds_RedBlackMap.toString = function(this1) {
	return stx_ds_RedBlackTreeLift.toString(this1.data);
};
var stx_ds_RedBlackSetLift = function() { };
$hxClasses["stx.ds.RedBlackSetLift"] = stx_ds_RedBlackSetLift;
stx_ds_RedBlackSetLift.__name__ = "stx.ds.RedBlackSetLift";
stx_ds_RedBlackSetLift.balance = function(set) {
	return { data : stx_ds_RedBlackTree._.balance(set.data), 'with' : set.with};
};
stx_ds_RedBlackSetLift.put = function(set,val) {
	var ins = null;
	ins = function(tree,comparator) {
		switch(tree._hx_index) {
		case 0:
			return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Leaf,val,stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var color = tree.color;
			var left = tree.left;
			var v = tree.label;
			var right = tree.right;
			if(stx_nano_Report.is_ok(comparator.comply(val,v))) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,ins(left,comparator),v,right));
			} else if(stx_nano_Report.is_ok(comparator.comply(v,val))) {
				return stx_ds_RedBlackTree._.balance(stx_ds_RedBlackTreeSum.Node(color,left,v,ins(right,comparator)));
			} else {
				return stx_ds_RedBlackTreeSum.Node(color,left,val,right);
			}
			break;
		}
	};
	var _g = ins(set.data,stx_assert_Ord.toAssertion(set.with.lt()));
	switch(_g._hx_index) {
	case 0:
		throw haxe_Exception.thrown("Never reach here");
	case 1:
		var _g1 = _g.color;
		var left = _g.left;
		var label = _g.label;
		var right = _g.right;
		return { data : stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,left,label,right), 'with' : set.with};
	}
};
stx_ds_RedBlackSetLift.concat = function(set,xs) {
	var x = $getIterator(xs);
	while(x.hasNext()) {
		var x1 = x.next();
		set = stx_ds_RedBlackSetLift.put(set,x1);
	}
	return set;
};
stx_ds_RedBlackSetLift.toString = function(set) {
	return stx_ds_RedBlackTree._.toString(set.data);
};
stx_ds_RedBlackSetLift.rem = function(set,value) {
	var balance = stx_ds_RedBlackTree._.balance;
	var eq = ($_=set.with,$bind($_,$_.eq));
	var lt = ($_=set.with,$bind($_,$_.lt));
	var cons = function(data) {
		return data;
	};
	var s = function(v) {
		return stx_ds_RedBlackTree._.toString(v);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.color;
			var _g1 = l.left;
			var _g2 = l.label;
			var _g3 = l.right;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.color;
				var _g5 = r.left;
				var _g6 = r.label;
				var _g7 = r.right;
				var c1 = _g4;
				var l1 = _g5;
				var v1 = _g6;
				var r1 = _g7;
				var r0 = _g3;
				var v0 = _g2;
				var l0 = _g1;
				var c0 = _g;
				if(stx_assert_OrderedSum.is_ok(lt().comply(v0,v1))) {
					return balance(stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1));
				} else {
					var c1 = _g4;
					var l1 = _g5;
					var v1 = _g6;
					var r1 = _g7;
					var r0 = _g3;
					var v0 = _g2;
					var l0 = _g1;
					var c0 = _g;
					if(stx_assert_OrderedSum.is_ok(lt().comply(v1,v0))) {
						return balance(stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0));
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(data) {
		switch(data._hx_index) {
		case 0:
			return cons(stx_ds_RedBlackTreeSum.Leaf);
		case 1:
			var c = data.color;
			var l = data.left;
			var v = data.label;
			var r = data.right;
			if(stx_assert_EqualedSum.is_ok(eq().comply(value,v))) {
				switch(l._hx_index) {
				case 0:
					var v1 = r;
					return cons(v1);
				case 1:
					var _g = l.color;
					var _g1 = l.left;
					var _g2 = l.label;
					var _g3 = l.right;
					switch(r._hx_index) {
					case 0:
						var v1 = l;
						return cons(v1);
					case 1:
						var c1 = r.color;
						var l1 = r.left;
						var v1 = r.label;
						var r1 = r.right;
						var r0 = _g3;
						var v0 = _g2;
						var l0 = _g1;
						var c0 = _g;
						var out = merge(l,r);
						return out;
					}
					break;
				}
			} else if(stx_assert_OrderedSum.is_ok(lt().comply(value,v))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,rec(l),v,r));
			} else if(stx_assert_OrderedSum.is_ok(lt().comply(v,value))) {
				return cons(stx_ds_RedBlackTreeSum.Node(c,l,v,rec(r)));
			} else {
				return data;
			}
			break;
		}
	};
	return stx_ds_RedBlackSet.make(set.with,rec(set.data));
};
stx_ds_RedBlackSetLift.has = function(set,val) {
	var hs = null;
	hs = function(tree,$with) {
		switch(tree._hx_index) {
		case 0:
			return false;
		case 1:
			var color = tree.color;
			var left = tree.left;
			var v = tree.label;
			var right = tree.right;
			if(stx_assert_EqualedSum.is_ok($with.eq().comply(val,v))) {
				return true;
			} else if(stx_assert_OrderedSum.is_ok($with.lt().comply(val,v))) {
				return hs(left,$with);
			} else if(stx_assert_OrderedSum.is_ok($with.lt().comply(v,val))) {
				return hs(right,$with);
			} else {
				return false;
			}
			break;
		}
	};
	return hs(set.data,set.with);
};
stx_ds_RedBlackSetLift.split = function(self,item) {
	var balance = stx_ds_RedBlackTree._.balance;
	var cons = function(data) {
		return stx_ds_RedBlackSet.make(self.with,data);
	};
	var merge = null;
	merge = function(l,r) {
		switch(l._hx_index) {
		case 0:
			var v = r;
			return v;
		case 1:
			var _g = l.color;
			var _g1 = l.left;
			var _g2 = l.label;
			var _g3 = l.right;
			switch(r._hx_index) {
			case 0:
				var v = l;
				return v;
			case 1:
				var _g4 = r.color;
				var _g5 = r.left;
				var _g6 = r.label;
				var _g7 = r.right;
				var c1 = _g4;
				var l1 = _g5;
				var v1 = _g6;
				var r1 = _g7;
				var r0 = _g3;
				var v0 = _g2;
				var l0 = _g1;
				var c0 = _g;
				if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(v0,v1))) {
					return balance(stx_ds_RedBlackTreeSum.Node(c1,merge(l,l1),v1,r1));
				} else {
					var c1 = _g4;
					var l1 = _g5;
					var v1 = _g6;
					var r1 = _g7;
					var r0 = _g3;
					var v0 = _g2;
					var l0 = _g1;
					var c0 = _g;
					if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(v1,v0))) {
						return balance(stx_ds_RedBlackTreeSum.Node(c0,merge(l0,r),v0,r0));
					} else {
						return stx_ds_RedBlackTreeSum.Leaf;
					}
				}
				break;
			default:
				return stx_ds_RedBlackTreeSum.Leaf;
			}
			break;
		default:
			if(r._hx_index == 0) {
				var v = l;
				return v;
			} else {
				return stx_ds_RedBlackTreeSum.Leaf;
			}
		}
	};
	var rec = null;
	rec = function(x) {
		var _g = x.data;
		switch(_g._hx_index) {
		case 0:
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_ds_RedBlackSet.unit(self),stx_ds_RedBlackSet.unit(self));
		case 1:
			var _g1 = _g.color;
			var left = _g.left;
			var label = _g.label;
			var right = _g.right;
			if(stx_assert_OrderedSum.is_ok(self.with.lt().comply(item,label)) || stx_assert_OrderedSum.is_ok(self.with.lt().comply(item,label))) {
				var next = cons(left);
				return stx_nano_CoupleLift.decouple(rec(next),function(l,r) {
					return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,cons(merge(stx_ds_RedBlackSetLift.put(cons(right),label).data,r.data)));
				});
			} else {
				var next = cons(right);
				return stx_nano_CoupleLift.decouple(rec(next),function(l,r) {
					return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,cons(merge(stx_ds_RedBlackSetLift.put(cons(left),label).data,l.data)),r);
				});
			}
			break;
		}
	};
	return rec(self);
};
stx_ds_RedBlackSetLift.fold = function(self,fn,z) {
	var memo = z;
	var next = $iterator(stx_ds_RedBlackSet)(self);
	while(next.hasNext()) {
		var next1 = next.next();
		memo = fn(next1,memo);
	}
	return memo;
};
stx_ds_RedBlackSetLift.toArray = function(self) {
	var itr = $iterator(stx_ds_RedBlackSet)(self);
	var out = [];
	while(itr.hasNext()) out.push(itr.next());
	return out;
};
stx_ds_RedBlackSetLift.toCluster = function(self) {
	return stx_nano_Cluster.lift(stx_ds_RedBlackSetLift.toArray(self));
};
stx_ds_RedBlackSetLift.union = function(self,that) {
	var val = $iterator(stx_ds_RedBlackSet)(that);
	while(val.hasNext()) {
		var val1 = val.next();
		self = stx_ds_RedBlackSetLift.put(self,val1);
	}
	return self;
};
stx_ds_RedBlackSetLift.difference = function(self,that) {
	var val = $iterator(stx_ds_RedBlackSet)(that);
	while(val.hasNext()) {
		var val1 = val.next();
		self = stx_ds_RedBlackSetLift.rem(self,val1);
	}
	return self;
};
stx_ds_RedBlackSetLift.symmetric_difference = function(self,that) {
	var a = stx_ds_RedBlackSet.difference(self,that);
	var b = stx_ds_RedBlackSet.difference(that,self);
	return stx_ds_RedBlackSetLift.union(a,b);
};
stx_ds_RedBlackSetLift.filter = function(self,fn) {
	var next = stx_ds_RedBlackSet.make(self.with);
	var val = $iterator(stx_ds_RedBlackSet)(self);
	while(val.hasNext()) {
		var val1 = val.next();
		if(fn(val1)) {
			next = stx_ds_RedBlackSetLift.put(next,val1);
		}
	}
	return next;
};
stx_ds_RedBlackSetLift.equals = function(self,that) {
	return stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSetLift.union(self,that),function(next,memo) {
		return stx_assert_Equaled.and(memo,stx_ds_RedBlackSetLift.has(self,next) && true);
	},true);
};
stx_ds_RedBlackSetLift.less_than = function(self,that) {
	var l_iter = $iterator(stx_ds_RedBlackSet)(self);
	var r_iter = $iterator(stx_ds_RedBlackSet)(that);
	var res = false;
	while(true) {
		var _g = l_iter.hasNext();
		var _g1 = r_iter.hasNext();
		if(_g) {
			if(_g1) {
				res = self.with.lt().comply(l_iter.next(),r_iter.next());
				if(res == true) {
					break;
				}
			} else {
				res = false;
				break;
			}
		} else if(_g1) {
			res = true;
			break;
		}
	}
	return res;
};
stx_ds_RedBlackSetLift.is_defined = function(self) {
	return self.data != stx_ds_RedBlackTreeSum.Leaf;
};
stx_ds_RedBlackSetLift.last = function(self) {
	var rec = null;
	rec = function(self,def) {
		switch(self._hx_index) {
		case 0:
			return def;
		case 1:
			var _g = self.color;
			var _g = self.left;
			var label = self.label;
			var right = self.right;
			return rec(right,haxe_ds_Option.Some(label));
		}
	};
	return rec(self.data,haxe_ds_Option.None);
};
var stx_ds_RedBlackSet = {};
stx_ds_RedBlackSet._new = function(self) {
	return self;
};
stx_ds_RedBlackSet.String = function() {
	return stx_ds_RedBlackSet.make(stx_assert_Comparable.String());
};
stx_ds_RedBlackSet.make = function($with,data) {
	return stx_ds_RedBlackSet._new({ 'with' : $with, data : data == null ? stx_ds_RedBlackTreeSum.Leaf : data});
};
stx_ds_RedBlackSet.make_with = function(ord,eq,data) {
	var $with = new stx_assert_comparable_term_Base(eq,ord);
	return stx_ds_RedBlackSet.make($with,data);
};
stx_ds_RedBlackSet.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return $iterator(stx_ds_RedBlackSet)(_e);
	}};
};
stx_ds_RedBlackSet.toIter = function(this1) {
	return stx_ds_RedBlackSet.toIterable(this1);
};
stx_ds_RedBlackSet.iterator = function(this1) {
	return $iterator(stx_ds_RedBlackTree._)(this1.data);
};
stx_ds_RedBlackSet.difference = function(this1,that) {
	return stx_ds_RedBlackSet._.filter(stx_ds_RedBlackSet.get_self(this1),function(v) {
		return !stx_ds_RedBlackSet.has(stx_ds_RedBlackSet.uses(that,stx_ds_RedBlackSet.get_self(this1).with),v);
	});
};
stx_ds_RedBlackSet.has = function(this1,v) {
	return stx_ds_RedBlackSet._.has(this1,v);
};
stx_ds_RedBlackSet.equals = function(this1,that) {
	return stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSet._.union(stx_ds_RedBlackSet.get_self(this1),that),function(next,memo) {
		return stx_assert_Equaled.and(memo,stx_ds_RedBlackSet.has(this1,next) && true);
	},true);
};
stx_ds_RedBlackSet.uses = function(this1,$with) {
	return { data : this1.data, 'with' : $with};
};
stx_ds_RedBlackSet.lt = function(this1,that) {
	if(stx_ds_RedBlackSetLift.fold(stx_ds_RedBlackSet.difference(that,this1),function(next,memo) {
		return memo++;
	},0) > 0) {
		return true;
	} else {
		return false;
	}
};
stx_ds_RedBlackSet.get_self = function(this1) {
	return this1;
};
stx_ds_RedBlackSet.toString = function(this1) {
	return stx_ds_RedBlackSet._.toString(this1);
};
stx_ds_RedBlackSet.unit = function(this1) {
	return stx_ds_RedBlackSet.make(this1.with);
};
stx_ds_RedBlackSet.copy = function(this1,$with,data) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,$with);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = this1.with;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data);
	var tmp1;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp1 = v;
	} else {
		tmp1 = this1.data;
	}
	return stx_ds_RedBlackSet.make(tmp,tmp1);
};
var stx_ds_RedBlackTreeSum = $hxEnums["stx.ds.RedBlackTreeSum"] = { __ename__:"stx.ds.RedBlackTreeSum",__constructs__:null
	,Leaf: {_hx_name:"Leaf",_hx_index:0,__enum__:"stx.ds.RedBlackTreeSum",toString:$estr}
	,Node: ($_=function(color,left,label,right) { return {_hx_index:1,color:color,left:left,label:label,right:right,__enum__:"stx.ds.RedBlackTreeSum",toString:$estr}; },$_._hx_name="Node",$_.__params__ = ["color","left","label","right"],$_)
};
stx_ds_RedBlackTreeSum.__constructs__ = [stx_ds_RedBlackTreeSum.Leaf,stx_ds_RedBlackTreeSum.Node];
var stx_ds_RedBlackTreeLift = function() { };
$hxClasses["stx.ds.RedBlackTreeLift"] = stx_ds_RedBlackTreeLift;
stx_ds_RedBlackTreeLift.__name__ = "stx.ds.RedBlackTreeLift";
stx_ds_RedBlackTreeLift.is_defined = function(self) {
	if(self._hx_index == 0) {
		return false;
	} else {
		return true;
	}
};
stx_ds_RedBlackTreeLift.balance = function(tree) {
	if(tree._hx_index == 1) {
		var _g = tree.left;
		var _g1 = tree.label;
		var _g2 = tree.right;
		if(tree.color._hx_index == 1) {
			if(_g._hx_index == 1) {
				var _g3 = _g.left;
				var _g4 = _g.label;
				var _g5 = _g.right;
				if(_g.color._hx_index == 0) {
					if(_g3._hx_index == 1) {
						if(_g3.color._hx_index == 0) {
							var a = _g3.left;
							var x = _g3.label;
							var b = _g3.right;
							var y = _g4;
							var c = _g5;
							var z = _g1;
							var d = _g2;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g5._hx_index == 1) {
							if(_g5.color._hx_index == 0) {
								var a = _g3;
								var b = _g5.left;
								var y = _g5.label;
								var c = _g5.right;
								var x = _g4;
								var z = _g1;
								var d = _g2;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else if(_g2._hx_index == 1) {
								var _g6 = _g2.left;
								var _g7 = _g2.label;
								var _g8 = _g2.right;
								if(_g2.color._hx_index == 0) {
									if(_g6._hx_index == 1) {
										if(_g6.color._hx_index == 0) {
											var a = _g;
											var b = _g6.left;
											var y = _g6.label;
											var c = _g6.right;
											var z = _g7;
											var d = _g8;
											var x = _g1;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else if(_g8._hx_index == 1) {
											if(_g8.color._hx_index == 0) {
												var a = _g;
												var b = _g6;
												var c = _g8.left;
												var z = _g8.label;
												var d = _g8.right;
												var y = _g7;
												var x = _g1;
												return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
											} else {
												return tree;
											}
										} else {
											return tree;
										}
									} else if(_g8._hx_index == 1) {
										if(_g8.color._hx_index == 0) {
											var a = _g;
											var b = _g6;
											var c = _g8.left;
											var z = _g8.label;
											var d = _g8.right;
											var y = _g7;
											var x = _g1;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else if(_g2._hx_index == 1) {
							var _g6 = _g2.left;
							var _g7 = _g2.label;
							var _g8 = _g2.right;
							if(_g2.color._hx_index == 0) {
								if(_g6._hx_index == 1) {
									if(_g6.color._hx_index == 0) {
										var a = _g;
										var b = _g6.left;
										var y = _g6.label;
										var c = _g6.right;
										var z = _g7;
										var d = _g8;
										var x = _g1;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else if(_g8._hx_index == 1) {
										if(_g8.color._hx_index == 0) {
											var a = _g;
											var b = _g6;
											var c = _g8.left;
											var z = _g8.label;
											var d = _g8.right;
											var y = _g7;
											var x = _g1;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else if(_g8._hx_index == 1) {
									if(_g8.color._hx_index == 0) {
										var a = _g;
										var b = _g6;
										var c = _g8.left;
										var z = _g8.label;
										var d = _g8.right;
										var y = _g7;
										var x = _g1;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g5._hx_index == 1) {
						if(_g5.color._hx_index == 0) {
							var a = _g3;
							var b = _g5.left;
							var y = _g5.label;
							var c = _g5.right;
							var x = _g4;
							var z = _g1;
							var d = _g2;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g2._hx_index == 1) {
							var _g3 = _g2.left;
							var _g4 = _g2.label;
							var _g5 = _g2.right;
							if(_g2.color._hx_index == 0) {
								if(_g3._hx_index == 1) {
									if(_g3.color._hx_index == 0) {
										var a = _g;
										var b = _g3.left;
										var y = _g3.label;
										var c = _g3.right;
										var z = _g4;
										var d = _g5;
										var x = _g1;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else if(_g5._hx_index == 1) {
										if(_g5.color._hx_index == 0) {
											var a = _g;
											var b = _g3;
											var c = _g5.left;
											var z = _g5.label;
											var d = _g5.right;
											var y = _g4;
											var x = _g1;
											return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
										} else {
											return tree;
										}
									} else {
										return tree;
									}
								} else if(_g5._hx_index == 1) {
									if(_g5.color._hx_index == 0) {
										var a = _g;
										var b = _g3;
										var c = _g5.left;
										var z = _g5.label;
										var d = _g5.right;
										var y = _g4;
										var x = _g1;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g2._hx_index == 1) {
						var _g3 = _g2.left;
						var _g4 = _g2.label;
						var _g5 = _g2.right;
						if(_g2.color._hx_index == 0) {
							if(_g3._hx_index == 1) {
								if(_g3.color._hx_index == 0) {
									var a = _g;
									var b = _g3.left;
									var y = _g3.label;
									var c = _g3.right;
									var z = _g4;
									var d = _g5;
									var x = _g1;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else if(_g5._hx_index == 1) {
									if(_g5.color._hx_index == 0) {
										var a = _g;
										var b = _g3;
										var c = _g5.left;
										var z = _g5.label;
										var d = _g5.right;
										var y = _g4;
										var x = _g1;
										return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
									} else {
										return tree;
									}
								} else {
									return tree;
								}
							} else if(_g5._hx_index == 1) {
								if(_g5.color._hx_index == 0) {
									var a = _g;
									var b = _g3;
									var c = _g5.left;
									var z = _g5.label;
									var d = _g5.right;
									var y = _g4;
									var x = _g1;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else if(_g2._hx_index == 1) {
					var _g3 = _g2.left;
					var _g4 = _g2.label;
					var _g5 = _g2.right;
					if(_g2.color._hx_index == 0) {
						if(_g3._hx_index == 1) {
							if(_g3.color._hx_index == 0) {
								var a = _g;
								var b = _g3.left;
								var y = _g3.label;
								var c = _g3.right;
								var z = _g4;
								var d = _g5;
								var x = _g1;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else if(_g5._hx_index == 1) {
								if(_g5.color._hx_index == 0) {
									var a = _g;
									var b = _g3;
									var c = _g5.left;
									var z = _g5.label;
									var d = _g5.right;
									var y = _g4;
									var x = _g1;
									return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
								} else {
									return tree;
								}
							} else {
								return tree;
							}
						} else if(_g5._hx_index == 1) {
							if(_g5.color._hx_index == 0) {
								var a = _g;
								var b = _g3;
								var c = _g5.left;
								var z = _g5.label;
								var d = _g5.right;
								var y = _g4;
								var x = _g1;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else {
					return tree;
				}
			} else if(_g2._hx_index == 1) {
				var _g3 = _g2.left;
				var _g4 = _g2.label;
				var _g5 = _g2.right;
				if(_g2.color._hx_index == 0) {
					if(_g3._hx_index == 1) {
						if(_g3.color._hx_index == 0) {
							var a = _g;
							var b = _g3.left;
							var y = _g3.label;
							var c = _g3.right;
							var z = _g4;
							var d = _g5;
							var x = _g1;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else if(_g5._hx_index == 1) {
							if(_g5.color._hx_index == 0) {
								var a = _g;
								var b = _g3;
								var c = _g5.left;
								var z = _g5.label;
								var d = _g5.right;
								var y = _g4;
								var x = _g1;
								return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
							} else {
								return tree;
							}
						} else {
							return tree;
						}
					} else if(_g5._hx_index == 1) {
						if(_g5.color._hx_index == 0) {
							var a = _g;
							var b = _g3;
							var c = _g5.left;
							var z = _g5.label;
							var d = _g5.right;
							var y = _g4;
							var x = _g1;
							return stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Red,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,a,x,b),y,stx_ds_RedBlackTreeSum.Node(stx_RedBlackSum.Black,c,z,d));
						} else {
							return tree;
						}
					} else {
						return tree;
					}
				} else {
					return tree;
				}
			} else {
				return tree;
			}
		} else {
			return tree;
		}
	} else {
		return tree;
	}
};
stx_ds_RedBlackTreeLift.toString = function(tree) {
	var rec = null;
	rec = function(tree,ins) {
		if(ins == null) {
			ins = "  ";
		}
		var nins = "" + ins + "  ";
		switch(tree._hx_index) {
		case 0:
			return "";
		case 1:
			var colour = tree.color;
			var left = tree.left;
			var label = tree.label;
			var right = tree.right;
			var c = colour == stx_RedBlackSum.Red ? "r" : "b";
			var l = rec(left,nins);
			var r = rec(right,nins);
			return "(" + c + ":" + Std.string(label) + ")\n" + ins + "<-:" + l + "\n" + ins + "->:" + r;
		}
	};
	return "\n" + rec(tree);
};
stx_ds_RedBlackTreeLift.iterator = function(tree) {
	var recurse = null;
	recurse = function(head,stack) {
		switch(head._hx_index) {
		case 0:
			if(stack.length == 0) {
				var head1 = stx_ds_RedBlackTreeSum.Leaf;
				var stack1 = [];
				return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(function() {
					return recurse(head1,stack1);
				}),haxe_ds_Option.None);
			} else {
				var arr = stack;
				var recurse1 = recurse;
				var self = stx_lift_ArrayLift.head(arr);
				var recurse2;
				if(self._hx_index == 0) {
					var v = self.v;
					recurse2 = v;
				} else {
					recurse2 = stx_ds_RedBlackTreeSum.Leaf;
				}
				return recurse1(recurse2,stx_lift_ArrayLift.tail(arr));
			}
			break;
		case 1:
			var _g = head.color;
			var l = head.left;
			var v = head.label;
			var r = head.right;
			var arr = stack;
			var head = l;
			var stack = stx_lift_ArrayLift.cons(arr,r);
			return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(function() {
				return recurse(head,stack);
			}),haxe_ds_Option.Some(v));
		}
	};
	var val = recurse(tree,[]);
	return { next : function() {
		var res = stx_fp_LazyStream.reply(val);
		var self = stx_nano_CoupleLift.fst(res);
		var v;
		if(self._hx_index == 0) {
			var v1 = self.v;
			v = v1;
		} else {
			v = null;
		}
		val = stx_nano_CoupleLift.snd(res).next();
		return v;
	}, hasNext : function() {
		var res = stx_fp_LazyStream.reply(val);
		var self = stx_pico_OptionLift.map(stx_nano_CoupleLift.fst(res),function(_) {
			return true;
		});
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return false;
		}
	}};
};
stx_ds_RedBlackTreeLift.size = function(self) {
	return stx_nano_IterLift.lfold({ iterator : function() {
		return $iterator(stx_ds_RedBlackTreeLift)(self);
	}},function(n,m) {
		return m++;
	},0);
};
var stx_ds_RedBlackTree = {};
stx_ds_RedBlackTree._new = function(self) {
	return self;
};
var stx_ds_kary_$tree_KaryTreeZip = {};
stx_ds_kary_$tree_KaryTreeZip.unit = function() {
	return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Nil));
};
stx_ds_kary_$tree_KaryTreeZip.lift = function(self) {
	return stx_ds_kary_$tree_KaryTreeZip._new(self);
};
stx_ds_kary_$tree_KaryTreeZip._new = function(self) {
	return self;
};
stx_ds_kary_$tree_KaryTreeZip.fromKaryTree = function(v) {
	return stx_ds_kary_$tree_KaryTreeZip._new(stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil));
};
stx_ds_kary_$tree_KaryTreeZip.isRoot = function(this1) {
	if(this1._hx_index == 1) {
		if(this1.tail._hx_index == 0) {
			var x = this1.head;
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
stx_ds_kary_$tree_KaryTreeZip.end = function(this1) {
	return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
};
stx_ds_kary_$tree_KaryTreeZip.has_right = function(this1) {
	var _g = stx_ds_kary_$tree_KaryTreeZip.prj(stx_ds_kary_$tree_KaryTreeZip.right(this1));
	if(_g._hx_index == 1) {
		var _g1 = _g.tail;
		if(_g.head._hx_index == 0) {
			return false;
		} else {
			return true;
		}
	} else {
		return true;
	}
};
stx_ds_kary_$tree_KaryTreeZip.right = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.head;
			if(_g1._hx_index == 1) {
				var v = _g1.x;
				var siblings = _g1.xs;
				var previous = _g.tail;
				var cursor = this1.head;
				var _g = stx_ds_kary_$tree_KaryTreeZip.find_head(this1,siblings,cursor);
				if(_g._hx_index == 1) {
					var _g1 = _g.head;
					var _g1 = _g.tail;
					if(_g1._hx_index == 1) {
						var _g = _g1.tail;
						var right = _g1.head;
						var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
						var o = stx_ds_kary_$tree_KaryTreeZip._new(stx_ds_LinkedListSum.Cons(right,stx_ds_LinkedListSum.Cons(tree,previous)));
						return o;
					} else {
						var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
						return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous)));
					}
				} else {
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous)));
				}
			} else {
				return stx_ds_kary_$tree_KaryTreeZip.end(this1);
			}
		} else {
			return stx_ds_kary_$tree_KaryTreeZip.end(this1);
		}
	} else {
		return stx_ds_kary_$tree_KaryTreeZip.end(this1);
	}
};
stx_ds_kary_$tree_KaryTreeZip.left = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.head;
			if(_g1._hx_index == 1) {
				var v = _g1.x;
				var siblings = _g1.xs;
				var previous = _g.tail;
				var cursor = this1.head;
				var _g = stx_ds_kary_$tree_KaryTreeZip.find_left(this1,siblings,cursor);
				if(_g._hx_index == 1) {
					var _g1 = _g.tail;
					var left = _g.head;
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(left,stx_ds_LinkedListSum.Cons(tree,previous)));
				} else {
					var tree = stx_ds_KaryTreeSum.Branch(v,siblings);
					return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,stx_ds_LinkedListSum.Cons(tree,previous)));
				}
			} else {
				return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
			}
		} else {
			return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
		}
	} else {
		return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
	}
};
stx_ds_kary_$tree_KaryTreeZip.up = function(this1) {
	var o;
	if(this1._hx_index == 1) {
		var _g = this1.tail;
		if(_g._hx_index == 1) {
			var parent = _g.head;
			var rest = _g.tail;
			var cursor = this1.head;
			o = stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(parent,rest));
		} else {
			o = this1;
		}
	} else {
		o = this1;
	}
	return o;
};
stx_ds_kary_$tree_KaryTreeZip.down = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.head;
		var _g1 = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.x;
			var _g1 = _g.xs;
			if(_g1._hx_index == 1) {
				var _g = _g1.tail;
				var firstChild = _g1.head;
				return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(firstChild,this1));
			} else {
				return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
			}
		} else {
			return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
		}
	} else {
		return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_KaryTreeSum.Nought,this1));
	}
};
stx_ds_kary_$tree_KaryTreeZip.has_down = function(this1) {
	return stx_ds_LinkedList.is_defined(stx_ds_KaryTree.children(stx_ds_kary_$tree_KaryTreeZip.toTree(this1)));
};
stx_ds_kary_$tree_KaryTreeZip.value = function(this1) {
	if(this1._hx_index == 1) {
		var _g = this1.head;
		var _g1 = this1.tail;
		if(_g._hx_index == 1) {
			var _g1 = _g.xs;
			var v = _g.x;
			return v;
		} else {
			return null;
		}
	} else {
		return null;
	}
};
stx_ds_kary_$tree_KaryTreeZip.children = function(this1) {
	return stx_ds_KaryTree.children(stx_ds_kary_$tree_KaryTreeZip.toTree(this1));
};
stx_ds_kary_$tree_KaryTreeZip.root = function(this1) {
	return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(stx_ds_LinkedList.last(this1),stx_ds_LinkedListSum.Nil));
};
stx_ds_kary_$tree_KaryTreeZip.toTree = function(this1) {
	return stx_ds_LinkedList.last(this1);
};
stx_ds_kary_$tree_KaryTreeZip.add_child = function(this1,v) {
	var new_tree = stx_ds_KaryTreeSum.Branch(v,stx_ds_LinkedListSum.Nil);
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,new_tree,stx_ds_kary_$tree_KaryTreeZip.add_child_node(this1,new_tree));
};
stx_ds_kary_$tree_KaryTreeZip.add_child_node = function(this1,v) {
	if(this1._hx_index == 1) {
		var _g = this1.head;
		if(_g._hx_index == 1) {
			var node = _g.x;
			var children = _g.xs;
			var rest = this1.tail;
			var new_node = stx_ds_KaryTreeSum.Branch(node,stx_ds_LinkedList.cons(children,v));
			return stx_ds_kary_$tree_KaryTreeZip.update(this1,new_node);
		} else {
			return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil));
		}
	} else {
		return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(v,stx_ds_LinkedListSum.Nil));
	}
};
stx_ds_kary_$tree_KaryTreeZip.rem_child_node = function(this1,v) {
	if(this1._hx_index == 1) {
		var _g = this1.head;
		var _g1 = this1.tail;
		if(_g._hx_index == 1) {
			var _g2 = _g.x;
			var _g3 = _g.xs;
			var node = _g2;
			var children = _g3;
			var rest = _g1;
			if(children == null) {
				return this1;
			} else {
				var node = _g2;
				var children = _g3;
				var rest = _g1;
				children = stx_ds_LinkedList.fold(children,function(next,memo) {
					if(stx_ds_kary_$tree_KaryTreeZip.tree_equals(v,next)) {
						return memo;
					} else {
						return stx_ds_LinkedListSum.Cons(next,memo);
					}
				},stx_ds_LinkedListSum.Nil);
				var new_node = stx_ds_KaryTreeSum.Branch(node,children);
				return stx_ds_kary_$tree_KaryTreeZip.update(this1,new_node);
			}
		} else {
			return this1;
		}
	} else {
		return this1;
	}
};
stx_ds_kary_$tree_KaryTreeZip.select_child = function(this1,new_head) {
	if(this1._hx_index == 1) {
		var head = this1.head;
		var t = this1.tail;
		return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(new_head,t));
	} else {
		return stx_ds_kary_$tree_KaryTreeZip.lift(stx_ds_LinkedListSum.Cons(new_head,stx_ds_LinkedListSum.Nil));
	}
};
stx_ds_kary_$tree_KaryTreeZip.search_child = function(this1,fn) {
	return stx_ds_KaryTreeLift.search_child(stx_ds_kary_$tree_KaryTreeZip.toTree(this1),fn);
};
stx_ds_kary_$tree_KaryTreeZip.update = function(this1,replace) {
	return stx_ds_kary_$tree_KaryTreeZips.update(this1,replace);
};
stx_ds_kary_$tree_KaryTreeZip.selefctDF = function(this1,fn) {
	var head = stx_ds_LinkedList.head(this1);
	var path = stx_ds_LinkedListSum.Nil;
	var handler = null;
	handler = function(node) {
		if(node == null) {
			return false;
		}
		path = stx_ds_LinkedList.cons(path,node);
		if(node._hx_index == 0) {
			return false;
		}
		if(fn(stx_ds_KaryTree.value(node))) {
			return true;
		} else {
			var children = stx_ds_KaryTree.children(node);
			var node = $iterator(stx_ds_LinkedList)(children);
			while(node.hasNext()) {
				var node1 = node.next();
				if(!handler(node1)) {
					path = stx_ds_LinkedList.tail(path);
				} else {
					return true;
				}
			}
			return false;
		}
	};
	handler(head);
	if(path == stx_ds_LinkedListSum.Nil) {
		return stx_ds_LinkedList.concat(this1,stx_ds_LinkedList.cons(path,stx_ds_KaryTreeSum.Nought));
	} else {
		return stx_ds_LinkedList.concat(stx_ds_LinkedList.tail(this1),path);
	}
};
stx_ds_kary_$tree_KaryTreeZip.find_left = function(this1,list,cursor) {
	var handler = null;
	handler = function(ls,c) {
		if(ls._hx_index == 1) {
			var _g = ls.head;
			var _g1 = ls.tail;
			if(_g1._hx_index == 1) {
				var y = _g1.head;
				var ys = _g1.tail;
				var x = _g;
				if(stx_ds_kary_$tree_KaryTreeZip.tree_equals(c,y)) {
					return stx_ds_LinkedListSum.Cons(x,ys);
				} else {
					var xs = _g1;
					var x = _g;
					return handler(xs,c);
				}
			} else {
				var xs = _g1;
				var x = _g;
				return handler(xs,c);
			}
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	return handler(list,cursor);
};
stx_ds_kary_$tree_KaryTreeZip.find_head = function(this1,list,cursor) {
	var handler = null;
	handler = function(ls,c) {
		if(ls._hx_index == 1) {
			var _g = ls.head;
			var _g1 = ls.tail;
			var x = _g;
			var xs = _g1;
			if(stx_ds_kary_$tree_KaryTreeZip.tree_equals(c,x)) {
				return stx_ds_LinkedListSum.Cons(x,xs);
			} else {
				var x = _g;
				var xs = _g1;
				return handler(xs,c);
			}
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	return handler(list,cursor);
};
stx_ds_kary_$tree_KaryTreeZip.tree_equals = function(treel,treer) {
	return treel == treer;
};
stx_ds_kary_$tree_KaryTreeZip.prj = function(this1) {
	return this1;
};
var stx_ds_kary_$tree_KaryTreeZips = function() { };
$hxClasses["stx.ds.kary_tree.KaryTreeZips"] = stx_ds_kary_$tree_KaryTreeZips;
stx_ds_kary_$tree_KaryTreeZips.__name__ = "stx.ds.kary_tree.KaryTreeZips";
stx_ds_kary_$tree_KaryTreeZips.update = function(zip,replace) {
	var changes = stx_ds_LinkedList.fold(zip,function(next,memo) {
		if(memo._hx_index == 0) {
			var ls = stx_ds_LinkedList.cons(stx_ds_LinkedList.unit(),stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,next,replace));
			return ls;
		} else {
			switch(next._hx_index) {
			case 0:
				return memo;
			case 1:
				var memo1 = memo;
				var v = next.x;
				var rst = next.xs;
				if(rst == null) {
					rst = stx_ds_LinkedListSum.Nil;
				}
				var leaves = stx_ds_LinkedList.map(rst,function(x) {
					var shouldChange = x == stx_nano_CoupleLift.fst(stx_ds_LinkedList.head(memo1));
					if(shouldChange) {
						return stx_nano_CoupleLift.snd(stx_ds_LinkedList.head(memo1));
					} else {
						return x;
					}
				});
				var branch = stx_ds_KaryTreeSum.Branch(v,leaves);
				var o = stx_ds_LinkedList.cons(memo1,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,next,branch));
				return o;
			}
		}
	},stx_ds_LinkedListSum.Nil);
	var handler = null;
	handler = function(next) {
		if(next._hx_index == 1) {
			var x = next.head;
			var xs = next.tail;
			var ls = handler(xs);
			return stx_ds_LinkedList.concat(ls,stx_ds_LinkedListSum.Cons(stx_nano_CoupleLift.snd(x),stx_ds_LinkedListSum.Nil));
		} else {
			return stx_ds_LinkedListSum.Nil;
		}
	};
	var o = handler(changes);
	return stx_ds_kary_$tree_KaryTreeZip._new(o);
};
var stx_fail_AssertFailure = $hxEnums["stx.fail.AssertFailure"] = { __ename__:"stx.fail.AssertFailure",__constructs__:null
	,PredicateFailed: ($_=function(type,valueN,value0) { return {_hx_index:0,type:type,valueN:valueN,value0:value0,__enum__:"stx.fail.AssertFailure",toString:$estr}; },$_._hx_name="PredicateFailed",$_.__params__ = ["type","valueN","value0"],$_)
};
stx_fail_AssertFailure.__constructs__ = [stx_fail_AssertFailure.PredicateFailed];
var stx_fail_DeclineSum = $hxEnums["stx.fail.DeclineSum"] = { __ename__:"stx.fail.DeclineSum",__constructs__:null
	,INTERNAL: ($_=function(digest) { return {_hx_index:0,digest:digest,__enum__:"stx.fail.DeclineSum",toString:$estr}; },$_._hx_name="INTERNAL",$_.__params__ = ["digest"],$_)
	,EXTERNAL: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.fail.DeclineSum",toString:$estr}; },$_._hx_name="EXTERNAL",$_.__params__ = ["v"],$_)
};
stx_fail_DeclineSum.__constructs__ = [stx_fail_DeclineSum.INTERNAL,stx_fail_DeclineSum.EXTERNAL];
var stx_fail_DeclineLift = function() { };
$hxClasses["stx.fail.DeclineLift"] = stx_fail_DeclineLift;
stx_fail_DeclineLift.__name__ = "stx.fail.DeclineLift";
stx_fail_DeclineLift.fold = function(self,val,def) {
	switch(self._hx_index) {
	case 0:
		var e = self.digest;
		return def(e);
	case 1:
		var v = self.v;
		return val(v);
	}
};
stx_fail_DeclineLift.is_external = function(self) {
	return stx_fail_DeclineLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
stx_fail_DeclineLift.external = function(self) {
	return stx_fail_DeclineLift.fold(self,function(v) {
		return haxe_ds_Option.Some(v);
	},function(_) {
		return haxe_ds_Option.None;
	});
};
stx_fail_DeclineLift.fold_filter = function(self,val,def) {
	return stx_fail_DeclineLift.fold(self,function(x) {
		if(val(x)) {
			return haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(x));
		} else {
			return haxe_ds_Option.None;
		}
	},function(x) {
		if(def(x)) {
			return haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(x));
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_fail_DeclineLift.option = function(self) {
	return stx_fail_DeclineLift.fold(self,haxe_ds_Option.Some,function(_) {
		return haxe_ds_Option.None;
	});
};
stx_fail_DeclineLift.toString = function(self) {
	return stx_fail_DeclineLift.fold(self,function(v) {
		return Std.string(v);
	},function(n) {
		return n.toString();
	});
};
stx_fail_DeclineLift.map = function(self,fn) {
	return stx_fail_Decline._new(stx_fail_DeclineLift.fold(self,function(x) {
		return stx_fail_DeclineSum.EXTERNAL(fn(x));
	},function(y) {
		return stx_fail_DeclineSum.INTERNAL(y);
	}));
};
var stx_fail_Decline = {};
stx_fail_Decline._new = function(self) {
	return self;
};
stx_fail_Decline.lift = function(self) {
	return stx_fail_Decline._new(self);
};
stx_fail_Decline.fromDigest = function(code) {
	return stx_fail_DeclineSum.INTERNAL(code);
};
stx_fail_Decline.fromErrOf = function(v) {
	return stx_fail_DeclineSum.EXTERNAL(v);
};
stx_fail_Decline.iterator = function(this1) {
	return { next : function() {
		if(this1._hx_index == 1) {
			var v = this1.v;
			return v;
		} else {
			return null;
		}
	}, hasNext : function() {
		if(this1._hx_index == 1) {
			var v = this1.v;
			return true;
		} else {
			return false;
		}
	}};
};
stx_fail_Decline.prj = function(this1) {
	return this1;
};
stx_fail_Decline.get_self = function(this1) {
	return stx_fail_Decline._new(this1);
};
var stx_fail__$Digest_DigestForeign = function(detail,code) {
	if(code == null) {
		code = -1;
	}
	stx_fail_Digest.call(this,"125cb1ae06784bb586e87ea8f57cdb6e",detail,code);
};
$hxClasses["stx.fail._Digest.DigestForeign"] = stx_fail__$Digest_DigestForeign;
stx_fail__$Digest_DigestForeign.__name__ = "stx.fail._Digest.DigestForeign";
stx_fail__$Digest_DigestForeign.__super__ = stx_fail_Digest;
stx_fail__$Digest_DigestForeign.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_fail__$Digest_DigestForeign
});
var stx_fail_ErrorLift = function() { };
$hxClasses["stx.fail.ErrorLift"] = stx_fail_ErrorLift;
stx_fail_ErrorLift.__name__ = "stx.fail.ErrorLift";
stx_fail_ErrorLift.digest_with = function(self,fn) {
	var tmp = stx_pico_OptionLift.map(self.get_data(),function(e) {
		return stx_fail_DeclineSum.INTERNAL(stx_fail_Digest.Foreign(fn(e)));
	});
	var tmp1 = self.get_next();
	var fn1 = fn;
	return stx_fail_Refuse.make(tmp,stx_pico_OptionLift.map(tmp1,function(self) {
		return stx_fail_ErrorLift.digest_with(self,fn1);
	}),self.get_pos());
};
var stx_fail_Error = {};
stx_fail_Error._new = function(self) {
	return self;
};
stx_fail_Error.lift = function(self) {
	return stx_fail_Error._new(self);
};
stx_fail_Error.make = function(data,next,pos) {
	return stx_fail_Error.lift(new stx_fail_term_Base(data,next,pos));
};
stx_fail_Error.prj = function(this1) {
	return this1;
};
stx_fail_Error.get_self = function(this1) {
	return stx_fail_Error.lift(this1);
};
stx_fail_Error.Remote = function(self,pos) {
	return new stx_fail_term_ErrorRemote(self,haxe_ds_Option.Some(pos)).toError();
};
stx_fail_Error.Unit = function() {
	return new stx_fail_term_Unit().toError();
};
stx_fail_Error.Caught = function(data,next,pos,exception) {
	return new stx_fail_term_Caught(data,next,pos,exception).toError();
};
stx_fail_Error.map = function(this1,fn) {
	return new stx_fail_term_MapAnon(this1,fn).toError();
};
stx_fail_Error.errate = function(this1,fn) {
	return new stx_fail_term_MapAnon(this1,fn).toError();
};
stx_fail_Error.errata = function(this1,fn) {
	return new stx_fail_term_ErrataAnon(this1,fn).toError();
};
stx_fail_Error.toIterable = function(this1) {
	return { iterator : $bind(this1,this1.iterator)};
};
stx_fail_Error.is_unit = function(this1) {
	if(!stx_pico_OptionLift.is_defined(this1.get_data()) && !stx_pico_OptionLift.is_defined(this1.get_pos())) {
		return !stx_pico_OptionLift.is_defined(this1.get_stack());
	} else {
		return false;
	}
};
var stx_fail_ErrorApi = function() { };
$hxClasses["stx.fail.ErrorApi"] = stx_fail_ErrorApi;
stx_fail_ErrorApi.__name__ = "stx.fail.ErrorApi";
stx_fail_ErrorApi.__isInterface__ = true;
stx_fail_ErrorApi.prototype = {
	pos: null
	,get_pos: null
	,get_stack: null
	,next: null
	,get_next: null
	,data: null
	,get_data: null
	,toError: null
	,iterator: null
	,concat: null
	,toString: null
	,is_defined: null
	,crack: null
	,elide: null
	,__class__: stx_fail_ErrorApi
};
var stx_fail_ErrorCls = function() { };
$hxClasses["stx.fail.ErrorCls"] = stx_fail_ErrorCls;
stx_fail_ErrorCls.__name__ = "stx.fail.ErrorCls";
stx_fail_ErrorCls.__interfaces__ = [stx_fail_ErrorApi];
stx_fail_ErrorCls.prototype = {
	pos: null
	,get_pos: null
	,next: null
	,get_next: null
	,data: null
	,get_data: null
	,get_stack: null
	,toError: function() {
		return this;
	}
	,concat: function(that) {
		var lhs = this.toError();
		var rhs = that.toError();
		var _g = stx_fail_Error.is_unit(lhs);
		var _g1 = stx_fail_Error.is_unit(rhs);
		if(_g) {
			if(_g1) {
				return lhs;
			} else {
				return rhs;
			}
		} else if(_g1) {
			return lhs;
		} else {
			return new stx_fail_term_ErrorConcat(haxe_ds_Option.Some(lhs),haxe_ds_Option.Some(rhs)).toError();
		}
	}
	,toString: function() {
		var f = function(x) {
			var self = stx_pico_OptionLift.map(x.get_data(),function(x) {
				return " (" + Std.string(x) + ")";
			});
			var data;
			if(self._hx_index == 0) {
				var v = self.v;
				data = v;
			} else {
				data = "";
			}
			var pos = stx_pico_OptionLift.map(stx_pico_OptionLift.map(x.get_pos(),function(x) {
				return stx_PosLift.toString(x);
			}),function(x) {
				return " at " + x;
			});
			var self = stx_pico_OptionLift.map(x.get_stack(),function(x) {
				return "\n" + (x == null ? "null" : haxe_CallStack.toString(x));
			});
			var stack;
			if(self._hx_index == 0) {
				var v = self.v;
				stack = v;
			} else {
				stack = "";
			}
			return "Error" + data + (pos == null ? "null" : stx_pico_Option.toString(pos)) + stack;
		};
		var arr = [];
		var x = this.iterator();
		while(x.hasNext()) {
			var x1 = x.next();
			arr.push(f(x1));
		}
		return arr.join("\n");
	}
	,iterator: function() {
		var self = haxe_ds_Option.Some(this.toError());
		return { hasNext : function() {
			return self != haxe_ds_Option.None;
		}, next : function() {
			var data = self;
			self = stx_pico_OptionLift.flat_map(self,function(x) {
				return x.get_next();
			});
			switch(data._hx_index) {
			case 0:
				var v = data.v;
				return v;
			case 1:
				return null;
			}
		}};
	}
	,crack: function() {
		var _g = this.get_data();
		if(_g._hx_index == 0) {
			var x = _g.v;
			throw haxe_Exception.thrown(x);
		} else {
			throw haxe_Exception.thrown("ERROR");
		}
	}
	,is_defined: function() {
		var _g = this.get_data();
		if(_g._hx_index == 0) {
			var v = _g.v;
			return true;
		} else {
			var _g = stx_pico_OptionLift.map(this.get_next(),function(x) {
				return x.is_defined();
			});
			if(_g._hx_index == 0) {
				var b = _g.v;
				return b;
			} else {
				return false;
			}
		}
	}
	,elide: function() {
		return this.toError();
	}
	,__class__: stx_fail_ErrorCls
};
function stx_fail_Error_map(self,fn) {
	if(self._hx_index == 0) {
		var tI = self.v;
		return haxe_ds_Option.Some(fn(tI));
	} else {
		return haxe_ds_Option.None;
	}
}
function stx_fail_Error_flat_map(self,fn) {
	if(self._hx_index == 0) {
		var n = self.v;
		return fn(n);
	} else {
		return haxe_ds_Option.None;
	}
}
var stx_fail_LogFailure = $hxEnums["stx.fail.LogFailure"] = { __ename__:"stx.fail.LogFailure",__constructs__:null
	,E_Log: ($_=function(explanation) { return {_hx_index:0,explanation:explanation,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log",$_.__params__ = ["explanation"],$_)
	,E_Log_UnderLogLevel: {_hx_name:"E_Log_UnderLogLevel",_hx_index:1,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_SourceNotInPackage: ($_=function(source,dir) { return {_hx_index:2,source:source,dir:dir,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_SourceNotInPackage",$_.__params__ = ["source","dir"],$_)
	,E_Log_NotLine: ($_=function(n) { return {_hx_index:3,n:n,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotLine",$_.__params__ = ["n"],$_)
	,E_Log_NotOfRange: ($_=function(l,r) { return {_hx_index:4,l:l,r:r,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotOfRange",$_.__params__ = ["l","r"],$_)
	,E_Log_NotInMethod: ($_=function(str) { return {_hx_index:5,str:str,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_NotInMethod",$_.__params__ = ["str"],$_)
	,E_Log_DoesNotContainTag: ($_=function(tag) { return {_hx_index:6,tag:tag,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_DoesNotContainTag",$_.__params__ = ["tag"],$_)
	,E_Log_Not: {_hx_name:"E_Log_Not",_hx_index:7,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_LosesRace: {_hx_name:"E_Log_LosesRace",_hx_index:8,__enum__:"stx.fail.LogFailure",toString:$estr}
	,E_Log_Default: ($_=function(data) { return {_hx_index:9,data:data,__enum__:"stx.fail.LogFailure",toString:$estr}; },$_._hx_name="E_Log_Default",$_.__params__ = ["data"],$_)
	,E_Log_Zero: {_hx_name:"E_Log_Zero",_hx_index:10,__enum__:"stx.fail.LogFailure",toString:$estr}
};
stx_fail_LogFailure.__constructs__ = [stx_fail_LogFailure.E_Log,stx_fail_LogFailure.E_Log_UnderLogLevel,stx_fail_LogFailure.E_Log_SourceNotInPackage,stx_fail_LogFailure.E_Log_NotLine,stx_fail_LogFailure.E_Log_NotOfRange,stx_fail_LogFailure.E_Log_NotInMethod,stx_fail_LogFailure.E_Log_DoesNotContainTag,stx_fail_LogFailure.E_Log_Not,stx_fail_LogFailure.E_Log_LosesRace,stx_fail_LogFailure.E_Log_Default,stx_fail_LogFailure.E_Log_Zero];
var stx_fail_OMFailureSum = $hxEnums["stx.fail.OMFailureSum"] = { __ename__:"stx.fail.OMFailureSum",__constructs__:null
	,E_OM_KeyNotFound: ($_=function(str) { return {_hx_index:0,str:str,__enum__:"stx.fail.OMFailureSum",toString:$estr}; },$_._hx_name="E_OM_KeyNotFound",$_.__params__ = ["str"],$_)
	,E_OM_UnexpectedEmpty: {_hx_name:"E_OM_UnexpectedEmpty",_hx_index:1,__enum__:"stx.fail.OMFailureSum",toString:$estr}
	,E_OM_UnmatchedValueType: ($_=function(type) { return {_hx_index:2,type:type,__enum__:"stx.fail.OMFailureSum",toString:$estr}; },$_._hx_name="E_OM_UnmatchedValueType",$_.__params__ = ["type"],$_)
	,E_OM_UnexpectedKey: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"stx.fail.OMFailureSum",toString:$estr}; },$_._hx_name="E_OM_UnexpectedKey",$_.__params__ = ["str"],$_)
	,E_OM_NotFound: {_hx_name:"E_OM_NotFound",_hx_index:4,__enum__:"stx.fail.OMFailureSum",toString:$estr}
};
stx_fail_OMFailureSum.__constructs__ = [stx_fail_OMFailureSum.E_OM_KeyNotFound,stx_fail_OMFailureSum.E_OM_UnexpectedEmpty,stx_fail_OMFailureSum.E_OM_UnmatchedValueType,stx_fail_OMFailureSum.E_OM_UnexpectedKey,stx_fail_OMFailureSum.E_OM_NotFound];
var stx_fail_OMFailure = {};
stx_fail_OMFailure._new = function(self) {
	return self;
};
stx_fail_OMFailure.lift = function(self) {
	return stx_fail_OMFailure._new(self);
};
stx_fail_OMFailure.prj = function(this1) {
	return this1;
};
stx_fail_OMFailure.get_self = function(this1) {
	return stx_fail_OMFailure.lift(this1);
};
var stx_fail_ParseFailure = {};
stx_fail_ParseFailure._new = function(self) {
	return self;
};
stx_fail_ParseFailure.make = function(idx,msg,fatal,label) {
	return stx_fail_ParseFailure._new({ idx : idx, msg : msg, fatal : fatal, label : label});
};
stx_fail_ParseFailure.tag = function(this1,name) {
	return stx_fail_ParseFailure.make(this1.idx,stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed(name),this1.fatal);
};
stx_fail_ParseFailure.toString = function(this1) {
	return "" + Std.string(this1.msg) + "@" + this1.idx;
};
stx_fail_ParseFailure.toDefect = function(this1) {
	return stx_nano_Defect.pure(this1);
};
stx_fail_ParseFailure.toRefuse = function(this1) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(this1)),haxe_ds_Option.None,null);
};
var stx_fail_ParseFailureCodeSum = $hxEnums["stx.fail.ParseFailureCodeSum"] = { __ename__:"stx.fail.ParseFailureCodeSum",__constructs__:null
	,E_Parse_ParseFailed: ($_=function(detail,pos) { return {_hx_index:0,detail:detail,pos:pos,__enum__:"stx.fail.ParseFailureCodeSum",toString:$estr}; },$_._hx_name="E_Parse_ParseFailed",$_.__params__ = ["detail","pos"],$_)
	,E_Parse_UndefinedParseDelegate: {_hx_name:"E_Parse_UndefinedParseDelegate",_hx_index:1,__enum__:"stx.fail.ParseFailureCodeSum",toString:$estr}
	,E_Parse_Eof: {_hx_name:"E_Parse_Eof",_hx_index:2,__enum__:"stx.fail.ParseFailureCodeSum",toString:$estr}
	,E_Parse_NotEof: {_hx_name:"E_Parse_NotEof",_hx_index:3,__enum__:"stx.fail.ParseFailureCodeSum",toString:$estr}
};
stx_fail_ParseFailureCodeSum.__constructs__ = [stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed,stx_fail_ParseFailureCodeSum.E_Parse_UndefinedParseDelegate,stx_fail_ParseFailureCodeSum.E_Parse_Eof,stx_fail_ParseFailureCodeSum.E_Parse_NotEof];
var stx_fail_ParseFailureCode = {};
stx_fail_ParseFailureCode._new = function(self) {
	return self;
};
stx_fail_ParseFailureCode.lift = function(self) {
	return stx_fail_ParseFailureCode._new(self);
};
stx_fail_ParseFailureCode.prj = function(this1) {
	return this1;
};
stx_fail_ParseFailureCode.get_self = function(this1) {
	return stx_fail_ParseFailureCode.lift(this1);
};
stx_fail_ParseFailureCode.fromString = function(self) {
	return stx_fail_ParseFailureCode.lift(stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed(self));
};
var stx_fail_PmlFailureSum = $hxEnums["stx.fail.PmlFailureSum"] = { __ename__:"stx.fail.PmlFailureSum",__constructs__:null
	,E_Pml_Nada: {_hx_name:"E_Pml_Nada",_hx_index:0,__enum__:"stx.fail.PmlFailureSum",toString:$estr}
	,E_Pml_Empty: {_hx_name:"E_Pml_Empty",_hx_index:1,__enum__:"stx.fail.PmlFailureSum",toString:$estr}
	,E_Pml_Parse: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"stx.fail.PmlFailureSum",toString:$estr}; },$_._hx_name="E_Pml_Parse",$_.__params__ = ["f"],$_)
};
stx_fail_PmlFailureSum.__constructs__ = [stx_fail_PmlFailureSum.E_Pml_Nada,stx_fail_PmlFailureSum.E_Pml_Empty,stx_fail_PmlFailureSum.E_Pml_Parse];
var stx_fail_PmlFailure = {};
stx_fail_PmlFailure._new = function(self) {
	return self;
};
stx_fail_PmlFailure.lift = function(self) {
	return stx_fail_PmlFailure._new(self);
};
stx_fail_PmlFailure.prj = function(this1) {
	return this1;
};
stx_fail_PmlFailure.get_self = function(this1) {
	return stx_fail_PmlFailure.lift(this1);
};
var stx_fail_RefuseLift = function() { };
$hxClasses["stx.fail.RefuseLift"] = stx_fail_RefuseLift;
stx_fail_RefuseLift.__name__ = "stx.fail.RefuseLift";
stx_fail_RefuseLift.usher = function(self,fn) {
	return fn(self.get_data());
};
stx_fail_RefuseLift.report = function(self) {
	return stx_nano_Report.conf(self);
};
var stx_fail_Refuse = {};
stx_fail_Refuse._new = function(self) {
	return self;
};
stx_fail_Refuse.lift = function(self) {
	return stx_fail_Refuse._new(self);
};
stx_fail_Refuse.unit = function() {
	return stx_fail_Refuse.lift(new stx_fail_term_Unit());
};
stx_fail_Refuse.make = function(data,next,pos) {
	return stx_fail_Refuse.lift(new stx_fail_term_Base(data,next,pos));
};
stx_fail_Refuse.pure = function(v) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(v)),haxe_ds_Option.None,haxe_ds_Option.None);
};
stx_fail_Refuse.prj = function(this1) {
	return this1;
};
stx_fail_Refuse.get_self = function(this1) {
	return stx_fail_Refuse.lift(this1);
};
stx_fail_Refuse.fromErrorApi = function(self) {
	return stx_fail_Refuse.lift(self);
};
stx_fail_Refuse.errate = function(this1,fn) {
	var fn1 = fn;
	return new stx_fail_term_MapAnon(this1,function(self) {
		return stx_fail_Decline._.map(self,fn1);
	}).toError();
};
stx_fail_Refuse.catcher = function(self) {
	var _enum = Type.getEnum(stx_fail_DeclineSum.EXTERNAL(null));
	var _g = self.get_data();
	if(_g._hx_index == 0) {
		var x = _g.v;
		var _g = Type.typeof(x);
		if(_g._hx_index == 7) {
			var e = _g.e;
			var x = e;
			if(x == _enum) {
				return haxe_ds_Either.Right(stx_fail_Refuse.lift(self));
			} else {
				return haxe_ds_Either.Left(self.elide());
			}
		} else {
			return haxe_ds_Either.Left(self.elide());
		}
	} else {
		return haxe_ds_Either.Left(self.elide());
	}
};
stx_fail_Refuse.concat = function(this1,that) {
	return stx_fail_Refuse.lift(this1.concat(that));
};
var stx_fail_ShowFailureSum = $hxEnums["stx.fail.ShowFailureSum"] = { __ename__:"stx.fail.ShowFailureSum",__constructs__:null
	,E_Show_DoesNotSupportLayout: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"stx.fail.ShowFailureSum",toString:$estr}; },$_._hx_name="E_Show_DoesNotSupportLayout",$_.__params__ = ["c"],$_)
	,E_Show_Escaped: {_hx_name:"E_Show_Escaped",_hx_index:1,__enum__:"stx.fail.ShowFailureSum",toString:$estr}
};
stx_fail_ShowFailureSum.__constructs__ = [stx_fail_ShowFailureSum.E_Show_DoesNotSupportLayout,stx_fail_ShowFailureSum.E_Show_Escaped];
var stx_fail_ShowFailureLift = function() { };
$hxClasses["stx.fail.ShowFailureLift"] = stx_fail_ShowFailureLift;
stx_fail_ShowFailureLift.__name__ = "stx.fail.ShowFailureLift";
stx_fail_ShowFailureLift.lift = function(self) {
	return self;
};
var stx_fail_ShowFailure = {};
stx_fail_ShowFailure._new = function(self) {
	return self;
};
stx_fail_ShowFailure.lift = function(self) {
	return self;
};
stx_fail_ShowFailure.prj = function(this1) {
	return this1;
};
stx_fail_ShowFailure.get_self = function(this1) {
	return this1;
};
var stx_fail_TestFailureSum = $hxEnums["stx.fail.TestFailureSum"] = { __ename__:"stx.fail.TestFailureSum",__constructs__:null
	,E_Test_AutoRequiresIndecesDecl: {_hx_name:"E_Test_AutoRequiresIndecesDecl",_hx_index:0,__enum__:"stx.fail.TestFailureSum",toString:$estr}
	,E_Test_AutoMalformed: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_AutoMalformed",$_.__params__ = ["v"],$_)
	,E_Test_AutoClassNotFound: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_AutoClassNotFound",$_.__params__ = ["name"],$_)
	,E_Test_AutoFieldNotFound: ($_=function(name) { return {_hx_index:3,name:name,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_AutoFieldNotFound",$_.__params__ = ["name"],$_)
	,E_Test_ClassNotInIndeces: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_ClassNotInIndeces",$_.__params__ = ["name"],$_)
	,E_Test_ReaderFailure: ($_=function(e,s) { return {_hx_index:5,e:e,s:s,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_ReaderFailure",$_.__params__ = ["e","s"],$_)
	,E_Test_NoIndeces: {_hx_name:"E_Test_NoIndeces",_hx_index:6,__enum__:"stx.fail.TestFailureSum",toString:$estr}
	,E_Test_BadSpec: {_hx_name:"E_Test_BadSpec",_hx_index:7,__enum__:"stx.fail.TestFailureSum",toString:$estr}
	,E_Test_ParseFailure: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_ParseFailure",$_.__params__ = ["f"],$_)
	,E_Test_Assertion: ($_=function(assertion) { return {_hx_index:9,assertion:assertion,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_Assertion",$_.__params__ = ["assertion"],$_)
	,NullTestFailure: {_hx_name:"NullTestFailure",_hx_index:10,__enum__:"stx.fail.TestFailureSum",toString:$estr}
	,WhileAsserting: ($_=function(description,failure) { return {_hx_index:11,description:description,failure:failure,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="WhileAsserting",$_.__params__ = ["description","failure"],$_)
	,TestFailedBecause: ($_=function(str) { return {_hx_index:12,str:str,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="TestFailedBecause",$_.__params__ = ["str"],$_)
	,TestTimedOut: ($_=function(after) { return {_hx_index:13,after:after,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="TestTimedOut",$_.__params__ = ["after"],$_)
	,NoTestNamed: ($_=function(name) { return {_hx_index:14,name:name,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="NoTestNamed",$_.__params__ = ["name"],$_)
	,E_Test_Exception: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_Exception",$_.__params__ = ["e"],$_)
	,E_Test_Refuse: ($_=function(err) { return {_hx_index:16,err:err,__enum__:"stx.fail.TestFailureSum",toString:$estr}; },$_._hx_name="E_Test_Refuse",$_.__params__ = ["err"],$_)
};
stx_fail_TestFailureSum.__constructs__ = [stx_fail_TestFailureSum.E_Test_AutoRequiresIndecesDecl,stx_fail_TestFailureSum.E_Test_AutoMalformed,stx_fail_TestFailureSum.E_Test_AutoClassNotFound,stx_fail_TestFailureSum.E_Test_AutoFieldNotFound,stx_fail_TestFailureSum.E_Test_ClassNotInIndeces,stx_fail_TestFailureSum.E_Test_ReaderFailure,stx_fail_TestFailureSum.E_Test_NoIndeces,stx_fail_TestFailureSum.E_Test_BadSpec,stx_fail_TestFailureSum.E_Test_ParseFailure,stx_fail_TestFailureSum.E_Test_Assertion,stx_fail_TestFailureSum.NullTestFailure,stx_fail_TestFailureSum.WhileAsserting,stx_fail_TestFailureSum.TestFailedBecause,stx_fail_TestFailureSum.TestTimedOut,stx_fail_TestFailureSum.NoTestNamed,stx_fail_TestFailureSum.E_Test_Exception,stx_fail_TestFailureSum.E_Test_Refuse];
var stx_fail_TestFailure = {};
stx_fail_TestFailure._new = function(self) {
	return self;
};
stx_fail_TestFailure.lift = function(self) {
	return stx_fail_TestFailure._new(self);
};
stx_fail_TestFailure.prj = function(this1) {
	return this1;
};
stx_fail_TestFailure.get_self = function(this1) {
	return stx_fail_TestFailure.lift(this1);
};
stx_fail_TestFailure.toString = function(this1) {
	switch(this1._hx_index) {
	case 15:
		var e = this1.e;
		return e.toString();
	case 16:
		var e = this1.err;
		return e.toString();
	default:
		return Std.string(this1);
	}
};
stx_fail_TestFailure.get_stack = function(this1) {
	switch(this1._hx_index) {
	case 15:
		var e = this1.e;
		return haxe_ds_Option.Some(e.get_stack());
	case 16:
		var e = this1.err;
		return e.get_stack();
	default:
		return haxe_ds_Option.None;
	}
};
stx_fail_TestFailure.fromParseFailure = function(pf) {
	return stx_fail_TestFailure.lift(stx_fail_TestFailureSum.E_Test_ParseFailure(pf));
};
var stx_fail_term_Base = function(data,next,pos) {
	this.data = data;
	this.next = next;
	this.pos = pos;
};
$hxClasses["stx.fail.term.Base"] = stx_fail_term_Base;
stx_fail_term_Base.__name__ = "stx.fail.term.Base";
stx_fail_term_Base.__super__ = stx_fail_ErrorCls;
stx_fail_term_Base.prototype = $extend(stx_fail_ErrorCls.prototype,{
	get_pos: function() {
		return this.pos;
	}
	,get_next: function() {
		return this.next;
	}
	,get_data: function() {
		return this.data;
	}
	,get_stack: function() {
		return haxe_ds_Option.None;
	}
	,__class__: stx_fail_term_Base
});
var stx_fail_term_Caught = function(data,next,pos,exception) {
	stx_fail_term_Base.call(this,data,next,pos);
	this.exception = exception;
};
$hxClasses["stx.fail.term.Caught"] = stx_fail_term_Caught;
stx_fail_term_Caught.__name__ = "stx.fail.term.Caught";
stx_fail_term_Caught.__super__ = stx_fail_term_Base;
stx_fail_term_Caught.prototype = $extend(stx_fail_term_Base.prototype,{
	exception: null
	,get_stack: function() {
		return haxe_ds_Option.Some(this.exception.get_stack());
	}
	,__class__: stx_fail_term_Caught
});
var stx_fail_term_Errata = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.fail.term.Errata"] = stx_fail_term_Errata;
stx_fail_term_Errata.__name__ = "stx.fail.term.Errata";
stx_fail_term_Errata.__super__ = stx_fail_ErrorCls;
stx_fail_term_Errata.prototype = $extend(stx_fail_ErrorCls.prototype,{
	delegate: null
	,errata: null
	,get_pos: function() {
		return this.delegate.get_pos();
	}
	,get_next: function() {
		var _gthis = this;
		return stx_pico_OptionLift.map(this.delegate.get_next(),function(next) {
			return new stx_fail_term_ErrataAnon(next,$bind(_gthis,_gthis.errata)).toError();
		});
	}
	,get_data: function() {
		return this.errata(this.delegate).get_data();
	}
	,get_stack: function() {
		return this.errata(this.delegate).get_stack();
	}
	,__class__: stx_fail_term_Errata
});
function stx_fail_term_Errata_map(self,fn) {
	if(self._hx_index == 0) {
		var tI = self.v;
		return haxe_ds_Option.Some(fn(tI));
	} else {
		return haxe_ds_Option.None;
	}
}
var stx_fail_term_ErrataAnon = function(delegate,_errata) {
	stx_fail_term_Errata.call(this,delegate);
	this._errata = _errata;
};
$hxClasses["stx.fail.term.ErrataAnon"] = stx_fail_term_ErrataAnon;
stx_fail_term_ErrataAnon.__name__ = "stx.fail.term.ErrataAnon";
stx_fail_term_ErrataAnon.__super__ = stx_fail_term_Errata;
stx_fail_term_ErrataAnon.prototype = $extend(stx_fail_term_Errata.prototype,{
	_errata: null
	,errata: function(e) {
		return this._errata(e);
	}
	,__class__: stx_fail_term_ErrataAnon
});
var stx_fail_term_ErrorConcat = function(lhs,rhs) {
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["stx.fail.term.ErrorConcat"] = stx_fail_term_ErrorConcat;
stx_fail_term_ErrorConcat.__name__ = "stx.fail.term.ErrorConcat";
stx_fail_term_ErrorConcat.__super__ = stx_fail_ErrorCls;
stx_fail_term_ErrorConcat.prototype = $extend(stx_fail_ErrorCls.prototype,{
	lhs: null
	,rhs: null
	,get_next: function() {
		var _gthis = this;
		return stx_pico_OptionLift.or(stx_pico_OptionLift.map(stx_pico_OptionLift.flat_map(this.lhs,function(x) {
			return x.get_next();
		}),function(x) {
			return new stx_fail_term_ErrorConcat(stx_pico_Option.fromNullT(x),_gthis.rhs).toError();
		}),function() {
			return _gthis.rhs;
		});
	}
	,get_data: function() {
		return stx_pico_OptionLift.flat_map(this.lhs,function(x) {
			return x.get_data();
		});
	}
	,get_pos: function() {
		return stx_pico_OptionLift.flat_map(this.lhs,function(x) {
			return x.get_pos();
		});
	}
	,get_stack: function() {
		return stx_pico_OptionLift.flat_map(this.lhs,function(x) {
			return x.get_stack();
		});
	}
	,__class__: stx_fail_term_ErrorConcat
});
function stx_fail_term_ErrorConcat_flat_map(self,fn) {
	if(self._hx_index == 0) {
		var n = self.v;
		return fn(n);
	} else {
		return haxe_ds_Option.None;
	}
}
var stx_fail_term_ErrorRemote = function(delegate,pos) {
	this.delegate = delegate;
	this.data = haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(delegate.next()));
	this.pos = pos;
};
$hxClasses["stx.fail.term.ErrorRemote"] = stx_fail_term_ErrorRemote;
stx_fail_term_ErrorRemote.__name__ = "stx.fail.term.ErrorRemote";
stx_fail_term_ErrorRemote.__super__ = stx_fail_ErrorCls;
stx_fail_term_ErrorRemote.prototype = $extend(stx_fail_ErrorCls.prototype,{
	delegate: null
	,get_pos: function() {
		return this.pos;
	}
	,get_next: function() {
		if(this.delegate.hasNext()) {
			return haxe_ds_Option.Some(new stx_fail_term_ErrorRemote(this.delegate,this.get_pos()).toError());
		} else {
			return haxe_ds_Option.None;
		}
	}
	,get_data: function() {
		return this.data;
	}
	,get_stack: function() {
		return haxe_ds_Option.None;
	}
	,__class__: stx_fail_term_ErrorRemote
});
var stx_fail_term_Map = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.fail.term.Map"] = stx_fail_term_Map;
stx_fail_term_Map.__name__ = "stx.fail.term.Map";
stx_fail_term_Map.__super__ = stx_fail_ErrorCls;
stx_fail_term_Map.prototype = $extend(stx_fail_ErrorCls.prototype,{
	delegate: null
	,map: null
	,get_pos: function() {
		return this.delegate.get_pos();
	}
	,get_next: function() {
		var _gthis = this;
		return stx_pico_OptionLift.map(this.delegate.get_next(),function(x) {
			return new stx_fail_term_MapAnon(x,$bind(_gthis,_gthis.map)).toError();
		});
	}
	,get_data: function() {
		var _gthis = this;
		return stx_pico_OptionLift.map(this.delegate.get_data(),function(x) {
			return _gthis.map(x);
		});
	}
	,get_stack: function() {
		return this.delegate.get_stack();
	}
	,__class__: stx_fail_term_Map
});
function stx_fail_term_Map_map(self,fn) {
	if(self._hx_index == 0) {
		var tI = self.v;
		return haxe_ds_Option.Some(fn(tI));
	} else {
		return haxe_ds_Option.None;
	}
}
var stx_fail_term_MapAnon = function(delegate,_map) {
	stx_fail_term_Map.call(this,delegate);
	this._map = _map;
};
$hxClasses["stx.fail.term.MapAnon"] = stx_fail_term_MapAnon;
stx_fail_term_MapAnon.__name__ = "stx.fail.term.MapAnon";
stx_fail_term_MapAnon.__super__ = stx_fail_term_Map;
stx_fail_term_MapAnon.prototype = $extend(stx_fail_term_Map.prototype,{
	_map: null
	,map: function(e) {
		return this._map(e);
	}
	,__class__: stx_fail_term_MapAnon
});
function stx_fail_term_MapAnon_map(self,fn) {
	if(self._hx_index == 0) {
		var tI = self.v;
		return haxe_ds_Option.Some(fn(tI));
	} else {
		return haxe_ds_Option.None;
	}
}
var stx_fail_term_Unit = function() {
};
$hxClasses["stx.fail.term.Unit"] = stx_fail_term_Unit;
stx_fail_term_Unit.__name__ = "stx.fail.term.Unit";
stx_fail_term_Unit.__super__ = stx_fail_ErrorCls;
stx_fail_term_Unit.prototype = $extend(stx_fail_ErrorCls.prototype,{
	get_pos: function() {
		return haxe_ds_Option.None;
	}
	,get_next: function() {
		return haxe_ds_Option.None;
	}
	,get_data: function() {
		return haxe_ds_Option.None;
	}
	,get_stack: function() {
		return haxe_ds_Option.None;
	}
	,__class__: stx_fail_term_Unit
});
var stx_fn_BinaryLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.BinaryLift"] = stx_fn_BinaryLift;
stx_fn_BinaryLift.__name__ = "stx.fn.BinaryLift";
stx_fn_BinaryLift.then = function(self,that) {
	return function(pI,pII) {
		return that(self(pI,pII));
	};
};
stx_fn_BinaryLift.braid = function(self,pI,pII) {
	return self(pI,pII);
};
stx_fn_BinaryLift.rotate = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.swap = function(self) {
	return function(pII,pI) {
		return self(pI,pII);
	};
};
stx_fn_BinaryLift.curry = function(self) {
	return function(pI) {
		return function(pII) {
			return self(pI,pII);
		};
	};
};
stx_fn_BinaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_BinaryLift.bindPi = function(self,pI) {
	var fn = self;
	var _g = fn;
	var a1 = pI;
	return function(a2) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.bindPii = function(pII,self) {
	var fn = self;
	var _g = fn;
	var a2 = pII;
	return function(a1) {
		return _g(a1,a2);
	};
};
stx_fn_BinaryLift.cache = function(self,pI,pII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_BinaryLift.pipe = function(self,tp) {
	return function() {
		return stx_nano_CoupleLift.decouple(tp(),self);
	};
};
stx_fn_BinaryLift.encouple = function(self) {
	return function(tp) {
		return stx_nano_CoupleLift.decouple(tp,self);
	};
};
stx_fn_BinaryLift.__super__ = stx_pico_Clazz;
stx_fn_BinaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_BinaryLift
});
var stx_fn_Binary = {};
stx_fn_Binary._new = function(self) {
	return self;
};
stx_fn_Binary.prj = function(this1) {
	return this1;
};
var stx_fn_BlockLift = function() { };
$hxClasses["stx.fn.BlockLift"] = stx_fn_BlockLift;
stx_fn_BlockLift.__name__ = "stx.fn.BlockLift";
stx_fn_BlockLift.returning = function(self,r) {
	return function() {
		self();
		return r;
	};
};
stx_fn_BlockLift.equals = function(self,that) {
	return self == that;
};
stx_fn_BlockLift.promote = function(f) {
	return function(p) {
		f();
	};
};
stx_fn_BlockLift.then = function(self,that) {
	return function() {
		self();
		that();
	};
};
stx_fn_BlockLift.enact = function(self) {
	self();
};
var stx_fn_Block = {};
stx_fn_Block._new = function(self) {
	return self;
};
stx_fn_Block.unit = function() {
	return function() {
	};
};
stx_fn_Block.pure = function(fn) {
	return fn;
};
stx_fn_Block.lift = function(fn) {
	return stx_fn_Block._new(fn);
};
var stx_fn_DualLift = function() { };
$hxClasses["stx.fn.DualLift"] = stx_fn_DualLift;
stx_fn_DualLift.__name__ = "stx.fn.DualLift";
stx_fn_DualLift.then = function(self,then) {
	return stx_fn_Unary._.then(stx_fn_Dual.toUnary(self),then);
};
stx_fn_DualLift.into = function(self,fn) {
	return stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn));
};
stx_fn_DualLift.pass = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,fn)));
};
stx_fn_DualLift.first = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.first(fn)));
};
stx_fn_DualLift.second = function(self,fn) {
	return stx_fn_Dual.fromUnary(stx_fn_DualLift.then(self,stx_fn_UnaryLift.second(fn)));
};
var stx_fn_Dual = {};
stx_fn_Dual.unit = function() {
	return stx_fn_Dual._new(function(tp) {
		return tp;
	});
};
stx_fn_Dual._new = function(self) {
	return self;
};
stx_fn_Dual.fromUnary = function(self) {
	return stx_fn_Dual._new(self);
};
stx_fn_Dual.toUnary = function(this1) {
	return this1;
};
var stx_fn_FSum = $hxEnums["stx.fn.FSum"] = { __ename__:"stx.fn.FSum",__constructs__:null
	,F0X: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F0X",$_.__params__ = ["f"],$_)
	,F1X: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F1X",$_.__params__ = ["f"],$_)
	,F1R: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"stx.fn.FSum",toString:$estr}; },$_._hx_name="F1R",$_.__params__ = ["f"],$_)
};
stx_fn_FSum.__constructs__ = [stx_fn_FSum.F0X,stx_fn_FSum.F1X,stx_fn_FSum.F1R];
var stx_fn_F = {};
stx_fn_F._new = function(self) {
	return self;
};
stx_fn_F.lift = function(self) {
	return stx_fn_F._new(self);
};
stx_fn_F.unit = function() {
	return stx_fn_F.lift(stx_fn_FSum.F1X(function(x) {
	}));
};
stx_fn_F.fromF0X = function(fn) {
	return stx_fn_F._new(stx_fn_FSum.F0X(fn));
};
stx_fn_F.fromF1X = function(fn) {
	return stx_fn_F.lift(stx_fn_FSum.F1X(fn));
};
stx_fn_F.fromF1R = function(fn) {
	return stx_fn_F.lift(stx_fn_FSum.F1R(fn));
};
stx_fn_F.toUnary = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var f = this1.f;
		return function(_) {
			f();
			return 0;
		};
	case 1:
		var f1 = this1.f;
		return function(x) {
			f1(x);
			return 0;
		};
	case 2:
		var f2 = this1.f;
		return function(x) {
			return f2(x);
		};
	}
};
stx_fn_F.prj = function(this1) {
	return this1;
};
stx_fn_F.get_self = function(this1) {
	return stx_fn_F.lift(this1);
};
stx_fn_F.apply = function(this1,pi) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var f = this1.f;
		tmp = function(_) {
			f();
			return 0;
		};
		break;
	case 1:
		var f1 = this1.f;
		tmp = function(x) {
			f1(x);
			return 0;
		};
		break;
	case 2:
		var f2 = this1.f;
		tmp = function(x) {
			return f2(x);
		};
		break;
	}
	return tmp(pi);
};
var stx_fn_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.Module"] = stx_fn_Module;
stx_fn_Module.__name__ = "stx.fn.Module";
stx_fn_Module.__super__ = stx_pico_Clazz;
stx_fn_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	_1R: function(fn) {
		return fn;
	}
	,sink: function(fn) {
		return fn;
	}
	,__class__: stx_fn_Module
});
var stx_fn_Perhaps = {};
stx_fn_Perhaps._new = function(self) {
	return self;
};
var stx_fn_Pick = {};
stx_fn_Pick._new = function(self) {
	return self;
};
stx_fn_Pick.leftPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return fn(v);
		case 1:
			var v = e.v;
			return haxe_ds_Either.Right(v);
		}
	};
};
stx_fn_Pick.rightPickToSwitch = function(fn) {
	return function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			return haxe_ds_Either.Left(v);
		case 1:
			var v = e.v;
			return fn(v);
		}
	};
};
var stx_fn_SinkLift = function() { };
$hxClasses["stx.fn.SinkLift"] = stx_fn_SinkLift;
stx_fn_SinkLift.__name__ = "stx.fn.SinkLift";
stx_fn_SinkLift.then = function(self,that) {
	return function(p) {
		self(p);
		that(p);
	};
};
stx_fn_SinkLift.bind = function(self,p) {
	return stx_fn_Block.lift(stx_fn_SinkLift.bind(self,p));
};
stx_fn_SinkLift.returns = function(self,r) {
	return function(p) {
		self(p);
		return r;
	};
};
stx_fn_SinkLift.promote = function(self) {
	return function(p) {
		self(p);
		return p;
	};
};
stx_fn_SinkLift.compose = function(self,fn) {
	return function(pI) {
		self(fn(pI));
	};
};
var stx_fn_Sink = {};
stx_fn_Sink._new = function(self) {
	return self;
};
stx_fn_Sink.unit = function() {
	return function(p) {
	};
};
stx_fn_Sink.lift = function(fn) {
	return fn;
};
stx_fn_Sink.toTinkCallback = function(this1) {
	return this1;
};
stx_fn_Sink.stage = function(this1,before,after) {
	if(before == null) {
		before = function(_) {
		};
	}
	if(after == null) {
		after = function(_) {
		};
	}
	return function(p) {
		before(p);
		this1(p);
		after(p);
	};
};
stx_fn_Sink.prj = function(this1) {
	return this1;
};
var stx_fn_Switch = {};
stx_fn_Switch._new = function(self) {
	return self;
};
var stx_fn_TernaryLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.TernaryLift"] = stx_fn_TernaryLift;
stx_fn_TernaryLift.__name__ = "stx.fn.TernaryLift";
stx_fn_TernaryLift.rotate = function(f) {
	return function(pII,pIII,pI) {
		return f(pI,pII,pIII);
	};
};
stx_fn_TernaryLift.curry = function(f) {
	return function(pI) {
		return function(pII) {
			return function(pIII) {
				return f(pI,pII,pIII);
			};
		};
	};
};
stx_fn_TernaryLift.cache = function(self,pI,pII,pIII) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI,pII,pIII);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_TernaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_TernaryLift.__super__ = stx_pico_Clazz;
stx_fn_TernaryLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_TernaryLift
});
var stx_fn_Ternary = {};
stx_fn_Ternary._new = function(self) {
	return self;
};
var stx_fn_ThunkLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.fn.ThunkLift"] = stx_fn_ThunkLift;
stx_fn_ThunkLift.__name__ = "stx.fn.ThunkLift";
stx_fn_ThunkLift.reply = function(self) {
	return self();
};
stx_fn_ThunkLift.cache = function(self) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self();
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_ThunkLift.promote = function(self) {
	return function(p) {
		return self();
	};
};
stx_fn_ThunkLift.stage = function(f,before,after) {
	var state = before();
	var result = f();
	after(state);
	return result;
};
stx_fn_ThunkLift.equals = function(that,self) {
	return self == that;
};
stx_fn_ThunkLift.then = function(that,self) {
	return function() {
		return that(self());
	};
};
stx_fn_ThunkLift.__super__ = stx_pico_Clazz;
stx_fn_ThunkLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_fn_ThunkLift
});
var stx_fn_Thunk = {};
stx_fn_Thunk.lift = function(thk) {
	return thk;
};
stx_fn_Thunk._new = function(self) {
	return self;
};
stx_fn_Thunk.then = function(this1,that) {
	return stx_fn_Thunk._.then(that,this1);
};
stx_fn_Thunk.cache = function(this1) {
	return stx_fn_Thunk._.cache(this1);
};
stx_fn_Thunk.prj = function(this1) {
	return this1;
};
var stx_fn_UnaryLift = function() { };
$hxClasses["stx.fn.UnaryLift"] = stx_fn_UnaryLift;
stx_fn_UnaryLift.__name__ = "stx.fn.UnaryLift";
stx_fn_UnaryLift.apply = function(self,pI) {
	return self(pI);
};
stx_fn_UnaryLift.cache = function(self,pI) {
	var r = null;
	return function() {
		if(r == null) {
			r = false;
			r = self(pI);
			return r;
		} else {
			return r;
		}
	};
};
stx_fn_UnaryLift.pipe = function(self,pI) {
	return function() {
		return self(pI());
	};
};
stx_fn_UnaryLift.equals = function(self,that) {
	return self == that;
};
stx_fn_UnaryLift.then = function(self,that) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.compose = function(that,self) {
	return function(a) {
		return that(self(a));
	};
};
stx_fn_UnaryLift.dual = function(self) {
	return function(t) {
		return stx_nano_CoupleLift.decouple(t,function(l,r) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(l),self(r));
		});
	};
};
stx_fn_UnaryLift.perhaps = function(self) {
	return function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return haxe_ds_Option.Some(self(v));
		case 1:
			return haxe_ds_Option.None;
		}
	};
};
stx_fn_UnaryLift.first = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),stx_nano_CoupleLift.snd(t));
	};
};
stx_fn_UnaryLift.second = function(fn1) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_CoupleLift.fst(t),fn1(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bound = function(bindl,bindr) {
	var out = stx_fn_UnaryLift.then(stx_fn_UnaryLift.split(stx_fn_Unary.unit(),bindl),bindr);
	return out;
};
stx_fn_UnaryLift.broach = function(bindl) {
	return stx_fn_UnaryLift.bound(bindl,function(x) {
		return x;
	});
};
stx_fn_UnaryLift.split = function(self,that) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self(p),that(p));
	};
};
stx_fn_UnaryLift.fan = function(a) {
	return stx_fn_UnaryLift.then(a,function(x) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,x,x);
	});
};
stx_fn_UnaryLift.pair = function(fn1,fn2) {
	return function(t) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn1(stx_nano_CoupleLift.fst(t)),fn2(stx_nano_CoupleLift.snd(t)));
	};
};
stx_fn_UnaryLift.bindI = function(fn,p) {
	var _g = stx_fn_Unary.prj(fn);
	var a1 = p;
	return function() {
		return _g(a1);
	};
};
stx_fn_UnaryLift.sink = function(fn,handler) {
	return function(p) {
		var val = fn(p);
		handler(val);
	};
};
var stx_fn_Unary = {};
stx_fn_Unary._new = function(self) {
	return self;
};
stx_fn_Unary.lift = function(fn) {
	return stx_fn_Unary._new(fn);
};
stx_fn_Unary.unit = function() {
	return stx_fn_Unary.lift(function(x) {
		return x;
	});
};
stx_fn_Unary.pure = function(r) {
	return function(v) {
		return r;
	};
};
stx_fn_Unary.prj = function(this1) {
	return this1;
};
var stx_fn_lift_LiftBroker = function() { };
$hxClasses["stx.fn.lift.LiftBroker"] = stx_fn_lift_LiftBroker;
stx_fn_lift_LiftBroker.__name__ = "stx.fn.lift.LiftBroker";
stx_fn_lift_LiftBroker.broker = function(v,fn) {
	return (fn(function(x) {
		return x;
	}))(v);
};
var stx_fp_ContinuationLift = function() { };
$hxClasses["stx.fp.ContinuationLift"] = stx_fp_ContinuationLift;
stx_fp_ContinuationLift.__name__ = "stx.fp.ContinuationLift";
stx_fp_ContinuationLift.apply = function(self,fn) {
	return self(fn);
};
stx_fp_ContinuationLift.map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return cont(fn(p));
		});
	};
};
stx_fp_ContinuationLift.flat_map = function(self,fn) {
	return function(cont) {
		return self(function(p) {
			return (fn(p))(cont);
		});
	};
};
stx_fp_ContinuationLift.zip_with = function(self,that,fn) {
	return function(cont) {
		return self(function(p) {
			return that(function(pI) {
				return cont(fn(p,pI));
			});
		});
	};
};
stx_fp_ContinuationLift.mod = function(self,g) {
	return function(f) {
		return g(self(f));
	};
};
var stx_fp_Continuation = {};
stx_fp_Continuation.unit = function() {
	return function(fn) {
		return fn(null);
	};
};
stx_fp_Continuation.pure = function(p) {
	return function(fn) {
		return fn(p);
	};
};
stx_fp_Continuation.lift = function(fn) {
	return stx_fp_Continuation._new(fn);
};
stx_fp_Continuation._new = function(self) {
	return self;
};
stx_fp_Continuation.callcc = function(f) {
	return function(k) {
		return (f(function(p) {
			return stx_fp_Continuation.lift(function(_) {
				return k(p);
			});
		}))(k);
	};
};
stx_fp_Continuation.asFunction = function(this1) {
	return this1;
};
stx_fp_Continuation.prj = function(this1) {
	return this1;
};
var stx_fp_Handler = {};
stx_fp_Handler.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_Handler._new = function(self) {
	return self;
};
stx_fp_Handler.handle = function(this1,cb) {
	this1(cb);
};
stx_fp_Handler.callcc = function(f) {
	return function(k) {
		(f(function(p) {
			return stx_fp_Handler.lift(function(_) {
				k(p);
			});
		}))(k);
	};
};
var stx_fp_HandlerLift = function() { };
$hxClasses["stx.fp.HandlerLift"] = stx_fp_HandlerLift;
stx_fp_HandlerLift.__name__ = "stx.fp.HandlerLift";
stx_fp_HandlerLift.lift = function(self) {
	return stx_fp_Handler._new(self);
};
stx_fp_HandlerLift.apply = function(self,fn) {
	stx_fp_ContinuationLift.apply(self,fn);
};
stx_fp_HandlerLift.map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.map(self,fn));
};
stx_fp_HandlerLift.flat_map = function(self,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.flat_map(self,fn));
};
stx_fp_HandlerLift.zip_with = function(self,that,fn) {
	return stx_fp_HandlerLift.lift(stx_fp_ContinuationLift.zip_with(self,that,fn));
};
var stx_fp_LazyStreamTrigger = {};
stx_fp_LazyStreamTrigger._new = function(self) {
	return self;
};
stx_fp_LazyStreamTrigger.lift = function(self) {
	return stx_fp_LazyStreamTrigger._new(self);
};
stx_fp_LazyStreamTrigger.fromFn = function(fn) {
	return { next : fn};
};
stx_fp_LazyStreamTrigger.prj = function(this1) {
	return this1;
};
stx_fp_LazyStreamTrigger.get_self = function(this1) {
	return stx_fp_LazyStreamTrigger.lift(this1);
};
var stx_fp_LazyStreamSum = $hxEnums["stx.fp.LazyStreamSum"] = { __ename__:"stx.fp.LazyStreamSum",__constructs__:null
	,LazyVal: ($_=function(val,next) { return {_hx_index:0,val:val,next:next,__enum__:"stx.fp.LazyStreamSum",toString:$estr}; },$_._hx_name="LazyVal",$_.__params__ = ["val","next"],$_)
};
stx_fp_LazyStreamSum.__constructs__ = [stx_fp_LazyStreamSum.LazyVal];
var stx_fp_LazyStream = {};
stx_fp_LazyStream._new = function(self) {
	return self;
};
stx_fp_LazyStream.lift = function(self) {
	return self;
};
stx_fp_LazyStream.zero = function() {
	return stx_fp_LazyStream.ZERO;
};
stx_fp_LazyStream.fromRec = function(v) {
	var v1 = v;
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_pico_Option.fromNullT(v()),stx_fp_LazyStreamTrigger.fromFn(function() {
		return stx_fp_LazyStream.fromRec(v1);
	})));
};
stx_fp_LazyStream.fromTuple = function(tp) {
	return stx_fp_LazyStream.lift(stx_fp_LazyStreamSum.LazyVal(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp)));
};
stx_fp_LazyStream.make = function(xs,x) {
	return stx_fp_LazyStream.fromTuple(stx_nano_Couple.make(x,xs));
};
stx_fp_LazyStream.unit = function() {
	return stx_fp_LazyStreamSum.LazyVal(null,stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit));
};
stx_fp_LazyStream.pure = function(x) {
	return stx_fp_LazyStream.make(stx_fp_LazyStreamTrigger.fromFn(stx_fp_LazyStream.unit),x);
};
stx_fp_LazyStream.reply = function(this1) {
	var val = this1.val;
	var next = this1.next;
	return stx_nano_Couple.make(val,next);
};
var stx_fp_SemiGroupApi = function() { };
$hxClasses["stx.fp.SemiGroupApi"] = stx_fp_SemiGroupApi;
stx_fp_SemiGroupApi.__name__ = "stx.fp.SemiGroupApi";
stx_fp_SemiGroupApi.__isInterface__ = true;
stx_fp_SemiGroupApi.prototype = {
	plus: null
	,toSemiGroup: null
	,__class__: stx_fp_SemiGroupApi
};
var stx_fp_MonoidApi = function() { };
$hxClasses["stx.fp.MonoidApi"] = stx_fp_MonoidApi;
stx_fp_MonoidApi.__name__ = "stx.fp.MonoidApi";
stx_fp_MonoidApi.__isInterface__ = true;
stx_fp_MonoidApi.__interfaces__ = [stx_fp_SemiGroupApi];
stx_fp_MonoidApi.prototype = {
	unit: null
	,__class__: stx_fp_MonoidApi
};
var stx_fp_Monoid = {};
stx_fp_Monoid._new = function(self) {
	return self;
};
var stx_fp_SemiGroupCls = function() {
};
$hxClasses["stx.fp.SemiGroupCls"] = stx_fp_SemiGroupCls;
stx_fp_SemiGroupCls.__name__ = "stx.fp.SemiGroupCls";
stx_fp_SemiGroupCls.__interfaces__ = [stx_fp_SemiGroupApi];
stx_fp_SemiGroupCls.prototype = {
	plus: null
	,toSemiGroup: function() {
		return this;
	}
	,__class__: stx_fp_SemiGroupCls
};
var stx_fp_SemiGroup = {};
stx_fp_SemiGroup._new = function(self) {
	return self;
};
stx_fp_SemiGroup.lift = function(self) {
	return stx_fp_SemiGroup._new(self);
};
var stx_fp_StateM = {};
stx_fp_StateM._new = function(self) {
	return self;
};
stx_fp_StateM.unit = function() {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,0,p);
	};
};
stx_fp_StateM.pure = function(r) {
	return function(p) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,p);
	};
};
var stx_fp_StateMLift = function() { };
$hxClasses["stx.fp.StateMLift"] = stx_fp_StateMLift;
stx_fp_StateMLift.__name__ = "stx.fp.StateMLift";
stx_fp_StateMLift.exec = function(self,p) {
	return stx_nano_CoupleLift.snd(self(p));
};
stx_fp_StateMLift.eval = function(self,p) {
	return stx_nano_CoupleLift.fst(self(p));
};
stx_fp_StateMLift.map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,fn(r),p);
		});
	};
};
stx_fp_StateMLift.mod = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,r,fn(p));
		});
	};
};
stx_fp_StateMLift.flat_map = function(self,fn) {
	return function(p) {
		return stx_nano_CoupleLift.decouple(self(p),function(r,p) {
			return (fn(r))(p);
		});
	};
};
var stx_fp_With = {};
stx_fp_With._new = function(self) {
	return self;
};
stx_fp_With.lift = function(self) {
	return stx_fp_With._new(self);
};
stx_fp_With.prj = function(this1) {
	return this1;
};
stx_fp_With.get_self = function(this1) {
	return stx_fp_With.lift(this1);
};
var stx_lift_ArrayLift = function() { };
$hxClasses["stx.lift.ArrayLift"] = stx_lift_ArrayLift;
stx_lift_ArrayLift.__name__ = "stx.lift.ArrayLift";
stx_lift_ArrayLift.flatten = function(arrs) {
	var res = [];
	var _g = 0;
	while(_g < arrs.length) {
		var arr = arrs[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var e = arr[_g1];
			++_g1;
			res.push(e);
		}
	}
	return res;
};
stx_lift_ArrayLift.interleave = function(alls) {
	var res = [];
	if(alls.length > 0) {
		var minLength = alls[0].length;
		var _g = 0;
		while(_g < alls.length) {
			var e = alls[_g];
			++_g;
			minLength = Math.min(minLength,e.length) | 0;
		}
		var length = minLength;
		var i = 0;
		while(i < length) {
			var _g = 0;
			while(_g < alls.length) {
				var arr = alls[_g];
				++_g;
				res.push(arr[i]);
			}
			++i;
		}
	}
	return res;
};
stx_lift_ArrayLift.is_defined = function(self) {
	return self.length > 0;
};
stx_lift_ArrayLift.cons = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.unshift(t);
	return copy;
};
stx_lift_ArrayLift.snoc = function(self,t) {
	var copy = stx_lift_ArrayLift.copy(self);
	copy.push(t);
	return copy;
};
stx_lift_ArrayLift.set = function(self,i,v) {
	var arr0 = self.slice();
	arr0[i] = v;
	return arr0;
};
stx_lift_ArrayLift.get = function(self,i) {
	return self[i];
};
stx_lift_ArrayLift.head = function(self) {
	if(self.length == 0) {
		return haxe_ds_Option.None;
	} else if(self[0] == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(self[0]);
	}
};
stx_lift_ArrayLift.tail = function(self) {
	return self.slice(1);
};
stx_lift_ArrayLift.last = function(self) {
	var v = self[self.length > 0 ? self.length - 1 : 0];
	if(v == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(v);
	}
};
stx_lift_ArrayLift.copy = function(self) {
	return [].concat(self);
};
stx_lift_ArrayLift.concat = function(self,that) {
	var acc = stx_lift_ArrayLift.copy(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		acc.push(e);
	}
	return acc;
};
stx_lift_ArrayLift.bind_fold = function(self,pure,init,bind,fold) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return bind(memo,function(b) {
			return pure(fold(next,b));
		});
	},pure(init));
};
stx_lift_ArrayLift.reduce = function(self,unit,pure,plus) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		return plus(memo,pure(next));
	},unit());
};
stx_lift_ArrayLift.map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		n.push(fn(e));
	}
	return n;
};
stx_lift_ArrayLift.imap = function(self,fn) {
	var n = [];
	var e = null;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		e = self[i];
		n.push(fn(i,e));
	}
	return n;
};
stx_lift_ArrayLift.flat_map = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e1 = self[_g];
		++_g;
		var e2 = $getIterator(fn(e1));
		while(e2.hasNext()) {
			var e21 = e2.next();
			n.push(e21);
		}
	}
	return n;
};
stx_lift_ArrayLift.lfold = function(self,fn,memo) {
	var r = memo;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.lfold1 = function(self,fn) {
	var folded = stx_lift_ArrayLift.head(self);
	var tail = stx_lift_ArrayLift.tail(self);
	return stx_pico_OptionLift.map(folded,function(memo) {
		var _g = 0;
		while(_g < tail.length) {
			var item = tail[_g];
			++_g;
			memo = fn(memo,item);
		}
		return memo;
	});
};
stx_lift_ArrayLift.rfold = function(self,fn,z) {
	var r = z;
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var e = self[self.length - 1 - i];
		r = fn(e,r);
	}
	return r;
};
stx_lift_ArrayLift.rfold1 = function(self,fn) {
	return stx_lift_ArrayLift.lfold1(stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]),fn);
};
stx_lift_ArrayLift.lscan = function(self,f,init) {
	var accum = init;
	var result = [init];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		result.push(f(e,accum));
	}
	return result;
};
stx_lift_ArrayLift.lscan1 = function(self,f) {
	var result = [];
	if(0 == self.length) {
		return result;
	}
	var accum = self[0];
	result.push(accum);
	var _g = 1;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(f(self[i],accum));
	}
	return result;
};
stx_lift_ArrayLift.rscan = function(self,init,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan(a,f,init);
};
stx_lift_ArrayLift.rscan1 = function(self,f) {
	var a = self.slice();
	a.reverse();
	return stx_lift_ArrayLift.lscan1(a,f);
};
stx_lift_ArrayLift.filter = function(self,fn) {
	var n = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			n.push(e);
		}
	}
	return n;
};
stx_lift_ArrayLift.map_filter = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.whilst = function(self,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(fn(e)) {
			r.push(e);
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.range = function(self,l,r) {
	return self.slice(l,r);
};
stx_lift_ArrayLift.ltaken = function(self,n) {
	return self.slice(0,Math.min(n,self.length) | 0);
};
stx_lift_ArrayLift.ldropn = function(self,n) {
	if(n >= self.length) {
		return [];
	} else {
		return self.slice(n);
	}
};
stx_lift_ArrayLift.rdropn = function(self,n) {
	if(self != null && n >= self.length) {
		return [];
	} else {
		return self.splice(0,self.length - n);
	}
};
stx_lift_ArrayLift.ldrop = function(self,p) {
	var r = [].concat(self);
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
stx_lift_ArrayLift.search = function(self,fn) {
	var out = haxe_ds_Option.None;
	var _g = 0;
	while(_g < self.length) {
		var el = self[_g];
		++_g;
		if(fn(el)) {
			out = haxe_ds_Option.Some(el);
			break;
		}
	}
	return out;
};
stx_lift_ArrayLift.all = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return fn(b);
		} else {
			return false;
		}
	},true);
};
stx_lift_ArrayLift.any = function(self,fn) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		if(a) {
			return true;
		} else {
			return fn(b);
		}
	},false);
};
stx_lift_ArrayLift.zip_with = function(self,that,fn) {
	var next = [];
	var lower = Math.min(self.length,that.length) | 0;
	var _g = 0;
	var _g1 = lower;
	while(_g < _g1) {
		var i = _g++;
		next.push(fn(self[i],that[i]));
	}
	return next;
};
stx_lift_ArrayLift.cross_with = function(self,that,fn) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var va = self[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < that.length) {
			var vb = that[_g1];
			++_g1;
			r.push(fn(va,vb));
		}
	}
	return r;
};
stx_lift_ArrayLift.difference_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = [self[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(that,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.union_with = function(self,that,eq) {
	var res = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		res.push(e);
	}
	var _g = 0;
	while(_g < that.length) {
		var e = [that[_g]];
		++_g;
		if(!stx_lift_ArrayLift.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e))) {
			res.push(e[0]);
		}
	}
	return res;
};
stx_lift_ArrayLift.unique_with = function(self,eq) {
	var r = [];
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		var exists = stx_lift_ArrayLift.any(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		var val = stx_lift_ArrayLift.search(r,(function(_g,a1) {
			return function(a2) {
				return _g[0](a1[0],a2);
			};
		})([eq],[e]));
		if(!exists) {
			r.push(e);
		}
	}
	return r;
};
stx_lift_ArrayLift.nub_with = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		var _g = f;
		var a1 = b;
		if(stx_lift_ArrayLift.any(a,function(a2) {
			return _g(a1,a2);
		})) {
			return a;
		} else {
			return stx_lift_ArrayLift.snoc(a,b);
		}
	},[]);
};
stx_lift_ArrayLift.intersect_with = function(self,that,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		var _g = f;
		var a1 = next;
		var _g1 = function(a2) {
			return _g(a1,a2);
		};
		if(stx_lift_ArrayLift.any(that,_g1) == true) {
			return stx_lift_ArrayLift.snoc(memo,next);
		} else {
			return memo;
		}
	},[]);
};
stx_lift_ArrayLift.reversed = function(self) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		a.unshift(b);
		return a;
	},[]);
};
stx_lift_ArrayLift.count = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(b,a) {
		return a + (f(b) ? 1 : 0);
	},0);
};
stx_lift_ArrayLift.size = function(self) {
	return self.length;
};
stx_lift_ArrayLift.index_of = function(self,t) {
	var index = 0;
	var ok = false;
	var _g = 0;
	while(_g < self.length) {
		var e = self[_g];
		++_g;
		if(t(e)) {
			ok = true;
			break;
		}
		++index;
	}
	if(ok) {
		return index;
	} else {
		return -1;
	}
};
stx_lift_ArrayLift.has = function(self,obj) {
	var index = self.indexOf(obj);
	if(index == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(index);
	}
};
stx_lift_ArrayLift.partition = function(self,f) {
	return stx_lift_ArrayLift.lfold(self,function(next,memo) {
		if(f(next)) {
			memo.a.push(next);
		} else {
			memo.b.push(next);
		}
		return memo;
	},{ a : [], b : []});
};
stx_lift_ArrayLift.chunk = function(self,size) {
	var slices = [];
	var rest = 0;
	var _g = 0;
	while(_g < size.length) {
		var n = size[_g];
		++_g;
		var next = rest + n;
		var slice = self.slice(rest,next);
		slices.push(slice);
		rest = next;
	}
	return slices;
};
stx_lift_ArrayLift.pad = function(self,len,val) {
	var len0 = len - self.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(val);
	}
	return self.concat(arr0);
};
stx_lift_ArrayLift.fill = function(self,def) {
	var result = new Array(self.length);
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		var x = self[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
stx_lift_ArrayLift.toIterable = function(self) {
	return self;
};
stx_lift_ArrayLift.toMap = function(self) {
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_lift_ArrayLift.random = function(self) {
	var len = self.length;
	var ind = Math.round(Math.random() * (len - 1));
	return self[ind];
};
stx_lift_ArrayLift.shuffle = function(self) {
	var res = [];
	var cp = self.slice();
	while(cp.length > 0) {
		var randArray = Math.floor(Math.random() * cp.length);
		res.push(cp.splice(randArray,1)[0]);
	}
	return res;
};
stx_lift_ArrayLift.and_with = function(self,that,eq) {
	return stx_lift_ArrayLift.lfold(stx_lift_ArrayLift.zip_with(self,that,function(l,r) {
		return { a : l, b : r};
	}),function(next,memo) {
		if(memo) {
			if(eq(next.a,next.b)) {
				return eq(next.a,next.b);
			} else {
				return false;
			}
		} else {
			return memo;
		}
	},true);
};
stx_lift_ArrayLift.rotate = function(self,num) {
	num %= self.length;
	var l = stx_lift_ArrayLift.ltaken(self,num);
	var r = stx_lift_ArrayLift.ldropn(self,num);
	if(num < 0) {
		return stx_lift_ArrayLift.concat(l,r);
	} else if(num > 1) {
		return stx_lift_ArrayLift.concat(l,r);
	} else {
		return self;
	}
};
stx_lift_ArrayLift.iterator = function(self) {
	return new haxe_iterators_ArrayIterator(self);
};
stx_lift_ArrayLift.elide = function(self) {
	return stx_lift_ArrayLift.map(self,function(v) {
		return v;
	});
};
stx_lift_ArrayLift.prj = function(self) {
	return self;
};
var stx_lift_IterableLift = function() { };
$hxClasses["stx.lift.IterableLift"] = stx_lift_IterableLift;
stx_lift_IterableLift.__name__ = "stx.lift.IterableLift";
stx_lift_IterableLift.make = function(self) {
	return { iterator : self};
};
stx_lift_IterableLift.concat = function(self,that) {
	return stx_lift_IterableLift.make(function() {
		var rest = false;
		var lhs = $getIterator(self);
		var rhs = $getIterator(that);
		return stx_lift_IteratorLift.make(function() {
			if(!rest) {
				if(lhs.hasNext()) {
					return true;
				} else {
					rest = true;
					return rhs.hasNext();
				}
			} else {
				return rhs.hasNext();
			}
		},function() {
			if(!rest) {
				return lhs.next();
			} else {
				return rhs.next();
			}
		});
	});
};
stx_lift_IterableLift.size = function(self) {
	var res = 0;
	var i = $getIterator(self);
	while(i.hasNext()) {
		var i1 = i.next();
		++res;
	}
	return res;
};
var stx_lift_IteratorLift = function() { };
$hxClasses["stx.lift.IteratorLift"] = stx_lift_IteratorLift;
stx_lift_IteratorLift.__name__ = "stx.lift.IteratorLift";
stx_lift_IteratorLift.make = function(hasNext,next) {
	return { hasNext : hasNext, next : next};
};
var stx_log_Debugging = function() { };
$hxClasses["stx.log.Debugging"] = stx_log_Debugging;
stx_log_Debugging.__name__ = "stx.log.Debugging";
stx_log_Debugging.prototype = {
	note: function(str,pos) {
	}
	,__class__: stx_log_Debugging
};
var stx_log_EntryCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.EntryCtr"] = stx_log_EntryCtr;
stx_log_EntryCtr.__name__ = "stx.log.EntryCtr";
stx_log_EntryCtr.__super__ = stx_pico_Clazz;
stx_log_EntryCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	make: function(val,ctr) {
		return { val : val, ctr : ctr};
	}
	,pure: function(val) {
		return { val : val, ctr : Std.string};
	}
	,thunk: function(fn) {
		return { val : null, ctr : function(_) {
			return Std.string(fn());
		}};
	}
	,json: function(val) {
		return { val : val, ctr : function(x) {
			return JSON.stringify(x,null," ");
		}};
	}
	,show: function(val) {
		return { val : val, ctr : function(x) {
			return stx_Show.show(stx_nano_Wildcard.__,x);
		}};
	}
	,__class__: stx_log_EntryCtr
});
var stx_log_Filter = function() {
};
$hxClasses["stx.log.Filter"] = stx_log_Filter;
stx_log_Filter.__name__ = "stx.log.Filter";
stx_log_Filter.__interfaces__ = [stx_assert_PredicateApi];
stx_log_Filter.Unit = function() {
	return new stx_log_filter_term_Unit();
};
stx_log_Filter.Race = function() {
	return new stx_log_filter_term_Race();
};
stx_log_Filter.PosPredicate = function(delegate) {
	return new stx_log_filter_term_PosPredicate(delegate);
};
stx_log_Filter.HasCustom = function() {
	return new stx_log_filter_term_HasCustom();
};
stx_log_Filter.Level = function(level) {
	return new stx_log_filter_term_Level(level);
};
stx_log_Filter.prototype = {
	apply: function(value) {
		return stx_nano_Report.unit();
	}
	,note: function(str) {
	}
	,toLogic: function() {
		return stx_log_Logic.fromFilter(this);
	}
	,canonical: null
	,__class__: stx_log_Filter
};
var stx_log_FrontController = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.FrontController"] = stx_log_FrontController;
stx_log_FrontController.__name__ = "stx.log.FrontController";
stx_log_FrontController.facade = null;
stx_log_FrontController.get_facade = function() {
	if(stx_log_FrontController.facade == null) {
		return stx_log_FrontController.facade = new stx_log_logger_DelegateRef(stx_log_FrontController.get_instance());
	} else {
		return stx_log_FrontController.facade;
	}
};
stx_log_FrontController.instance = null;
stx_log_FrontController.get_instance = function() {
	if(stx_log_FrontController.instance == null) {
		var v = stx_log_logger_Global.toLoggerApi(stx_log_logger_Global._new());
		var ret = new Array(1);
		ret[0] = v;
		var ref = ret;
		return stx_log_FrontController.instance = ref;
	} else {
		return stx_log_FrontController.instance;
	}
};
stx_log_FrontController.set_instance = function(i) {
	stx_log_FrontController.get_instance()[0] = i[0];
	return stx_log_FrontController.get_instance();
};
stx_log_FrontController.configure = function(f) {
	var v = stx_nano_CTR.apply(f,stx_log_FrontController.get_instance()[0]);
	var ret = new Array(1);
	ret[0] = v;
	stx_log_FrontController.set_instance(ret);
};
stx_log_FrontController.__super__ = stx_pico_Clazz;
stx_log_FrontController.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_log_FrontController
});
var stx_log_Includes = {};
stx_log_Includes.match = function(this1,string) {
	return stx_nano_ClusterLift.lfold(this1,function(next,memo) {
		return stx_LiftIf.if_else(memo,function() {
			return true;
		},function() {
			return new EReg(next,"g").match(string);
		});
	},false);
};
var stx_log_Level = {};
stx_log_Level._new = function(self) {
	return self;
};
stx_log_Level.asInt = function(this1) {
	return stx_log_LevelSum.prj(this1);
};
stx_log_Level.toString = function(this1) {
	switch(this1) {
	case 0:
		return "BLANK";
	case 1:
		return "TRACE";
	case 2:
		return "DEBUG";
	case 3:
		return "INFO";
	case 4:
		return "WARN";
	case 5:
		return "ERROR";
	case 6:
		return "FATAL";
	}
};
stx_log_Level.fromString = function(self) {
	switch(self) {
	case "BLANK":
		return haxe_ds_Option.Some(0);
	case "DEBUG":
		return haxe_ds_Option.Some(2);
	case "ERROR":
		return haxe_ds_Option.Some(5);
	case "FATAL":
		return haxe_ds_Option.Some(6);
	case "INFO":
		return haxe_ds_Option.Some(3);
	case "TRACE":
		return haxe_ds_Option.Some(1);
	case "WARN":
		return haxe_ds_Option.Some(4);
	default:
		return haxe_ds_Option.None;
	}
};
var stx_log_LevelSum = {};
stx_log_LevelSum.prj = function(this1) {
	return this1;
};
var stx_log_LogApi = function() { };
$hxClasses["stx.log.LogApi"] = stx_log_LogApi;
stx_log_LogApi.__name__ = "stx.log.LogApi";
stx_log_LogApi.__isInterface__ = true;
stx_log_LogApi.prototype = {
	comply: null
	,toLogApi: null
	,__class__: stx_log_LogApi
};
var stx_log_log_term_Base = function() { };
$hxClasses["stx.log.log.term.Base"] = stx_log_log_term_Base;
stx_log_log_term_Base.__name__ = "stx.log.log.term.Base";
stx_log_log_term_Base.__interfaces__ = [stx_log_LogApi];
stx_log_log_term_Base.prototype = {
	comply: null
	,toLogApi: function() {
		return this;
	}
	,__class__: stx_log_log_term_Base
};
var stx_log_log_term_Unit = function() {
};
$hxClasses["stx.log.log.term.Unit"] = stx_log_log_term_Unit;
stx_log_log_term_Unit.__name__ = "stx.log.log.term.Unit";
stx_log_log_term_Unit.__interfaces__ = [stx_log_LogApi];
stx_log_log_term_Unit.__super__ = stx_log_log_term_Base;
stx_log_log_term_Unit.prototype = $extend(stx_log_log_term_Base.prototype,{
	comply: function(entry,pos) {
		stx_log_Signal.transmit(stx_log_Log.enlog(entry,pos));
	}
	,__class__: stx_log_log_term_Unit
});
var stx_log_LogLift = function() { };
$hxClasses["stx.log.LogLift"] = stx_log_LogLift;
stx_log_LogLift.__name__ = "stx.log.LogLift";
stx_log_LogLift.Filter = function() {
	return stx_log_Filter;
};
stx_log_LogLift.Logic = function() {
	return stx_log_LogicCtr.unit();
};
var stx_log_Log = {};
stx_log_Log.lift = function(self) {
	return self == null ? new stx_log_log_term_Unit() : self;
};
stx_log_Log.get_global = function(this1) {
	return stx_log_FrontController.get_facade();
};
stx_log_Log.pkg = function(pkg) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(pkg),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
stx_log_Log.unit = function() {
	var self = null;
	return self == null ? new stx_log_log_term_Unit() : self;
};
stx_log_Log.empty = function() {
	return new stx_log_log_term_Empty();
};
stx_log_Log.enlog = function(value,info) {
	var value1 = new stx_log_Value(value,info);
	return value1;
};
stx_log_Log.make = function(fn) {
	return new stx_log_log_term_Anon(function(value,pos) {
		fn(stx_log_Log.enlog(value,pos));
	});
};
stx_log_Log._new = function(self) {
	return self == null ? new stx_log_log_term_Unit() : self;
};
stx_log_Log.level = function(this1,level) {
	return new stx_log_log_term_Level(this1,level).toLogApi();
};
stx_log_Log.blank = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.trace = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.debug = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.info = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.warn = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,4).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.error = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,5).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.fatal = function(this1,v,pos) {
	new stx_log_log_term_Level(this1,6).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
};
stx_log_Log.mod = function(this1,fn) {
	return new stx_log_log_term_ModAnon(this1,fn);
};
stx_log_Log.tag = function(this1,tag) {
	return new stx_log_log_term_ModAnon(this1,function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.tag(tag);
		});
	});
};
stx_log_Log.close = function(this1) {
	return new stx_log_log_term_ModAnon(this1,function(pos) {
		return pos.with_stamp(function(stamp) {
			return stamp.hide();
		});
	});
};
stx_log_Log.through = function(this1,ctr,pos) {
	var log_pos = stx_log_LogPosition.pure(pos);
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	if(self._hx_index == 0) {
		var v = self.v;
		ctr = v;
	} else {
		ctr = stx_log_StringCtr.unit();
	}
	return function(v) {
		this1.comply(stx_log_StringCtr.capture(ctr,v),stx_log_LogPosition.fromPos(pos));
		return v;
	};
};
stx_log_Log.printer = function(this1,ctr,pos) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	if(self._hx_index == 0) {
		var v = self.v;
		ctr = v;
	} else {
		ctr = stx_log_StringCtr.unit();
	}
	return function(v) {
		this1.comply(stx_log_StringCtr.capture(ctr,v),pos);
	};
};
stx_log_Log.logger = function(this1,ctr,pos) {
	var log_pos = stx_log_LogPosition.pure(pos);
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,ctr);
	if(self._hx_index == 0) {
		var v = self.v;
		ctr = v;
	} else {
		ctr = stx_log_StringCtr.unit();
	}
	return function(v) {
		this1.comply(stx_log_StringCtr.capture(ctr,v),stx_log_LogPosition.fromPos(pos));
		return v;
	};
};
stx_log_Log.logic = function(this1) {
	return new stx_log_LogicCtr();
};
stx_log_Log.prj = function(this1) {
	return this1;
};
var stx_log_LogPositionCls = function(pos,stamp) {
	this.pos = pos;
	this.stamp = stamp;
};
$hxClasses["stx.log.LogPositionCls"] = stx_log_LogPositionCls;
stx_log_LogPositionCls.__name__ = "stx.log.LogPositionCls";
stx_log_LogPositionCls.prototype = {
	pos: null
	,stamp: null
	,scoping: null
	,get_scoping: function() {
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_methodName(x);
		});
		var methodName;
		if(self._hx_index == 0) {
			var v = self.v;
			methodName = v;
		} else {
			methodName = "";
		}
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_className(x);
		});
		var className;
		if(self._hx_index == 0) {
			var v = self.v;
			className = v;
		} else {
			className = "";
		}
		var self = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.get_fileName(x);
		});
		var fileName;
		if(self._hx_index == 0) {
			var v = self.v;
			fileName = v;
		} else {
			fileName = "";
		}
		return new stx_log_Scoping(methodName,className,fileName);
	}
	,match: function(race) {
		switch(race.scope._hx_index) {
		case 0:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_methodName(x) == race.scoping.method;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		case 1:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_className(x) == race.scoping.type;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		case 2:
			var self = stx_pico_OptionLift.map(this.pos,function(x) {
				return stx_nano_Position.get_fileName(x) == race.scoping.module;
			});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return false;
			}
			break;
		}
	}
	,copy: function(pos,stamp) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.pos;
		}
		var tmp1 = stx_pico_OptionLift.map(tmp,function(x) {
			return stx_nano_PositionLift.copy(x);
		});
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stamp);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.stamp;
		}
		return new stx_log_LogPositionCls(tmp1,tmp);
	}
	,with_stamp: function(fn) {
		return this.copy(null,fn(this.stamp));
	}
	,toString: function() {
		var tmp = "" + Std.string(this.stamp) + " ";
		var tmp1 = stx_pico_OptionLift.map(this.pos,function(x) {
			return stx_nano_Position.toString(x);
		});
		return tmp + (tmp1 == null ? "null" : stx_pico_Option.toString(tmp1)) + " " + Std.string(this.get_scoping());
	}
	,__class__: stx_log_LogPositionCls
};
var stx_log_LogPosition = {};
stx_log_LogPosition._new = function(self) {
	return self;
};
stx_log_LogPosition.lift = function(self) {
	return stx_log_LogPosition._new(self);
};
stx_log_LogPosition.pure = function(pos) {
	return new stx_log_LogPositionCls(haxe_ds_Option.Some(pos),new stx_log_Stamp());
};
stx_log_LogPosition.fromPos = function(pos) {
	return new stx_log_LogPositionCls(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,pos),new stx_log_Stamp());
};
stx_log_LogPosition.unit = function() {
	return new stx_log_LogPositionCls(haxe_ds_Option.None,new stx_log_Stamp());
};
stx_log_LogPosition.prj = function(this1) {
	return this1;
};
stx_log_LogPosition.get_self = function(this1) {
	return stx_log_LogPosition.lift(this1);
};
stx_log_LogPosition.is_runtime = function() {
	return true;
};
var stx_log_Logger = function() { };
$hxClasses["stx.log.Logger"] = stx_log_Logger;
stx_log_Logger.__name__ = "stx.log.Logger";
stx_log_Logger.spur = function(value) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/Logger.hx", lineNumber : 5, className : "stx.log.Logger", methodName : "spur"});
	return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_Zero)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/log/Logger.hx", lineNumber : 5, className : "stx.log.Logger", methodName : "spur"});
};
stx_log_Logger.ZERO = null;
stx_log_Logger.get_ZERO = function() {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_log_Logger.ZERO);
	if(self._hx_index == 0) {
		var v = self.v;
	} else {
		stx_log_Logger.ZERO = new stx_log_logger_Unit();
	}
	return stx_log_Logger.ZERO;
};
var stx_log_LoggerApi = function() { };
$hxClasses["stx.log.LoggerApi"] = stx_log_LoggerApi;
stx_log_LoggerApi.__name__ = "stx.log.LoggerApi";
stx_log_LoggerApi.__isInterface__ = true;
stx_log_LoggerApi.prototype = {
	logic: null
	,get_logic: null
	,with_logic: null
	,format: null
	,get_format: null
	,with_format: null
	,apply: null
	,do_apply: null
	,__class__: stx_log_LoggerApi
};
var stx_log_Logging = function() { };
$hxClasses["stx.log.Logging"] = stx_log_Logging;
stx_log_Logging.__name__ = "stx.log.Logging";
stx_log_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/log/Logging.hx", lineNumber : 9, className : "stx.log.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_log_LogicCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.LogicCtr"] = stx_log_LogicCtr;
stx_log_LogicCtr.__name__ = "stx.log.LogicCtr";
stx_log_LogicCtr.unit = function() {
	return new stx_log_LogicCtr();
};
stx_log_LogicCtr.construct = function(fn) {
	return stx_log_Logic.fromPosPredicate(stx_assert_Predicate.Anon(fn));
};
stx_log_LogicCtr.__super__ = stx_pico_Clazz;
stx_log_LogicCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	pack: function(pack) {
		return new stx_log_filter_term_Pack(pack.split("/")).toLogic();
	}
	,type: function(type) {
		return new stx_log_filter_term_Type(type).toLogic();
	}
	,line: function(n) {
		return new stx_log_filter_term_Line(n).toLogic();
	}
	,level: function(level) {
		return new stx_log_filter_term_Level(level).toLogic();
	}
	,lines: function(l,h) {
		return new stx_log_filter_term_Lines(l,h).toLogic();
	}
	,tag: function(str) {
		return new stx_log_filter_term_Tag(str).toLogic();
	}
	,tags: function(arr) {
		return new stx_log_filter_term_Tags(arr).toLogic();
	}
	,tagless: function() {
		return new stx_log_filter_term_Tagless().toLogic();
	}
	,method: function(str) {
		return new stx_log_filter_term_Method(str).toLogic();
	}
	,always: function() {
		return new stx_log_filter_term_Always().toLogic();
	}
	,never: function() {
		return new stx_log_filter_term_Never().toLogic();
	}
	,clear: function() {
		return stx_log_LogicCtr.unit();
	}
	,__class__: stx_log_LogicCtr
});
var stx_log_LogicSum = $hxEnums["stx.log.LogicSum"] = { __ename__:"stx.log.LogicSum",__constructs__:null
	,LAnd: ($_=function(l,r) { return {_hx_index:0,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LAnd",$_.__params__ = ["l","r"],$_)
	,LOr: ($_=function(l,r) { return {_hx_index:1,l:l,r:r,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LOr",$_.__params__ = ["l","r"],$_)
	,LNot: ($_=function(l) { return {_hx_index:2,l:l,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LNot",$_.__params__ = ["l"],$_)
	,LV: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"stx.log.LogicSum",toString:$estr}; },$_._hx_name="LV",$_.__params__ = ["v"],$_)
};
stx_log_LogicSum.__constructs__ = [stx_log_LogicSum.LAnd,stx_log_LogicSum.LOr,stx_log_LogicSum.LNot,stx_log_LogicSum.LV];
var stx_log_LogicLift = function() { };
$hxClasses["stx.log.LogicLift"] = stx_log_LogicLift;
stx_log_LogicLift.__name__ = "stx.log.LogicLift";
stx_log_LogicLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var l = self.l;
		var r = self.r;
		var ls = stx_log_LogicLift.toString(l);
		var rs = stx_log_LogicLift.toString(r);
		return "(" + ls + " && " + rs + ")";
	case 1:
		var l = self.l;
		var r = self.r;
		var ls = stx_log_LogicLift.toString(l);
		var rs = stx_log_LogicLift.toString(r);
		return "(" + ls + " || " + rs + ")";
	case 2:
		var l = self.l;
		return "!" + (l == null ? "null" : stx_log_Logic.toString(l));
	case 3:
		var v = self.v;
		return v.canonical();
	}
};
var stx_log_Logic = {};
stx_log_Logic._new = function(self) {
	return self;
};
stx_log_Logic.lift = function(self) {
	return stx_log_Logic._new(self);
};
stx_log_Logic.fromPosPredicate = function(self) {
	return stx_log_Logic.lift(stx_log_LogicSum.LV(new stx_log_filter_term_PosPredicate(self)));
};
stx_log_Logic.fromFilter = function(self) {
	return stx_log_LogicSum.LV(self);
};
stx_log_Logic.and = function(this1,that) {
	return stx_log_LogicSum.LAnd(this1,stx_nano_CTR.apply(that,stx_log_LogicCtr.unit()));
};
stx_log_Logic.or = function(this1,that) {
	return stx_log_LogicSum.LOr(this1,stx_nano_CTR.apply(that,stx_log_LogicCtr.unit()));
};
stx_log_Logic.not = function(this1) {
	return stx_log_LogicSum.LNot(stx_log_Logic.lift(this1));
};
stx_log_Logic.apply = function(this1,value) {
	var p = function(x) {
	};
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 83, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"}).module.exists().apply(this1);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/log/Logic.hx", lineNumber : 84, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"}).module.exists().apply(value);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	switch(this1._hx_index) {
	case 0:
		var l = this1.l;
		var r = this1.r;
		var lI = stx_log_Logic.apply(l,value);
		return stx_LiftIf.if_else(stx_nano_ReportLift.is_defined(lI),function() {
			var p1 = p;
			var tmp = stx_log_Logic.get_self(this1);
			p1("NO: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)) + " " + Std.string(lI));
			return lI;
		},function() {
			var rI = stx_log_Logic.apply(r,value);
			if(rI == null) {
				var p1 = p;
				var tmp = stx_log_Logic.get_self(this1);
				p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
			} else {
				switch(rI._hx_index) {
				case 0:
					var v = rI.v;
					var p1 = p;
					var tmp = stx_log_Logic.get_self(this1);
					p1("NO: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)) + " " + Std.string(v));
					break;
				case 1:
					var p1 = p;
					var tmp = stx_log_Logic.get_self(this1);
					p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
					break;
				}
			}
			return rI;
		});
	case 1:
		var l = this1.l;
		var r1 = this1.r;
		var lI1 = stx_log_Logic.apply(l,value);
		if(lI1 == null) {
			var p1 = p;
			var tmp = stx_log_Logic.get_self(this1);
			p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
			return stx_nano_Report.unit();
		} else {
			switch(lI1._hx_index) {
			case 0:
				var v = lI1.v;
				var rI = stx_log_Logic.apply(r1,value);
				if(rI == null) {
					var p1 = p;
					var tmp = stx_log_Logic.get_self(this1);
					p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
				} else {
					switch(rI._hx_index) {
					case 0:
						var v = rI.v;
						var p1 = p;
						var tmp = stx_log_Logic.get_self(this1);
						p1("NO: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)) + " (" + Std.string(v) + ")");
						break;
					case 1:
						var p1 = p;
						var tmp = stx_log_Logic.get_self(this1);
						p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
						break;
					}
				}
				return rI;
			case 1:
				var p1 = p;
				var tmp = stx_log_Logic.get_self(this1);
				p1("OK: " + (tmp == null ? "null" : stx_log_Logic.toString(tmp)));
				return stx_nano_Report.unit();
			}
		}
		break;
	case 2:
		var v = this1.l;
		var self = stx_log_Logic.apply(v,value);
		if(self == null) {
			return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Not,{ fileName : "stx/log/Logic.hx", lineNumber : 125, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"});
		} else {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				return stx_nano_Report.unit();
			case 1:
				return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Not,{ fileName : "stx/log/Logic.hx", lineNumber : 125, className : "stx.log._Logic.Logic_Impl_", methodName : "apply"});
			}
		}
		break;
	case 3:
		var _g = this1.v;
		if(_g == null) {
			throw haxe_Exception.thrown("no Filter defined in Logic");
		} else {
			var v = _g;
			return v.apply(value);
		}
		break;
	}
};
stx_log_Logic.opine = function(this1,value) {
	return stx_log_Logic.apply(this1,value);
};
stx_log_Logic.prj = function(this1) {
	return this1;
};
stx_log_Logic.get_self = function(this1) {
	return stx_log_Logic.lift(this1);
};
stx_log_Logic.pack = function(this1,pack) {
	return stx_log_LogicCtr.unit().pack(pack);
};
stx_log_Logic.level = function(this1,level) {
	return stx_log_LogicCtr.unit().level(level);
};
stx_log_Logic.type = function(this1,type) {
	return stx_log_LogicCtr.unit().type(type);
};
stx_log_Logic.line = function(this1,n) {
	return stx_log_LogicCtr.unit().line(n);
};
stx_log_Logic.lines = function(this1,l,h) {
	return stx_log_LogicCtr.unit().lines(l,h);
};
stx_log_Logic.tag = function(this1,str) {
	return stx_log_LogicCtr.unit().tag(str);
};
stx_log_Logic.tags = function(this1,arr) {
	return stx_log_LogicCtr.unit().tags(arr);
};
stx_log_Logic.tagless = function(this1) {
	return stx_log_LogicCtr.unit().tagless();
};
stx_log_Logic.method = function(this1,str) {
	return stx_log_LogicCtr.unit().method(str);
};
stx_log_Logic.always = function(this1) {
	return stx_log_LogicCtr.unit().always();
};
stx_log_Logic.never = function(this1) {
	return stx_log_LogicCtr.unit().never();
};
stx_log_Logic.toString = function(this1) {
	return stx_log_LogicLift.toString(this1);
};
var stx_log_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.Module"] = stx_log_Module;
stx_log_Module.__name__ = "stx.log.Module";
stx_log_Module.__super__ = stx_pico_Clazz;
stx_log_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	attach: function(logger) {
		stx_log_Signal.get_instance().attach(logger);
	}
	,global: function() {
		return new stx_log__$Module_Global();
	}
	,__class__: stx_log_Module
});
var stx_log__$Module_Global = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log._Module.Global"] = stx_log__$Module_Global;
stx_log__$Module_Global.__name__ = "stx.log._Module.Global";
stx_log__$Module_Global.__super__ = stx_pico_Clazz;
stx_log__$Module_Global.prototype = $extend(stx_pico_Clazz.prototype,{
	configure: function(f) {
		stx_log_FrontController.configure(f);
	}
	,reinstate: function() {
		stx_log_global_config_ReinstateTagless._new()[0] = true;
	}
	,__class__: stx_log__$Module_Global
});
var stx_log_OutputApi = function() { };
$hxClasses["stx.log.OutputApi"] = stx_log_OutputApi;
stx_log_OutputApi.__name__ = "stx.log.OutputApi";
stx_log_OutputApi.__isInterface__ = true;
stx_log_OutputApi.prototype = {
	render: null
	,__class__: stx_log_OutputApi
};
var stx_log_ScopeSum = $hxEnums["stx.log.ScopeSum"] = { __ename__:"stx.log.ScopeSum",__constructs__:null
	,ScopeMethod: {_hx_name:"ScopeMethod",_hx_index:0,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeClass: {_hx_name:"ScopeClass",_hx_index:1,__enum__:"stx.log.ScopeSum",toString:$estr}
	,ScopeModule: {_hx_name:"ScopeModule",_hx_index:2,__enum__:"stx.log.ScopeSum",toString:$estr}
};
stx_log_ScopeSum.__constructs__ = [stx_log_ScopeSum.ScopeMethod,stx_log_ScopeSum.ScopeClass,stx_log_ScopeSum.ScopeModule];
var stx_log_Scoping = function(method,type,module) {
	this.method = method;
	this.type = type;
	this.module = module;
};
$hxClasses["stx.log.Scoping"] = stx_log_Scoping;
stx_log_Scoping.__name__ = "stx.log.Scoping";
stx_log_Scoping.prototype = {
	method: null
	,type: null
	,module: null
	,copy: function(method,type,module) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,method);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.method;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,type);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.type;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,module);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.module;
		}
		return new stx_log_Scoping(tmp,tmp1,tmp2);
	}
	,with_method: function(name) {
		return this.copy(name);
	}
	,toString: function() {
		return "(" + this.module + "::" + this.type + "::" + this.method + ")";
	}
	,__class__: stx_log_Scoping
};
var stx_log__$Signal_SignalCls = function() {
	this.handlers = [];
};
$hxClasses["stx.log._Signal.SignalCls"] = stx_log__$Signal_SignalCls;
stx_log__$Signal_SignalCls.__name__ = "stx.log._Signal.SignalCls";
stx_log__$Signal_SignalCls.prototype = {
	handlers: null
	,handle: function(fn) {
		this.handlers.push(fn);
	}
	,trigger: function(v) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handle = _g1[_g];
			++_g;
			(handle.apply(v))(stx_log_Logger.spur);
		}
	}
	,attach: function(logger) {
		stx_log_global_config_HasCustomLogger._new()[0] = true;
		this.handle(logger);
	}
	,__class__: stx_log__$Signal_SignalCls
};
var stx_log__$Signal_NullSignalCls = function() {
	stx_log__$Signal_SignalCls.call(this);
};
$hxClasses["stx.log._Signal.NullSignalCls"] = stx_log__$Signal_NullSignalCls;
stx_log__$Signal_NullSignalCls.__name__ = "stx.log._Signal.NullSignalCls";
stx_log__$Signal_NullSignalCls.__super__ = stx_log__$Signal_SignalCls;
stx_log__$Signal_NullSignalCls.prototype = $extend(stx_log__$Signal_SignalCls.prototype,{
	trigger: function(v) {
	}
	,__class__: stx_log__$Signal_NullSignalCls
});
var stx_log_logger_Global = {};
stx_log_logger_Global.ZERO = null;
stx_log_logger_Global.get_ZERO = function() {
	var result;
	if(stx_log_logger_Global.ZERO == null) {
		stx_log_logger_Global.ZERO = new stx_log_logger_Unit();
		haxe_Log.trace("stx.Log.global = stx.log.logger.Unit()",{ fileName : "stx/log/logger/Global.hx", lineNumber : 14, className : "stx.log.logger._Global.Global_Impl_", methodName : "get_ZERO"});
		result = stx_log_logger_Global.ZERO;
	} else {
		result = stx_log_logger_Global.ZERO;
	}
	return result;
};
stx_log_logger_Global._new = function() {
	return stx_log_logger_Global.get_ZERO();
};
stx_log_logger_Global.unit = function() {
	return stx_log_logger_Global._new();
};
stx_log_logger_Global.toLoggerApi = function(this1) {
	return this1;
};
stx_log_logger_Global.prj = function(this1) {
	return this1;
};
var stx_log_output_term_Full = function() { };
$hxClasses["stx.log.output.term.Full"] = stx_log_output_term_Full;
stx_log_output_term_Full.__name__ = "stx.log.output.term.Full";
stx_log_output_term_Full.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Full.clear = function() {
	js_Boot.__clear_trace();
};
stx_log_output_term_Full.__super__ = stx_log_Debugging;
stx_log_output_term_Full.prototype = $extend(stx_log_Debugging.prototype,{
	render: function(v,infos) {
		this.note("haxelog " + Std.string(infos),{ fileName : "stx/log/output/term/Full.hx", lineNumber : 6, className : "stx.log.output.term.Full", methodName : "render"});
		this.note("js",{ fileName : "stx/log/output/term/Full.hx", lineNumber : 25, className : "stx.log.output.term.Full", methodName : "render"});
		new stx_log_output_term_Js().render(v,infos);
	}
	,__class__: stx_log_output_term_Full
});
var stx_log_logger_Base = function(logic,format) {
	this.note(logic,{ fileName : "stx/log/logger/Base.hx", lineNumber : 6, className : "stx.log.logger.Base", methodName : "new"});
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,logic);
	var v = stx_log_logic_term_Default.toLogic(stx_log_logic_term_Default._new());
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.logic = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,format);
	var v = stx_log_core_Format.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.format = tmp;
};
$hxClasses["stx.log.logger.Base"] = stx_log_logger_Base;
stx_log_logger_Base.__name__ = "stx.log.logger.Base";
stx_log_logger_Base.__interfaces__ = [stx_log_LoggerApi];
stx_log_logger_Base.__super__ = stx_log_output_term_Full;
stx_log_logger_Base.prototype = $extend(stx_log_output_term_Full.prototype,{
	logic: null
	,get_logic: function() {
		return this.logic;
	}
	,with_logic: function(f,pos) {
		var res = stx_nano_CTR.apply(f,this.get_logic());
		var this1 = stx_log_Logging.log(stx_nano_Wildcard.__);
		var v = "" + stx_log_Logic.toString(res) + " at ";
		var tmp = stx_nano_lift_LiftNano.toPosition(pos);
		var v1 = stx_log_Stringify.fromString(v + (tmp == null ? "null" : stx_nano_Position.toString(tmp)));
		new stx_log_log_term_Level(this1,3).toLogApi().comply(v1(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/log/logger/Base.hx", lineNumber : 17, className : "stx.log.logger.Base", methodName : "with_logic"}));
		return new stx_log_logger_Base(res,this.get_format());
	}
	,format: null
	,get_format: function() {
		return this.format;
	}
	,with_format: function(f) {
		return new stx_log_logger_Base(this.get_logic(),stx_nano_CTR.apply(f,this.get_format()));
	}
	,apply: function(value) {
		var _gthis = this;
		this.note("apply: " + Std.string(value.source),{ fileName : "stx/log/logger/Base.hx", lineNumber : 29, className : "stx.log.logger.Base", methodName : "apply"});
		return stx_fp_ContinuationLift.mod(this.do_apply(value),function(res) {
			_gthis.note("applied: " + Std.string(res),{ fileName : "stx/log/logger/Base.hx", lineNumber : 32, className : "stx.log.logger.Base", methodName : "apply"});
			var self = function(string) {
				_gthis.note("about to render: " + Std.string(value.get_stamp()),{ fileName : "stx/log/logger/Base.hx", lineNumber : 36, className : "stx.log.logger.Base", methodName : "apply"});
				if(!value.get_stamp().hidden) {
					_gthis.render(string,value.source);
				}
			};
			var fn = function(p) {
				self(p);
				return p;
			};
			var self1;
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				self1 = stx_nano_UpshotSum.Accept(fn(t));
				break;
			case 1:
				var e = res.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		});
	}
	,do_apply: function(value) {
		var _gthis = this;
		this.note("do_apply",{ fileName : "stx/log/logger/Base.hx", lineNumber : 54, className : "stx.log.logger.Base", methodName : "do_apply"});
		return stx_fp_Continuation.lift(function(fn) {
			_gthis.note(_gthis.get_logic(),{ fileName : "stx/log/logger/Base.hx", lineNumber : 57, className : "stx.log.logger.Base", methodName : "do_apply"});
			var proceed = stx_log_Logic.apply(_gthis.get_logic(),value);
			_gthis.note(proceed,{ fileName : "stx/log/logger/Base.hx", lineNumber : 59, className : "stx.log.logger.Base", methodName : "do_apply"});
			var result = stx_nano_ReportLift.resolve(proceed,function() {
				return _gthis.get_format().print(value);
			});
			_gthis.note(result,{ fileName : "stx/log/logger/Base.hx", lineNumber : 61, className : "stx.log.logger.Base", methodName : "do_apply"});
			return result;
		});
	}
	,__class__: stx_log_logger_Base
});
var stx_log_logger_Unit = function(logic,format) {
	stx_log_logger_Base.call(this,logic,format);
};
$hxClasses["stx.log.logger.Unit"] = stx_log_logger_Unit;
stx_log_logger_Unit.__name__ = "stx.log.logger.Unit";
stx_log_logger_Unit.__super__ = stx_log_logger_Base;
stx_log_logger_Unit.prototype = $extend(stx_log_logger_Base.prototype,{
	do_apply: function(data) {
		return stx_log_logger_Base.prototype.do_apply.call(this,data);
	}
	,__class__: stx_log_logger_Unit
});
var stx_nano_Wildcard = $hxEnums["stx.nano.Wildcard"] = { __ename__:"stx.nano.Wildcard",__constructs__:null
	,__: {_hx_name:"__",_hx_index:0,__enum__:"stx.nano.Wildcard",toString:$estr}
};
stx_nano_Wildcard.__constructs__ = [stx_nano_Wildcard.__];
var stx_log_logic_term_Default = {};
stx_log_logic_term_Default.toLogic = function(this1) {
	return stx_log_Logic.lift(this1);
};
stx_log_logic_term_Default._new = function(level,includes) {
	if(level == null) {
		level = 3;
	}
	var has_custom = stx_log_Filter.HasCustom().toLogic();
	var reinstate_tagless = new stx_log_global_filter_ReinstateTagless().toLogic();
	var level1 = stx_log_Filter.Level(level).toLogic();
	var verbose = new stx_log_global_filter_Verbose().toLogic();
	var is_filtering_with_tags = new stx_log_global_filter_IsFilteringWithTags().toLogic();
	var base_state_filter = stx_log_Logic.and(stx_log_logic_term_Default_l().tagless(),stx_nano_CTR.fromR(stx_log_Logic.not(is_filtering_with_tags)));
	var result = stx_log_Logic.or(base_state_filter,stx_nano_CTR.fromR(reinstate_tagless));
	if(includes != null) {
		result = stx_log_Logic.or(result,stx_nano_CTR.fromR(new stx_log_filter_term_Tags(includes).toLogic()));
	}
	result = stx_log_Logic.or(result,stx_nano_CTR.fromR(level1));
	return result;
};
var stx_log_filter_term_HasCustom = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.HasCustom"] = stx_log_filter_term_HasCustom;
stx_log_filter_term_HasCustom.__name__ = "stx.log.filter.term.HasCustom";
stx_log_filter_term_HasCustom.__super__ = stx_log_Filter;
stx_log_filter_term_HasCustom.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(v) {
		var result;
		if(stx_log_global_config_HasCustomLogger._new()[0] == true) {
			var f = null;
			result = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/HasCustom.hx", lineNumber : 9, className : "stx.log.filter.term.HasCustom", methodName : "apply"})));
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/HasCustom.hx", lineNumber : 11, className : "stx.log.filter.term.HasCustom", methodName : "apply"});
			result = stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("Has No Custom Logger"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		}
		haxe_Log.trace("has custom? " + Std.string(result),{ fileName : "stx/log/filter/term/HasCustom.hx", lineNumber : 12, className : "stx.log.filter.term.HasCustom", methodName : "apply"});
		return result;
	}
	,canonical: function() {
		return "HasCustom";
	}
	,__class__: stx_log_filter_term_HasCustom
});
var stx_log_global_filter_ReinstateTagless = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.global.filter.ReinstateTagless"] = stx_log_global_filter_ReinstateTagless;
stx_log_global_filter_ReinstateTagless.__name__ = "stx.log.global.filter.ReinstateTagless";
stx_log_global_filter_ReinstateTagless.__super__ = stx_log_Filter;
stx_log_global_filter_ReinstateTagless.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		var result;
		if(stx_log_global_config_ReinstateTagless._new()[0] == true) {
			var f = null;
			result = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/ReinstateTagless.hx", lineNumber : 6, className : "stx.log.global.filter.ReinstateTagless", methodName : "apply"})));
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/ReinstateTagless.hx", lineNumber : 6, className : "stx.log.global.filter.ReinstateTagless", methodName : "apply"});
			result = stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("tagless not reinstated"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		}
		this.note("ReinstateTagless " + Std.string(result));
		return result;
	}
	,canonical: function() {
		return "ReinstateTagless";
	}
	,__class__: stx_log_global_filter_ReinstateTagless
});
var stx_log_filter_term_Level = function(level) {
	stx_log_Filter.call(this);
	this.level = level;
};
$hxClasses["stx.log.filter.term.Level"] = stx_log_filter_term_Level;
stx_log_filter_term_Level.__name__ = "stx.log.filter.term.Level";
stx_log_filter_term_Level.__super__ = stx_log_Filter;
stx_log_filter_term_Level.prototype = $extend(stx_log_Filter.prototype,{
	level: null
	,apply: function(v) {
		this.note("apply " + Std.string(v) + " " + (this.level == null ? "null" : stx_log_Level.toString(this.level)));
		return stx_LiftIf.if_else(stx_log_Level.asInt(v.get_stamp().level) >= stx_log_Level.asInt(this.level),function() {
			return stx_nano_Report.unit();
		},function() {
			return stx_nano_Report.make(stx_fail_LogFailure.E_Log_UnderLogLevel,{ fileName : "stx/log/filter/term/Level.hx", lineNumber : 13, className : "stx.log.filter.term.Level", methodName : "apply"});
		});
	}
	,canonical: function() {
		return "Level(" + (this.level == null ? "null" : stx_log_Level.toString(this.level)) + ")";
	}
	,__class__: stx_log_filter_term_Level
});
var stx_log_global_filter_Verbose = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.global.filter.Verbose"] = stx_log_global_filter_Verbose;
stx_log_global_filter_Verbose.__name__ = "stx.log.global.filter.Verbose";
stx_log_global_filter_Verbose.__super__ = stx_log_Filter;
stx_log_global_filter_Verbose.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		if(stx_log_env_Verbose._new() == true) {
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/Verbose.hx", lineNumber : 6, className : "stx.log.global.filter.Verbose", methodName : "apply"})));
			}
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/Verbose.hx", lineNumber : 6, className : "stx.log.global.filter.Verbose", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("Env VERBOSE not set"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		}
	}
	,canonical: function() {
		return "Verbose";
	}
	,__class__: stx_log_global_filter_Verbose
});
var stx_log_global_filter_IsFilteringWithTags = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.global.filter.IsFilteringWithTags"] = stx_log_global_filter_IsFilteringWithTags;
stx_log_global_filter_IsFilteringWithTags.__name__ = "stx.log.global.filter.IsFilteringWithTags";
stx_log_global_filter_IsFilteringWithTags.__super__ = stx_log_Filter;
stx_log_global_filter_IsFilteringWithTags.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		var result;
		if(stx_log_global_config_IsFilteringWithTags._new()[0] == true) {
			var f = null;
			result = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/IsFilteringWithTags.hx", lineNumber : 6, className : "stx.log.global.filter.IsFilteringWithTags", methodName : "apply"})));
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/global/filter/IsFilteringWithTags.hx", lineNumber : 6, className : "stx.log.global.filter.IsFilteringWithTags", methodName : "apply"});
			result = stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("Not filtering on tags"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		}
		this.note("IsFilteringWithTags " + Std.string(result));
		return result;
	}
	,canonical: function() {
		return "IsFilteringWithTags";
	}
	,__class__: stx_log_global_filter_IsFilteringWithTags
});
var stx_nano_CTR = {};
stx_nano_CTR._new = function(self) {
	return self;
};
stx_nano_CTR.lift = function(self) {
	return stx_nano_CTR._new(self);
};
stx_nano_CTR.prj = function(this1) {
	return this1;
};
stx_nano_CTR.get_self = function(this1) {
	return stx_nano_CTR.lift(this1);
};
stx_nano_CTR.fromR = function(r) {
	return stx_nano_CTR.lift(function(_) {
		return r;
	});
};
stx_nano_CTR.apply = function(this1,r) {
	return this1(r);
};
stx_nano_CTR.app = function(this1,p) {
	return stx_Tup2.tuple2(this1,p);
};
function stx_log_logic_term_Default_l() {
	return stx_log_Log.logic(stx_log_Log.ZERO);
}
var stx_log_filter_term_Tags = function(includes) {
	stx_log_global_config_IsFilteringWithTags._new()[0] = true;
	stx_log_Filter.call(this);
	this.includes = includes;
};
$hxClasses["stx.log.filter.term.Tags"] = stx_log_filter_term_Tags;
stx_log_filter_term_Tags.__name__ = "stx.log.filter.term.Tags";
stx_log_filter_term_Tags.__super__ = stx_log_Filter;
stx_log_filter_term_Tags.prototype = $extend(stx_log_Filter.prototype,{
	includes: null
	,apply: function(value) {
		var _gthis = this;
		var self = stx_pico_OptionLift.flat_map(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,value),function(x) {
			return stx_pico_Option.fromNullT(x.get_stamp());
		}),function(x) {
			return stx_pico_Option.fromNullT(x.tags);
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = [];
		}
		return stx_LiftIf.if_else(stx_lift_ArrayLift.lfold(tmp,function(next,memo) {
			return stx_LiftIf.if_else(memo,function() {
				return true;
			},function() {
				return stx_log_Includes.match(_gthis.includes,next);
			});
		},false),function() {
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Tags.hx", lineNumber : 18, className : "stx.log.filter.term.Tags", methodName : "apply"})));
			}
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Tags.hx", lineNumber : 19, className : "stx.log.filter.term.Tags", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("No Tag of " + Std.string(_gthis.includes)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Tags(" + Std.string(this.includes) + ")";
	}
	,__class__: stx_log_filter_term_Tags
});
var stx_log_global_config_IsFilteringWithTags = {};
stx_log_global_config_IsFilteringWithTags.instance = null;
stx_log_global_config_IsFilteringWithTags.get_instance = function() {
	if(stx_log_global_config_IsFilteringWithTags.instance == null) {
		var ret = new Array(1);
		ret[0] = false;
		return stx_log_global_config_IsFilteringWithTags.instance = ret;
	} else {
		return stx_log_global_config_IsFilteringWithTags.instance;
	}
};
stx_log_global_config_IsFilteringWithTags._new = function() {
	return stx_log_global_config_IsFilteringWithTags.get_instance();
};
var stx_log_core_Format = {};
stx_log_core_Format.unit = function() {
	return stx_log_core_Format.fromArray(stx_log_core_Format.get_DEFAULT());
};
stx_log_core_Format._new = function(self) {
	return self;
};
stx_log_core_Format.lift = function(self) {
	return self;
};
stx_log_core_Format.DEFAULT = null;
stx_log_core_Format.fromArray = function(self) {
	return new stx_log_core_FormatCls(self);
};
stx_log_core_Format.get_DEFAULT = function() {
	if(stx_log_core_Format.DEFAULT == null) {
		return stx_log_core_Format.DEFAULT = [stx_log_core_FormatSum.INCLUDE_TAGS,stx_log_core_FormatSum.INCLUDE_LEVEL,stx_log_core_FormatSum.INCLUDE_TIMESTAMP,stx_log_core_FormatSum.INCLUDE_LOCATION,stx_log_core_FormatSum.INCLUDE_DETAIL];
	} else {
		return stx_log_core_Format.DEFAULT;
	}
};
stx_log_core_Format.prj = function(this1) {
	return this1;
};
stx_log_core_Format.get_self = function(this1) {
	return this1;
};
var stx_log_core_FormatCls = function(data) {
	var self = stx_pico_Option.make(data);
	var v = stx_log_core_Format.get_DEFAULT();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.data = tmp;
};
$hxClasses["stx.log.core.FormatCls"] = stx_log_core_FormatCls;
stx_log_core_FormatCls.__name__ = "stx.log.core.FormatCls";
stx_log_core_FormatCls.prototype = {
	data: null
	,has: function(v) {
		var index = this.data.indexOf(v);
		return stx_pico_OptionLift.is_defined(index == -1 ? haxe_ds_Option.None : haxe_ds_Option.Some(index));
	}
	,print: function(value) {
		var p = value.source;
		var s = p.stamp;
		var a = [];
		if(this.has(stx_log_core_FormatSum.INCLUDE_LEVEL)) {
			a.push(stx_log_Level.toString(s.level));
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TIMESTAMP)) {
			a.push(HxOverrides.dateStr(s.timestamp));
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_TAGS)) {
			a.push("[" + s.tags.join(",") + "]");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_LOCATION)) {
			var self = stx_pico_OptionLift.map(p.pos,stx_nano_PositionLift.to_vscode_clickable_link);
			var b;
			if(self._hx_index == 0) {
				var v = self.v;
				b = v;
			} else {
				b = "";
			}
			a.push(b);
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL)) {
			a.push("\n");
		}
		if(this.has(stx_log_core_FormatSum.INCLUDE_DETAIL)) {
			a.push(value.detail == null ? "null" : stx_log_core_Entry.toString(value.detail));
		}
		return a.join(" ");
	}
	,__class__: stx_log_core_FormatCls
};
var stx_pico_OptionLift = $hx_exports["stx"]["pico"]["OptionLift"] = function() { };
$hxClasses["stx.pico.OptionLift"] = stx_pico_OptionLift;
stx_pico_OptionLift.__name__ = "stx.pico.OptionLift";
stx_pico_OptionLift.fold = function(self,ok,no) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return ok(t);
	case 1:
		return no();
	}
};
stx_pico_OptionLift.map = function(self,f) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(f(t));
		break;
	case 1:
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_pico_OptionLift.flat_map = function(self,f) {
	if(self == null) {
		return haxe_ds_Option.None;
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return f(v);
		case 1:
			return haxe_ds_Option.None;
		}
	}
};
stx_pico_OptionLift.or = function(self,thunk) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		tmp = thunk();
		break;
	}
	return tmp;
};
stx_pico_OptionLift.filter = function(self,fn) {
	return stx_pico_OptionLift.flat_map(self,function(v) {
		if(fn(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
stx_pico_OptionLift.def = function(self,thunk) {
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return thunk();
	}
};
stx_pico_OptionLift.defv = function(self,v) {
	if(self._hx_index == 0) {
		var v1 = self.v;
		return v1;
	} else {
		return v;
	}
};
stx_pico_OptionLift.is_defined = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return true;
	case 1:
		return false;
	}
};
stx_pico_OptionLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		if(!done) {
			return stx_pico_OptionLift.is_defined(self);
		} else {
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return null;
		}
	}};
};
stx_pico_OptionLift.merge = function(self,that,fn) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var r = that.v;
			var l = _g;
			return haxe_ds_Option.Some(fn(l,r));
		case 1:
			var l = _g;
			return haxe_ds_Option.Some(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return haxe_ds_Option.Some(r);
		} else {
			return haxe_ds_Option.None;
		}
		break;
	}
};
stx_pico_OptionLift.toArray = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return [v];
	case 1:
		return [];
	}
};
stx_pico_OptionLift.fudge = function(self,err) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return t;
	case 1:
		if(err != null) {
			throw haxe_Exception.thrown(err);
		} else {
			throw haxe_Exception.thrown("empty Option");
		}
		break;
	}
};
stx_pico_OptionLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		return "" + Std.string(t);
	case 1:
		return "<undefined>";
	}
};
stx_pico_OptionLift.flatten = function(self) {
	var _g = stx_pico_OptionLift.prj(self);
	switch(_g._hx_index) {
	case 0:
		var next = _g.v;
		return next;
	case 1:
		return haxe_ds_Option.None;
	}
};
stx_pico_OptionLift.prj = function(self) {
	return self;
};
var stx_pico_Option = $hx_exports["stx"]["pico"]["Option"] = {};
stx_pico_Option._new = function(self) {
	return self;
};
stx_pico_Option.fromNullT = function(v) {
	return stx_pico_Option.make(v);
};
stx_pico_Option.unit = function() {
	return stx_pico_Option._new(haxe_ds_Option.None);
};
stx_pico_Option.pure = function(t) {
	return stx_pico_Option._new(haxe_ds_Option.Some(t));
};
stx_pico_Option.make = function(t) {
	if(t == null) {
		return stx_pico_Option.unit();
	} else {
		return stx_pico_Option.pure(t);
	}
};
stx_pico_Option.toString = function(this1) {
	return stx_pico_Option.__.toString(this1);
};
var stx_log_core_FormatSum = $hxEnums["stx.log.core.FormatSum"] = { __ename__:"stx.log.core.FormatSum",__constructs__:null
	,INCLUDE_LEVEL: {_hx_name:"INCLUDE_LEVEL",_hx_index:0,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_TIMESTAMP: {_hx_name:"INCLUDE_TIMESTAMP",_hx_index:1,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_TAGS: {_hx_name:"INCLUDE_TAGS",_hx_index:2,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_LOCATION: {_hx_name:"INCLUDE_LOCATION",_hx_index:3,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_NEWLINE_FOR_DETAIL: {_hx_name:"INCLUDE_NEWLINE_FOR_DETAIL",_hx_index:4,__enum__:"stx.log.core.FormatSum",toString:$estr}
	,INCLUDE_DETAIL: {_hx_name:"INCLUDE_DETAIL",_hx_index:5,__enum__:"stx.log.core.FormatSum",toString:$estr}
};
stx_log_core_FormatSum.__constructs__ = [stx_log_core_FormatSum.INCLUDE_LEVEL,stx_log_core_FormatSum.INCLUDE_TIMESTAMP,stx_log_core_FormatSum.INCLUDE_TAGS,stx_log_core_FormatSum.INCLUDE_LOCATION,stx_log_core_FormatSum.INCLUDE_NEWLINE_FOR_DETAIL,stx_log_core_FormatSum.INCLUDE_DETAIL];
var stx_log_logger_DelegateRef = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.log.logger.DelegateRef"] = stx_log_logger_DelegateRef;
stx_log_logger_DelegateRef.__name__ = "stx.log.logger.DelegateRef";
stx_log_logger_DelegateRef.__interfaces__ = [stx_log_LoggerApi];
stx_log_logger_DelegateRef.prototype = {
	delegate: null
	,format: null
	,get_format: function() {
		return this.delegate[0].get_format();
	}
	,with_format: function(f) {
		var v = this.delegate[0].with_format(stx_nano_CTR.fromR(f(this.get_format())));
		var ret = new Array(1);
		ret[0] = v;
		return new stx_log_logger_DelegateRef(ret);
	}
	,logic: null
	,get_logic: function() {
		return this.delegate[0].get_logic();
	}
	,with_logic: function(f,pos) {
		var v = this.delegate[0].with_logic(stx_nano_CTR.fromR(f(this.get_logic())),pos);
		var ret = new Array(1);
		ret[0] = v;
		return new stx_log_logger_DelegateRef(ret);
	}
	,apply: function(v) {
		return this.delegate[0].apply(v);
	}
	,do_apply: function(v) {
		return this.delegate[0].do_apply(v);
	}
	,__class__: stx_log_logger_DelegateRef
};
var stx_log_Stringify = {};
stx_log_Stringify.fromString = function(str) {
	return function(ctr) {
		return stx_log_core_Entry.fromString(str);
	};
};
stx_log_Stringify.fromInt = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + self);
	};
};
stx_log_Stringify.fromFloat = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + self);
	};
};
stx_log_Stringify.fromBool = function(self) {
	return function(ctr) {
		return stx_log_core_Entry.fromString("" + (self == null ? "null" : "" + self));
	};
};
var stx_log_core_Entry = {};
stx_log_core_Entry._new = function(self) {
	return self;
};
stx_log_core_Entry.fromString = function(str) {
	return stx_log_core_Entry._new({ ctr : function(_) {
		return str;
	}, val : null});
};
stx_log_core_Entry.toString = function(this1) {
	return this1.ctr(this1.val);
};
var stx_log_log_term_Mod = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.log.log.term.Mod"] = stx_log_log_term_Mod;
stx_log_log_term_Mod.__name__ = "stx.log.log.term.Mod";
stx_log_log_term_Mod.__interfaces__ = [stx_log_LogApi];
stx_log_log_term_Mod.__super__ = stx_log_log_term_Base;
stx_log_log_term_Mod.prototype = $extend(stx_log_log_term_Base.prototype,{
	delegate: null
	,comply: function(entry,pos) {
		this.delegate.comply(entry,this.mod(pos));
	}
	,mod: null
	,__class__: stx_log_log_term_Mod
});
var stx_log_log_term_Level = function(delegate,level) {
	stx_log_log_term_Mod.call(this,delegate);
	this.level = level;
};
$hxClasses["stx.log.log.term.Level"] = stx_log_log_term_Level;
stx_log_log_term_Level.__name__ = "stx.log.log.term.Level";
stx_log_log_term_Level.__super__ = stx_log_log_term_Mod;
stx_log_log_term_Level.prototype = $extend(stx_log_log_term_Mod.prototype,{
	level: null
	,mod: function(pos) {
		var _gthis = this;
		return pos.with_stamp(function(stamp) {
			return stamp.relevel(_gthis.level);
		});
	}
	,__class__: stx_log_log_term_Level
});
var stx_log_Stamp = function(id,level,timestamp,tags,hidden) {
	if(hidden == null) {
		hidden = false;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		var _g = function(value) {
			return stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,value);
		};
		var value = "xxxxx";
		tmp = (function() {
			return _g(value);
		})();
	}
	this.id = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = 0;
	}
	this.level = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = _$Date_Date_$Impl_$.now();
	}
	this.timestamp = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = [];
	}
	this.tags = tmp;
	this.hidden = hidden;
};
$hxClasses["stx.log.Stamp"] = stx_log_Stamp;
stx_log_Stamp.__name__ = "stx.log.Stamp";
stx_log_Stamp.prototype = {
	id: null
	,level: null
	,timestamp: null
	,tags: null
	,hidden: null
	,copy: function(id,level,timestamp,tags,hidden) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,id);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.id;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,level);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.level;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,timestamp);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.timestamp;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tags);
		var tmp3;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp3 = v;
		} else {
			tmp3 = this.tags;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,hidden);
		var tmp4;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp4 = v;
		} else {
			tmp4 = this.hidden;
		}
		return new stx_log_Stamp(tmp,tmp1,tmp2,tmp3,tmp4);
	}
	,relevel: function(level) {
		return this.copy(null,level);
	}
	,tag: function(tag) {
		return this.copy(null,null,null,stx_lift_ArrayLift.snoc(this.tags,tag));
	}
	,hide: function() {
		return this.copy(this.id,this.level,this.timestamp,this.tags,true);
	}
	,toString: function() {
		var time = HxOverrides.dateStr(this.timestamp);
		var lev = stx_log_Level.toString(this.level);
		var out = "Stamp(" + lev + " " + time + ")";
		return out;
	}
	,toLogString: function(posInfos) {
		var pos = stx_LiftIf.if_else(stx_log_LogPosition.is_runtime(),function() {
			return stx_nano_Position._.to_vscode_clickable_link(posInfos);
		},function() {
			return "<unknown>";
		});
		var time = HxOverrides.dateStr(this.timestamp);
		var tags = this.tags.join(",");
		var lev = stx_log_Level.toString(this.level);
		var out = "" + lev + " " + time + " [" + tags + "] " + pos;
		return out;
	}
	,is_zero: function() {
		return this == stx_log_Stamp.ZERO;
	}
	,__class__: stx_log_Stamp
};
var stx_log_global_config_HasCustomLogger = {};
stx_log_global_config_HasCustomLogger.instance = null;
stx_log_global_config_HasCustomLogger.get_instance = function() {
	if(stx_log_global_config_HasCustomLogger.instance == null) {
		var ret = new Array(1);
		ret[0] = false;
		return stx_log_global_config_HasCustomLogger.instance = ret;
	} else {
		return stx_log_global_config_HasCustomLogger.instance;
	}
};
stx_log_global_config_HasCustomLogger._new = function() {
	return stx_log_global_config_HasCustomLogger.get_instance();
};
var stx_log_Signal = {};
stx_log_Signal.instance = null;
stx_log_Signal.get_instance = function() {
	return stx_LiftIf.if_else(stx_log_Signal.instance == null,function() {
		return stx_log_Signal.instance = new stx_log__$Signal_SignalCls();
	},function() {
		return stx_log_Signal.instance;
	});
};
stx_log_Signal._new = function() {
	return stx_log_Signal.get_instance();
};
stx_log_Signal.handle = function(this1,x) {
	stx_log_Signal.has_custom = true;
	this1.handle(x);
};
stx_log_Signal.transmit = function(v) {
	stx_log_Signal.get_instance().trigger(v);
};
var stx_log_DebugLogger = function(logic,format) {
	stx_log_logger_Base.call(this,logic,format);
};
$hxClasses["stx.log.DebugLogger"] = stx_log_DebugLogger;
stx_log_DebugLogger.__name__ = "stx.log.DebugLogger";
stx_log_DebugLogger.__super__ = stx_log_logger_Base;
stx_log_DebugLogger.prototype = $extend(stx_log_logger_Base.prototype,{
	__class__: stx_log_DebugLogger
});
var stx_log_StringCtr = {};
stx_log_StringCtr._new = function(self) {
	return self;
};
stx_log_StringCtr.unit = function() {
	return stx_log_StringCtr.lift({ ctr : Std.string});
};
stx_log_StringCtr.make = function(fn) {
	return stx_log_StringCtr.lift({ ctr : fn});
};
stx_log_StringCtr.lift = function(self) {
	return stx_log_StringCtr._new(self);
};
stx_log_StringCtr.capture = function(this1,val) {
	return { ctr : $bind(this1,this1.ctr), val : val};
};
stx_log_StringCtr.prj = function(this1) {
	return this1;
};
stx_log_StringCtr.get_self = function(this1) {
	return stx_log_StringCtr.lift(this1);
};
var stx_log_Value = function(detail,source) {
	this.detail = detail;
	this.source = source;
};
$hxClasses["stx.log.Value"] = stx_log_Value;
stx_log_Value.__name__ = "stx.log.Value";
stx_log_Value.make = function(detail,source) {
	return new stx_log_Value(detail,stx_log_LogPosition.fromPos(source));
};
stx_log_Value.prototype = {
	detail: null
	,stamp: null
	,get_stamp: function() {
		return this.source.stamp;
	}
	,source: null
	,restamp: function(fn) {
		var next = this.source.with_stamp(fn);
		return new stx_log_Value(this.detail,next);
	}
	,toString: function() {
		var _gthis = this;
		var self = stx_pico_OptionLift.map(this.source.pos,function(x) {
			return _gthis.source.stamp.toLogString(x);
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = ".";
		}
		return tmp + ":" + (this.detail == null ? "null" : stx_log_core_Entry.toString(this.detail));
	}
	,__class__: stx_log_Value
};
var stx_log_env_Verbose = {};
stx_log_env_Verbose._new = function() {
	return false;
};
var stx_log_filter_term_Always = function() {
	stx_log_global_config_IsFilteringWithTags._new()[0] = true;
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.Always"] = stx_log_filter_term_Always;
stx_log_filter_term_Always.__name__ = "stx.log.filter.term.Always";
stx_log_filter_term_Always.__super__ = stx_log_Filter;
stx_log_filter_term_Always.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		var info = value.source;
		return stx_nano_Report.unit();
	}
	,canonical: function() {
		return "Always";
	}
	,__class__: stx_log_filter_term_Always
});
var stx_log_filter_term_Line = function(n) {
	stx_log_Filter.call(this);
	this.n = n;
};
$hxClasses["stx.log.filter.term.Line"] = stx_log_filter_term_Line;
stx_log_filter_term_Line.__name__ = "stx.log.filter.term.Line";
stx_log_filter_term_Line.__super__ = stx_log_Filter;
stx_log_filter_term_Line.prototype = $extend(stx_log_Filter.prototype,{
	n: null
	,apply: function(v) {
		var _gthis = this;
		var info = v.source;
		var self = stx_pico_OptionLift.map(info.pos,function(x) {
			return stx_nano_Position.get_lineNumber(x) == _gthis.n;
		});
		var result;
		if(self._hx_index == 0) {
			var v = self.v;
			result = v;
		} else {
			result = false;
		}
		return stx_LiftIf.if_else(result,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Line.hx", lineNumber : 14, className : "stx.log.filter.term.Line", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_NotLine(_gthis.n))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Line($n)";
	}
	,__class__: stx_log_filter_term_Line
});
var stx_log_filter_term_Lines = function(l,h) {
	stx_log_Filter.call(this);
	this.l = l;
	this.h = h;
};
$hxClasses["stx.log.filter.term.Lines"] = stx_log_filter_term_Lines;
stx_log_filter_term_Lines.__name__ = "stx.log.filter.term.Lines";
stx_log_filter_term_Lines.__super__ = stx_log_Filter;
stx_log_filter_term_Lines.prototype = $extend(stx_log_Filter.prototype,{
	l: null
	,h: null
	,apply: function(v) {
		var _gthis = this;
		var info = v.source;
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			if(stx_nano_Position.get_lineNumber(pos) >= _gthis.l) {
				return stx_nano_Position.get_lineNumber(pos) <= _gthis.h;
			} else {
				return false;
			}
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_LiftIf.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Lines.hx", lineNumber : 19, className : "stx.log.filter.term.Lines", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_NotOfRange(_gthis.l,_gthis.h))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Line($n)";
	}
	,__class__: stx_log_filter_term_Lines
});
var stx_log_filter_term_Method = function(method) {
	stx_log_global_config_IsFilteringWithTags._new()[0] = true;
	stx_log_Filter.call(this);
	this.method = method;
};
$hxClasses["stx.log.filter.term.Method"] = stx_log_filter_term_Method;
stx_log_filter_term_Method.__name__ = "stx.log.filter.term.Method";
stx_log_filter_term_Method.__super__ = stx_log_Filter;
stx_log_filter_term_Method.prototype = $extend(stx_log_Filter.prototype,{
	method: null
	,apply: function(value) {
		var _gthis = this;
		var info = value.source;
		var self = stx_pico_OptionLift.map(info.pos,function(pos) {
			return stx_nano_Position.get_methodName(pos) == _gthis.method;
		});
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = false;
		}
		return stx_LiftIf.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Method.hx", lineNumber : 16, className : "stx.log.filter.term.Method", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_NotInMethod(_gthis.method))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Method(" + this.method + ")";
	}
	,__class__: stx_log_filter_term_Method
});
var stx_log_filter_term_Never = function() {
	stx_log_global_config_IsFilteringWithTags._new()[0] = true;
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.Never"] = stx_log_filter_term_Never;
stx_log_filter_term_Never.__name__ = "stx.log.filter.term.Never";
stx_log_filter_term_Never.__super__ = stx_log_Filter;
stx_log_filter_term_Never.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		var info = value.source;
		return stx_nano_Report.make(stx_fail_LogFailure.E_Log_Zero,{ fileName : "stx/log/filter/term/Never.hx", lineNumber : 10, className : "stx.log.filter.term.Never", methodName : "apply"});
	}
	,canonical: function() {
		return "Never";
	}
	,__class__: stx_log_filter_term_Never
});
var stx_log_filter_term_Pack = function(pack) {
	stx_log_Filter.call(this);
	this.pack = pack;
};
$hxClasses["stx.log.filter.term.Pack"] = stx_log_filter_term_Pack;
stx_log_filter_term_Pack.__name__ = "stx.log.filter.term.Pack";
stx_log_filter_term_Pack.__super__ = stx_log_Filter;
stx_log_filter_term_Pack.prototype = $extend(stx_log_Filter.prototype,{
	pack: null
	,apply: function(v) {
		var _gthis = this;
		haxe_Log.trace("apply " + Std.string(v) + " " + (this.pack == null ? "null" : stx_nano_Cluster.toString(this.pack)),{ fileName : "stx/log/filter/term/Pack.hx", lineNumber : 11, className : "stx.log.filter.term.Pack", methodName : "apply"});
		var canonical = this.pack.join(".");
		var query = new EReg("" + canonical + ".*","g");
		var self = stx_pico_OptionLift.map(v.source.pos,function(pos) {
			var string = stx_pico_Identifier.get_pack(stx_pico_Identifier.lift(stx_nano_Position.get_fileName(pos))).join(".");
			return query.match(string);
		});
		var tmp;
		if(self._hx_index == 0) {
			var v1 = self.v;
			tmp = v1;
		} else {
			tmp = false;
		}
		return stx_LiftIf.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Pack.hx", lineNumber : 24, className : "stx.log.filter.term.Pack", methodName : "apply"});
			var self = stx_pico_OptionLift.map(v.source.pos,function(pos) {
				return stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos))),_gthis.pack.join("."));
			});
			var data;
			if(self._hx_index == 0) {
				var v1 = self.v;
				data = v1;
			} else {
				data = stx_fail_LogFailure.E_Log_SourceNotInPackage("<unknown>",_gthis.pack.join("."));
			}
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(data)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Pack(" + (this.pack == null ? "null" : stx_nano_Cluster.toString(this.pack)) + ")";
	}
	,__class__: stx_log_filter_term_Pack
});
var stx_log_filter_term_PosPredicate = function(delegate) {
	stx_log_Filter.call(this);
	this.delegate = delegate;
};
$hxClasses["stx.log.filter.term.PosPredicate"] = stx_log_filter_term_PosPredicate;
stx_log_filter_term_PosPredicate.__name__ = "stx.log.filter.term.PosPredicate";
stx_log_filter_term_PosPredicate.__super__ = stx_log_Filter;
stx_log_filter_term_PosPredicate.prototype = $extend(stx_log_Filter.prototype,{
	delegate: null
	,apply: function(value) {
		return this.delegate.apply(value.source);
	}
	,canonical: function() {
		return "PosPredicate";
	}
	,__class__: stx_log_filter_term_PosPredicate
});
var stx_log_filter_term_Race = function() {
	stx_log_Filter.call(this);
	this.races = [];
};
$hxClasses["stx.log.filter.term.Race"] = stx_log_filter_term_Race;
stx_log_filter_term_Race.__name__ = "stx.log.filter.term.Race";
stx_log_filter_term_Race.__super__ = stx_log_Filter;
stx_log_filter_term_Race.prototype = $extend(stx_log_Filter.prototype,{
	races: null
	,apply: function(value) {
		var race = Lambda.fold(this.races,function(next,memo) {
			var race;
			switch(memo._hx_index) {
			case 0:
				var t = memo.v;
				var v = t;
				race = stx_LiftIf.if_else(next.timestamp > v.timestamp,function() {
					return haxe_ds_Option.Some(next);
				},function() {
					return haxe_ds_Option.Some(v);
				});
				break;
			case 1:
				race = haxe_ds_Option.Some(next);
				break;
			}
			return race;
		},haxe_ds_Option.None);
		if(race._hx_index == 0) {
			var v = race.v;
			haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 24, className : "stx.log.filter.term.Race", methodName : "apply"});
			var out = value.source.match(v);
			if(out) {
				haxe_Log.trace("wins race",{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 27, className : "stx.log.filter.term.Race", methodName : "apply"});
			}
			return stx_LiftIf.if_else(out,function() {
				return stx_nano_Report.unit();
			},function() {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 29, className : "stx.log.filter.term.Race", methodName : "apply"});
				return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_LosesRace)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
			});
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Race.hx", lineNumber : 30, className : "stx.log.filter.term.Race", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_LosesRace)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		}
	}
	,canonical: function() {
		return "Race(" + Std.string(this.races) + ")";
	}
	,__class__: stx_log_filter_term_Race
});
var stx_log_filter_term_Tag = function(tag) {
	stx_log_global_config_IsFilteringWithTags._new()[0] = true;
	stx_log_Filter.call(this);
	this.tag = tag;
};
$hxClasses["stx.log.filter.term.Tag"] = stx_log_filter_term_Tag;
stx_log_filter_term_Tag.__name__ = "stx.log.filter.term.Tag";
stx_log_filter_term_Tag.__super__ = stx_log_Filter;
stx_log_filter_term_Tag.prototype = $extend(stx_log_Filter.prototype,{
	tag: null
	,apply: function(value) {
		var _gthis = this;
		var info = value.source;
		return stx_LiftIf.if_else(stx_pico_OptionLift.is_defined(stx_lift_ArrayLift.search(info.stamp.tags,function(s) {
			return _gthis.tag == s;
		})),function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Tag.hx", lineNumber : 16, className : "stx.log.filter.term.Tag", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log_DoesNotContainTag(_gthis.tag))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Tag(" + this.tag + ")";
	}
	,__class__: stx_log_filter_term_Tag
});
var stx_log_filter_term_Tagless = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.Tagless"] = stx_log_filter_term_Tagless;
stx_log_filter_term_Tagless.__name__ = "stx.log.filter.term.Tagless";
stx_log_filter_term_Tagless.__super__ = stx_log_Filter;
stx_log_filter_term_Tagless.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		var info = value.source;
		if(info.stamp.tags.length <= 0) {
			return stx_nano_Report.unit();
		} else {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Tagless.hx", lineNumber : 12, className : "stx.log.filter.term.Tagless", methodName : "apply"});
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_LogFailure.E_Log("not tagless"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		}
	}
	,canonical: function() {
		return "Tagless";
	}
	,__class__: stx_log_filter_term_Tagless
});
var stx_log_filter_term_Type = function(type) {
	stx_log_Filter.call(this);
	this.type = type;
};
$hxClasses["stx.log.filter.term.Type"] = stx_log_filter_term_Type;
stx_log_filter_term_Type.__name__ = "stx.log.filter.term.Type";
stx_log_filter_term_Type.__super__ = stx_log_Filter;
stx_log_filter_term_Type.prototype = $extend(stx_log_Filter.prototype,{
	type: null
	,apply: function(v) {
		var _gthis = this;
		var self = stx_pico_OptionLift.map(v.source.pos,function(pos) {
			return _gthis.type == stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos)));
		});
		var tmp;
		if(self._hx_index == 0) {
			var v1 = self.v;
			tmp = v1;
		} else {
			tmp = false;
		}
		return stx_LiftIf.if_else(tmp,function() {
			return stx_nano_Report.unit();
		},function() {
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/log/filter/term/Type.hx", lineNumber : 14, className : "stx.log.filter.term.Type", methodName : "apply"});
			var self = stx_pico_OptionLift.map(v.source.pos,function(pos) {
				return stx_fail_LogFailure.E_Log_SourceNotInPackage(stx_pico_Identifier.fromPath(new haxe_io_Path(stx_nano_Position.get_fileName(pos))),_gthis.type);
			});
			var data;
			if(self._hx_index == 0) {
				var v1 = self.v;
				data = v1;
			} else {
				data = stx_fail_LogFailure.E_Log_SourceNotInPackage("<unknown>","<unknown>");
			}
			return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(data)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
		});
	}
	,canonical: function() {
		return "Type(\"" + this.type + "\")";
	}
	,__class__: stx_log_filter_term_Type
});
var stx_log_filter_term_Unit = function() {
	stx_log_Filter.call(this);
};
$hxClasses["stx.log.filter.term.Unit"] = stx_log_filter_term_Unit;
stx_log_filter_term_Unit.__name__ = "stx.log.filter.term.Unit";
stx_log_filter_term_Unit.__super__ = stx_log_Filter;
stx_log_filter_term_Unit.prototype = $extend(stx_log_Filter.prototype,{
	apply: function(value) {
		return stx_nano_Report.unit();
	}
	,canonical: function() {
		return "Unit";
	}
	,__class__: stx_log_filter_term_Unit
});
var stx_log_filter_term_race_Stamp = {};
stx_log_filter_term_race_Stamp._new = function(self) {
	return self;
};
stx_log_filter_term_race_Stamp.lift = function(self) {
	return stx_log_filter_term_race_Stamp._new(self);
};
stx_log_filter_term_race_Stamp.make = function(scoping,timestamp,scope) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,scope);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_log_ScopeSum.ScopeMethod;
	}
	return { scoping : scoping, timestamp : timestamp, scope : tmp};
};
stx_log_filter_term_race_Stamp.prj = function(this1) {
	return this1;
};
stx_log_filter_term_race_Stamp.get_self = function(this1) {
	return stx_log_filter_term_race_Stamp.lift(this1);
};
var stx_log_global_config_ReinstateTagless = {};
stx_log_global_config_ReinstateTagless.instance = null;
stx_log_global_config_ReinstateTagless.get_instance = function() {
	if(stx_log_global_config_ReinstateTagless.instance == null) {
		var ret = new Array(1);
		ret[0] = false;
		return stx_log_global_config_ReinstateTagless.instance = ret;
	} else {
		return stx_log_global_config_ReinstateTagless.instance;
	}
};
stx_log_global_config_ReinstateTagless._new = function() {
	return stx_log_global_config_ReinstateTagless.get_instance();
};
var stx_log_log_term_Anon = function(_comply) {
	this._comply = _comply;
};
$hxClasses["stx.log.log.term.Anon"] = stx_log_log_term_Anon;
stx_log_log_term_Anon.__name__ = "stx.log.log.term.Anon";
stx_log_log_term_Anon.__interfaces__ = [stx_log_LogApi];
stx_log_log_term_Anon.__super__ = stx_log_log_term_Base;
stx_log_log_term_Anon.prototype = $extend(stx_log_log_term_Base.prototype,{
	_comply: null
	,comply: function(entry,pos) {
		this._comply(entry,pos);
	}
	,__class__: stx_log_log_term_Anon
});
var stx_log_log_term_Empty = function() {
};
$hxClasses["stx.log.log.term.Empty"] = stx_log_log_term_Empty;
stx_log_log_term_Empty.__name__ = "stx.log.log.term.Empty";
stx_log_log_term_Empty.__interfaces__ = [stx_log_LogApi];
stx_log_log_term_Empty.__super__ = stx_log_log_term_Base;
stx_log_log_term_Empty.prototype = $extend(stx_log_log_term_Base.prototype,{
	comply: function(entry,pos) {
	}
	,__class__: stx_log_log_term_Empty
});
var stx_log_log_term_ModAnon = function(delegate,_mod) {
	stx_log_log_term_Mod.call(this,delegate);
	this._mod = _mod;
};
$hxClasses["stx.log.log.term.ModAnon"] = stx_log_log_term_ModAnon;
stx_log_log_term_ModAnon.__name__ = "stx.log.log.term.ModAnon";
stx_log_log_term_ModAnon.__super__ = stx_log_log_term_Mod;
stx_log_log_term_ModAnon.prototype = $extend(stx_log_log_term_Mod.prototype,{
	_mod: null
	,mod: function(pos) {
		return this._mod(pos);
	}
	,__class__: stx_log_log_term_ModAnon
});
var stx_log_output_term_Js = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.log.output.term.Js"] = stx_log_output_term_Js;
stx_log_output_term_Js.__name__ = "stx.log.output.term.Js";
stx_log_output_term_Js.__interfaces__ = [stx_log_OutputApi];
stx_log_output_term_Js.__super__ = stx_pico_Clazz;
stx_log_output_term_Js.prototype = $extend(stx_pico_Clazz.prototype,{
	render: function(v,pos) {
		var msg = "";
		msg += js_Boot.__string_rec(v,"");
		var d;
		var tmp;
		if(typeof(document) != "undefined") {
			d = document.getElementById("haxe:trace");
			tmp = d != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			d.innerHTML += __unhtml(msg) + "<br/>";
		} else if(typeof console != "undefined" && console.log != null) {
			console.log(msg);
		}
	}
	,__class__: stx_log_output_term_Js
});
var stx_nano_APP = {};
stx_nano_APP._new = function(self) {
	return self;
};
stx_nano_APP.lift = function(self) {
	return stx_nano_APP._new(self);
};
stx_nano_APP.prj = function(this1) {
	return this1;
};
stx_nano_APP.get_self = function(this1) {
	return stx_nano_APP.lift(this1);
};
stx_nano_APP.fromR = function(r) {
	return stx_nano_APP.lift(stx_Tup2.tuple2(function(_) {
		return r;
	},null));
};
stx_nano_APP.reply = function(this1) {
	var f = this1.l;
	var p = this1.r;
	return f(p);
};
var stx_nano_AccrualLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.AccrualLift"] = stx_nano_AccrualLift;
stx_nano_AccrualLift.__name__ = "stx.nano.AccrualLift";
stx_nano_AccrualLift.make = function() {
	return new stx_nano_AccrualLift();
};
stx_nano_AccrualLift.lift = function(self) {
	return stx_nano_Accrual.lift(self);
};
stx_nano_AccrualLift.errata = function(self,fn) {
	return stx_nano_Accrual.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.errata(x,fn);
	}));
};
stx_nano_AccrualLift.errate = function(self,fn) {
	return stx_nano_Accrual.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.errate(x,fn);
	}));
};
stx_nano_AccrualLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(self,function(x) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x.value);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			return stx_nano_AccrualLift.errata(fn(t),function(e) {
				return x.get_error().toError().concat(e);
			});
		case 1:
			return stx_nano_Accrual.fromReceipt(stx_nano_Receipt.fromDefect(x.toDefect()));
		}
	});
};
stx_nano_AccrualLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_ReceiptLift.map(x,fn);
	});
};
stx_nano_AccrualLift.escape = function(self,fn) {
	return tink_core_Future.map(self,fn);
};
stx_nano_AccrualLift.__super__ = stx_pico_Clazz;
stx_nano_AccrualLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_AccrualLift
});
var stx_nano_Accrual = {};
stx_nano_Accrual._new = function(self) {
	return self;
};
stx_nano_Accrual.unit = function() {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Receipt.unit());
	});
};
stx_nano_Accrual.fromReceipt = function(self) {
	return stx_nano_Accrual.lift(tink_core_Future.irreversible(function(cb) {
		cb(self);
	}));
};
stx_nano_Accrual.pure = function(self) {
	return stx_nano_Accrual.make(self);
};
stx_nano_Accrual.make = function(value,error) {
	return stx_nano_Accrual.lift(tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Receipt.make(value,error));
	}));
};
stx_nano_Accrual.ok = function(self) {
	return stx_nano_Accrual.pure(self);
};
stx_nano_Accrual.no = function(self) {
	return stx_nano_Accrual.make(null,self);
};
stx_nano_Accrual.lift = function(self) {
	return self;
};
stx_nano_Accrual.prj = function(this1) {
	return this1;
};
stx_nano_Accrual.get_self = function(this1) {
	return stx_nano_Accrual.lift(this1);
};
var stx_nano_AlertLift = function() { };
$hxClasses["stx.nano.AlertLift"] = stx_nano_AlertLift;
stx_nano_AlertLift.__name__ = "stx.nano.AlertLift";
stx_nano_AlertLift.fold = function(self,pure,unit) {
	return tink_core_Future.map(self,function(report) {
		if(report == null) {
			return unit();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				return pure(v);
			case 1:
				return unit();
			}
		}
	});
};
stx_nano_AlertLift.execute = function(self,fn) {
	return tink_core_Future.flatMap(self,function(report) {
		var tmp;
		if(report == null) {
			tmp = fn();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				tmp = stx_nano_Alert.pure(v);
				break;
			case 1:
				tmp = fn();
				break;
			}
		}
		return tmp;
	});
};
stx_nano_AlertLift.adjust = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.flatMap(self,function(report) {
		return fn(report);
	}));
};
stx_nano_AlertLift.tap = function(self,fn,pos) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(report) {
		fn(report,pos);
		return report;
	}));
};
stx_nano_AlertLift.flat_fold = function(self,ers,nil) {
	return tink_core_Future.flatMap(self,function(report) {
		if(report == null) {
			return nil();
		} else {
			switch(report._hx_index) {
			case 0:
				var v = report.v;
				return ers(v);
			case 1:
				return nil();
			}
		}
	});
};
stx_nano_AlertLift.resolve = function(self,val) {
	return stx_nano_Pledge.lift(stx_nano_AlertLift.fold(self,function(e) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Alert.hx", lineNumber : 94, className : "stx.nano.AlertLift", methodName : "resolve"});
	},function() {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,val);
	}));
};
stx_nano_AlertLift.ignore = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(report) {
		return stx_nano_ReportLift.ignore(report,fn);
	}));
};
stx_nano_AlertLift.anyway = function(self,fn) {
	return tink_core_Future.flatMap(self,function(report) {
		return stx_nano_Alert.prj(fn(report));
	});
};
stx_nano_AlertLift.toTinkPromise = function(self) {
	return stx_nano_AlertLift.fold(self,function(er) {
		return tink_core_Outcome.Failure(stx_nano_lift_LiftError.toTinkError(er));
	},function() {
		return tink_core_Outcome.Success(0);
	});
};
stx_nano_AlertLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(self,stx_nano_Alert.prj(that)),function(tp) {
		return stx_nano_ReportLift.concat(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	});
	return out;
};
var stx_nano_Alert = {};
stx_nano_Alert.unit = function() {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Report.unit());
	});
};
stx_nano_Alert.pure = function(e) {
	return tink_core_Future.irreversible(function(cb) {
		cb(stx_nano_Report.pure(e));
	});
};
stx_nano_Alert.make = function(self) {
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_nano_Alert.any = function(arr) {
	return stx_nano_Alert.lift(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(stx_nano_Cluster.toIter(arr),function(next,memo) {
		return tink_core_Future.map(stx_nano_Alert.prj(next),function(report) {
			return stx_nano_ReportLift.concat(memo,report);
		});
	},stx_nano_Report.unit()));
};
stx_nano_Alert.seq = function(arr,fn) {
	return stx_nano_Alert.lift(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(stx_nano_Cluster.toIter(arr),function(next,memo) {
		var tmp;
		if(memo == null) {
			tmp = fn(next);
		} else {
			switch(memo._hx_index) {
			case 0:
				var v = memo.v;
				tmp = stx_nano_Report.alert(stx_fail_RefuseLift.report(v));
				break;
			case 1:
				tmp = fn(next);
				break;
			}
		}
		return tmp;
	},stx_nano_Report.unit()));
};
stx_nano_Alert._new = function(self) {
	return self;
};
stx_nano_Alert.lift = function(self) {
	return stx_nano_Alert._new(self);
};
stx_nano_Alert.prj = function(this1) {
	return this1;
};
stx_nano_Alert.get_self = function(this1) {
	return stx_nano_Alert.lift(this1);
};
stx_nano_Alert.errata = function(this1,fn) {
	return tink_core_Future.map(this1,function(report) {
		return stx_nano_Report.errata(report,fn);
	});
};
stx_nano_Alert.errate = function(this1,fn) {
	return stx_nano_Alert.errata(this1,function(err) {
		return stx_fail_Refuse.errate(err,fn);
	});
};
stx_nano_Alert.handle = function(this1,fn) {
	return this1.handle(fn);
};
var stx_nano_Blob = {};
stx_nano_Blob.asInt = function(this1) {
	return this1;
};
stx_nano_Blob.asString = function(this1) {
	return this1;
};
stx_nano_Blob.asBool = function(this1) {
	return this1;
};
stx_nano_Blob.asFloat = function(this1) {
	return this1;
};
stx_nano_Blob.typeof = function(this1) {
	return Type.typeof(this1);
};
var stx_nano_Bools = function() { };
$hxClasses["stx.nano.Bools"] = stx_nano_Bools;
stx_nano_Bools.__name__ = "stx.nano.Bools";
stx_nano_Bools.truthiness = function(str) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,str),StringTools.trim);
	var _g;
	if(self._hx_index == 0) {
		var v = self.v;
		_g = v;
	} else {
		_g = null;
	}
	if(_g == null) {
		return false;
	} else {
		switch(_g) {
		case "0":
			return false;
		case "1":
			return true;
		case "false":
			return false;
		case "true":
			return true;
		default:
			return true;
		}
	}
};
var stx_nano_ByteSize = {};
stx_nano_ByteSize.endianness = function(this1) {
	switch(this1) {
	case "dbe":case "fbe":case "i16+":case "i24+":case "i32+":case "ui16+":case "ui24+":
		return haxe_ds_Option.Some(stx_nano_Endianness.BIG_ENDIAN);
	case "dle":case "fle":case "i16-":case "i24-":case "i32-":case "ui16-":case "ui24-":
		return haxe_ds_Option.Some(stx_nano_Endianness.LITTLE_ENDIAN);
	default:
		return haxe_ds_Option.None;
	}
};
stx_nano_ByteSize.get_length = function(this1) {
	switch(this1) {
	case "dbe":case "dle":
		return 8;
	case "fbe":case "fle":case "i32+":case "i32-":
		return 4;
	case "i8":
		return 1;
	case "i16+":case "i16-":case "ui16+":case "ui16-":
		return 2;
	case "i24+":case "i24-":case "ui24+":case "ui24-":
		return 3;
	default:
		return -1;
	}
};
stx_nano_ByteSize.get_width = function(this1) {
	var l = stx_nano_ByteSize.get_length(this1);
	if(l == -1) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(l);
	}
};
var stx_nano_Cell = {};
stx_nano_Cell.get_value = function(this1) {
	return this1.pop();
};
stx_nano_Cell._new = function(self) {
	return self;
};
stx_nano_Cell.lift = function(self) {
	return self;
};
stx_nano_Cell.make = function(fn) {
	return stx_nano_Cell.lift({ pop : fn});
};
stx_nano_Cell.many = function(self) {
	return stx_nano_Cell.lift({ pop : function() {
		var out = [];
		var _g_current = 0;
		var _g_array = self;
		while(_g_current < _g_array.length) {
			var x = _g_array[_g_current++];
			out.push(x());
		}
		return stx_nano_Cluster.lift(out);
	}});
};
stx_nano_Cell.toString = function(this1) {
	return "@:[" + Std.string(this1.pop()) + "]";
};
stx_nano_Cell.pure = function(v) {
	return stx_nano_Cell.make(function() {
		return v;
	});
};
var stx_nano_Char = {};
stx_nano_Char._new = function(self) {
	return self;
};
stx_nano_Char.code = function(this1) {
	return HxOverrides.cca(this1,0);
};
var stx_nano_CharsLift = function() { };
$hxClasses["stx.nano.CharsLift"] = stx_nano_CharsLift;
stx_nano_CharsLift.__name__ = "stx.nano.CharsLift";
stx_nano_CharsLift.existishness = function(str) {
	if(str == null) {
		return false;
	} else if(str == "") {
		return false;
	} else {
		return true;
	}
};
stx_nano_CharsLift.parse_bool = function(self) {
	var vLower = self.toLowerCase();
	switch(vLower) {
	case "false":
		return haxe_ds_Option.Some(false);
	case "true":
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.Some(true);
		}
		break;
	default:
		switch(self) {
		case "0":
			return haxe_ds_Option.Some(false);
		case "1":
			return haxe_ds_Option.Some(true);
		default:
			return haxe_ds_Option.None;
		}
	}
};
stx_nano_CharsLift.parse_int = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Std.parseInt(self)),function(i) {
		return !isNaN(i);
	});
};
stx_nano_CharsLift.parse_float = function(self) {
	return stx_pico_OptionLift.filter(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,parseFloat(self)),function(i) {
		return !isNaN(i);
	});
};
stx_nano_CharsLift.starts_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,0,frag.length)) {
		return true;
	} else {
		return false;
	}
};
stx_nano_CharsLift.ends_with = function(self,frag) {
	if(self.length >= frag.length && frag == HxOverrides.substr(self,self.length - frag.length,null)) {
		return true;
	} else {
		return false;
	}
};
stx_nano_CharsLift.contains = function(self,substr) {
	return self.indexOf(substr) != -1;
};
stx_nano_CharsLift.replace = function(self,sub,by) {
	return StringTools.replace(self,sub,by);
};
stx_nano_CharsLift.brackets = function(self,l,r) {
	return "" + l + self + r;
};
stx_nano_CharsLift.prepend = function(self,before) {
	return stx_nano_Chars.add(before,self);
};
stx_nano_CharsLift.append = function(self,after) {
	return stx_nano_Chars.add(self,after);
};
stx_nano_CharsLift.cca = function(self,i) {
	return HxOverrides.cca(self,i);
};
stx_nano_CharsLift.at = function(self,i) {
	return self.charAt(i);
};
stx_nano_CharsLift.chunk = function(self,len) {
	if(len == null) {
		len = 1;
	}
	var start = 0;
	var end = Math.round(Math.min(start + len,self.length));
	if(end == 0) {
		return [];
	} else {
		var prefix = HxOverrides.substr(self,start,end);
		var rest = HxOverrides.substr(self,end,null);
		return [prefix].concat(stx_nano_CharsLift.chunk(rest,len));
	}
};
stx_nano_CharsLift.chars = function(self) {
	var a = [];
	var _g = 0;
	var _g1 = self.length;
	while(_g < _g1) {
		var i = _g++;
		a.push(self.charAt(i));
	}
	return a;
};
stx_nano_CharsLift.AlphaUpperAlphaPattern = function() {
	return new EReg("-([a-z])([A-Z])","g");
};
stx_nano_CharsLift.PascalcaseToSnakecase = function(self) {
};
stx_nano_CharsLift.split = function(self,sep) {
	return self.split(sep);
};
stx_nano_CharsLift.strip_white = function(self) {
	var l = self.length;
	var i = 0;
	var sb_b = "";
	while(i < l) {
		if(!stx_nano_CharsLift.is_space(self,i)) {
			sb_b += Std.string(self.charAt(i));
		}
		++i;
	}
	return sb_b;
};
stx_nano_CharsLift.replace_recurse = function(self,sub,by) {
	if(sub.length == 0) {
		return stx_nano_CharsLift.replace(self,sub,by);
	}
	if(by.indexOf(sub) >= 0) {
		throw haxe_Exception.thrown("Infinite recursion");
	}
	var ns = self.toString();
	var olen = 0;
	var nlen = ns.length;
	while(olen != nlen) {
		olen = ns.length;
		stx_nano_CharsLift.replace(sub,by,ns);
		nlen = ns.length;
	}
	return ns;
};
stx_nano_CharsLift.toIter = function(self) {
	var index = 0;
	return stx_nano_Iter.make({ hasNext : function() {
		return index < self.length;
	}, next : function() {
		if(index < self.length) {
			index += 1;
			return HxOverrides.substr(self,index - 1,1);
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Chars.hx", lineNumber : 195, className : "stx.nano.CharsLift", methodName : "toIter"});
			throw haxe_Exception.thrown(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
				return stx_nano_Digests.e_undefined(_);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		}
	}});
};
stx_nano_CharsLift.uncapitalize_first_letter = function(self) {
	self = HxOverrides.substr(self,0,1).toLowerCase() + HxOverrides.substr(self,1,self.length);
	return self;
};
stx_nano_CharsLift.capitalize_first_letter = function(self) {
	self = HxOverrides.substr(self,0,1).toUpperCase() + HxOverrides.substr(self,1,self.length);
	return self;
};
stx_nano_CharsLift.capitalize_hyphens = function(self) {
	return stx_nano_CharsLift.capitalize_delim(self,"-");
};
stx_nano_CharsLift.capitalize_delim = function(self,d) {
	var r = self;
	var n = r.indexOf(d);
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + stx_nano_CharsLift.capitalize_first_letter(after);
		n = r.indexOf(d,n + 1);
	}
	return r;
};
stx_nano_CharsLift.to_dashes = function(self,toLower) {
	if(toLower == null) {
		toLower = true;
	}
	var self1 = new EReg("([a-zA-Z])(?=[A-Z])","g").map(self,function(re) {
		return "" + re.matched(1) + "-";
	});
	if(toLower == true) {
		self1 = self1.toLowerCase();
	}
	return self1;
};
stx_nano_CharsLift.replace_vars = function(self,params) {
	if(params != null) {
		var h = params.h;
		var k_h = h;
		var k_keys = Object.keys(h);
		var k_length = k_keys.length;
		var k_current = 0;
		while(k_current < k_length) {
			var k = k_keys[k_current++];
			self = StringTools.replace(self,"${" + k + "}",params.h[k]);
		}
	}
	return self;
};
stx_nano_CharsLift.is_space = function(self,pos) {
	var c = HxOverrides.cca(self,pos);
	if(!(c >= 9 && c <= 13)) {
		return c == 32;
	} else {
		return true;
	}
};
stx_nano_CharsLift.is_defined = function(self) {
	return self != "";
};
stx_nano_CharsLift.chr = function(i) {
	return String.fromCodePoint(i);
};
stx_nano_CharsLift.underscore = function(s) {
	var _this_r = new RegExp("::","g".split("u").join(""));
	s = s.replace(_this_r,"/");
	var _this_r = new RegExp("([A-Z]+)([A-Z][a-z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("([a-z\\d])([A-Z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("-","g".split("u").join(""));
	s = s.replace(_this_r,"_");
	return s.toLowerCase();
};
stx_nano_CharsLift.after = function(self,sub) {
	var idx = self.indexOf(sub);
	if(idx < 0) {
		return "";
	}
	return self.substring(idx + sub.length,self.length);
};
stx_nano_CharsLift.before = function(self,sub) {
	return self.substring(0,self.indexOf(sub));
};
stx_nano_CharsLift.quote = function(str) {
	return "\"" + str + "\"";
};
stx_nano_CharsLift.requote = function(self) {
	return stx_nano_CharsLift.replace(self,"\"","\\\"");
};
stx_nano_CharsLift.truncate = function(self,int) {
	return HxOverrides.substr(self,0,int);
};
stx_nano_CharsLift.rdropn = function(self,int) {
	return HxOverrides.substr(self,0,self.length - int);
};
stx_nano_CharsLift.ldropn = function(self,int) {
	return HxOverrides.substr(self,int,null);
};
var stx_nano_Chars = {};
stx_nano_Chars.lift = function(self) {
	return stx_nano_Chars._new(self);
};
stx_nano_Chars._new = function(self) {
	return self;
};
stx_nano_Chars.char = function(this1,int) {
	return stx_nano_Char._new(this1.charAt(int));
};
stx_nano_Chars.add = function(this1,that) {
	return this1 + that;
};
var stx_nano_ChunkSum = $hxEnums["stx.nano.ChunkSum"] = { __ename__:"stx.nano.ChunkSum",__constructs__:null
	,Val: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.ChunkSum",toString:$estr}; },$_._hx_name="Val",$_.__params__ = ["v"],$_)
	,Tap: {_hx_name:"Tap",_hx_index:1,__enum__:"stx.nano.ChunkSum",toString:$estr}
	,End: ($_=function(err) { return {_hx_index:2,err:err,__enum__:"stx.nano.ChunkSum",toString:$estr}; },$_._hx_name="End",$_.__params__ = ["err"],$_)
};
stx_nano_ChunkSum.__constructs__ = [stx_nano_ChunkSum.Val,stx_nano_ChunkSum.Tap,stx_nano_ChunkSum.End];
var stx_nano_ChunkLift = function() { };
$hxClasses["stx.nano.ChunkLift"] = stx_nano_ChunkLift;
stx_nano_ChunkLift.__name__ = "stx.nano.ChunkLift";
stx_nano_ChunkLift.def = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return v;
	case 1:
		return fn();
	case 2:
		var e = self.err;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ChunkLift.defv = function(self,t) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return v;
	case 1:
		return t;
	case 2:
		var e = self.err;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_ChunkLift.fold = function(chk,val,ers,tap) {
	switch(chk._hx_index) {
	case 0:
		var v = chk.v;
		return val(v);
	case 1:
		return tap();
	case 2:
		var e = chk.err;
		return ers(e);
	}
};
stx_nano_ChunkLift.map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		var o = fn(v);
		return stx_nano_Chunk.pure(o);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return stx_nano_ChunkSum.End(err);
	}
};
stx_nano_ChunkLift.flatten = function(self) {
	return stx_nano_ChunkLift.flat_map(self,function(x) {
		return x;
	});
};
stx_nano_ChunkLift.flat_map = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return fn(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return stx_nano_ChunkSum.End(err);
	}
};
stx_nano_ChunkLift.recover = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		return fn(err);
	}
};
stx_nano_ChunkLift.errata = function(self,fn) {
	return stx_nano_ChunkLift.recover(self,function(x) {
		return stx_nano_ChunkSum.End(fn(x));
	});
};
stx_nano_ChunkLift.errate = function(self,fn) {
	return stx_nano_ChunkLift.recover(self,function(x) {
		return stx_nano_ChunkSum.End(stx_fail_Refuse.errate(x,fn));
	});
};
stx_nano_ChunkLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		switch(that._hx_index) {
		case 0:
			var v0 = that.v;
			return stx_nano_ChunkSum.Val(stx_nano_lift_LiftNano.toCouple(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,v,v0)));
		case 1:
			return stx_nano_ChunkSum.Tap;
		case 2:
			var err = that.err;
			return stx_nano_ChunkSum.End(err);
		}
		break;
	case 1:
		return stx_nano_ChunkSum.Tap;
	case 2:
		var err = self.err;
		if(that._hx_index == 2) {
			var err0 = that.err;
			return stx_nano_ChunkSum.End(stx_fail_Refuse.concat(err,err0));
		} else {
			return stx_nano_ChunkSum.Tap;
		}
		break;
	}
};
stx_nano_ChunkLift.option = function(chk) {
	switch(chk._hx_index) {
	case 0:
		var v = chk.v;
		return haxe_ds_Option.Some(v);
	case 1:
		return haxe_ds_Option.None;
	case 2:
		var _g = chk.err;
		return haxe_ds_Option.None;
	}
};
stx_nano_ChunkLift.is_defined = function(self) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return true;
	case 1:
		return false;
	case 2:
		var e = self.err;
		return false;
	}
};
stx_nano_ChunkLift.opt_else = function(self,_if,_else) {
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		return _if(v);
	case 1:
		return _else(haxe_ds_Option.None);
	case 2:
		var e = self.err;
		return _else(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e));
	}
};
stx_nano_ChunkLift.fudge = function(self,pos) {
	if(self == null) {
		throw haxe_Exception.thrown("no self to push on");
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown("Value not found on force");
		case 2:
			var _g = self.err;
			if(_g == null) {
				throw haxe_Exception.thrown("Value not found on force");
			} else {
				var err = _g;
				throw haxe_Exception.thrown(err);
			}
			break;
		}
	}
};
stx_nano_ChunkLift.iterator = function(self) {
	var done = false;
	return { hasNext : function() {
		switch(self._hx_index) {
		case 0:
			var _g = self.v;
			return !done;
		case 1:
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Chunk.hx", lineNumber : 234, className : "stx.nano.ChunkLift", methodName : "iterator"});
			stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(e) {
				return stx_nano_Digests.e_undefined(e);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)).crack();
			return false;
		case 2:
			var e = self.err;
			if(e != null) {
				e.crack();
			}
			return false;
		}
	}, next : function() {
		done = true;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return null;
		}
	}};
};
stx_nano_ChunkLift.secure = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		tmp = v == null ? stx_nano_ChunkSum.Tap : stx_nano_ChunkSum.Val(v);
		break;
	case 1:
		tmp = stx_nano_ChunkSum.Tap;
		break;
	case 2:
		var e = self.err;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return tmp;
};
stx_nano_ChunkLift.toUpshot = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v);
		break;
	case 1:
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
			return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(e) {
				return stx_nano_Digests.e_undefined(e);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
		},{ fileName : "stx/nano/Chunk.hx", lineNumber : 257, className : "stx.nano.ChunkLift", methodName : "toUpshot"});
		break;
	case 2:
		var e = self.err;
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Chunk.hx", lineNumber : 256, className : "stx.nano.ChunkLift", methodName : "toUpshot"});
		break;
	}
	return tmp;
};
stx_nano_ChunkLift.toResOpt = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(v));
		break;
	case 1:
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None);
		break;
	case 2:
		var e = self.err;
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Chunk.hx", lineNumber : 263, className : "stx.nano.ChunkLift", methodName : "toResOpt"});
		break;
	}
	return tmp;
};
stx_nano_ChunkLift.toError = function(self) {
	if(self._hx_index == 2) {
		var _g = self.err;
		if(_g == null) {
			return haxe_ds_Option.None;
		} else {
			var e = _g;
			return haxe_ds_Option.Some(e);
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_ChunkLift.or = function(self,thunk) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var v = self.v;
		tmp = stx_nano_ChunkSum.Val(v);
		break;
	case 1:
		tmp = thunk();
		break;
	case 2:
		var e = self.err;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return tmp;
};
var stx_nano_Chunk = {};
stx_nano_Chunk._new = function(self) {
	return self;
};
stx_nano_Chunk.fromRefuse = function(e) {
	return stx_nano_ChunkSum.End(e);
};
stx_nano_Chunk.fromError = function(e) {
	return stx_nano_ChunkSum.End(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)));
};
stx_nano_Chunk.fromNull_T = function(v) {
	return stx_nano_Chunk.pure(v);
};
stx_nano_Chunk.lift = function(v) {
	return stx_nano_Chunk._new(v);
};
stx_nano_Chunk.pure = function(c) {
	if(c == null) {
		return stx_nano_ChunkSum.Tap;
	} else {
		return stx_nano_ChunkSum.Val(c);
	}
};
stx_nano_Chunk.unit = function() {
	return stx_nano_ChunkSum.Tap;
};
stx_nano_Chunk.fromTinkOutcome = function(outcome) {
	var tmp;
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		tmp = stx_nano_Chunk.pure(v);
		break;
	case 1:
		var e = outcome.failure;
		tmp = stx_nano_ChunkSum.End(stx_fail_Refuse.lift(stx_fail_Error.errate(e.toError(),stx_fail_DeclineSum.EXTERNAL)));
		break;
	}
	return stx_nano_Chunk._new(tmp);
};
stx_nano_Chunk.fromOption = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
stx_nano_Chunk.fromOptionRefuse = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.End(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
stx_nano_Chunk.all = function(arr,TapFail) {
	return stx_lift_ArrayLift.lfold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var _g = memo.v;
			switch(next._hx_index) {
			case 0:
				var next1 = next.v;
				var memo1 = _g;
				memo1.push(next1);
				return stx_nano_ChunkSum.Val(memo1);
			case 1:
				var v = _g;
				if(TapFail == null) {
					return stx_nano_ChunkSum.Tap;
				} else {
					return stx_nano_ChunkSum.End(TapFail);
				}
				break;
			case 2:
				var e = next.err;
				var memo1 = _g;
				return stx_nano_ChunkSum.End(e);
			}
			break;
		case 2:
			var _g = memo.err;
			switch(next._hx_index) {
			case 1:
				var e = _g;
				var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),function(e) {
					return stx_fail_Refuse.concat(e,TapFail);
				});
				var err;
				if(self._hx_index == 0) {
					var v = self.v;
					err = v;
				} else {
					err = TapFail;
				}
				return stx_nano_ChunkSum.End(err);
			case 2:
				var e0 = next.err;
				var e = _g;
				var err = stx_lift_ArrayLift.lfold(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e)).concat(stx_pico_OptionLift.toArray(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e0))),function(nx,mm) {
					return stx_fail_Refuse.concat(mm,nx);
				},TapFail);
				return stx_nano_ChunkSum.End(err);
			default:
				var e = _g;
				return stx_nano_ChunkSum.End(e);
			}
			break;
		default:
			if(TapFail == null) {
				return stx_nano_ChunkSum.Tap;
			} else {
				return stx_nano_ChunkSum.End(TapFail);
			}
		}
	},stx_nano_ChunkSum.Val([]));
};
stx_nano_Chunk.available = function(rest) {
	return stx_lift_ArrayLift.lfold(rest,function(next,memo) {
		if(memo._hx_index == 0) {
			var xs = memo.v;
			switch(next._hx_index) {
			case 0:
				var x = next.v;
				xs.push(x);
				return stx_nano_ChunkSum.Val(xs);
			case 1:
				return stx_nano_ChunkSum.Val(xs);
			case 2:
				var e = next.err;
				return stx_nano_ChunkSum.End(e);
			}
		} else {
			return memo;
		}
	},stx_nano_ChunkSum.Val([]));
};
stx_nano_Chunk.get_self = function(this1) {
	return this1;
};
var stx_nano_ClusterLift = function() { };
$hxClasses["stx.nano.ClusterLift"] = stx_nano_ClusterLift;
stx_nano_ClusterLift.__name__ = "stx.nano.ClusterLift";
stx_nano_ClusterLift.lift = function(self) {
	return stx_nano_Cluster.lift(self);
};
stx_nano_ClusterLift.fmap = function(self,fn) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(fn(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.accs = function(self,fn) {
	var value = stx_nano_Cluster.toIterable(self);
	return fn(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.flatten = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.flatten(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.interleave = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.interleave(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.is_defined = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return (((value) instanceof Array) ? value : null).length > 0;
};
stx_nano_ClusterLift.cons = function(self,t) {
	var t1 = t;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.cons(self,t1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.snoc = function(self,t) {
	var t1 = t;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.snoc(self,t1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.set = function(self,i,v) {
	var i1 = i;
	var v1 = v;
	var self1 = function(self) {
		var arr0 = self.slice();
		arr0[i1] = v1;
		return arr0;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.get = function(self,i) {
	var i1 = i;
	var tmp = function(self) {
		return self[i1];
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.head = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.head(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.tail = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.tail(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.last = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.last(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.copy = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_nano_ClusterLift._.copy(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.concat = function(self,that) {
	var that1 = that;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.concat(self,that1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.bind_fold = function(self,pure,init,bind,fold) {
	var pure1 = pure;
	var init1 = init;
	var bind1 = bind;
	var fold1 = fold;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.bind_fold(self,pure1,init1,bind1,fold1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.reduce = function(self,unit,pure,plus) {
	var unit1 = unit;
	var pure1 = pure;
	var plus1 = plus;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.reduce(self,unit1,pure1,plus1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.map = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.map(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.imap = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.imap(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.flat_map = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.flat_map(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.lfold = function(self,fn,memo) {
	var fn1 = fn;
	var memo1 = memo;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.lfold(self,fn1,memo1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.lfold1 = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.lfold1(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rfold = function(self,fn,z) {
	var fn1 = fn;
	var z1 = z;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.rfold(self,fn1,z1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rfold1 = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.rfold1(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.lscan = function(self,f,init) {
	var f1 = f;
	var init1 = init;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.lscan(self,f1,init1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.lscan1 = function(self,f) {
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.lscan1(self,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rscan = function(self,init,f) {
	var init1 = init;
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rscan(self,init1,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rscan1 = function(self,fn) {
	var f = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rscan1(self,f);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.filter = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.filter(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.map_filter = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.map_filter(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.whilst = function(self,fn) {
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.whilst(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ltaken = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.ltaken(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ldropn = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.ldropn(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.rdropn = function(self,n) {
	var n1 = n;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rdropn(self,n1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.ldrop = function(self,p) {
	var p1 = p;
	var self1 = function(self) {
		var r = [].concat(self);
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			if(p1(e)) {
				r.shift();
			} else {
				break;
			}
		}
		return r;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.search = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.search(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.all = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.all(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.any = function(self,fn) {
	var fn1 = fn;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.any(self,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.zip_with = function(self,that,fn) {
	var that1 = that;
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.zip_with(self,that1,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.cross_with = function(self,that,fn) {
	var that1 = that;
	var fn1 = fn;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.cross_with(self,that1,fn1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.difference_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.difference_with(self,that1,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.union_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var self1 = function(self) {
		var eq = eq1;
		var res = [];
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			res.push(e);
		}
		var _g = 0;
		while(_g < that1.length) {
			var e = [that1[_g]];
			++_g;
			if(!stx_lift_ArrayLift.any(res,(function(e) {
				return function(x) {
					return eq(x,e[0]);
				};
			})(e))) {
				res.push(e[0]);
			}
		}
		return res;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.unique_with = function(self,eq) {
	var eq1 = eq;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.unique_with(self,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.nub_with = function(self,f) {
	var f1 = f;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.nub_with(self,f1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.intersect_with = function(self,that,f) {
	var that1 = that;
	var f1 = f;
	var self1 = function(self) {
		var that = that1;
		var f = f1;
		return stx_lift_ArrayLift.lfold(self,function(next,memo) {
			var _g = f;
			var a1 = next;
			var _g1 = function(a2) {
				return _g(a1,a2);
			};
			if(stx_lift_ArrayLift.any(that,_g1) == true) {
				return stx_lift_ArrayLift.snoc(memo,next);
			} else {
				return memo;
			}
		},[]);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.reversed = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(stx_lift_ArrayLift.lfold(((value) instanceof Array) ? value : null,function(b,a) {
		a.unshift(b);
		return a;
	},[]));
};
stx_nano_ClusterLift.count = function(self,fn) {
	var f = fn;
	var tmp = function(self) {
		var f1 = f;
		return stx_lift_ArrayLift.lfold(self,function(b,a) {
			return a + (f1(b) ? 1 : 0);
		},0);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.size = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return (((value) instanceof Array) ? value : null).length;
};
stx_nano_ClusterLift.index_of = function(self,t) {
	var t1 = t;
	var tmp = function(self) {
		var index = 0;
		var ok = false;
		var _g = 0;
		while(_g < self.length) {
			var e = self[_g];
			++_g;
			if(t1(e)) {
				ok = true;
				break;
			}
			++index;
		}
		if(ok) {
			return index;
		} else {
			return -1;
		}
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.has = function(self,obj) {
	var obj1 = obj;
	var tmp = function(self) {
		var index = self.indexOf(obj1);
		if(index == -1) {
			return haxe_ds_Option.None;
		} else {
			return haxe_ds_Option.Some(index);
		}
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.partition = function(self,f) {
	var f1 = f;
	var tmp = function(self) {
		var f = f1;
		return stx_lift_ArrayLift.lfold(self,function(next,memo) {
			if(f(next)) {
				memo.a.push(next);
			} else {
				memo.b.push(next);
			}
			return memo;
		},{ a : [], b : []});
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.pad = function(self,len,val) {
	var len1 = len;
	var val1 = val;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.pad(self,len1,val1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.fill = function(self,def) {
	var def1 = def;
	var self1 = function(self) {
		var def = def1;
		var result = new Array(self.length);
		var _g = 0;
		var _g1 = self.length;
		while(_g < _g1) {
			var i = _g++;
			var x = self[i];
			result[i] = x == null ? def : x;
		}
		return result;
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.toIterable = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.toIterable(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.toMap = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	var self = ((value) instanceof Array) ? value : null;
	var mp = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < self.length) {
		var tp = self[_g];
		++_g;
		var val = tp();
		mp.h[val.a] = val.b;
	}
	return mp;
};
stx_nano_ClusterLift.random = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.random(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.shuffle = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_ClusterLift._.shuffle(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.and_with = function(self,that,eq) {
	var that1 = that;
	var eq1 = eq;
	var tmp = function(self) {
		return stx_nano_ClusterLift._.and_with(self,that1,eq1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return tmp(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.rotate = function(self,i) {
	var num = i;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.rotate(self,num);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
stx_nano_ClusterLift.iterator = function(self) {
	var value = stx_nano_Cluster.toIterable(self);
	return $iterator(stx_nano_ClusterLift._)(((value) instanceof Array) ? value : null);
};
stx_nano_ClusterLift.elide = function(self) {
	return stx_nano_ClusterLift.map(self,function(v) {
		return v;
	});
};
stx_nano_ClusterLift.range = function(self,l,r) {
	var l1 = l;
	var r1 = r;
	var self1 = function(self) {
		return stx_nano_ClusterLift._.range(self,l1,r1);
	};
	var value = stx_nano_Cluster.toIterable(self);
	return stx_nano_Cluster.lift(self1(((value) instanceof Array) ? value : null));
};
var stx_nano_Cluster = {};
stx_nano_Cluster.ZERO = null;
stx_nano_Cluster.get_ZERO = function() {
	if(stx_nano_Cluster.ZERO == null) {
		return stx_nano_Cluster.ZERO = stx_nano_Cluster._new([]);
	} else {
		return stx_nano_Cluster.ZERO;
	}
};
stx_nano_Cluster._new = function(self) {
	var this1;
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self);
	if(self1._hx_index == 0) {
		var v = self1.v;
		this1 = v;
	} else {
		this1 = [];
	}
	return this1;
};
stx_nano_Cluster.lift = function(self) {
	return stx_nano_Cluster._new(self);
};
stx_nano_Cluster.unit = function() {
	return stx_nano_Cluster.lift([]);
};
stx_nano_Cluster.pure = function(self) {
	return stx_nano_Cluster.lift([self]);
};
stx_nano_Cluster.toIterable = function(this1) {
	return this1;
};
stx_nano_Cluster.toIter = function(this1) {
	return this1;
};
stx_nano_Cluster.concat = function(this1,that) {
	var value = stx_nano_Cluster.toIterable(that);
	return stx_nano_Cluster.lift(this1.concat(((value) instanceof Array) ? value : null));
};
stx_nano_Cluster.copy = function(this1) {
	return stx_nano_Cluster.lift(this1.slice());
};
stx_nano_Cluster.get_length = function(this1) {
	return this1.length;
};
stx_nano_Cluster.prj = function(this1) {
	return this1;
};
stx_nano_Cluster.toString = function(this1) {
	return Std.string(this1);
};
var stx_nano_Clustered = {};
stx_nano_Clustered._new = function(self) {
	return self;
};
stx_nano_Clustered.lift = function(self) {
	return stx_nano_Clustered._new(self);
};
stx_nano_Clustered.prj = function(this1) {
	return this1;
};
stx_nano_Clustered.get_self = function(this1) {
	return stx_nano_Clustered.lift(this1);
};
stx_nano_Clustered.toCluster = function(this1) {
	return stx_nano_Cluster.lift(this1);
};
stx_nano_Clustered.fromT = function(v) {
	return stx_nano_Clustered.lift(stx_nano_Cluster.prj(stx_nano_Cluster.lift([v])));
};
var stx_nano_CompilerTargetSum = $hxEnums["stx.nano.CompilerTargetSum"] = { __ename__:"stx.nano.CompilerTargetSum",__constructs__:null
	,Js: {_hx_name:"Js",_hx_index:0,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Lua: {_hx_name:"Lua",_hx_index:1,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Swf: {_hx_name:"Swf",_hx_index:2,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Neko: {_hx_name:"Neko",_hx_index:3,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Php: {_hx_name:"Php",_hx_index:4,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cpp: {_hx_name:"Cpp",_hx_index:5,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cppia: {_hx_name:"Cppia",_hx_index:6,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Cs: {_hx_name:"Cs",_hx_index:7,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Java: {_hx_name:"Java",_hx_index:8,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Python: {_hx_name:"Python",_hx_index:9,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Hl: {_hx_name:"Hl",_hx_index:10,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
	,Interp: {_hx_name:"Interp",_hx_index:11,__enum__:"stx.nano.CompilerTargetSum",toString:$estr}
};
stx_nano_CompilerTargetSum.__constructs__ = [stx_nano_CompilerTargetSum.Js,stx_nano_CompilerTargetSum.Lua,stx_nano_CompilerTargetSum.Swf,stx_nano_CompilerTargetSum.Neko,stx_nano_CompilerTargetSum.Php,stx_nano_CompilerTargetSum.Cpp,stx_nano_CompilerTargetSum.Cppia,stx_nano_CompilerTargetSum.Cs,stx_nano_CompilerTargetSum.Java,stx_nano_CompilerTargetSum.Python,stx_nano_CompilerTargetSum.Hl,stx_nano_CompilerTargetSum.Interp];
var stx_nano_CompilerTargetLift = function() { };
$hxClasses["stx.nano.CompilerTargetLift"] = stx_nano_CompilerTargetLift;
stx_nano_CompilerTargetLift.__name__ = "stx.nano.CompilerTargetLift";
stx_nano_CompilerTargetLift.list = function() {
	return stx_nano_Enum.constructs(stx_nano_Enum._new(stx_nano_CompilerTargetSum));
};
stx_nano_CompilerTargetLift.toBuildDirective = function(target) {
	switch(target._hx_index) {
	case 0:
		return haxe_ds_Option.Some("js");
	case 1:
		return haxe_ds_Option.Some("lua");
	case 2:
		return haxe_ds_Option.Some("swf");
	case 3:
		return haxe_ds_Option.Some("neko");
	case 4:
		return haxe_ds_Option.Some("php");
	case 5:
		return haxe_ds_Option.Some("cpp");
	case 6:
		return haxe_ds_Option.Some("cppia");
	case 7:
		return haxe_ds_Option.Some("cs");
	case 8:
		return haxe_ds_Option.Some("java");
	case 9:
		return haxe_ds_Option.Some("python");
	case 10:
		return haxe_ds_Option.Some("hl");
	case 11:
		return haxe_ds_Option.Some("interp");
	}
};
stx_nano_CompilerTargetLift.uses_directory = function(self) {
	switch(self._hx_index) {
	case 4:case 5:case 7:case 8:
		return true;
	case 0:case 1:case 2:case 3:case 6:case 9:case 10:case 11:
		return false;
	}
};
stx_nano_CompilerTargetLift.uses_file = function(self) {
	switch(self._hx_index) {
	case 0:case 1:case 2:case 3:case 6:case 9:case 10:
		return true;
	case 4:case 5:case 7:case 8:case 11:
		return false;
	}
};
stx_nano_CompilerTargetLift.threaded = function(self) {
	switch(self._hx_index) {
	case 1:case 3:case 5:case 7:case 8:case 9:case 10:case 11:
		return true;
	default:
		return false;
	}
};
stx_nano_CompilerTargetLift.extension = function(self) {
	switch(self._hx_index) {
	case 0:
		return haxe_ds_Option.Some("js");
	case 1:
		return haxe_ds_Option.Some("lua");
	case 2:
		return haxe_ds_Option.Some("swf");
	case 3:
		return haxe_ds_Option.Some("n");
	case 4:
		return haxe_ds_Option.Some("php");
	case 5:
		return haxe_ds_Option.None;
	case 6:
		return haxe_ds_Option.Some("cppia");
	case 7:
		return haxe_ds_Option.None;
	case 8:
		return haxe_ds_Option.None;
	case 9:
		return haxe_ds_Option.Some("py");
	case 10:
		return haxe_ds_Option.Some("hl");
	case 11:
		return haxe_ds_Option.None;
	}
};
stx_nano_CompilerTargetLift.canonical = function(target) {
	return stx_nano_EnumValue.ctr(stx_nano_EnumValue._new(stx_nano_CompilerTarget.prj(target)));
};
var stx_nano_CompilerTarget = {};
stx_nano_CompilerTarget._new = function(self) {
	return self;
};
stx_nano_CompilerTarget.lift = function(self) {
	return stx_nano_CompilerTarget._new(self);
};
stx_nano_CompilerTarget.prj = function(this1) {
	return this1;
};
stx_nano_CompilerTarget.get_self = function(this1) {
	return stx_nano_CompilerTarget.lift(this1);
};
stx_nano_CompilerTarget.fromString = function(str) {
	switch(str) {
	case "cpp":
		return stx_nano_CompilerTargetSum.Cpp;
	case "cppia":
		return stx_nano_CompilerTargetSum.Cppia;
	case "cs":
		return stx_nano_CompilerTargetSum.Cs;
	case "hl":
		return stx_nano_CompilerTargetSum.Hl;
	case "interp":
		return stx_nano_CompilerTargetSum.Interp;
	case "java":
		return stx_nano_CompilerTargetSum.Java;
	case "js":
		return stx_nano_CompilerTargetSum.Js;
	case "lua":
		return stx_nano_CompilerTargetSum.Lua;
	case "neko":
		return stx_nano_CompilerTargetSum.Neko;
	case "php":
		return stx_nano_CompilerTargetSum.Php;
	case "python":
		return stx_nano_CompilerTargetSum.Python;
	case "swf":
		return stx_nano_CompilerTargetSum.Swf;
	default:
		haxe_Log.trace(str,{ fileName : "stx/nano/CompilerTarget.hx", lineNumber : 50, className : "stx.nano._CompilerTarget.CompilerTarget_Impl_", methodName : "fromString"});
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/CompilerTarget.hx", lineNumber : 51, className : "stx.nano._CompilerTarget.CompilerTarget_Impl_", methodName : "fromString"});
		throw haxe_Exception.thrown(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_nano_Digests.e_undefined(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	}
};
var stx_nano_ContractLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.ContractLift"] = stx_nano_ContractLift;
stx_nano_ContractLift.__name__ = "stx.nano.ContractLift";
stx_nano_ContractLift.lift = function(self) {
	return stx_nano_Contract.lift(self);
};
stx_nano_ContractLift.toJsPromise = function(self) {
	var promise = new Promise(function(resolve,reject) {
		try {
			stx_nano_Contract.handle(self,function(res) {
				switch(res._hx_index) {
				case 0:
					var v = res.v;
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.Some(v)));
					break;
				case 1:
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,haxe_ds_Option.None));
					break;
				case 2:
					var e = res.err;
					reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Contract.hx", lineNumber : 161, className : "stx.nano.ContractLift", methodName : "toJsPromise"}));
					break;
				}
			});
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__implements(_g1,stx_fail_ErrorApi)) {
				var e = _g1;
				var reject1 = reject;
				var _g2 = stx_fail_Refuse.catcher(e);
				var promise;
				switch(_g2._hx_index) {
				case 0:
					var e = _g2.v;
					promise = stx_fail_ErrorLift.digest_with(e,function(x) {
						return Std.string(x);
					});
					break;
				case 1:
					var e = _g2.v;
					promise = e;
					break;
				}
				reject1(promise);
			} else if(((_g1) instanceof Error)) {
				var e = _g1;
				var reject1 = reject;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Contract.hx", lineNumber : 176, className : "stx.nano.ContractLift", methodName : "toJsPromise"});
				reject1(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_nano_Digests.e_js_error(_,e);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Contract.hx", lineNumber : 176, className : "stx.nano.ContractLift", methodName : "toJsPromise"}));
			} else {
				throw _g;
			}
		}
	});
	return promise;
};
stx_nano_ContractLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(self,that),function(tp) {
		return stx_nano_ChunkLift.zip(stx_nano_CoupleLift.fst(tp),stx_nano_CoupleLift.snd(tp));
	});
	return out;
};
stx_nano_ContractLift.map = function(self,fn) {
	return stx_nano_ContractLift.lift(tink_core_Future.map(self,function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return stx_nano_ChunkSum.Val(fn(v));
		case 1:
			return stx_nano_ChunkSum.Tap;
		case 2:
			var err = x.err;
			return stx_nano_ChunkSum.End(err);
		}
	}));
};
stx_nano_ContractLift.flat_map = function(self,fn) {
	var ft = stx_nano_Contract.prj(self);
	return tink_core_Future.flatMap(ft,function(x) {
		switch(x._hx_index) {
		case 0:
			var v = x.v;
			return stx_nano_Contract.prj(fn(v));
		case 1:
			return stx_nano_Contract.prj(stx_nano_Contract._new(tink_core_Future.irreversible(function(cb) {
				cb(stx_nano_ChunkSum.Tap);
			})));
		case 2:
			var err = x.err;
			return stx_nano_Contract.prj(stx_nano_Contract.fromChunk(stx_nano_ChunkSum.End(err)));
		}
	});
};
stx_nano_ContractLift.flat_fold = function(self,val,ers,nil) {
	return tink_core_Future.flatMap(self,function(chunk) {
		switch(chunk._hx_index) {
		case 0:
			var v = chunk.v;
			return val(v);
		case 1:
			return nil();
		case 2:
			var e = chunk.err;
			return ers(e);
		}
	});
};
stx_nano_ContractLift.fold = function(self,val,ers,nil) {
	var val1 = val;
	var ers1 = ers;
	var tap = nil;
	var tmp = function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			return val1(v);
		case 1:
			return tap();
		case 2:
			var e = chk.err;
			return ers1(e);
		}
	};
	return tink_core_Future.map(stx_nano_Contract.prj(self),tmp);
};
stx_nano_ContractLift.recover = function(self,fn) {
	return stx_nano_ContractLift.lift(stx_nano_ContractLift.fold(self,function(x) {
		return stx_nano_ChunkSum.Val(x);
	},function(e) {
		return fn(e);
	},function() {
		return stx_nano_ChunkSum.Tap;
	}));
};
stx_nano_ContractLift.adjust = function(self,fn) {
	return stx_nano_ContractLift.lift(stx_nano_ContractLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_ChunkSum.End(v);
	},function() {
		return stx_nano_ChunkSum.Tap;
	}));
};
stx_nano_ContractLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_nano_Contract.prj(self),function(chk) {
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			fn(v);
			return haxe_ds_Option.None;
		case 1:
			return haxe_ds_Option.None;
		case 2:
			var e = chk.err;
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
		}
	});
};
stx_nano_ContractLift.now = function(self) {
	var out = null;
	stx_nano_Contract.prj(self).handle(function(v) {
		out = v;
	});
	if(out == null) {
		out = stx_nano_ChunkSum.Tap;
	}
	return out;
};
stx_nano_ContractLift.errata = function(self,fn) {
	return tink_core_Future.map(stx_nano_Contract.prj(self),function(chk) {
		return stx_nano_ChunkLift.errata(chk,fn);
	});
};
stx_nano_ContractLift.errate = function(self,fn) {
	return stx_nano_ContractLift.errata(self,function(x) {
		return stx_fail_Refuse.errate(x,fn);
	});
};
stx_nano_ContractLift.tap = function(self,fn,pos) {
	return stx_nano_ContractLift.lift(tink_core_Future.map(stx_nano_Contract.prj(self),function(x) {
		fn(x,pos);
		return x;
	}));
};
stx_nano_ContractLift.__super__ = stx_pico_Clazz;
stx_nano_ContractLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_ContractLift
});
var stx_nano_Contract = $hx_exports["stx"]["nano"]["Contract"] = {};
stx_nano_Contract._new = function(v) {
	return v;
};
stx_nano_Contract.lift = function(self) {
	return stx_nano_Contract._new(self);
};
stx_nano_Contract.unit = function() {
	return stx_nano_Contract.pure(stx_nano_ChunkSum.Tap);
};
stx_nano_Contract.sync = function(ch) {
	return stx_nano_Contract.lift(tink_core_Future.irreversible(function(cb) {
		cb(ch);
	}));
};
stx_nano_Contract.pure = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(ch);
	});
};
stx_nano_Contract.accept = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.Val(ch));
	});
};
stx_nano_Contract.reject = function(ch) {
	return tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.End(ch));
	});
};
stx_nano_Contract.bind_fold = function(it,fm,start) {
	return stx_nano_Contract._new(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var v = memo.v;
			return stx_nano_Contract.prj(fm(next,v));
		case 1:
			return stx_nano_Contract.prj(stx_nano_Contract.unit());
		case 2:
			var err = memo.err;
			return stx_nano_Contract.prj(stx_nano_Contract.end(err));
		}
	},stx_nano_ChunkSum.Val(start)));
};
stx_nano_Contract.lazy = function(fn) {
	return stx_nano_Contract.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_ChunkSum.Val(fn()));
	}));
};
stx_nano_Contract.fromLazyError = function(fn) {
	return stx_nano_Contract.fromLazyChunk(function() {
		return stx_nano_ChunkSum.End(stx_fail_Refuse.lift(stx_fail_Error.errate(fn(),stx_fail_DeclineSum.EXTERNAL)));
	});
};
stx_nano_Contract.fromLazyRefuse = function(fn) {
	return stx_nano_Contract.fromLazyChunk(function() {
		return stx_nano_ChunkSum.End(fn());
	});
};
stx_nano_Contract.fromLazyChunk = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_nano_Contract.end = function(e) {
	return stx_nano_Contract.pure(stx_nano_ChunkSum.End(e));
};
stx_nano_Contract.tap = function() {
	return stx_nano_Contract.unit();
};
stx_nano_Contract.fromChunk = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_nano_Contract.fromOption = function(m) {
	var val;
	switch(m._hx_index) {
	case 0:
		var t = m.v;
		val = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		val = stx_nano_ChunkSum.Tap;
		break;
	}
	var val1 = val;
	return stx_nano_Contract.fromChunk(val1);
};
stx_nano_Contract.fromUpshot = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return stx_nano_Contract.pure(tmp);
};
stx_nano_Contract.toTinkSurprise = function(this1) {
	return stx_nano_Contract._.fold(this1,tink_core_Outcome.Success,function(e) {
		var tmp = e.toString();
		var self = e.get_data();
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = null;
		}
		var self = e.get_pos();
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = null;
		}
		return tink_core_Outcome.Failure(tink_core_TypedError.withData(500,tmp,tmp1,tmp2));
	},function() {
		return tink_core_Outcome.Failure(new tink_core_TypedError(500,"empty",{ fileName : "stx/nano/Contract.hx", lineNumber : 103, className : "stx.nano._Contract.Contract_Impl_", methodName : "toTinkSurprise"}));
	});
};
stx_nano_Contract.fromJsPromise = function(self,pos) {
	return stx_nano_Contract.lift(tink_core_Future.map(tink_core_Future.ofJsPromise(self),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			return stx_nano_ChunkSum.Val(v);
		case 1:
			var e = outcome.failure;
			var _g = Type.typeof(e.data);
			if(_g._hx_index == 6) {
				if(_g.c == Error) {
					var er = e.data;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					return stx_nano_ChunkSum.End(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_nano_Digests.e_js_error(_,er);
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
				} else {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					return stx_nano_ChunkSum.End(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_nano_Digests.e_js_error(_,new Error("" + (e.data == null ? "null" : Std.string(e.data))));
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
				}
			} else {
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
				return stx_nano_ChunkSum.End(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_nano_Digests.e_js_error(_,new Error("" + (e.data == null ? "null" : Std.string(e.data))));
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
			}
			break;
		}
	}));
};
stx_nano_Contract.prj = function(this1) {
	return this1;
};
stx_nano_Contract.handle = function(this1,fn) {
	return this1.handle(fn);
};
stx_nano_Contract.seq = function(iter) {
	return stx_nano_Contract.bind_fold(iter,function(next,memo) {
		return stx_nano_ContractLift.map(next,function(a) {
			return stx_lift_ArrayLift.snoc(memo,a);
		});
	},[]);
};
var stx_nano_Counter = function(value) {
	if(value == null) {
		value = 0;
	}
	this.value = value;
};
$hxClasses["stx.nano.Counter"] = stx_nano_Counter;
stx_nano_Counter.__name__ = "stx.nano.Counter";
stx_nano_Counter.unit = function() {
	return new stx_nano_Counter();
};
stx_nano_Counter.prototype = {
	value: null
	,next: function() {
		var result = this.value;
		this.value += 1;
		return result;
	}
	,__class__: stx_nano_Counter
};
var stx_nano_CoupleLift = function() { };
$hxClasses["stx.nano.CoupleLift"] = stx_nano_CoupleLift;
stx_nano_CoupleLift.__name__ = "stx.nano.CoupleLift";
stx_nano_CoupleLift.map = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(ti,fn(tii));
		});
	};
};
stx_nano_CoupleLift.mapl = function(self,fn) {
	return function(tp) {
		self(function(ti,tii) {
			tp(fn(ti),tii);
		});
	};
};
stx_nano_CoupleLift.mapr = function(self,fn) {
	return stx_nano_CoupleLift.map(self,fn);
};
stx_nano_CoupleLift.fst = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(tI,_) {
		return tI;
	});
};
stx_nano_CoupleLift.snd = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(_,tII) {
		return tII;
	});
};
stx_nano_CoupleLift.swap = function(self) {
	return function(tp) {
		self(function(ti,tii) {
			tp(tii,ti);
		});
	};
};
stx_nano_CoupleLift.equals = function(lhs,rhs) {
	return stx_nano_CoupleLift.decouple(lhs,function(t0l,t0r) {
		return stx_nano_CoupleLift.decouple(rhs,function(t1l,t1r) {
			if(t0l == t1l) {
				return t0r == t1r;
			} else {
				return false;
			}
		});
	});
};
stx_nano_CoupleLift.reduce = function(self,flhs,frhs,plus) {
	return stx_nano_CoupleLift.decouple(self,function(tI,tII) {
		return plus(flhs(tI),frhs(tII));
	});
};
stx_nano_CoupleLift.decouple = function(self,fn) {
	var out = null;
	self(function(ti,tii) {
		out = fn(ti,tii);
	});
	return out;
};
stx_nano_CoupleLift.cat = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return [haxe_ds_Either.Left(l),haxe_ds_Either.Right(r)];
	});
};
stx_nano_CoupleLift.tup = function(self) {
	return stx_nano_CoupleLift.decouple(self,stx_Tup2.tuple2);
};
stx_nano_CoupleLift.toTup2 = function(self) {
	return stx_nano_CoupleLift.decouple(self,stx_Tup2.tuple2);
};
stx_nano_CoupleLift.toString = function(self) {
	return stx_nano_CoupleLift.decouple(self,function(l,r) {
		return "(" + Std.string(l) + " " + Std.string(r) + ")";
	});
};
var stx_nano_Couple = {};
stx_nano_Couple.make = function(lhs,rhs) {
	return function(cb) {
		cb(lhs,rhs);
	};
};
stx_nano_Couple.toString = function(this1) {
	return stx_nano_CoupleLift.toString(this1);
};
var stx_nano_DefectApi = function() { };
$hxClasses["stx.nano.DefectApi"] = stx_nano_DefectApi;
stx_nano_DefectApi.__name__ = "stx.nano.DefectApi";
stx_nano_DefectApi.__isInterface__ = true;
stx_nano_DefectApi.prototype = {
	error: null
	,get_error: null
	,toDefect: null
	,crack: null
	,__class__: stx_nano_DefectApi
};
var stx_nano_DefectCls = function(error) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_fail_Refuse.unit();
	}
	this.error = tmp;
};
$hxClasses["stx.nano.DefectCls"] = stx_nano_DefectCls;
stx_nano_DefectCls.__name__ = "stx.nano.DefectCls";
stx_nano_DefectCls.__interfaces__ = [stx_nano_DefectApi];
stx_nano_DefectCls.prototype = {
	error: null
	,get_error: function() {
		return this.error;
	}
	,toDefect: function() {
		return this;
	}
	,crack: function() {
		throw haxe_Exception.thrown(this);
	}
	,__class__: stx_nano_DefectCls
};
var stx_nano_DefectLift = function() { };
$hxClasses["stx.nano.DefectLift"] = stx_nano_DefectLift;
stx_nano_DefectLift.__name__ = "stx.nano.DefectLift";
stx_nano_DefectLift.concat = function(self,that) {
	return stx_nano_Defect.make(stx_fail_Refuse.concat(self.get_error(),that.get_error()));
};
stx_nano_DefectLift.errate = function(self,fn) {
	return stx_nano_Defect.make(stx_fail_Refuse.errate(self.get_error(),fn));
};
stx_nano_DefectLift.has_error = function(self) {
	return self.get_error().is_defined();
};
var stx_nano_Defect = {};
stx_nano_Defect._new = function(self) {
	return self;
};
stx_nano_Defect.lift = function(self) {
	return stx_nano_Defect._new(self);
};
stx_nano_Defect.unit = function() {
	return stx_nano_Defect.lift(new stx_nano_DefectCls(stx_fail_Refuse.unit()));
};
stx_nano_Defect.pure = function(e) {
	return stx_nano_Defect.make(stx_fail_Refuse.pure(e));
};
stx_nano_Defect.make = function(data) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,data),function(x) {
		return stx_nano_Defect.lift(new stx_nano_DefectCls(x));
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_nano_Defect.unit();
	}
};
stx_nano_Defect.fromRefuse = function(self) {
	return stx_nano_Defect.make(stx_fail_Refuse.lift(self));
};
stx_nano_Defect.elide = function(this1) {
	return this1;
};
stx_nano_Defect.entype = function(this1) {
	return this1;
};
stx_nano_Defect.toRefuse = function(this1) {
	return this1.get_error().toError();
};
stx_nano_Defect.prj = function(this1) {
	return this1;
};
var stx_nano_Digests = {};
stx_nano_Digests.e_digest_uuid_reserved = function(self,uuid) {
	return new stx_nano_digest_term_EDigestUUIDReserved(uuid);
};
stx_nano_Digests.e_resource_not_found = function(self,name) {
	return new stx_nano_digest_term_EResourceNotFound(name);
};
stx_nano_Digests.e_no_field = function(self,name) {
	return new stx_nano_digest_term_ENoField(name);
};
stx_nano_Digests.e_undefined = function(self) {
	return new stx_nano_digest_term_EUndefined();
};
stx_nano_Digests.e_tink_error = function(self,msg,code) {
	return new stx_nano_digest_term_ETinkError(msg,code);
};
stx_nano_Digests.e_unimplemented = function(self) {
	return new stx_nano_digest_term_EUnimplemented();
};
stx_nano_Digests.e_js_error = function(self,error) {
	return new stx_nano_digest_term_EJsError(error);
};
var stx_nano_Embed = {};
stx_nano_Embed._new = function() {
	return stx_nano__$Embed_Constructor.embed();
};
var stx_nano__$Embed_Constructor = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Embed.Constructor"] = stx_nano__$Embed_Constructor;
stx_nano__$Embed_Constructor.__name__ = "stx.nano._Embed.Constructor";
stx_nano__$Embed_Constructor.embed = function() {
	var r = haxe_ds_Option.None;
	var unpack = null;
	unpack = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return r;
	};
	var pull = null;
	pull = function(fn) {
		r = haxe_ds_Option.None;
		fn();
		return stx_pico_OptionLift.fudge(r);
	};
	var pack = null;
	pack = function(v) {
		var o = haxe_ds_Option.Some(v);
		return function() {
			r = o;
		};
	};
	var check = null;
	check = function(fn) {
		var _g = unpack(fn);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			return true;
		case 1:
			return false;
		}
	};
	return { pack : pack, unpack : unpack, pull : pull, check : check};
};
stx_nano__$Embed_Constructor.__super__ = stx_pico_Clazz;
stx_nano__$Embed_Constructor.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano__$Embed_Constructor
});
var stx_nano_Endianness = $hxEnums["stx.nano.Endianness"] = { __ename__:"stx.nano.Endianness",__constructs__:null
	,BIG_ENDIAN: {_hx_name:"BIG_ENDIAN",_hx_index:0,__enum__:"stx.nano.Endianness",toString:$estr}
	,LITTLE_ENDIAN: {_hx_name:"LITTLE_ENDIAN",_hx_index:1,__enum__:"stx.nano.Endianness",toString:$estr}
};
stx_nano_Endianness.__constructs__ = [stx_nano_Endianness.BIG_ENDIAN,stx_nano_Endianness.LITTLE_ENDIAN];
var stx_nano_Enquire = {};
stx_nano_Enquire._new = function(self) {
	return self;
};
stx_nano_Enquire.lift = function(self) {
	return stx_nano_Enquire._new(self);
};
stx_nano_Enquire.prj = function(this1) {
	return this1;
};
stx_nano_Enquire.get_self = function(this1) {
	return stx_nano_Enquire.lift(this1);
};
var stx_nano_EnquireLift = function() { };
$hxClasses["stx.nano.EnquireLift"] = stx_nano_EnquireLift;
stx_nano_EnquireLift.__name__ = "stx.nano.EnquireLift";
var stx_nano_Ensemble = {};
stx_nano_Ensemble.object_access = function(self,str) {
	return stx_nano_Ensemble.prj(self)[str];
};
stx_nano_Ensemble._new = function(self) {
	return self;
};
stx_nano_Ensemble.lift = function(self) {
	return stx_nano_Ensemble._new(self);
};
stx_nano_Ensemble.unit = function() {
	return stx_nano_Ensemble.lift({ });
};
stx_nano_Ensemble.fromMap = function(self) {
	var data = { };
	var h = self.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var k = _g_key;
		var v = _g_value;
		data[k] = v;
	}
	return stx_nano_Ensemble.lift(data);
};
stx_nano_Ensemble.fromIterKV = function(self) {
	var data = { };
	var v = $getIterator(self);
	while(v.hasNext()) {
		var v1 = v.next();
		data[v1.key] = v1.val;
	}
	return stx_nano_Ensemble.lift(data);
};
stx_nano_Ensemble.prj = function(this1) {
	return this1;
};
stx_nano_Ensemble.get_self = function(this1) {
	return stx_nano_Ensemble.lift(this1);
};
stx_nano_Ensemble.set = function(this1,key,val) {
	var next = stx_nano_Ensemble.prj(stx_nano_Ensemble.copy(this1));
	next[key] = val;
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.concat = function(this1,that) {
	var next = stx_nano_Ensemble.prj(stx_nano_Ensemble.copy(this1));
	var _g = $getKeyValueIterator(that);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var k = _g1.key;
		var v = _g1.value;
		next[k] = v;
	}
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.copy = function(this1) {
	var next = { };
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = _g_access[key];
		var _g_key = key;
		var k = _g_key;
		var v = _g_value;
		next[k] = v;
	}
	return stx_nano_Ensemble.lift(next);
};
stx_nano_Ensemble.fromClusterCouple = function(self) {
	var thiz = { };
	var _g_current = 0;
	var _g_array = self;
	while(_g_current < _g_array.length) {
		var tup = _g_array[_g_current++];
		tup(function(l,r) {
			thiz[l] = r;
		});
	}
	return stx_nano_Ensemble.lift(thiz);
};
stx_nano_Ensemble.toCluster = function(this1) {
	var next = [];
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = _g_access[key];
		var _g_key = key;
		var k = _g_key;
		var v = _g_value;
		next.push(stx_nano_Field.make(k,v));
	}
	return stx_nano_Cluster.lift(next);
};
stx_nano_Ensemble.toClusterCouple = function(this1) {
	var next = [];
	var access = this1;
	var _g_access = access;
	var _g_keys = Reflect.fields(access);
	var _g_index = 0;
	while(_g_index < _g_keys.length) {
		var key = _g_keys[_g_index++];
		var _g_value = _g_access[key];
		var _g_key = key;
		var k = _g_key;
		var v = _g_value;
		next.push(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,k,v));
	}
	return stx_nano_Cluster.lift(next);
};
stx_nano_Ensemble.toIterKV = function(this1) {
	return stx_nano_IterKV.fromEnsemble(this1);
};
var stx_nano_EnsembleLift = function() { };
$hxClasses["stx.nano.EnsembleLift"] = stx_nano_EnsembleLift;
stx_nano_EnsembleLift.__name__ = "stx.nano.EnsembleLift";
var stx_nano_Enum = {};
stx_nano_Enum._new = function(self) {
	return self;
};
stx_nano_Enum.constructs = function(this1) {
	var _this = this1.__constructs__;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _this[i]._hx_name;
	}
	return result;
};
stx_nano_Enum.$name = function(this1) {
	return this1.__ename__;
};
stx_nano_Enum.construct = function(this1,cons,args) {
	switch(cons._hx_index) {
	case 0:
		var i = cons.v;
		return stx_pico_Option.fromNullT(Type.createEnumIndex(this1,i,args));
	case 1:
		var s = cons.v;
		return stx_pico_Option.fromNullT(Type.createEnum(this1,s,args));
	}
};
var stx_nano_EnumValue = {};
stx_nano_EnumValue.pure = function(self) {
	return stx_nano_EnumValue._new(self);
};
stx_nano_EnumValue.lift = function(self) {
	return stx_nano_EnumValue._new(self);
};
stx_nano_EnumValue._new = function(self) {
	return self;
};
stx_nano_EnumValue.params = function(this1) {
	return Type.enumParameters(this1);
};
stx_nano_EnumValue.ctr = function(this1) {
	return $hxEnums[this1.__enum__].__constructs__[this1._hx_index]._hx_name;
};
stx_nano_EnumValue.get_index = function(this1) {
	return this1._hx_index;
};
stx_nano_EnumValue.alike = function(this1,that) {
	if(stx_nano_EnumValue.ctr(this1) == stx_nano_EnumValue.ctr(that)) {
		return stx_nano_EnumValue.get_index(this1) == stx_nano_EnumValue.get_index(that);
	} else {
		return false;
	}
};
stx_nano_EnumValue.prj = function(this1) {
	return this1;
};
var stx_nano_ReceiptApi = function() { };
$hxClasses["stx.nano.ReceiptApi"] = stx_nano_ReceiptApi;
stx_nano_ReceiptApi.__name__ = "stx.nano.ReceiptApi";
stx_nano_ReceiptApi.__isInterface__ = true;
stx_nano_ReceiptApi.__interfaces__ = [stx_nano_DefectApi];
stx_nano_ReceiptApi.prototype = {
	value: null
	,iterator: null
	,__class__: stx_nano_ReceiptApi
};
var stx_nano_EquityApi = function() { };
$hxClasses["stx.nano.EquityApi"] = stx_nano_EquityApi;
stx_nano_EquityApi.__name__ = "stx.nano.EquityApi";
stx_nano_EquityApi.__isInterface__ = true;
stx_nano_EquityApi.__interfaces__ = [stx_nano_ReceiptApi];
stx_nano_EquityApi.prototype = {
	asset: null
	,toEquity: null
	,__class__: stx_nano_EquityApi
};
var stx_nano_ReceiptCls = function(error,value) {
	stx_nano_DefectCls.call(this,error);
	this.value = value;
};
$hxClasses["stx.nano.ReceiptCls"] = stx_nano_ReceiptCls;
stx_nano_ReceiptCls.__name__ = "stx.nano.ReceiptCls";
stx_nano_ReceiptCls.__interfaces__ = [stx_nano_ReceiptApi];
stx_nano_ReceiptCls.__super__ = stx_nano_DefectCls;
stx_nano_ReceiptCls.prototype = $extend(stx_nano_DefectCls.prototype,{
	value: null
	,iterator: function() {
		var _gthis = this;
		var done = false;
		var test = function() {
			done = true;
			if(_gthis.get_error().is_defined()) {
				_gthis.get_error().crack();
			} else if(_gthis.value == null) {
				throw haxe_Exception.thrown("undefined");
			}
		};
		return { next : function() {
			test();
			return _gthis.value;
		}, hasNext : function() {
			if(!done) {
				test();
				return true;
			} else {
				return false;
			}
		}};
	}
	,__class__: stx_nano_ReceiptCls
});
var stx_nano_EquityCls = function(error,value,asset) {
	stx_nano_ReceiptCls.call(this,error,value);
	this.asset = asset;
};
$hxClasses["stx.nano.EquityCls"] = stx_nano_EquityCls;
stx_nano_EquityCls.__name__ = "stx.nano.EquityCls";
stx_nano_EquityCls.__interfaces__ = [stx_nano_EquityApi];
stx_nano_EquityCls.__super__ = stx_nano_ReceiptCls;
stx_nano_EquityCls.prototype = $extend(stx_nano_ReceiptCls.prototype,{
	asset: null
	,toEquity: function() {
		return this;
	}
	,__class__: stx_nano_EquityCls
});
var stx_nano_EquityLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.EquityLift"] = stx_nano_EquityLift;
stx_nano_EquityLift.__name__ = "stx.nano.EquityLift";
stx_nano_EquityLift.make = function() {
	return new stx_nano_EquityLift();
};
stx_nano_EquityLift.lift = function(self) {
	return stx_nano_Equity.lift(self);
};
stx_nano_EquityLift.errate = function(self,fn) {
	return stx_nano_EquityLift.errata(self,function(x) {
		return stx_fail_Refuse.errate(x,fn);
	});
};
stx_nano_EquityLift.errata = function(self,fn) {
	return stx_nano_Equity.make(self.asset,self.value,stx_fail_Error.errata(self.get_error(),fn));
};
stx_nano_EquityLift.copy = function(self,asset,value,error) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = self.get_error();
	var tmp;
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,value);
	var tmp1;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp1 = v;
	} else {
		tmp1 = self.value;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,asset);
	var tmp2;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp2 = v;
	} else {
		tmp2 = self.asset;
	}
	return stx_nano_EquityLift.lift(new stx_nano_EquityCls(tmp,tmp1,tmp2).toEquity());
};
stx_nano_EquityLift.map = function(self,fn) {
	var self1 = self.asset;
	var self2 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self.value);
	var tmp;
	switch(self2._hx_index) {
	case 0:
		var t = self2.v;
		tmp = fn(t);
		break;
	case 1:
		tmp = null;
		break;
	}
	return stx_nano_Equity.make(self1,tmp,self.get_error());
};
stx_nano_EquityLift.mapi = function(self,fn) {
	return stx_nano_Equity.make(fn(self.asset),self.value,self.get_error());
};
stx_nano_EquityLift.is_defined = function(self) {
	return self.value != null;
};
stx_nano_EquityLift.has_error = function(self) {
	return self.get_error().is_defined();
};
stx_nano_EquityLift.has_value = function(self) {
	return self.value != null;
};
stx_nano_EquityLift.has_asset = function(self) {
	return self.asset != null;
};
stx_nano_EquityLift.is_ok = function(self) {
	return !self.get_error().is_defined();
};
stx_nano_EquityLift.defect = function(self,error) {
	return stx_nano_EquityLift.copy(self,null,null,stx_fail_Refuse.concat(self.get_error(),error));
};
stx_nano_EquityLift.relate = function(self,value) {
	if(stx_nano_EquityLift.has_error(stx_nano_EquityLift.lift(self))) {
		return self;
	} else {
		return stx_nano_EquityLift.copy(self,null,value);
	}
};
stx_nano_EquityLift.clear = function(self) {
	return stx_nano_Equity.make(self.asset,null,self.get_error());
};
stx_nano_EquityLift.refuse = function(self,error) {
	return stx_nano_Equity.make(self.asset,self.value,stx_fail_Refuse.concat(self.get_error(),error));
};
stx_nano_EquityLift.defuse = function(self) {
	return stx_nano_Equity.make(self.asset,self.value,stx_fail_Refuse.unit());
};
stx_nano_EquityLift.toChunk = function(self) {
	if(stx_nano_EquityLift.has_value(self)) {
		return stx_nano_ChunkSum.Val(self.value);
	} else if(stx_nano_EquityLift.has_error(self)) {
		return stx_nano_ChunkSum.End(self.get_error().toError());
	} else {
		return stx_nano_ChunkSum.Tap;
	}
};
stx_nano_EquityLift.rebase = function(self,chunk) {
	switch(chunk._hx_index) {
	case 0:
		var oII = chunk.v;
		return stx_nano_EquityLift.relate(stx_nano_EquityLift.clear(self),oII);
	case 1:
		return stx_nano_EquityLift.clear(self);
	case 2:
		var e = chunk.err;
		return stx_nano_EquityLift.refuse(stx_nano_EquityLift.clear(self),e);
	}
};
stx_nano_EquityLift.adjust = function(self,fn) {
	return stx_nano_lift_LiftNano.if_else(stx_nano_EquityLift.has_value(stx_nano_EquityLift.lift(self)),function() {
		var self1 = fn(self.value);
		switch(self1._hx_index) {
		case 0:
			var t = self1.t;
			return stx_nano_EquityLift.relate(stx_nano_EquityLift.clear(stx_nano_EquityLift.lift(self)),t);
		case 1:
			var e = self1.e;
			return stx_nano_EquityLift.refuse(stx_nano_EquityLift.clear(stx_nano_EquityLift.lift(self)),e);
		}
	},function() {
		return stx_nano_EquityLift.clear(stx_nano_EquityLift.lift(self));
	});
};
stx_nano_EquityLift.__super__ = stx_pico_Clazz;
stx_nano_EquityLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_EquityLift
});
var stx_nano_Equity = {};
stx_nano_Equity._new = function(self) {
	return self;
};
stx_nano_Equity.lift = function(self) {
	return stx_nano_Equity._new(self);
};
stx_nano_Equity.prj = function(this1) {
	return this1;
};
stx_nano_Equity.get_self = function(this1) {
	return stx_nano_Equity.lift(this1);
};
stx_nano_Equity.make = function(asset,value,error) {
	return stx_nano_Equity.lift(new stx_nano_EquityCls(error,value,asset).toEquity());
};
stx_nano_Equity.toError = function(this1) {
	return this1.get_error().toError();
};
var stx_nano_FPath = {};
stx_nano_FPath.lift = function(self) {
	return stx_nano_FPath._new(self);
};
stx_nano_FPath._new = function(self) {
	return self;
};
stx_nano_FPath.unit = function() {
	return stx_nano_FPath.lift("/");
};
stx_nano_FPath.pure = function(str) {
	return stx_nano_FPath._new(str);
};
stx_nano_FPath.into = function(this1,str) {
	return stx_nano_FPath._new(stx_nano_lift_LiftNano.if_else(stx_nano_FPath.has_end_slash(this1),function() {
		return "" + this1 + str;
	},function() {
		return "" + this1 + "/" + str;
	}));
};
stx_nano_FPath.trim_end_slash = function(this1) {
	return stx_nano_lift_LiftNano.if_else(stx_nano_FPath.has_end_slash(this1),function() {
		return stx_nano_FPath.lift(stx_nano_CharsLift.rdropn(this1,1));
	},function() {
		return stx_nano_FPath.lift(this1);
	});
};
stx_nano_FPath.has_end_slash = function(this1) {
	return StringTools.endsWith(this1,"/");
};
stx_nano_FPath.is_absolute = function(this1) {
	return StringTools.startsWith(this1,"/");
};
stx_nano_FPath.fromString = function(str) {
	return stx_nano_FPath.lift(str);
};
stx_nano_FPath.toString = function(this1) {
	return this1;
};
stx_nano_FPath.toArray = function(this1) {
	var splut = this1.split("/");
	if(stx_nano_FPath.is_absolute(this1)) {
		splut.shift();
	}
	if(stx_nano_FPath.has_end_slash(this1)) {
		splut.pop();
	}
	return splut;
};
stx_nano_FPath.head = function(this1) {
	return stx_lift_ArrayLift.head(stx_nano_FPath.toArray(this1));
};
stx_nano_FPath.prj = function(this1) {
	return this1;
};
var stx_nano_Fault = {};
stx_nano_Fault._new = function(self) {
	return self;
};
stx_nano_Fault.lift = function(self) {
	return stx_nano_Fault._new(self);
};
stx_nano_Fault.of = function(this1,data) {
	return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(data)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
};
stx_nano_Fault.decline = function(this1,self) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(self),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
};
stx_nano_Fault.explain = function(this1,fn) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(fn,stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
};
stx_nano_Fault.digest = function(this1,fn) {
	return stx_fail_Error.make(haxe_ds_Option.Some(fn(stx_Nano.digests(stx_nano_Wildcard.__))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
};
var stx_nano_Field = {};
stx_nano_Field._new = function(self) {
	return self;
};
stx_nano_Field.lift = function(self) {
	return stx_nano_Field._new(self);
};
stx_nano_Field.fromTup = function(tp) {
	return stx_nano_Field._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_Field.fromCouple = function(tp) {
	return stx_nano_Field._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_Field.make = function(key,val) {
	return stx_nano_Field._new({ key : key, val : val});
};
stx_nano_Field.map = function(this1,fn) {
	return stx_nano_Field.lift(stx_nano_KVLift.map(stx_nano_KV.lift(this1),fn));
};
stx_nano_Field.into = function(this1,fn) {
	return fn(this1.key,this1.val);
};
stx_nano_Field.toCouple = function(this1) {
	return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,this1.key,this1.val);
};
stx_nano_Field.fromKeyValue = function(self) {
	return stx_nano_Field.lift({ key : self.key, val : self.value});
};
stx_nano_Field.get_value = function(this1) {
	return this1.val;
};
var stx_nano_Floats = function() { };
$hxClasses["stx.nano.Floats"] = stx_nano_Floats;
stx_nano_Floats.__name__ = "stx.nano.Floats";
stx_nano_Floats.delta = function(n0,n1) {
	return n1 - n0;
};
stx_nano_Floats.normalize = function(v,n0,n1) {
	return (v - n0) / (n1 - n0);
};
stx_nano_Floats.interpolate = function(v,n0,n1) {
	return n0 + (n1 - n0) * v;
};
stx_nano_Floats.map = function(v,min0,max0,min1,max1) {
	return min1 + (max1 - min1) * ((v - min0) / (max0 - min0));
};
stx_nano_Floats.round = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.round(n * r) / r);
};
stx_nano_Floats.ceil = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.ceil(n * r) / r);
};
stx_nano_Floats.floor = function(n,c) {
	if(c == null) {
		c = 1;
	}
	var r = Math.pow(10,c);
	return stx_nano_Floats.int(Math.floor(n * r) / r);
};
stx_nano_Floats.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_nano_Floats.sgn = function(n) {
	if(n == 0) {
		return 0;
	} else {
		return Math.abs(n) / n;
	}
};
stx_nano_Floats.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Floats.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Floats.int = function(v) {
	return v | 0;
};
stx_nano_Floats.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_nano_Floats.equals = function(v1,v2) {
	return v1 == v2;
};
stx_nano_Floats.toString = function(v) {
	return "" + v;
};
stx_nano_Floats.toInt = function(v) {
	return v | 0;
};
stx_nano_Floats.add = function(a,b) {
	return a + b;
};
stx_nano_Floats.sub = function(a,b) {
	return a - b;
};
stx_nano_Floats.div = function(a,b) {
	return a / b;
};
stx_nano_Floats.mul = function(a,b) {
	return a * b;
};
stx_nano_Floats.mod = function(a,b) {
	return a % b;
};
var stx_nano_Generator = function(f,stack) {
	this.fn = function(i) {
		var o = stack[i] == null ? stack[i] = f() : stack[i];
		return o;
	};
	this.index = 0;
};
$hxClasses["stx.nano.Generator"] = stx_nano_Generator;
stx_nano_Generator.__name__ = "stx.nano.Generator";
stx_nano_Generator.pure = function(fn) {
	return stx_nano_Generator.make(fn,[]);
};
stx_nano_Generator.make = function(fn,stack) {
	return new stx_nano_Generator(fn,stack);
};
stx_nano_Generator.prototype = {
	fn: null
	,index: null
	,restart: function() {
		var next = new stx_nano_Generator(null,null);
		next.fn = this.fn;
		return next;
	}
	,next: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			o = v;
			break;
		case 1:
			o = null;
			break;
		}
		this.index++;
		return o;
	}
	,hasNext: function() {
		var o;
		var _g = this.fn(this.index);
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.v;
			o = true;
			break;
		case 1:
			o = false;
			break;
		}
		return o;
	}
	,iterator: function() {
		return { next : $bind(this,this.next), hasNext : $bind(this,this.hasNext)};
	}
	,toIter: function() {
		var _gthis = this;
		return stx_nano_Iter.lift({ iterator : function() {
			return _gthis.iterator();
		}});
	}
	,__class__: stx_nano_Generator
};
var stx_nano_Ident = {};
stx_nano_Ident._new = function(self) {
	return self;
};
stx_nano_Ident.lift = function(self) {
	return stx_nano_Ident._new(self);
};
stx_nano_Ident.make = function(name,pack) {
	return stx_nano_Ident.lift({ name : name, pack : pack});
};
stx_nano_Ident.prj = function(this1) {
	return this1;
};
stx_nano_Ident.get_self = function(this1) {
	return stx_nano_Ident.lift(this1);
};
stx_nano_Ident.toWay = function(this1) {
	return stx_nano_lift_LiftNano.if_else(this1.pack == null,function() {
		return stx_nano_Way.snoc(stx_nano_Way.unit(),this1.name);
	},function() {
		return stx_nano_Way.snoc(this1.pack,this1.name);
	});
};
stx_nano_Ident.fromObject = function(self) {
	return stx_nano_Ident.lift({ name : self.name, pack : stx_nano_Way.lift(stx_nano_Cluster.lift(self.pack))});
};
stx_nano_Ident.fromIdentifier = function(self) {
	var n = stx_pico_Identifier.get_name(self);
	var p = stx_pico_Identifier.get_pack(self);
	return { name : n, pack : stx_nano_Way.lift(p)};
};
stx_nano_Ident.toIdentifier = function(this1) {
	var _g = this1.name;
	var _g1 = this1.pack;
	if(_g1 == null) {
		var n = _g;
		return stx_pico_Identifier.lift(n);
	} else {
		var pack = _g1;
		var n = _g;
		if(stx_nano_Cluster.get_length(pack) == 0) {
			return stx_pico_Identifier.lift(n);
		} else {
			var p = _g1;
			var n = _g;
			return stx_pico_Identifier.lift(stx_nano_Way.snoc(p,n).join("."));
		}
	}
};
stx_nano_Ident.toString_with_sep = function(this1,sep) {
	var _g = this1.name;
	var _g1 = this1.pack;
	if(_g1 == null) {
		var n = _g;
		return n;
	} else {
		var pack = _g1;
		var n = _g;
		if(stx_nano_Cluster.get_length(pack) == 0) {
			return n;
		} else {
			var p = _g1;
			var n = _g;
			return stx_pico_Identifier.lift(stx_nano_Way.snoc(p,n).join(sep));
		}
	}
};
stx_nano_Ident.toString_underscored = function(this1) {
	return stx_nano_Ident.toString_with_sep(this1,"_");
};
stx_nano_Ident.into = function(this1) {
	var next_path = stx_nano_Chars._.uncapitalize_first_letter(this1.name);
	return stx_nano_Way.snoc(this1.pack,next_path);
};
var stx_nano_Introspectable = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.Introspectable"] = stx_nano_Introspectable;
stx_nano_Introspectable.__name__ = "stx.nano.Introspectable";
stx_nano_Introspectable.__super__ = stx_pico_Clazz;
stx_nano_Introspectable.prototype = $extend(stx_pico_Clazz.prototype,{
	locals: function() {
		return stx_nano_lift_LiftNano.locals(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this));
	}
	,__class__: stx_nano_Introspectable
});
var stx_nano_Ints = function() { };
$hxClasses["stx.nano.Ints"] = stx_nano_Ints;
stx_nano_Ints.__name__ = "stx.nano.Ints";
stx_nano_Ints.max = function(v1,v2) {
	if(v2 > v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Ints.min = function(v1,v2) {
	if(v2 < v1) {
		return v2;
	} else {
		return v1;
	}
};
stx_nano_Ints.toBool = function(v) {
	if(v == 0) {
		return false;
	} else {
		return true;
	}
};
stx_nano_Ints.toFloat = function(v) {
	return v;
};
stx_nano_Ints.compare = function(v1,v2) {
	if(v1 < v2) {
		return -1;
	} else if(v1 > v2) {
		return 1;
	} else {
		return 0;
	}
};
stx_nano_Ints.equals = function(v1,v2) {
	return v1 == v2;
};
stx_nano_Ints.isOdd = function(n) {
	if(n % 2 == 0) {
		return false;
	} else {
		return true;
	}
};
stx_nano_Ints.isEven = function(n) {
	return (n % 2 == 0 ? false : true) == false;
};
stx_nano_Ints.isInteger = function(n) {
	return n % 1 == 0;
};
stx_nano_Ints.isNatural = function(n) {
	if(n > 0) {
		return n % 1 == 0;
	} else {
		return false;
	}
};
stx_nano_Ints.isPrime = function(n) {
	if(n == 1) {
		return false;
	}
	if(n == 2) {
		return false;
	}
	if(n % 2 == 0) {
		return false;
	}
	var itr_min = 3;
	var itr_max = Math.ceil(Math.sqrt(n)) + 1;
	while(itr_min < itr_max) {
		var i = itr_min++;
		if(n % 1 == 0) {
			return false;
		}
		++i;
	}
	return true;
};
stx_nano_Ints.factorial = function(n) {
	if(!(n > 0 && n % 1 == 0)) {
		throw haxe_Exception.thrown("function factorial requires natural number as input");
	}
	if(n == 0) {
		return 1;
	}
	var i = n - 1;
	while(i > 0) {
		n *= i;
		--i;
	}
	return n;
};
stx_nano_Ints.divisors = function(n) {
	var r = [];
	var iter_min = 1;
	var iter_max = Math.ceil(n / 2 + 1);
	while(iter_min < iter_max) {
		var i = iter_min++;
		if(n % i == 0) {
			r.push(i);
		}
	}
	if(n != 0) {
		r.push(n);
	}
	return r;
};
stx_nano_Ints.clamp = function(n,min,max) {
	if(n > max) {
		n = max;
	} else if(n < min) {
		n = min;
	}
	return n;
};
stx_nano_Ints.half = function(n) {
	return n / 2;
};
stx_nano_Ints.sum = function(xs) {
	var o = 0;
	var val = $getIterator(xs);
	while(val.hasNext()) {
		var val1 = val.next();
		o += val1;
	}
	return o;
};
stx_nano_Ints.add = function(a,b) {
	return a + b;
};
stx_nano_Ints.sub = function(a,b) {
	return a - b;
};
stx_nano_Ints.div = function(a,b) {
	return a / b;
};
stx_nano_Ints.mul = function(a,b) {
	return a * b;
};
stx_nano_Ints.mod = function(a,b) {
	return a % b;
};
stx_nano_Ints.inv = function(n) {
	return -n;
};
stx_nano_Ints.and = function(a,b) {
	return a & b;
};
stx_nano_Ints.eq = function(a,b) {
	return a == b;
};
stx_nano_Ints.gt = function(a,b) {
	return a > b;
};
stx_nano_Ints.gteq = function(a,b) {
	return a >= b;
};
stx_nano_Ints.lt = function(a,b) {
	return a < b;
};
stx_nano_Ints.lteq = function(a,b) {
	return a <= b;
};
stx_nano_Ints.ushr = function(v,bits) {
	return v >>> bits;
};
stx_nano_Ints.xor = function(a,b) {
	return a ^ b;
};
stx_nano_Ints.shl = function(v,bits) {
	return v << bits;
};
stx_nano_Ints.shr = function(v,bits) {
	return v >> bits;
};
stx_nano_Ints.abs = function(v) {
	return Math.abs(v) | 0;
};
stx_nano_Ints.toString = function(a) {
	return "" + a;
};
stx_nano_Ints.is_between = function(n,l,h) {
	if(n > l) {
		return n < h;
	} else {
		return false;
	}
};
stx_nano_Ints.is_of_range = function(n,l,h) {
	if(n >= l) {
		return n <= h;
	} else {
		return false;
	}
};
var stx_nano_IterLift = function() { };
$hxClasses["stx.nano.IterLift"] = stx_nano_IterLift;
stx_nano_IterLift.__name__ = "stx.nano.IterLift";
stx_nano_IterLift.cross = function(self,that) {
	return { iterator : function() {
		var l_it = $getIterator(self);
		var r_it = $getIterator(that);
		var l_val = null;
		var rec = null;
		rec = function() {
			if(l_val != null && l_it.hasNext()) {
				l_val = l_it.next();
			}
			if(r_it.hasNext()) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l_val,r_it.next());
			} else {
				if(l_it.hasNext()) {
					r_it = $getIterator(that);
				}
				l_val = null;
				return rec();
			}
		};
		return { next : rec, hasNext : function() {
			if(!l_it.hasNext()) {
				return r_it.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.zip = function(l,r) {
	return { iterator : function() {
		var lit = $getIterator(l);
		var rit = $getIterator(r);
		return { next : function() {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lit.next(),rit.next());
		}, hasNext : function() {
			if(lit.hasNext()) {
				return rit.hasNext();
			} else {
				return false;
			}
		}};
	}};
};
stx_nano_IterLift.ldrop = function(it,n) {
	return { iterator : function() {
		var iter = $getIterator(it);
		while(n > 0) {
			iter.next();
			n -= 1;
		}
		return iter;
	}};
};
stx_nano_IterLift.toMap = function(iter,fn,map) {
	var i = $getIterator(iter);
	while(i.hasNext()) {
		var i1 = i.next();
		var kv = fn(i1);
		stx_nano_CoupleLift.decouple(kv,$bind(map,map.set));
	}
	return map;
};
stx_nano_IterLift.map = function(iter,fn) {
	return { iterator : function() {
		var i = $getIterator(iter);
		return { next : function() {
			return fn(i.next());
		}, hasNext : function() {
			return i.hasNext();
		}};
	}};
};
stx_nano_IterLift.head = function(iter) {
	var it = $getIterator(iter);
	if(it.hasNext()) {
		return haxe_ds_Option.Some(it.next());
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_IterLift.lfold = function(iter,mapper,seed) {
	var folded = seed;
	var e = $getIterator(iter);
	while(e.hasNext()) {
		var e1 = e.next();
		folded = mapper(e1,folded);
	}
	return folded;
};
stx_nano_IterLift.lfold1 = function(iter,mapper) {
	var it = $getIterator(iter);
	var memo = haxe_ds_Option.None;
	if(!it.hasNext()) {
		return haxe_ds_Option.None;
	} else {
		memo = haxe_ds_Option.Some(it.next());
		while(true) if(!it.hasNext()) {
			break;
		} else {
			memo = stx_pico_OptionLift.flat_map(memo,function(lhs) {
				return haxe_ds_Option.Some(mapper(lhs,it.next()));
			});
		}
		return memo;
	}
};
stx_nano_IterLift.toGenerator = function(self) {
	var iter = haxe_ds_Option.None;
	return function() {
		if(iter == haxe_ds_Option.None) {
			iter = haxe_ds_Option.Some($getIterator(self));
		}
		return stx_pico_OptionLift.flat_map(iter,function(x) {
			if(x.hasNext()) {
				return haxe_ds_Option.Some(x.next());
			} else {
				return haxe_ds_Option.None;
			}
		});
	};
};
stx_nano_IterLift.toArray = function(self) {
	var arr = [];
	var v = $getIterator(self);
	while(v.hasNext()) {
		var v1 = v.next();
		arr.push(v1);
	}
	return arr;
};
stx_nano_IterLift.toCluster = function(self) {
	return stx_nano_Cluster.lift(stx_nano_IterLift.toArray(self));
};
stx_nano_IterLift.foldr = function(iter,fn,init) {
	var data = init;
	var iterator = $getIterator(iter);
	var eff = null;
	eff = function() {
		if(iterator.hasNext()) {
			var next = iterator.next();
			eff();
			data = fn(next,data);
		}
	};
	eff();
	return data;
};
stx_nano_IterLift.search = function(iter,fn) {
	return stx_nano_IterLift.lfold(iter,function(next,memo) {
		var tmp;
		switch(memo._hx_index) {
		case 0:
			var t = memo.v;
			tmp = haxe_ds_Option.Some(t);
			break;
		case 1:
			tmp = stx_nano_lift_LiftNano.if_else(fn(next),function() {
				return haxe_ds_Option.Some(next);
			},function() {
				return haxe_ds_Option.None;
			});
			break;
		}
		return tmp;
	},haxe_ds_Option.None);
};
stx_nano_IterLift.map_filter = function(self,fn) {
	return stx_nano_IterLift.lfold(self,function(next,memo) {
		var _g = fn(next);
		if(_g._hx_index == 0) {
			var v = _g.v;
			return stx_lift_ArrayLift.snoc(memo,v);
		} else {
			return memo;
		}
	},[]);
};
stx_nano_IterLift.concat = function(self,that) {
	return stx_nano_Iter.lift(stx_lift_IterableLift.concat(self,that));
};
stx_nano_IterLift.is_defined = function(self) {
	return $getIterator(self).hasNext();
};
stx_nano_IterLift.count = function(self,fn) {
	return stx_nano_IterLift.lfold(self,function(n,m) {
		return m + (fn(n) ? 1 : 0);
	},0);
};
stx_nano_IterLift.last = function(self) {
	return stx_nano_IterLift.lfold1(self,function(n,m) {
		return n;
	});
};
stx_nano_IterLift.size = function(self) {
	return stx_nano_IterLift.count(self,function(_) {
		return true;
	});
};
var stx_nano_Iter = {};
stx_nano_Iter.unit = function() {
	return stx_nano_Iter.lift({ iterator : function() {
		return { hasNext : function() {
			return false;
		}, next : function() {
			return null;
		}};
	}});
};
stx_nano_Iter.lift = function(self) {
	return stx_nano_Iter._new(self);
};
stx_nano_Iter.make = function(self) {
	return stx_nano_Iter.lift({ iterator : function() {
		return self;
	}});
};
stx_nano_Iter.fromThunkIterator = function(self) {
	return stx_nano_Iter.lift({ iterator : self});
};
stx_nano_Iter.make0 = function(self) {
	return stx_nano_Iter.make({ hasNext : function() {
		return (stx_nano_CoupleLift.fst(self()))();
	}, next : function() {
		return (stx_nano_CoupleLift.snd(self()))();
	}});
};
stx_nano_Iter._new = function(self) {
	return self;
};
stx_nano_Iter.prj = function(this1) {
	return this1;
};
stx_nano_Iter.range = function(start,finish,step) {
	if(step == null) {
		step = 1;
	}
	var op = start < finish ? function(x) {
		return x + step;
	} : function(x) {
		return x - step;
	};
	var comp = start < finish ? function(x) {
		return x <= finish;
	} : function(x) {
		return x >= finish;
	};
	return { iterator : function() {
		var index = start;
		return { next : function() {
			var i = index;
			index = op(index);
			return i;
		}, hasNext : function() {
			return comp(index);
		}};
	}};
};
var stx_nano_IterKV = {};
stx_nano_IterKV._new = function(self) {
	return self;
};
stx_nano_IterKV.lift = function(self) {
	return stx_nano_IterKV._new(self);
};
stx_nano_IterKV.prj = function(this1) {
	return this1;
};
stx_nano_IterKV.get_self = function(this1) {
	return stx_nano_IterKV.lift(this1);
};
stx_nano_IterKV.toIter = function(this1) {
	return stx_nano_IterLift.map({ iterator : $keyValueIterator(this1)},function(t) {
		return stx_nano_KV.make(t.key,t.value);
	});
};
stx_nano_IterKV.fromEnsemble = function(self) {
	return stx_nano_IterKV.lift({ keyValueIterator : function() {
		return new haxe_iterators_DynamicAccessKeyValueIterator(stx_nano_Ensemble.prj(self));
	}});
};
var stx_nano_IterKVLift = function() { };
$hxClasses["stx.nano.IterKVLift"] = stx_nano_IterKVLift;
stx_nano_IterKVLift.__name__ = "stx.nano.IterKVLift";
stx_nano_IterKVLift.map = function(self,fn) {
	return stx_nano_IterKV.lift({ keyValueIterator : function() {
		var iterator = $getKeyValueIterator(self);
		return { next : function() {
			var kv = iterator.next();
			return { key : kv.key, value : fn(kv.value)};
		}, hasNext : function() {
			return iterator.hasNext();
		}};
	}});
};
stx_nano_IterKVLift.map_zip = function(self,fn) {
	return stx_nano_Iter.lift({ iterator : function() {
		var iterator = $getKeyValueIterator(self);
		return { next : function() {
			var kv = iterator.next();
			return fn(kv.key,kv.value);
		}, hasNext : function() {
			return iterator.hasNext();
		}};
	}});
};
stx_nano_IterKVLift.map_both = function(self,lhs,rhs) {
	return stx_nano_IterKV.lift({ keyValueIterator : function() {
		var iterator = $getKeyValueIterator(self);
		return { next : function() {
			var kv = iterator.next();
			return { key : lhs(kv.key), value : rhs(kv.value)};
		}, hasNext : function() {
			return iterator.hasNext();
		}};
	}});
};
var stx_nano_Json = function() { };
$hxClasses["stx.nano.Json"] = stx_nano_Json;
stx_nano_Json.__name__ = "stx.nano.Json";
stx_nano_Json.encode = function(v,replacer,space) {
	var out = null;
	var err = null;
	try {
		out = JSON.stringify(v,replacer,space);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		err = stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),haxe_ds_Option.None,stx_pico_Option.fromNullT(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/nano/Json.hx", lineNumber : 10, className : "stx.nano.Json", methodName : "encode"})));
	}
	if(err == null) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,out);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/nano/Json.hx", lineNumber : 12, className : "stx.nano.Json", methodName : "encode"});
	}
};
stx_nano_Json.decode = function(str) {
	var out = null;
	var err = null;
	try {
		out = JSON.parse(str);
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		err = stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),haxe_ds_Option.None,stx_pico_Option.fromNullT(stx_nano_lift_LiftNano.here(stx_nano_Wildcard.__,{ fileName : "stx/nano/Json.hx", lineNumber : 20, className : "stx.nano.Json", methodName : "decode"})));
	}
	if(err == null) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,out);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/nano/Json.hx", lineNumber : 22, className : "stx.nano.Json", methodName : "decode"});
	}
};
var stx_nano_JunctionCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.JunctionCtr"] = stx_nano_JunctionCtr;
stx_nano_JunctionCtr.__name__ = "stx.nano.JunctionCtr";
stx_nano_JunctionCtr.__super__ = stx_pico_Clazz;
stx_nano_JunctionCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	At: function(v) {
		return stx_nano_JunctionSum.There(v);
	}
	,Of: function(v) {
		return stx_nano_JunctionSum.Whole(stx_nano_APP.reply(v));
	}
	,__class__: stx_nano_JunctionCtr
});
var stx_nano_JunctionSum = $hxEnums["stx.nano.JunctionSum"] = { __ename__:"stx.nano.JunctionSum",__constructs__:null
	,There: ($_=function(r) { return {_hx_index:0,r:r,__enum__:"stx.nano.JunctionSum",toString:$estr}; },$_._hx_name="There",$_.__params__ = ["r"],$_)
	,Whole: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.nano.JunctionSum",toString:$estr}; },$_._hx_name="Whole",$_.__params__ = ["v"],$_)
};
stx_nano_JunctionSum.__constructs__ = [stx_nano_JunctionSum.There,stx_nano_JunctionSum.Whole];
var stx_nano_JunctionLift = function() { };
$hxClasses["stx.nano.JunctionLift"] = stx_nano_JunctionLift;
stx_nano_JunctionLift.__name__ = "stx.nano.JunctionLift";
stx_nano_JunctionLift.lift = function(self) {
	return self;
};
var stx_nano_Junction = {};
stx_nano_Junction._new = function(self) {
	return self;
};
stx_nano_Junction.lift = function(self) {
	return self;
};
stx_nano_Junction.prj = function(this1) {
	return this1;
};
stx_nano_Junction.get_self = function(this1) {
	return this1;
};
stx_nano_Junction.fromRegister = function(r) {
	return stx_nano_JunctionSum.There(r);
};
stx_nano_Junction.fromT = function(r) {
	return stx_nano_JunctionSum.Whole(r);
};
var stx_nano_KVLift = function() { };
$hxClasses["stx.nano.KVLift"] = stx_nano_KVLift;
stx_nano_KVLift.__name__ = "stx.nano.KVLift";
stx_nano_KVLift.map = function(self,fn) {
	return { key : self.key, val : fn(self.val)};
};
stx_nano_KVLift.fst = function(self) {
	return self.key;
};
stx_nano_KVLift.snd = function(self) {
	return self.val;
};
stx_nano_KVLift.into = function(self,fn) {
	return fn(self.key,self.val);
};
stx_nano_KVLift.decouple = function(self,fn) {
	return fn(self.key,self.val);
};
var stx_nano_KV = {};
stx_nano_KV._new = function(self) {
	return self;
};
stx_nano_KV.lift = function(self) {
	return stx_nano_KV._new(self);
};
stx_nano_KV.make = function(k,v) {
	return stx_nano_KV.lift({ key : k, val : v});
};
stx_nano_KV.fromObj = function(self) {
	return stx_nano_KV._new(self);
};
stx_nano_KV.fromTup = function(tp) {
	return stx_nano_KV._new({ key : stx_nano_CoupleLift.fst(tp), val : stx_nano_CoupleLift.snd(tp)});
};
stx_nano_KV.toKeyValue = function(this1) {
	return { key : this1.key, value : this1.val};
};
var stx_nano_KnuckleSum = $hxEnums["stx.nano.KnuckleSum"] = { __ename__:"stx.nano.KnuckleSum",__constructs__:null
	,Ordinal: ($_=function(idx) { return {_hx_index:0,idx:idx,__enum__:"stx.nano.KnuckleSum",toString:$estr}; },$_._hx_name="Ordinal",$_.__params__ = ["idx"],$_)
	,Nominal: ($_=function(str,idx) { return {_hx_index:1,str:str,idx:idx,__enum__:"stx.nano.KnuckleSum",toString:$estr}; },$_._hx_name="Nominal",$_.__params__ = ["str","idx"],$_)
};
stx_nano_KnuckleSum.__constructs__ = [stx_nano_KnuckleSum.Ordinal,stx_nano_KnuckleSum.Nominal];
var stx_nano_KnuckleLift = function() { };
$hxClasses["stx.nano.KnuckleLift"] = stx_nano_KnuckleLift;
stx_nano_KnuckleLift.__name__ = "stx.nano.KnuckleLift";
stx_nano_KnuckleLift.lift = function(self) {
	return self;
};
var stx_nano_Knuckle = {};
stx_nano_Knuckle._new = function(self) {
	return self;
};
stx_nano_Knuckle.lift = function(self) {
	return self;
};
stx_nano_Knuckle.prj = function(this1) {
	return this1;
};
stx_nano_Knuckle.get_self = function(this1) {
	return this1;
};
stx_nano_Knuckle.fromRegister = function(self) {
	return stx_nano_KnuckleSum.Ordinal(self);
};
stx_nano_Knuckle.fromString = function(self) {
	return stx_nano_KnuckleSum.Nominal(self,stx_nano_Register.unit());
};
stx_nano_Knuckle.fromNull = function(self) {
	return stx_nano_KnuckleSum.Ordinal(stx_nano_Register.unit());
};
stx_nano_Knuckle.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var i = this1.idx;
		return "[" + Std.string(i) + "]";
	case 1:
		var str = this1.str;
		var i = this1.idx;
		return "." + str + "@" + Std.string(i);
	}
};
stx_nano_Knuckle.equals = function(this1,r) {
	var l = this1;
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			var r1 = r.idx;
			var l1 = l.idx;
			return stx_nano_Register.equals(l1,r1);
		} else {
			return false;
		}
		break;
	case 1:
		if(r._hx_index == 1) {
			var r1 = r.str;
			var rI = r.idx;
			var lI = l.idx;
			var l1 = l.str;
			if(l1 == r1) {
				return stx_nano_Register.equals(lI,rI);
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	}
};
var stx_nano_LedgerLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.LedgerLift"] = stx_nano_LedgerLift;
stx_nano_LedgerLift.__name__ = "stx.nano.LedgerLift";
stx_nano_LedgerLift.make = function() {
	return new stx_nano_LedgerLift();
};
stx_nano_LedgerLift.lift = function(self) {
	return stx_nano_Ledger.lift(self);
};
stx_nano_LedgerLift.errata = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.errata(x,fn);
	});
};
stx_nano_LedgerLift.errate = function(self,fn) {
	return stx_nano_LedgerLift.lift(tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.errate(x,fn);
	}));
};
stx_nano_LedgerLift.flat_map = function(self,fn) {
	return tink_core_Future.flatMap(self,function(x) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x.value);
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			return stx_nano_LedgerLift.errata(fn(t),function(e) {
				return x.get_error().toError().concat(e);
			});
		case 1:
			return stx_nano_Ledger.fromEquity(stx_nano_Equity.make(x.asset,null,x.get_error()));
		}
	});
};
stx_nano_LedgerLift.map = function(self,fn) {
	return tink_core_Future.map(self,function(x) {
		return stx_nano_EquityLift.map(x,fn);
	});
};
stx_nano_LedgerLift.escape = function(self,fn) {
	return tink_core_Future.map(self,fn);
};
stx_nano_LedgerLift.__super__ = stx_pico_Clazz;
stx_nano_LedgerLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_LedgerLift
});
var stx_nano_Ledger = {};
stx_nano_Ledger._new = function(self) {
	return self;
};
stx_nano_Ledger.lift = function(self) {
	return stx_nano_Ledger._new(self);
};
stx_nano_Ledger.prj = function(this1) {
	return this1;
};
stx_nano_Ledger.get_self = function(this1) {
	return stx_nano_Ledger.lift(this1);
};
stx_nano_Ledger.fromEquity = function(self) {
	return stx_nano_Ledger.lift(tink_core_Future.irreversible(function(cb) {
		cb(self);
	}));
};
var stx_nano_LogicalClock = function() { };
$hxClasses["stx.nano.LogicalClock"] = stx_nano_LogicalClock;
stx_nano_LogicalClock.__name__ = "stx.nano.LogicalClock";
stx_nano_LogicalClock.previous = null;
stx_nano_LogicalClock.get = function() {
	var st = stx_nano_TimeStamp.pure;
	if(stx_nano_LogicalClock.previous == null) {
		return st({ realm : stx_nano_LogicalClock.previous = HxOverrides.now() / 1000, index : stx_nano_LogicalClock.counter, exact : ++stx_nano_LogicalClock.lifetime});
	} else {
		var stamp = HxOverrides.now() / 1000;
		if(stamp == stx_nano_LogicalClock.previous) {
			return st({ realm : stamp, index : stx_nano_LogicalClock.counter++, exact : ++stx_nano_LogicalClock.lifetime});
		} else {
			stx_nano_LogicalClock.previous = stamp;
			stx_nano_LogicalClock.counter = 0;
			return st({ realm : stamp, index : stx_nano_LogicalClock.counter, exact : ++stx_nano_LogicalClock.lifetime});
		}
	}
};
var stx_nano_Math = function() { };
$hxClasses["stx.nano.Math"] = stx_nano_Math;
stx_nano_Math.__name__ = "stx.nano.Math";
stx_nano_Math.rndOne = function(weight) {
	if(weight == null) {
		weight = 0.5;
	}
	return Math.random() - weight | 0;
};
stx_nano_Math.radians = function(v) {
	return v * (Math.PI / 180);
};
stx_nano_Math.degrees = function(v) {
	return v * (180 / Math.PI);
};
stx_nano_Math.random = function(max,min) {
	if(min == null) {
		min = 0;
	}
	if(max == null) {
		max = 1;
	}
	return Math.random() * (max - min) + min;
};
stx_nano_Math.isNaN = function(fl) {
	return isNaN(fl);
};
stx_nano_Math.unique_unordered_pair = function(x,y) {
	if(x < y) {
		return x * (y - 1) + Math.floor(Math.pow(y - x - 2,2) / 4);
	} else {
		return (x - 1) * y + Math.floor(Math.pow(x - y - 2,2) / 4);
	}
};
var stx_nano_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.Module"] = stx_nano_Module;
stx_nano_Module.__name__ = "stx.nano.Module";
stx_nano_Module.__super__ = stx_pico_Clazz;
stx_nano_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	embed: function() {
		return stx_nano_Embed._new();
	}
	,Ft: function() {
		return new stx_nano__$Module_Ft();
	}
	,Future: function() {
		return new stx_nano__$Module_Ft();
	}
	,Map: function() {
		return new stx_nano__$Module_Map();
	}
	,command: function(fn) {
		return function(v) {
			fn(v);
			return v;
		};
	}
	,__class__: stx_nano_Module
});
var stx_nano__$Module_Ft = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Module.Ft"] = stx_nano__$Module_Ft;
stx_nano__$Module_Ft.__name__ = "stx.nano._Module.Ft";
stx_nano__$Module_Ft.__super__ = stx_pico_Clazz;
stx_nano__$Module_Ft.prototype = $extend(stx_pico_Clazz.prototype,{
	bind_fold: function(arr,fn,init) {
		return stx_nano_IterLift.lfold(arr,function(next,memo) {
			haxe_Log.trace(next,{ fileName : "stx/nano/Module.hx", lineNumber : 30, className : "stx.nano._Module.Ft", methodName : "bind_fold"});
			return tink_core_Future.flatMap(memo,function(tt) {
				var result = fn(next,tt);
				return result;
			});
		},tink_core_Future.irreversible(function(cb) {
			var pos = { fileName : "stx/nano/Module.hx", lineNumber : 39, className : "stx.nano._Module.Ft", methodName : "bind_fold"};
			cb((function(t) {
				haxe_Log.trace(t,pos);
				return t;
			})(init));
		}));
	}
	,zip: function(self,that) {
		var left = haxe_ds_Option.None;
		var right = haxe_ds_Option.None;
		var trigger = new tink_core_FutureTrigger();
		var on_done = function() {
			if(left._hx_index == 0) {
				if(right._hx_index == 0) {
					var r = right.v;
					var l = left.v;
					trigger.trigger(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
				}
			}
		};
		var l_handler = function(l) {
			left = haxe_ds_Option.Some(l);
			on_done();
		};
		var r_handler = function(r) {
			right = haxe_ds_Option.Some(r);
			on_done();
		};
		self.handle(l_handler);
		that.handle(r_handler);
		return trigger;
	}
	,tryAndThenCancelIfNotAvailable: function(ft) {
		var output = haxe_ds_Option.None;
		var canceller = ft.handle(function(x) {
			output = haxe_ds_Option.Some(x);
		});
		if(!stx_pico_OptionLift.is_defined(output)) {
			if(canceller != null) {
				canceller.cancel();
			}
		}
		return output;
	}
	,squeeze: function(ft) {
		return this.tryAndThenCancelIfNotAvailable(ft);
	}
	,option: function(ft) {
		var output = haxe_ds_Option.None;
		var finished = false;
		ft.handle(function(x) {
			if(!finished) {
				output = haxe_ds_Option.Some(x);
			}
		});
		finished = true;
		return output;
	}
	,__class__: stx_nano__$Module_Ft
});
var stx_nano__$Module_Sig = function() { };
$hxClasses["stx.nano._Module.Sig"] = stx_nano__$Module_Sig;
stx_nano__$Module_Sig.__name__ = "stx.nano._Module.Sig";
var stx_nano__$Module_Map = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano._Module.Map"] = stx_nano__$Module_Map;
stx_nano__$Module_Map.__name__ = "stx.nano._Module.Map";
stx_nano__$Module_Map.__super__ = stx_pico_Clazz;
stx_nano__$Module_Map.prototype = $extend(stx_pico_Clazz.prototype,{
	String: function() {
		return new haxe_ds_StringMap();
	}
	,__class__: stx_nano__$Module_Map
});
var stx_nano_NuggetApi = function() { };
$hxClasses["stx.nano.NuggetApi"] = stx_nano_NuggetApi;
stx_nano_NuggetApi.__name__ = "stx.nano.NuggetApi";
stx_nano_NuggetApi.__isInterface__ = true;
stx_nano_NuggetApi.prototype = {
	put: null
	,use: null
	,__class__: stx_nano_NuggetApi
};
var stx_nano_NuggetCls = function(val) {
	this.val = val;
};
$hxClasses["stx.nano.NuggetCls"] = stx_nano_NuggetCls;
stx_nano_NuggetCls.__name__ = "stx.nano.NuggetCls";
stx_nano_NuggetCls.__interfaces__ = [stx_nano_NuggetApi];
stx_nano_NuggetCls.prototype = {
	val: null
	,put: function(v) {
		if(this.val != null) {
			throw haxe_Exception.thrown("already set value on Nugget");
		}
	}
	,use: function(fn) {
		if(this.val == null) {
			throw haxe_Exception.thrown("val on Nugget unset");
		}
	}
	,__class__: stx_nano_NuggetCls
};
var stx_nano__$Nugget_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.nano._Nugget.Delegate"] = stx_nano__$Nugget_Delegate;
stx_nano__$Nugget_Delegate.__name__ = "stx.nano._Nugget.Delegate";
stx_nano__$Nugget_Delegate.prototype = {
	delegate: null
	,__class__: stx_nano__$Nugget_Delegate
};
var stx_nano_FutureNugget = function(fut) {
	stx_nano_NuggetCls.call(this);
	this.fut = fut;
};
$hxClasses["stx.nano.FutureNugget"] = stx_nano_FutureNugget;
stx_nano_FutureNugget.__name__ = "stx.nano.FutureNugget";
stx_nano_FutureNugget.__super__ = stx_nano_NuggetCls;
stx_nano_FutureNugget.prototype = $extend(stx_nano_NuggetCls.prototype,{
	fut: null
	,put: function(v) {
		throw haxe_Exception.thrown("Future Nugget resolves internally");
	}
	,use: function(fn) {
		this.fut.handle(fn);
	}
	,__class__: stx_nano_FutureNugget
});
var stx_nano_Nugget = {};
stx_nano_Nugget._new = function(self) {
	return self;
};
stx_nano_Nugget.lift = function(self) {
	return stx_nano_Nugget._new(self);
};
stx_nano_Nugget.prj = function(this1) {
	return this1;
};
stx_nano_Nugget.get_self = function(this1) {
	return stx_nano_Nugget.lift(this1);
};
var stx_nano_Absorbable = {};
stx_nano_Absorbable._new = function(self) {
	return self;
};
stx_nano_Absorbable.lift = function(self) {
	return stx_nano_Absorbable._new(self);
};
stx_nano_Absorbable.pure = function(v) {
	return stx_nano_Absorbable.lift(new stx_nano_NuggetCls(v));
};
stx_nano_Absorbable.later = function(ft) {
	return stx_nano_Absorbable.lift(new stx_nano_FutureNugget(ft));
};
var stx_nano_Producable = {};
stx_nano_Producable._new = function(self) {
	return self;
};
stx_nano_Producable.lift = function(self) {
	return stx_nano_Producable._new(self);
};
stx_nano_Producable.unit = function() {
	return stx_nano_Producable.lift(new stx_nano_NuggetCls());
};
stx_nano_Producable.go = function(this1,v) {
	this1.put(v);
	return stx_nano_Absorbable.lift(this1);
};
var stx_nano_NumericSum = $hxEnums["stx.nano.NumericSum"] = { __ename__:"stx.nano.NumericSum",__constructs__:null
	,NInt: ($_=function(int) { return {_hx_index:0,int:int,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NInt",$_.__params__ = ["int"],$_)
	,NInt64: ($_=function(int) { return {_hx_index:1,int:int,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NInt64",$_.__params__ = ["int"],$_)
	,NFloat: ($_=function(f) { return {_hx_index:2,f:f,__enum__:"stx.nano.NumericSum",toString:$estr}; },$_._hx_name="NFloat",$_.__params__ = ["f"],$_)
};
stx_nano_NumericSum.__constructs__ = [stx_nano_NumericSum.NInt,stx_nano_NumericSum.NInt64,stx_nano_NumericSum.NFloat];
var stx_nano_Numeric = {};
stx_nano_Numeric._new = function(self) {
	return self;
};
stx_nano_Numeric.lift = function(self) {
	return stx_nano_Numeric._new(self);
};
stx_nano_Numeric.prj = function(this1) {
	return this1;
};
stx_nano_Numeric.get_self = function(this1) {
	return stx_nano_Numeric.lift(this1);
};
stx_nano_Numeric.toString = function(this1) {
	var _g = stx_nano_Numeric.get_self(this1);
	switch(_g._hx_index) {
	case 0:
		var v = _g.int;
		return "" + v;
	case 1:
		var v = _g.int;
		return "" + (v == null ? "null" : haxe_Int64.toString(v));
	case 2:
		var v = _g.f;
		return "" + v;
	}
};
stx_nano_Numeric.get_width = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var int = this1.int;
		return 4;
	case 1:
		var int = this1.int;
		return 8;
	case 2:
		var f = this1.f;
		return 8;
	}
};
stx_nano_Numeric.intoBytes = function(this1) {
};
var stx_nano_OneOrManySum = $hxEnums["stx.nano.OneOrManySum"] = { __ename__:"stx.nano.OneOrManySum",__constructs__:null
	,OneOf: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.OneOrManySum",toString:$estr}; },$_._hx_name="OneOf",$_.__params__ = ["v"],$_)
	,ManyOf: ($_=function(arr) { return {_hx_index:1,arr:arr,__enum__:"stx.nano.OneOrManySum",toString:$estr}; },$_._hx_name="ManyOf",$_.__params__ = ["arr"],$_)
};
stx_nano_OneOrManySum.__constructs__ = [stx_nano_OneOrManySum.OneOf,stx_nano_OneOrManySum.ManyOf];
var stx_nano_OneOrMany = {};
stx_nano_OneOrMany._new = function(self) {
	return self;
};
stx_nano_OneOrMany.lift = function(self) {
	return stx_nano_OneOrMany._new(self);
};
stx_nano_OneOrMany.fromT = function(self) {
	return stx_nano_OneOrMany.lift(stx_nano_OneOrManySum.OneOf(self));
};
stx_nano_OneOrMany.fromCluster = function(self) {
	return stx_nano_OneOrMany.lift(stx_nano_OneOrManySum.ManyOf(self));
};
stx_nano_OneOrMany.fromArray = function(self) {
	return stx_nano_OneOrMany.lift(stx_nano_OneOrManySum.ManyOf(stx_nano_Cluster.lift(self)));
};
stx_nano_OneOrMany.toArray = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return [v];
	case 1:
		var arr = this1.arr;
		return stx_nano_Cluster.prj(arr);
	}
};
stx_nano_OneOrMany.prj = function(this1) {
	return this1;
};
stx_nano_OneOrMany.get_self = function(this1) {
	return stx_nano_OneOrMany.lift(this1);
};
var stx_nano_PartialFunctionApi = function() { };
$hxClasses["stx.nano.PartialFunctionApi"] = stx_nano_PartialFunctionApi;
stx_nano_PartialFunctionApi.__name__ = "stx.nano.PartialFunctionApi";
stx_nano_PartialFunctionApi.__isInterface__ = true;
stx_nano_PartialFunctionApi.__interfaces__ = [stx_pico_ApplyApi];
stx_nano_PartialFunctionApi.prototype = {
	guard: null
	,__class__: stx_nano_PartialFunctionApi
};
var stx_nano_PartialFunctionCls = function() { };
$hxClasses["stx.nano.PartialFunctionCls"] = stx_nano_PartialFunctionCls;
stx_nano_PartialFunctionCls.__name__ = "stx.nano.PartialFunctionCls";
stx_nano_PartialFunctionCls.__interfaces__ = [stx_nano_PartialFunctionApi];
stx_nano_PartialFunctionCls.prototype = {
	toApply: null
	,apply: null
	,guard: null
	,__class__: stx_nano_PartialFunctionCls
};
var stx_nano_PartialFunction = {};
stx_nano_PartialFunction._new = function(self) {
	return self;
};
stx_nano_PartialFunction.lift = function(self) {
	return stx_nano_PartialFunction._new(self);
};
stx_nano_PartialFunction.prj = function(this1) {
	return this1;
};
stx_nano_PartialFunction.get_self = function(this1) {
	return stx_nano_PartialFunction.lift(this1);
};
var stx_nano_PartialFunctions = {};
stx_nano_PartialFunctions._new = function(self) {
	return self;
};
stx_nano_PartialFunctions.lift = function(self) {
	return stx_nano_PartialFunctions._new(self);
};
stx_nano_PartialFunctions.prj = function(this1) {
	return this1;
};
stx_nano_PartialFunctions.get_self = function(this1) {
	return stx_nano_PartialFunctions.lift(this1);
};
stx_nano_PartialFunctions.apply = function(this1,v) {
	return stx_nano_ClusterLift.lfold(this1,function(next,memo) {
		if(memo._hx_index == 0) {
			var x = memo.v;
			return haxe_ds_Option.Some(x);
		} else if(next.guard(v)) {
			return haxe_ds_Option.Some(next.apply(v));
		} else {
			return haxe_ds_Option.None;
		}
	},haxe_ds_Option.None);
};
var stx_nano_PledgeLift = function() { };
$hxClasses["stx.nano.PledgeLift"] = stx_nano_PledgeLift;
stx_nano_PledgeLift.__name__ = "stx.nano.PledgeLift";
stx_nano_PledgeLift.toJsPromise = function(self) {
	var promise = new Promise(function(resolve,reject) {
		try {
			self.handle(function(res) {
				switch(res._hx_index) {
				case 0:
					var t = res.t;
					resolve(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t));
					break;
				case 1:
					var e = res.e;
					reject(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Pledge.hx", lineNumber : 167, className : "stx.nano.PledgeLift", methodName : "toJsPromise"}));
					break;
				}
			});
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(js_Boot.__implements(_g1,stx_fail_ErrorApi)) {
				var e = _g1;
				var _g2 = stx_fail_Refuse.catcher(e);
				var promise;
				switch(_g2._hx_index) {
				case 0:
					var e = _g2.v;
					promise = stx_nano_CTR.fromR(stx_fail_ErrorLift.digest_with(e,function(x) {
						return Std.string(x);
					}));
					break;
				case 1:
					var e = _g2.v;
					promise = stx_nano_CTR.fromR(e);
					break;
				}
				stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,promise,{ fileName : "stx/nano/Pledge.hx", lineNumber : 173, className : "stx.nano.PledgeLift", methodName : "toJsPromise"});
			} else if(((_g1) instanceof Error)) {
				var e = _g1;
				var reject1 = reject;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 178, className : "stx.nano.PledgeLift", methodName : "toJsPromise"});
				reject1(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_nano_Digests.e_js_error(_,e);
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 178, className : "stx.nano.PledgeLift", methodName : "toJsPromise"}));
			} else {
				throw _g;
			}
		}
	});
	return promise;
};
stx_nano_PledgeLift.toJsPromiseError = function(self) {
	return stx_nano_PledgeLift.toJsPromise(self).then(function(res) {
		return new Promise(function(resolve,reject) {
			switch(res._hx_index) {
			case 0:
				var t = res.t;
				resolve(t);
				break;
			case 1:
				var e = res.e;
				reject(e);
				break;
			}
		});
	});
};
stx_nano_PledgeLift.lift = function(self) {
	return stx_nano_Pledge.lift(self);
};
stx_nano_PledgeLift.zip = function(self,that) {
	var out = tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(stx_nano_Pledge.prj(self),stx_nano_Pledge.prj(that)),function(tp) {
		var self = stx_nano_CoupleLift.fst(tp);
		var that = stx_nano_CoupleLift.snd(tp);
		switch(self._hx_index) {
		case 0:
			var _g = self.t;
			switch(that._hx_index) {
			case 0:
				var tt = that.t;
				var t = _g;
				return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
			case 1:
				var e = that.e;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		case 1:
			var _g = self.e;
			if(that._hx_index == 1) {
				var ee = that.e;
				var e = _g;
				return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
			} else {
				var e = _g;
				return stx_nano_UpshotSum.Reject(e);
			}
			break;
		}
	});
	return out;
};
stx_nano_PledgeLift.map = function(self,fn) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(x) {
		var tmp;
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn(t));
			break;
		case 1:
			var e = x.e;
			tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(e),{ fileName : "stx/nano/Pledge.hx", lineNumber : 209, className : "stx.nano.PledgeLift", methodName : "map"});
			break;
		}
		return tmp;
	}));
};
stx_nano_PledgeLift.flat_map = function(self,fn) {
	var ft = stx_nano_Pledge.prj(self);
	return tink_core_Future.flatMap(ft,function(x) {
		switch(x._hx_index) {
		case 0:
			var t = x.t;
			return stx_nano_Pledge.prj(fn(t));
		case 1:
			var e = x.e;
			return stx_nano_Pledge.prj(stx_nano_Pledge.fromUpshot(stx_nano_UpshotSum.Reject(e)));
		}
	});
};
stx_nano_PledgeLift.flat_fold = function(self,val,ers) {
	return tink_core_Future.flatMap(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return val(t);
		case 1:
			var e = res.e;
			return ers(e);
		}
	});
};
stx_nano_PledgeLift.fold = function(self,val,ers) {
	var fn = val;
	var er = ers;
	var tmp = function(self) {
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return fn(t);
		case 1:
			var e = self.e;
			return er(e);
		}
	};
	return tink_core_Future.map(stx_nano_Pledge.prj(self),tmp);
};
stx_nano_PledgeLift.recover = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,x);
	},function(e) {
		return fn(e);
	}));
};
stx_nano_PledgeLift.adjust = function(self,fn) {
	return stx_nano_PledgeLift.lift(stx_nano_PledgeLift.fold(self,function(x) {
		return fn(x);
	},function(v) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "stx/nano/Pledge.hx", lineNumber : 244, className : "stx.nano.PledgeLift", methodName : "adjust"});
	}));
};
stx_nano_PledgeLift.rectify = function(self,fn) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(res) {
		var fn1 = fn;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return stx_nano_Upshot.accept(t);
		case 1:
			var e = res.e;
			return fn1(e);
		}
	}));
};
stx_nano_PledgeLift.receive = function(self,fn) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			tmp = haxe_ds_Option.None;
			break;
		case 1:
			var e = res.e;
			tmp = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e);
			break;
		}
		return tmp;
	});
};
stx_nano_PledgeLift.fudge = function(self) {
	var out = null;
	stx_nano_Pledge.prj(self).handle(function(v) {
		out = v;
	});
	if(out == null) {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 271, className : "stx.nano.PledgeLift", methodName : "fudge"});
		throw haxe_Exception.thrown(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_nano_Digests.e_undefined(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
	}
	return out;
};
stx_nano_PledgeLift.point = function(self,fn) {
	return stx_nano_Alert.lift(tink_core_Future.map(self,function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			return fn(t);
		case 1:
			var e = res.e;
			return stx_fail_RefuseLift.report(e);
		}
	}));
};
stx_nano_PledgeLift.errata = function(self,fn) {
	return tink_core_Future.map(stx_nano_Pledge.prj(self),function(chk) {
		var self;
		switch(chk._hx_index) {
		case 0:
			var t = chk.t;
			self = stx_nano_Upshot.accept(t);
			break;
		case 1:
			var e = chk.e;
			self = stx_nano_Upshot.reject(fn(e));
			break;
		}
		return self;
	});
};
stx_nano_PledgeLift.errate = function(self,fn) {
	return stx_nano_PledgeLift.errata(self,function(x) {
		return stx_fail_Refuse.errate(x,fn);
	});
};
stx_nano_PledgeLift.each = function(self,fn,err) {
	stx_nano_Pledge.prj(self).handle(function(res) {
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			fn(t);
			break;
		case 1:
			var e = res.e;
			var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,err);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				t(e);
				break;
			case 1:
				throw haxe_Exception.thrown(e);
			}
			break;
		}
	});
};
stx_nano_PledgeLift.tap = function(self,fn,pos) {
	return stx_nano_PledgeLift.lift(tink_core_Future.map(stx_nano_Pledge.prj(self),function(x) {
		fn(x,pos);
		return x;
	}));
};
stx_nano_PledgeLift.command = function(self,fn) {
	return stx_nano_Pledge.flat_map(self,function(t) {
		return stx_nano_AlertLift.resolve(fn(t),t);
	});
};
stx_nano_PledgeLift.execute = function(self,fn) {
	return stx_nano_Pledge.flat_map(self,function(t) {
		return stx_nano_AlertLift.resolve(fn(),t);
	});
};
stx_nano_PledgeLift.anyway = function(self,fn) {
	return tink_core_Future.flatMap(self,function(res) {
		var tmp;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			var ok = t;
			var f = null;
			tmp = stx_nano_AlertLift.flat_fold(fn(f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 326, className : "stx.nano.PledgeLift", methodName : "anyway"})))),function(err) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/nano/Pledge.hx", lineNumber : 327, className : "stx.nano.PledgeLift", methodName : "anyway"})));
			},function() {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ok)));
			});
			break;
		case 1:
			var e = res.e;
			var err = e;
			tmp = stx_nano_AlertLift.flat_fold(fn(stx_fail_RefuseLift.report(err)),function(err0) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.concat(err,err0)),{ fileName : "stx/nano/Pledge.hx", lineNumber : 331, className : "stx.nano.PledgeLift", methodName : "anyway"})));
			},function() {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(err),{ fileName : "stx/nano/Pledge.hx", lineNumber : 332, className : "stx.nano.PledgeLift", methodName : "anyway"})));
			});
			break;
		}
		return tmp;
	});
};
stx_nano_PledgeLift.toTinkPromise = function(self) {
	return stx_nano_PledgeLift.fold(self,function(ok) {
		return tink_core_Outcome.Success(ok);
	},function(no) {
		return tink_core_Outcome.Failure(stx_nano_lift_LiftError.toTinkError(no));
	});
};
var stx_nano_Pledge = {};
stx_nano_Pledge._new = function(self) {
	return self;
};
stx_nano_Pledge.lift = function(self) {
	return stx_nano_Pledge._new(self);
};
stx_nano_Pledge.make = function(ch) {
	return new tink_core__$Future_SuspendableFuture(function(f) {
		f(ch);
		return null;
	});
};
stx_nano_Pledge.pure = function(self) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self));
};
stx_nano_Pledge.accept = function(ch) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,ch));
};
stx_nano_Pledge.reject = function(e) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 23, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "reject"}));
};
stx_nano_Pledge.bind_fold = function(it,fm,start) {
	return stx_nano_Pledge._new(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().bind_fold(it,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return stx_nano_Pledge.prj(fm(next,t));
		case 1:
			var e = memo.e;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_nano_UpshotSum.Reject(e)));
		}
	},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,start)));
};
stx_nano_Pledge.seq = function(iter) {
	return stx_nano_Pledge.bind_fold(iter,function(next,memo) {
		return stx_nano_Pledge.map(next,function(a) {
			return stx_lift_ArrayLift.snoc(memo,a);
		});
	},[]);
};
stx_nano_Pledge.lazy = function(fn) {
	return stx_nano_Pledge.lift(tink_core_Future.irreversible(function(f) {
		f(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn()));
	}));
};
stx_nano_Pledge.fromLazyError = function(fn) {
	return stx_nano_Pledge.fromLazyUpshot(function() {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.lift(stx_fail_Error.errate(fn(),stx_fail_DeclineSum.EXTERNAL))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 55, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromLazyError"});
	});
};
stx_nano_Pledge.fromTinkPromise = function(promise) {
	return stx_nano_Pledge.lift(tink_core_Future.map(promise,function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var s = outcome.data;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,s);
		case 1:
			var f = outcome.failure;
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_Digests.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),f.message,f.code))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f.pos))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 64, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromTinkPromise"});
		}
	}));
};
stx_nano_Pledge.fromTinkFuture = function(future) {
	return stx_nano_Pledge.lift(tink_core_Future.map(future,function(t) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
	}));
};
stx_nano_Pledge.fromLazyUpshot = function(fn) {
	return tink_core_Future.irreversible(function(f) {
		f(fn());
	});
};
stx_nano_Pledge.err = function(e) {
	return stx_nano_Pledge.make(stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 80, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "err"}));
};
stx_nano_Pledge.fromUpshot = function(chk) {
	return tink_core_Future.irreversible(function(cb) {
		cb(chk);
	});
};
stx_nano_Pledge.fromOption = function(m) {
	var val;
	switch(m._hx_index) {
	case 0:
		var t = m.v;
		val = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Pledge.hx", lineNumber : 90, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromOption"});
		val = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_nano_Digests.e_undefined(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 90, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromOption"});
		break;
	}
	var val1 = val;
	return stx_nano_Pledge.fromUpshot(val1);
};
stx_nano_Pledge.prj = function(this1) {
	return this1;
};
stx_nano_Pledge.get_self = function(this1) {
	return stx_nano_Pledge.lift(this1);
};
stx_nano_Pledge.map = function(this1,fn) {
	return stx_nano_Pledge._.map(this1,fn);
};
stx_nano_Pledge.flat_map = function(this1,fn) {
	return stx_nano_Pledge._.flat_map(this1,fn);
};
stx_nano_Pledge.trigger = function() {
	return stx_nano_PledgeTrigger._new();
};
stx_nano_Pledge.fromJsPromise = function(self,pos) {
	return stx_nano_Pledge.lift(tink_core_Future.map(tink_core_Future.ofJsPromise(self),function(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var v = outcome.data;
			return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,v);
		case 1:
			var e = outcome.failure;
			var _g = Type.typeof(e.data);
			if(_g._hx_index == 6) {
				if(_g.c == Error) {
					var er = e.data;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_nano_Digests.e_js_error(_,er);
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 122, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromJsPromise"});
				} else {
					var x = _g;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_nano_Digests.e_js_error(_,new Error("" + (e.data == null ? "null" : Std.string(e.data))));
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 124, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromJsPromise"});
				}
			} else {
				var x = _g;
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
					return stx_nano_Digests.e_js_error(_,new Error("" + (e.data == null ? "null" : Std.string(e.data))));
				},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/nano/Pledge.hx", lineNumber : 124, className : "stx.nano._Pledge.Pledge_Impl_", methodName : "fromJsPromise"});
			}
			break;
		}
	}));
};
var stx_nano_PledgeTrigger = {};
stx_nano_PledgeTrigger._new = function() {
	return new tink_core_FutureTrigger();
};
stx_nano_PledgeTrigger.toPledge = function(this1) {
	return stx_nano_Pledge.lift(this1);
};
stx_nano_PledgeTrigger.prj = function(this1) {
	return this1;
};
var stx_nano_PositionLift = function() { };
$hxClasses["stx.nano.PositionLift"] = stx_nano_PositionLift;
stx_nano_PositionLift.__name__ = "stx.nano.PositionLift";
stx_nano_PositionLift.copy = function(p) {
	return stx_nano_Position.make(p.fileName,p.className,p.methodName,p.lineNumber,p.customParams);
};
stx_nano_PositionLift.withFragmentName = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	return "" + cls + "." + fn;
};
stx_nano_PositionLift.toStringClassMethodLine = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "(" + class_method + "@" + pos.lineNumber + ")";
};
stx_nano_PositionLift.to_vscode_clickable_link = function(pos) {
	var f = pos.fileName;
	var cls = pos.className;
	var fn = pos.methodName;
	var ln = pos.lineNumber;
	var class_method = stx_nano_PositionLift.withFragmentName(pos);
	return "" + f + ":" + ln;
};
stx_nano_PositionLift.toString_name_method_line = function(pos) {
	var name = stx_pico_Identifier.get_name(stx_nano_lift_LiftNano.toIdentifier(stx_nano_Position.fromPos(pos)));
	var method = pos.methodName;
	var line = pos.lineNumber;
	return "" + name + "." + method + "@" + line;
};
stx_nano_PositionLift.withCustomParams = function(p,v) {
	p = stx_nano_PositionLift.copy(p);
	if(p.customParams == null) {
		p.customParams = [];
	}
	p.customParams.push(v);
	return p;
};
stx_nano_PositionLift.identifier = function(self) {
	var valid = stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
	return stx_pico_Identifier._new(valid);
};
stx_nano_PositionLift.toIdentfier = function(self) {
	var valid = stx_nano_Position.get_fileName(stx_nano_lift_LiftNano.toPosition(self)).split(".")[0].split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__)).join(".");
	return stx_pico_Identifier._new(valid);
};
var stx_nano_Position = {};
stx_nano_Position._new = function(self) {
	return self;
};
stx_nano_Position.lift = function(pos) {
	return stx_nano_Position.fromPos(pos);
};
stx_nano_Position.make = function(fileName,className,methodName,lineNumber,customParams) {
	return { fileName : fileName, className : className, methodName : methodName, lineNumber : lineNumber, customParams : customParams};
};
stx_nano_Position.fromPos = function(pos) {
	return stx_nano_Position._new(pos);
};
stx_nano_Position.toString = function(this1) {
	return stx_nano_Position._.toStringClassMethodLine(this1);
};
stx_nano_Position.here = function(pos) {
	return pos;
};
stx_nano_Position.get_customParams = function(this1) {
	return this1.customParams;
};
stx_nano_Position.toIdent = function(this1) {
	return stx_nano_Ident.fromIdentifier(stx_nano_lift_LiftNano.toIdentifier(this1));
};
stx_nano_Position.get_className = function(this1) {
	return this1.className;
};
stx_nano_Position.get_fileName = function(this1) {
	return this1.fileName;
};
stx_nano_Position.get_lineNumber = function(this1) {
	return this1.lineNumber;
};
stx_nano_Position.get_methodName = function(this1) {
	return this1.methodName;
};
stx_nano_Position.toPos = function(this1) {
	return this1;
};
var stx_nano_PrimitiveDef = $hxEnums["stx.nano.PrimitiveDef"] = { __ename__:"stx.nano.PrimitiveDef",__constructs__:null
	,PNull: {_hx_name:"PNull",_hx_index:0,__enum__:"stx.nano.PrimitiveDef",toString:$estr}
	,PBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PBool",$_.__params__ = ["b"],$_)
	,PSprig: ($_=function(sprig) { return {_hx_index:2,sprig:sprig,__enum__:"stx.nano.PrimitiveDef",toString:$estr}; },$_._hx_name="PSprig",$_.__params__ = ["sprig"],$_)
};
stx_nano_PrimitiveDef.__constructs__ = [stx_nano_PrimitiveDef.PNull,stx_nano_PrimitiveDef.PBool,stx_nano_PrimitiveDef.PSprig];
var stx_nano_Primitive = {};
stx_nano_Primitive.fromInt = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(i)));
};
stx_nano_Primitive.fromFloat = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(i)));
};
stx_nano_Primitive.fromBool = function(i) {
	return stx_nano_PrimitiveDef.PBool(i);
};
stx_nano_Primitive.fromString = function(i) {
	return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Textal(i));
};
stx_nano_Primitive.toAny = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return null;
	case 1:
		var b = this1.b;
		return b;
	case 2:
		var _g = this1.sprig;
		switch(_g._hx_index) {
		case 0:
			var t = _g.str;
			return t;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				var n = _g1.int;
				return n;
			case 1:
				var n = _g1.int;
				return n;
			case 2:
				var n = _g1.f;
				return n;
			}
			break;
		}
		break;
	}
};
stx_nano_Primitive.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return "null";
	case 1:
		var b = this1.b;
		return "" + (b == null ? "null" : "" + b);
	case 2:
		var _g = this1.sprig;
		switch(_g._hx_index) {
		case 0:
			var t = _g.str;
			return t;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				var n = _g1.int;
				return "" + n;
			case 1:
				var n = _g1.int;
				return "" + (n == null ? "null" : haxe_Int64.toString(n));
			case 2:
				var n = _g1.f;
				return "" + n;
			}
			break;
		}
		break;
	}
};
stx_nano_Primitive.prj = function(this1) {
	return this1;
};
stx_nano_Primitive.lt = function(l,r) {
	switch(l._hx_index) {
	case 1:
		if(l.b == false) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
		} else if(r._hx_index == 1) {
			var _g = r.b;
			return false;
		} else {
			var x = l;
			var y = r;
			return x._hx_index < y._hx_index;
		}
		break;
	case 2:
		var _g = l.sprig;
		switch(_g._hx_index) {
		case 0:
			if(r._hx_index == 2) {
				var _g1 = r.sprig;
				if(_g1._hx_index == 0) {
					var str0 = _g1.str;
					var str = _g.str;
					return str < str0;
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
			} else {
				var x = l;
				var y = r;
				return x._hx_index < y._hx_index;
			}
			break;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 0) {
							var int0 = _g2.int;
							var int = _g1.int;
							return int < int0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			case 1:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 1) {
							var int0 = _g2.int;
							var int = _g1.int;
							var v = int.high - int0.high | 0;
							if(v == 0) {
								v = haxe_Int32.ucompare(int.low,int0.low);
							}
							return (int.high < 0 ? int0.high < 0 ? v : -1 : int0.high >= 0 ? v : 1) < 0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			case 2:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 2) {
							var fl0 = _g2.f;
							var fl = _g1.f;
							return fl < fl0;
						} else {
							var x = l;
							var y = r;
							return x._hx_index < y._hx_index;
						}
					} else {
						var x = l;
						var y = r;
						return x._hx_index < y._hx_index;
					}
				} else {
					var x = l;
					var y = r;
					return x._hx_index < y._hx_index;
				}
				break;
			}
			break;
		}
		break;
	default:
		var x = l;
		var y = r;
		return x._hx_index < y._hx_index;
	}
};
stx_nano_Primitive.eq = function(l,r) {
	switch(l._hx_index) {
	case 0:
		if(r._hx_index == 0) {
			return true;
		} else {
			return false;
		}
		break;
	case 1:
		if(l.b) {
			if(r._hx_index == 1) {
				if(r.b == true) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else if(r._hx_index == 1) {
			if(r.b == false) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
		break;
	case 2:
		var _g = l.sprig;
		switch(_g._hx_index) {
		case 0:
			if(r._hx_index == 2) {
				var _g1 = r.sprig;
				if(_g1._hx_index == 0) {
					var str0 = _g1.str;
					var str = _g.str;
					return str == str0;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 1:
			var _g1 = _g.byte;
			switch(_g1._hx_index) {
			case 0:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 0) {
							var int0 = _g2.int;
							var int = _g1.int;
							return int == int0;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 1:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 1) {
							var int0 = _g2.int;
							var int = _g1.int;
							if(int.high == int0.high) {
								return int.low == int0.low;
							} else {
								return false;
							}
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 2:
				if(r._hx_index == 2) {
					var _g = r.sprig;
					if(_g._hx_index == 1) {
						var _g2 = _g.byte;
						if(_g2._hx_index == 2) {
							var fl0 = _g2.f;
							var fl = _g1.f;
							return fl == fl0;
						} else {
							return false;
						}
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			}
			break;
		}
		break;
	}
};
var stx_nano_PrimitiveTypeCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.PrimitiveTypeCtr"] = stx_nano_PrimitiveTypeCtr;
stx_nano_PrimitiveTypeCtr.__name__ = "stx.nano.PrimitiveTypeCtr";
stx_nano_PrimitiveTypeCtr.__super__ = stx_pico_Clazz;
stx_nano_PrimitiveTypeCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	blob: function() {
		return stx_nano_PrimitiveTypeSum.PTBlob;
	}
	,bool: function() {
		return stx_nano_PrimitiveTypeSum.PTBool;
	}
	,int: function() {
		return stx_nano_PrimitiveTypeSum.PTInt;
	}
	,uint: function() {
		return stx_nano_PrimitiveTypeSum.PTUint;
	}
	,float: function() {
		return stx_nano_PrimitiveTypeSum.PTFloat;
	}
	,int64: function() {
		return stx_nano_PrimitiveTypeSum.PTInt64;
	}
	,text: function() {
		return stx_nano_PrimitiveTypeSum.PTText;
	}
	,__class__: stx_nano_PrimitiveTypeCtr
});
var stx_nano_PrimitiveTypeSum = $hxEnums["stx.nano.PrimitiveTypeSum"] = { __ename__:"stx.nano.PrimitiveTypeSum",__constructs__:null
	,PTBlob: {_hx_name:"PTBlob",_hx_index:0,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTBool: {_hx_name:"PTBool",_hx_index:1,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTInt: {_hx_name:"PTInt",_hx_index:2,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTUint: {_hx_name:"PTUint",_hx_index:3,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTFloat: {_hx_name:"PTFloat",_hx_index:4,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTInt64: {_hx_name:"PTInt64",_hx_index:5,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
	,PTText: {_hx_name:"PTText",_hx_index:6,__enum__:"stx.nano.PrimitiveTypeSum",toString:$estr}
};
stx_nano_PrimitiveTypeSum.__constructs__ = [stx_nano_PrimitiveTypeSum.PTBlob,stx_nano_PrimitiveTypeSum.PTBool,stx_nano_PrimitiveTypeSum.PTInt,stx_nano_PrimitiveTypeSum.PTUint,stx_nano_PrimitiveTypeSum.PTFloat,stx_nano_PrimitiveTypeSum.PTInt64,stx_nano_PrimitiveTypeSum.PTText];
var stx_nano_PrimitiveTypeLift = function() { };
$hxClasses["stx.nano.PrimitiveTypeLift"] = stx_nano_PrimitiveTypeLift;
stx_nano_PrimitiveTypeLift.__name__ = "stx.nano.PrimitiveTypeLift";
stx_nano_PrimitiveTypeLift.lift = function(self) {
	return self;
};
var stx_nano_PrimitiveType = {};
stx_nano_PrimitiveType._new = function(self) {
	return self;
};
stx_nano_PrimitiveType.lift = function(self) {
	return self;
};
stx_nano_PrimitiveType.prj = function(this1) {
	return this1;
};
stx_nano_PrimitiveType.get_self = function(this1) {
	return this1;
};
var stx_nano_ReceiptLift = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.nano.ReceiptLift"] = stx_nano_ReceiptLift;
stx_nano_ReceiptLift.__name__ = "stx.nano.ReceiptLift";
stx_nano_ReceiptLift.make = function() {
	return new stx_nano_ReceiptLift();
};
stx_nano_ReceiptLift.lift = function(self) {
	return stx_nano_Receipt.lift(self);
};
stx_nano_ReceiptLift.errate = function(self,fn) {
	return stx_nano_ReceiptLift.errata(self,function(x) {
		return stx_fail_Refuse.errate(x,fn);
	});
};
stx_nano_ReceiptLift.errata = function(self,fn) {
	return stx_nano_Receipt.make(self.value,stx_fail_Error.errata(self.get_error(),fn));
};
stx_nano_ReceiptLift.copy = function(self,value,error) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,value);
	var tmp;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp = v;
	} else {
		tmp = self.value;
	}
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = self.get_error();
	var tmp1;
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		tmp1 = v1;
	} else {
		tmp1 = v;
	}
	return stx_nano_Receipt.make(tmp,tmp1);
};
stx_nano_ReceiptLift.map = function(self,fn) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self.value);
	var tmp;
	switch(self1._hx_index) {
	case 0:
		var t = self1.v;
		tmp = fn(t);
		break;
	case 1:
		tmp = null;
		break;
	}
	return stx_nano_Receipt.make(tmp,self.get_error());
};
stx_nano_ReceiptLift.is_defined = function(self) {
	return self.value != null;
};
stx_nano_ReceiptLift.has_errors = function(self) {
	return self.get_error().is_defined();
};
stx_nano_ReceiptLift.has_error = function(self) {
	return self.get_error().is_defined();
};
stx_nano_ReceiptLift.has_value = function(self) {
	return self.value != null;
};
stx_nano_ReceiptLift.toUpshot = function(self) {
	if(stx_nano_ReceiptLift.has_errors(self)) {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(self.toDefect())),{ fileName : "stx/nano/Receipt.hx", lineNumber : 116, className : "stx.nano.ReceiptLift", methodName : "toUpshot"});
	} else {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self.value);
	}
};
stx_nano_ReceiptLift.__super__ = stx_pico_Clazz;
stx_nano_ReceiptLift.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_nano_ReceiptLift
});
var stx_nano_Receipt = {};
stx_nano_Receipt._new = function(self) {
	return self;
};
stx_nano_Receipt.lift = function(self) {
	return stx_nano_Receipt._new(self);
};
stx_nano_Receipt.unit = function() {
	return stx_nano_Receipt.make(null,stx_fail_Refuse.unit());
};
stx_nano_Receipt.make = function(value,error) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,error);
	var v = stx_fail_Refuse.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	return stx_nano_Receipt.lift(new stx_nano_ReceiptCls(tmp,value));
};
stx_nano_Receipt.prj = function(this1) {
	return this1;
};
stx_nano_Receipt.get_self = function(this1) {
	return stx_nano_Receipt.lift(this1);
};
stx_nano_Receipt.fromDefect = function(self) {
	return stx_nano_Receipt.make(null,self.get_error());
};
stx_nano_Receipt.pure = function(self) {
	return stx_nano_Receipt.make(self,stx_fail_Refuse.unit());
};
stx_nano_Receipt.toError = function(this1) {
	return this1.get_error().toError();
};
var stx_nano_RecordLift = function() { };
$hxClasses["stx.nano.RecordLift"] = stx_nano_RecordLift;
stx_nano_RecordLift.__name__ = "stx.nano.RecordLift";
stx_nano_RecordLift.ord = function(inner) {
	return new stx_assert_ord_term_Record(inner);
};
stx_nano_RecordLift.eq = function(inner) {
	return new stx_assert_eq_term_Record(inner);
};
var stx_nano_Record = {};
stx_nano_Record.unit = function() {
	return stx_nano_Record._new(stx_nano_Cluster.lift([]));
};
stx_nano_Record.lift = function(self) {
	return stx_nano_Record._new(self);
};
stx_nano_Record._new = function(self) {
	return self == null ? [] : self;
};
stx_nano_Record.size = function(this1) {
	return stx_nano_Cluster.get_length(this1);
};
stx_nano_Record.add = function(this1,that) {
	return stx_nano_Cluster.concat(this1,[that]);
};
stx_nano_Record.equals = function(this1,that,$with) {
	if(stx_nano_Cluster.get_length(this1) != stx_nano_Record.size(that)) {
		return false;
	} else {
		var ok = true;
		var _g_current = 0;
		var _g_array = this1;
		_hx_loop1: while(_g_current < _g_array.length) {
			var v = _g_array[_g_current++];
			var key = v.key;
			var other = stx_nano_Record.get(that,key);
			switch(other._hx_index) {
			case 0:
				var v0 = other.v;
				if(!stx_assert_EqualedSum.is_ok($with.comply(v.val(),v0()))) {
					ok = false;
					break _hx_loop1;
				}
				break;
			case 1:
				break;
			}
		}
		return ok;
	}
};
stx_nano_Record.get = function(this1,key) {
	var out = haxe_ds_Option.None;
	var _g_current = 0;
	var _g_array = this1;
	while(_g_current < _g_array.length) {
		var v = _g_array[_g_current++];
		if(v.key == key) {
			out = haxe_ds_Option.Some(v);
			break;
		}
	}
	if(out._hx_index == 0) {
		var v = out.v;
		return haxe_ds_Option.Some(v.val);
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_Record.has = function(this1,key) {
	var self = stx_pico_OptionLift.map(stx_nano_Record.get(this1,key),function(_) {
		return true;
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return false;
	}
};
stx_nano_Record.fold = function(this1,fn,i) {
	var current = i;
	var _g_current = 0;
	var _g_array = this1;
	while(_g_current < _g_array.length) {
		var v = _g_array[_g_current++];
		current = fn(v,current);
	}
	return current;
};
stx_nano_Record.reduct = function() {
	return function(next,memo) {
		return stx_nano_Record.add(memo,next);
	};
};
stx_nano_Record.map = function(this1,fn) {
	return stx_nano_ClusterLift.lfold(stx_nano_ClusterLift.map(this1,function(fld) {
		return stx_nano_Field.map(fld,function(thk) {
			return function() {
				return fn(thk());
			};
		});
	}),stx_nano_Record.reduct(),stx_nano_Record._new());
};
stx_nano_Record.concat = function(this1,that) {
	return stx_nano_Record.lift(stx_nano_Cluster.concat(this1,stx_nano_Record.prj(that)));
};
stx_nano_Record.imap = function(this1,fn) {
	return stx_nano_ClusterLift.lfold(stx_nano_ClusterLift.imap(this1,function(i,fld) {
		return stx_nano_Field.map(fld,function(thk) {
			return function() {
				return fn(i,thk());
			};
		});
	}),stx_nano_Record.reduct(),stx_nano_Record._new());
};
stx_nano_Record.fromUnderlying = function(arr) {
	return stx_nano_Record._new(arr);
};
stx_nano_Record.fromMap = function(self) {
	var arr = [];
	var h = self.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var key1 = _g_key;
		var val = [_g_value];
		arr.push(stx_nano_Field.make(key1,(function(val) {
			return function() {
				return val[0];
			};
		})(val)));
	}
	return stx_nano_Record._new(stx_nano_Cluster.lift(arr));
};
stx_nano_Record.prj = function(this1) {
	return this1;
};
stx_nano_Record.toCluster = function(this1) {
	return this1;
};
var stx_nano_RegisterCls = function(index,count) {
	this.index = index;
	this.count = count;
};
$hxClasses["stx.nano.RegisterCls"] = stx_nano_RegisterCls;
stx_nano_RegisterCls.__name__ = "stx.nano.RegisterCls";
stx_nano_RegisterCls.make = function(index,count) {
	return new stx_nano_RegisterCls(index,count);
};
stx_nano_RegisterCls.prototype = {
	index: null
	,count: null
	,equals: function(that) {
		if(this.index == that.index) {
			return this.count == that.count;
		} else {
			return false;
		}
	}
	,less_than: function(that) {
		if(UInt.gte(that.index,this.index)) {
			return UInt.gt(that.count,this.count);
		} else {
			return false;
		}
	}
	,__class__: stx_nano_RegisterCls
};
var stx_nano__$Register_RegisterLift = function() { };
$hxClasses["stx.nano._Register.RegisterLift"] = stx_nano__$Register_RegisterLift;
stx_nano__$Register_RegisterLift.__name__ = "stx.nano._Register.RegisterLift";
var stx_nano_Register = {};
stx_nano_Register._new = function() {
	return stx_nano__$Register_RegisterState.get_instance().next();
};
stx_nano_Register.less_than = function(this1,that) {
	return this1.less_than(that);
};
stx_nano_Register.equals = function(this1,that) {
	return this1.equals(that);
};
stx_nano_Register.unit = function() {
	return stx_nano_Register._new();
};
var stx_nano__$Register_RegisterState = function() {
	this.count = 0;
	this.index = 0;
};
$hxClasses["stx.nano._Register.RegisterState"] = stx_nano__$Register_RegisterState;
stx_nano__$Register_RegisterState.__name__ = "stx.nano._Register.RegisterState";
stx_nano__$Register_RegisterState.instance = null;
stx_nano__$Register_RegisterState.get_instance = function() {
	if(stx_nano__$Register_RegisterState.instance == null) {
		return stx_nano__$Register_RegisterState.instance = new stx_nano__$Register_RegisterState();
	} else {
		return stx_nano__$Register_RegisterState.instance;
	}
};
stx_nano__$Register_RegisterState.prototype = {
	next: function() {
		var next_index = this.index;
		var next_count = this.count;
		if(this.count == stx_nano__$Register_RegisterState.max) {
			this.index = this.index + 1;
			this.count = 0;
		} else {
			this.count = this.count + 1;
		}
		return new stx_nano_RegisterCls(next_index,next_count);
	}
	,index: null
	,count: null
	,__class__: stx_nano__$Register_RegisterState
};
var stx_nano_ReportLift = function() { };
$hxClasses["stx.nano.ReportLift"] = stx_nano_ReportLift;
stx_nano_ReportLift.__name__ = "stx.nano.ReportLift";
stx_nano_ReportLift.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_ReportLift.resolve = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(v),{ fileName : "stx/nano/Report.hx", lineNumber : 104, className : "stx.nano.ReportLift", methodName : "resolve"});
			break;
		case 1:
			tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.concat = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.v;
		switch(that._hx_index) {
		case 0:
			var r = that.v;
			var l = _g;
			return stx_nano_ReportSum.Reported(stx_fail_Refuse.concat(l,r));
		case 1:
			var l = _g;
			return stx_nano_ReportSum.Reported(l);
		}
		break;
	case 1:
		if(that._hx_index == 0) {
			var r = that.v;
			return stx_nano_ReportSum.Reported(r);
		} else {
			return stx_nano_ReportSum.Happened;
		}
		break;
	}
};
stx_nano_ReportLift.fold = function(self,val,nil) {
	if(self == null) {
		return nil();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return val(v);
		case 1:
			return nil();
		}
	}
};
stx_nano_ReportLift.def = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = v;
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.defv = function(self,v) {
	return stx_nano_ReportLift.def(self,function() {
		return v;
	});
};
stx_nano_ReportLift.is_defined = function(self) {
	if(self == null) {
		return false;
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return true;
		case 1:
			return false;
		}
	}
};
stx_nano_ReportLift.ignore = function(self,fn) {
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn);
	if(self1._hx_index == 0) {
		var v = self1.v;
	} else {
		fn = function(x) {
			return true;
		};
	}
	if(self == null) {
		var f = null;
		if(f == null) {
			return stx_nano_Report.unit();
		} else {
			return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 154, className : "stx.nano.ReportLift", methodName : "ignore"})));
		}
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			var err = v;
			var self = err.get_data();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_nano_lift_LiftNano.if_else(fn(t),function() {
					var f = null;
					if(f == null) {
						return stx_nano_Report.unit();
					} else {
						return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 149, className : "stx.nano.ReportLift", methodName : "ignore"})));
					}
				},function() {
					return stx_fail_RefuseLift.report(err);
				});
			case 1:
				var f = null;
				if(f == null) {
					return stx_nano_Report.unit();
				} else {
					return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 152, className : "stx.nano.ReportLift", methodName : "ignore"})));
				}
				break;
			}
			break;
		case 1:
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/Report.hx", lineNumber : 154, className : "stx.nano.ReportLift", methodName : "ignore"})));
			}
			break;
		}
	}
};
stx_nano_ReportLift.so = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_fail_RefuseLift.report(v);
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.and = function(self,fn) {
	var tmp;
	if(self == null) {
		tmp = fn();
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			tmp = stx_fail_RefuseLift.report(v);
			break;
		case 1:
			tmp = fn();
			break;
		}
	}
	return tmp;
};
stx_nano_ReportLift.usher = function(self,fn) {
	if(self._hx_index == 0) {
		var refuse = self.v;
		return stx_fail_RefuseLift.usher(refuse,fn);
	} else {
		return fn(haxe_ds_Option.None);
	}
};
stx_nano_ReportLift.crack = function(self) {
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			v.crack();
			break;
		case 1:
			break;
		}
	}
};
var stx_nano_Report = {};
stx_nano_Report._new = function(self) {
	return self;
};
stx_nano_Report.lift = function(self) {
	return stx_nano_Report._new(self);
};
stx_nano_Report.make = function(data,pos) {
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
	return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(data)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
};
stx_nano_Report.make0 = function(data,pos) {
	return stx_nano_Report.pure(stx_fail_Refuse.make(haxe_ds_Option.Some(data),haxe_ds_Option.None,stx_pico_Option.fromNullT(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos))));
};
stx_nano_Report.unit = function() {
	return stx_nano_Report._new(stx_nano_ReportSum.Happened);
};
stx_nano_Report.conf = function(e) {
	var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,e),stx_nano_ReportSum.Reported);
	var self1;
	if(self._hx_index == 0) {
		var v = self.v;
		self1 = v;
	} else {
		self1 = stx_nano_ReportSum.Happened;
	}
	return stx_nano_Report._new(self1);
};
stx_nano_Report.pure = function(e) {
	return stx_nano_Report._new(stx_nano_ReportSum.Reported(e));
};
stx_nano_Report.effects = function(this1,success,failure) {
	var tmp;
	if(this1 == null) {
		success();
		tmp = stx_nano_Report.unit();
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			failure();
			tmp = stx_nano_Report.pure(v);
			break;
		case 1:
			success();
			tmp = stx_nano_Report.unit();
			break;
		}
	}
	return tmp;
};
stx_nano_Report.crunch = function(this1) {
	if(this1._hx_index == 0) {
		var e = this1.v;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_Report.fromStdOption = function(opt) {
	var self;
	switch(opt._hx_index) {
	case 0:
		var t = opt.v;
		self = stx_nano_ReportSum.Reported(t);
		break;
	case 1:
		self = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(self);
};
stx_nano_Report.fromOption = function(opt) {
	var self;
	switch(opt._hx_index) {
	case 0:
		var t = opt.v;
		self = stx_nano_ReportSum.Reported(t);
		break;
	case 1:
		self = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(self);
};
stx_nano_Report.prj = function(this1) {
	return this1;
};
stx_nano_Report.option = function(this1) {
	var tmp;
	if(this1 == null) {
		tmp = haxe_ds_Option.None;
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			tmp = haxe_ds_Option.Some(v);
			break;
		case 1:
			tmp = haxe_ds_Option.None;
			break;
		}
	}
	return tmp;
};
stx_nano_Report.defv = function(this1,error) {
	var v = error;
	return stx_nano_ReportLift.def(this1,function() {
		return v;
	});
};
stx_nano_Report.or = function(this1,that) {
	var tmp;
	if(this1 == null) {
		tmp = that();
	} else {
		switch(this1._hx_index) {
		case 0:
			var v = this1.v;
			tmp = stx_nano_Report.pure(v);
			break;
		case 1:
			tmp = that();
			break;
		}
	}
	return tmp;
};
stx_nano_Report.errata = function(this1,fn) {
	var tmp;
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		tmp = stx_nano_ReportSum.Reported(fn(v));
		break;
	case 1:
		tmp = stx_nano_ReportSum.Happened;
		break;
	}
	return stx_nano_Report._new(tmp);
};
stx_nano_Report.is_ok = function(this1) {
	if(this1._hx_index == 1) {
		return true;
	} else {
		return false;
	}
};
stx_nano_Report.promote = function(this1) {
	return stx_nano_Report._.resolve(this1,function() {
		return 0;
	});
};
stx_nano_Report.alert = function(this1) {
	return stx_nano_Alert.make(this1);
};
var stx_nano_ReportSum = $hxEnums["stx.nano.ReportSum"] = { __ename__:"stx.nano.ReportSum",__constructs__:null
	,Reported: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"stx.nano.ReportSum",toString:$estr}; },$_._hx_name="Reported",$_.__params__ = ["v"],$_)
	,Happened: {_hx_name:"Happened",_hx_index:1,__enum__:"stx.nano.ReportSum",toString:$estr}
};
stx_nano_ReportSum.__constructs__ = [stx_nano_ReportSum.Reported,stx_nano_ReportSum.Happened];
var stx_nano_Resource = {};
stx_nano_Resource.exists = function(str) {
	return stx_lift_ArrayLift.any(haxe_Resource.listNames(),function(x) {
		return x == str;
	});
};
stx_nano_Resource._new = function(str,pos) {
	if(!stx_nano_Resource.exists(str)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var error = stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
				return stx_nano_Digests.e_resource_not_found(_,str);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
			throw haxe_Exception.thrown(error);
		}
	}
	return str;
};
stx_nano_Resource.string = function(this1) {
	return haxe_Resource.getString(this1);
};
stx_nano_Resource.bytes = function(this1) {
	return haxe_Resource.getBytes(this1);
};
stx_nano_Resource.json = function(this1) {
	try {
		return JSON.parse(stx_nano_Resource.string(this1));
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		throw haxe_Exception.thrown("ERROR parsing " + this1 + ": " + Std.string(e));
	}
};
var stx_nano_Retry = function(attempts,born) {
	this.attempts = attempts;
	this.born = born;
};
$hxClasses["stx.nano.Retry"] = stx_nano_Retry;
stx_nano_Retry.__name__ = "stx.nano.Retry";
stx_nano_Retry.make = function(attempts,born) {
	return new stx_nano_Retry(attempts,born);
};
stx_nano_Retry.unit = function() {
	return stx_nano_Retry.make(0,HxOverrides.now() / 1000);
};
stx_nano_Retry.prototype = {
	attempts: null
	,born: null
	,copy: function(attempts,born) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,attempts);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.attempts;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,born);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.born;
		}
		return new stx_nano_Retry(tmp,tmp1);
	}
	,get_duration: function() {
		return HxOverrides.now() / 1000 - this.born;
	}
	,next: function() {
		return this.copy(this.attempts + 1);
	}
	,__class__: stx_nano_Retry
};
var stx_nano_Roster = {};
stx_nano_Roster._new = function(self) {
	return self;
};
stx_nano_Roster.lift = function(self) {
	return stx_nano_Roster._new(self);
};
stx_nano_Roster.get = function(this1,key) {
	return this1[key];
};
stx_nano_Roster.prj = function(this1) {
	return this1;
};
stx_nano_Roster.get_self = function(this1) {
	return stx_nano_Roster.lift(this1);
};
var stx_nano_SignalLift = function() { };
$hxClasses["stx.nano.SignalLift"] = stx_nano_SignalLift;
stx_nano_SignalLift.__name__ = "stx.nano.SignalLift";
stx_nano_SignalLift.lift = function(self) {
	return stx_nano_Signal.lift(self);
};
stx_nano_SignalLift.flat_map = function(self,fn) {
	return stx_nano_SignalLift.lift(new tink_core__$Signal_Suspendable(function(cb) {
		var cancelled = false;
		var links = [];
		links.push(self.listen(function(t) {
			if(!cancelled) {
				var sI = fn(t);
				links.push(sI.listen(function(tI) {
					cb(tI);
				}));
			} else {
				throw haxe_Exception.thrown("stream already cancelled");
			}
		}));
		return new tink_core_SimpleLink(function() {
			cancelled = true;
			var _g = 0;
			while(_g < links.length) {
				var link = links[_g];
				++_g;
				var fn = $iterator(stx_pico_OptionLift)(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,link));
				while(fn.hasNext()) {
					var fn1 = fn.next();
					if(fn1 != null) {
						fn1.cancel();
					}
				}
			}
		});
	},null));
};
stx_nano_SignalLift.lscan = function(self,fn,unit) {
	return stx_nano_Signal.map(self,function(t) {
		unit = fn(t,unit);
		return unit;
	});
};
stx_nano_SignalLift.next = function(self) {
	return tink_core_Signal.nextTime(stx_nano_Signal.prj(self));
};
stx_nano_SignalLift.latest = function(self) {
	var first = new tink_core_FutureTrigger();
	var has_triggered = false;
	var val = null;
	var cell = stx_nano_Cell.make(function() {
		return val;
	});
	self.listen(function(x) {
		val = x;
		if(!has_triggered) {
			first.trigger(cell);
			has_triggered = true;
		}
	});
	return first;
};
var stx_nano_Signal = {};
stx_nano_Signal._new = function(self) {
	return self;
};
stx_nano_Signal.lift = function(self) {
	return stx_nano_Signal._new(self);
};
stx_nano_Signal.make = function(f,init) {
	return stx_nano_Signal.lift(new tink_core__$Signal_Suspendable(f,init));
};
stx_nano_Signal.bind_fold = function(self,fn,init) {
	return stx_nano_Signal.lift(new tink_core__$Signal_Suspendable(function(cb) {
		return stx_nano_Signal._.flat_map(stx_nano_Signal._.lscan(self,function(next,memo) {
			var _g = fn;
			var a1 = next;
			return stx_nano_Signal._.flat_map(memo,function(a2) {
				return _g(a1,a2);
			});
		},new tink_core__$Signal_Suspendable(function(cb) {
			cb(init);
			return new tink_core_SimpleLink(function() {
			});
		},null)),function(z) {
			return z;
		}).listen(cb);
	},null));
};
stx_nano_Signal.pure = function(v) {
	return stx_nano_Signal.lift(new tink_core__$Signal_Suspendable(function(cb) {
		cb(v);
		return new tink_core_SimpleLink(function() {
		});
	},null));
};
stx_nano_Signal.join = function(this1,that) {
	return tink_core_Signal.join(this1,that);
};
stx_nano_Signal.fromArray = function(arr) {
	return stx_nano_Signal.make(function(cb) {
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			cb(v);
		}
		return new tink_core_SimpleLink(function() {
		});
	});
};
stx_nano_Signal.fromFuture = function(ft) {
	return stx_nano_Signal.make(function(cb) {
		return ft.handle(function(x) {
			cb(x);
		});
	});
};
stx_nano_Signal.map_filter = function(this1,fn) {
	return stx_nano_Signal.map(stx_nano_Signal.filter(stx_nano_Signal.map(this1,fn),function(_) {
		return stx_pico_OptionLift.is_defined(_);
	}),function(_) {
		return stx_pico_OptionLift.fudge(_);
	});
};
stx_nano_Signal.filter = function(this1,fn) {
	return stx_nano_Signal.lift(tink_core_Signal.filter(this1,fn));
};
stx_nano_Signal.map = function(this1,fn) {
	return stx_nano_Signal.lift(tink_core_Signal.map(this1,fn));
};
stx_nano_Signal.tap = function(this1,fn) {
	return stx_nano_Signal.map(this1,function(x) {
		fn(x);
		return x;
	});
};
stx_nano_Signal.prj = function(this1) {
	return this1;
};
stx_nano_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
var stx_nano_SlotCls = function(data,guard,pos) {
	this.data = data;
	this.ready = true;
	this.pos = pos;
	if(guard != null) {
		this.ready = false;
		this.guard = guard;
		guard.handle($bind(this,this.handler));
	}
};
$hxClasses["stx.nano.SlotCls"] = stx_nano_SlotCls;
stx_nano_SlotCls.__name__ = "stx.nano.SlotCls";
stx_nano_SlotCls.prototype = {
	handler: function(data) {
		this.ready = true;
		this.data = data;
	}
	,data: null
	,guard: null
	,ready: null
	,pos: null
	,toString: function() {
		var p = stx_nano_PositionLift.to_vscode_clickable_link(stx_nano_Position.fromPos(this.pos));
		return "Slot(" + Std.string(this.ready) + " " + p + ")";
	}
	,step: function() {
		return -1;
	}
	,__class__: stx_nano_SlotCls
};
var stx_nano_SlotLift = function() { };
$hxClasses["stx.nano.SlotLift"] = stx_nano_SlotLift;
stx_nano_SlotLift.__name__ = "stx.nano.SlotLift";
stx_nano_SlotLift.map = function(self,fn) {
	if(self.ready) {
		return stx_nano_Slot.Ready(fn(self.data),self.pos);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
			return fn(t);
		}),self.pos);
	}
};
stx_nano_SlotLift.flat_map = function(self,fn) {
	if(self.ready) {
		return fn(self.data);
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.flatMap(self.guard,function(t) {
			var val = fn(t);
			if(val.ready) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
					return val.data;
				}));
			} else {
				return val.guard;
			}
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 87, className : "stx.nano.SlotLift", methodName : "flat_map"});
	}
};
stx_nano_SlotLift.option = function(self) {
	if(self.ready == true) {
		return haxe_ds_Option.Some(self.data);
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_SlotLift.handle = function(self,fn) {
	if(self.ready) {
		fn(self.data);
	} else {
		self.guard.handle(fn);
	}
};
stx_nano_SlotLift.toFuture = function(self) {
	if(self.ready) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return self.data;
		}));
	} else {
		return self.guard;
	}
};
stx_nano_SlotLift.zip = function(self,that) {
	var _g = that.ready;
	if(self.ready) {
		if(_g) {
			return stx_nano_Slot.Ready(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,that.data),{ fileName : "stx/nano/Slot.hx", lineNumber : 120, className : "stx.nano.SlotLift", methodName : "zip"});
		} else {
			var fn = function(rhs) {
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,self.data,rhs);
			};
			if(that.ready) {
				return stx_nano_Slot.Ready(fn(that.data),that.pos);
			} else {
				return stx_nano_Slot.Guard(tink_core_Future.map(that.guard,function(t) {
					return fn(t);
				}),that.pos);
			}
		}
	} else if(_g) {
		var fn1 = function(lhs) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,lhs,that.data);
		};
		if(self.ready) {
			return stx_nano_Slot.Ready(fn1(self.data),self.pos);
		} else {
			return stx_nano_Slot.Guard(tink_core_Future.map(self.guard,function(t) {
				return fn1(t);
			}),self.pos);
		}
	} else {
		return stx_nano_Slot.Guard(tink_core_Future.merge(self.guard,that.guard,function(tI,tII) {
			return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
		}),{ fileName : "stx/nano/Slot.hx", lineNumber : 123, className : "stx.nano.SlotLift", methodName : "zip"});
	}
};
var stx_nano_Slot = {};
stx_nano_Slot._new = function(self) {
	return self;
};
stx_nano_Slot.lift = function(self) {
	return stx_nano_Slot._new(self);
};
stx_nano_Slot.prj = function(this1) {
	return this1;
};
stx_nano_Slot.get_self = function(this1) {
	return stx_nano_Slot._new(this1);
};
stx_nano_Slot.Ready = function(v,pos) {
	return new stx_nano_SlotCls(v,null,pos);
};
stx_nano_Slot.Guard = function(v,pos) {
	return new stx_nano_SlotCls(null,v,pos);
};
stx_nano_Slot.toSlot = function(ft) {
	return new stx_nano_SlotCls(null,ft,{ fileName : "stx/nano/Slot.hx", lineNumber : 59, className : "stx.nano._Slot.Slot_Impl_", methodName : "toSlot"});
};
stx_nano_Slot.fromFunSinkVoid = function(fn) {
	var v = haxe_ds_Option.None;
	var handler = function(h) {
		v = haxe_ds_Option.Some(h);
	};
	fn(handler);
	switch(v._hx_index) {
	case 0:
		var v1 = v.v;
		return stx_nano_Slot.Ready(v1,{ fileName : "stx/nano/Slot.hx", lineNumber : 68, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	case 1:
		return stx_nano_Slot.Guard(tink_core_Future.irreversible(fn),{ fileName : "stx/nano/Slot.hx", lineNumber : 69, className : "stx.nano._Slot.Slot_Impl_", methodName : "fromFunSinkVoid"});
	}
};
var stx_nano_SprigSum = $hxEnums["stx.nano.SprigSum"] = { __ename__:"stx.nano.SprigSum",__constructs__:null
	,Textal: ($_=function(str) { return {_hx_index:0,str:str,__enum__:"stx.nano.SprigSum",toString:$estr}; },$_._hx_name="Textal",$_.__params__ = ["str"],$_)
	,Byteal: ($_=function(byte) { return {_hx_index:1,byte:byte,__enum__:"stx.nano.SprigSum",toString:$estr}; },$_._hx_name="Byteal",$_.__params__ = ["byte"],$_)
};
stx_nano_SprigSum.__constructs__ = [stx_nano_SprigSum.Textal,stx_nano_SprigSum.Byteal];
var stx_nano_Sprig = {};
stx_nano_Sprig._new = function(self) {
	return self;
};
stx_nano_Sprig.lift = function(self) {
	return stx_nano_Sprig._new(self);
};
stx_nano_Sprig.toPrimitive = function(this1) {
	return stx_nano_PrimitiveDef.PSprig(this1);
};
stx_nano_Sprig.prj = function(this1) {
	return this1;
};
stx_nano_Sprig.get_self = function(this1) {
	return stx_nano_Sprig.lift(this1);
};
stx_nano_Sprig.toString = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var str = this1.str;
		return str;
	case 1:
		var b = this1.byte;
		return stx_nano_Numeric.toString(b);
	}
};
stx_nano_Sprig.fold = function(this1,textal,byteal) {
	switch(this1._hx_index) {
	case 0:
		var txt = this1.str;
		return textal(txt);
	case 1:
		var num = this1.byte;
		return byteal(num);
	}
};
var stx_nano_Stringable = {};
stx_nano_Stringable.lift = function(self) {
	return stx_nano_Stringable._new(self);
};
stx_nano_Stringable._new = function(self) {
	return self;
};
var stx_nano_TimeStamp = {};
stx_nano_TimeStamp._new = function(self) {
	return self;
};
stx_nano_TimeStamp.pure = function(v) {
	return stx_nano_TimeStamp._new(v);
};
stx_nano_TimeStamp.compare_to = function(this1,that) {
	if(this1.realm > that.realm) {
		return 1;
	} else if(this1.realm == that.realm) {
		if(this1.exact > that.exact) {
			return 1;
		} else {
			return -1;
		}
	} else {
		return -1;
	}
};
var stx_nano_Timer = {};
stx_nano_Timer._new = function(self) {
	var this1;
	if(self == null) {
		this1 = stx_nano_Timer.unit();
	} else {
		this1 = self;
	}
	return this1;
};
stx_nano_Timer.pure = function(v) {
	return { created : v};
};
stx_nano_Timer.unit = function() {
	return stx_nano_Timer.pure(stx_nano_Timer.mark());
};
stx_nano_Timer.mark = function() {
	return HxOverrides.now() / 1000;
};
stx_nano_Timer.copy = function(this1,created) {
	return stx_nano_Timer.pure(created == null ? this1.created : created);
};
stx_nano_Timer.start = function(this1) {
	return stx_nano_Timer.copy(this1,stx_nano_Timer.mark());
};
stx_nano_Timer.since = function(this1) {
	return stx_nano_Timer.mark() - this1.created;
};
stx_nano_Timer.prj = function(this1) {
	return this1;
};
var stx_nano_TripleLift = function() { };
$hxClasses["stx.nano.TripleLift"] = stx_nano_TripleLift;
stx_nano_TripleLift.__name__ = "stx.nano.TripleLift";
stx_nano_TripleLift.map = function(self,fn) {
	return function(tp) {
		self(function(tI,tII,tIII) {
			tp(tI,tII,fn(tIII));
		});
	};
};
stx_nano_TripleLift.fst = function(self) {
	return stx_nano_TripleLift.detriple(self,function(tI,_,_1) {
		return tI;
	});
};
stx_nano_TripleLift.snd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,tII,_1) {
		return tII;
	});
};
stx_nano_TripleLift.thd = function(self) {
	return stx_nano_TripleLift.detriple(self,function(_,_1,tIII) {
		return tIII;
	});
};
stx_nano_TripleLift.equals = function(lhs,rhs) {
	return stx_nano_TripleLift.detriple(lhs,function(t0I,t0II,t0III) {
		return stx_nano_TripleLift.detriple(rhs,function(t1I,t1II,t1III) {
			if(t0I == t1I && t0II == t1II) {
				return t0III == t1III;
			} else {
				return false;
			}
		});
	});
};
stx_nano_TripleLift.reduce = function(self,f_a,f_b,f_c,plus) {
	return stx_nano_TripleLift.detriple(self,function(tI,tII,tIII) {
		return plus(plus(f_a(tI),f_b(tII)),f_c(tIII));
	});
};
stx_nano_TripleLift.detriple = function(self,fn) {
	var out = null;
	self(function(tI,tII,tIII) {
		out = fn(tI,tII,tIII);
	});
	return out;
};
stx_nano_TripleLift.tup = function(self) {
	return stx_nano_TripleLift.detriple(self,stx_Tup3.tuple3);
};
stx_nano_TripleLift.toString = function(self) {
	return stx_nano_TripleLift.detriple(self,function(a,b,c) {
		return "(" + Std.string(a) + " " + Std.string(b) + " " + Std.string(c) + ")";
	});
};
var stx_nano_Triple = {};
stx_nano_Triple.toString = function(this1) {
	return stx_nano_TripleLift.toString(this1);
};
stx_nano_Triple.get__0 = function(this1) {
	return stx_nano_Triple._.fst(this1);
};
stx_nano_Triple.get__1 = function(this1) {
	return stx_nano_Triple._.snd(this1);
};
stx_nano_Triple.get__2 = function(this1) {
	return stx_nano_Triple._.thd(this1);
};
var stx_nano_TrivalentSum = $hxEnums["stx.nano.TrivalentSum"] = { __ename__:"stx.nano.TrivalentSum",__constructs__:null
	,Nay: {_hx_name:"Nay",_hx_index:0,__enum__:"stx.nano.TrivalentSum",toString:$estr}
	,Maybe: {_hx_name:"Maybe",_hx_index:1,__enum__:"stx.nano.TrivalentSum",toString:$estr}
	,Yay: {_hx_name:"Yay",_hx_index:2,__enum__:"stx.nano.TrivalentSum",toString:$estr}
};
stx_nano_TrivalentSum.__constructs__ = [stx_nano_TrivalentSum.Nay,stx_nano_TrivalentSum.Maybe,stx_nano_TrivalentSum.Yay];
var stx_nano_Trivalent = {};
stx_nano_Trivalent._new = function(self) {
	return self;
};
stx_nano_Trivalent.lift = function(self) {
	return stx_nano_Trivalent._new(self);
};
stx_nano_Trivalent.prj = function(this1) {
	return this1;
};
stx_nano_Trivalent.get_self = function(this1) {
	return stx_nano_Trivalent.lift(this1);
};
stx_nano_Trivalent.fromBool = function(b) {
	if(b) {
		return stx_nano_TrivalentSum.Yay;
	} else {
		return stx_nano_TrivalentSum.Nay;
	}
};
stx_nano_Trivalent.and = function(this1,that) {
	switch(this1._hx_index) {
	case 0:
		var tmp = that._hx_index == 0;
		break;
	case 1:
		var tmp = that._hx_index == 1;
		break;
	case 2:
		var tmp = that._hx_index == 2;
		break;
	}
};
stx_nano_Trivalent.or = function(this1,that) {
	switch(this1._hx_index) {
	case 0:
		var tmp = that._hx_index;
		break;
	case 1:
		var tmp = that._hx_index;
		break;
	case 2:
		var tmp = that._hx_index;
		break;
	}
};
var stx_nano_Unfold = {};
stx_nano_Unfold.fromFunction = function(fn) {
	var unfolder = fn;
	return function(initial) {
		var initial1 = initial;
		var unfolder1 = unfolder;
		return { iterator : function() {
			var _next = haxe_ds_Option.None;
			var _progress = initial1;
			var precomputeNext = function() {
				var _g = unfolder1(_progress);
				switch(_g._hx_index) {
				case 0:
					var tup = _g.v;
					_progress = stx_nano_CoupleLift.fst(tup);
					_next = haxe_ds_Option.Some(stx_nano_CoupleLift.snd(tup));
					break;
				case 1:
					_progress = null;
					_next = haxe_ds_Option.None;
					break;
				}
			};
			precomputeNext();
			return { hasNext : function() {
				if(_next._hx_index == 0) {
					var _g = _next.v;
					return true;
				} else {
					return false;
				}
			}, next : function() {
				var n;
				if(_next._hx_index == 0) {
					var v = _next.v;
					n = v;
				} else {
					n = null;
				}
				precomputeNext();
				return n;
			}};
		}};
	};
};
stx_nano_Unfold._new = function(v) {
	return v;
};
stx_nano_Unfold.unfold = function(initial,unfolder) {
	return { iterator : function() {
		var _next = haxe_ds_Option.None;
		var _progress = initial;
		var precomputeNext = function() {
			var _g = unfolder(_progress);
			switch(_g._hx_index) {
			case 0:
				var tup = _g.v;
				_progress = stx_nano_CoupleLift.fst(tup);
				_next = haxe_ds_Option.Some(stx_nano_CoupleLift.snd(tup));
				break;
			case 1:
				_progress = null;
				_next = haxe_ds_Option.None;
				break;
			}
		};
		precomputeNext();
		return { hasNext : function() {
			if(_next._hx_index == 0) {
				var _g = _next.v;
				return true;
			} else {
				return false;
			}
		}, next : function() {
			var n;
			if(_next._hx_index == 0) {
				var v = _next.v;
				n = v;
			} else {
				n = null;
			}
			precomputeNext();
			return n;
		}};
	}};
};
var stx_nano_Unique = {};
stx_nano_Unique._new = function(self) {
	return self;
};
stx_nano_Unique.lift = function(self) {
	return stx_nano_Unique._new(self);
};
stx_nano_Unique.pure = function(data) {
	return stx_nano_Unique.make(data,function() {
	});
};
stx_nano_Unique.make = function(data,rtid) {
	return stx_nano_Unique._new({ data : data, rtid : rtid});
};
stx_nano_Unique.prj = function(this1) {
	return this1;
};
stx_nano_Unique.get_self = function(this1) {
	return stx_nano_Unique._new(this1);
};
stx_nano_Unique.equals = function(this1,that) {
	return this1.rtid == that.rtid;
};
stx_nano_Unique.toT = function(this1) {
	return this1.data;
};
var stx_nano_UpshotSum = $hxEnums["stx.nano.UpshotSum"] = { __ename__:"stx.nano.UpshotSum",__constructs__:null
	,Accept: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.nano.UpshotSum",toString:$estr}; },$_._hx_name="Accept",$_.__params__ = ["t"],$_)
	,Reject: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.nano.UpshotSum",toString:$estr}; },$_._hx_name="Reject",$_.__params__ = ["e"],$_)
};
stx_nano_UpshotSum.__constructs__ = [stx_nano_UpshotSum.Accept,stx_nano_UpshotSum.Reject];
var stx_nano_UpshotSumLift = function() { };
$hxClasses["stx.nano.UpshotSumLift"] = stx_nano_UpshotSumLift;
stx_nano_UpshotSumLift.__name__ = "stx.nano.UpshotSumLift";
stx_nano_UpshotSumLift.toString = function(self) {
	return stx_nano_UpshotLift.toString(self);
};
var stx_nano_UpshotLift = function() { };
$hxClasses["stx.nano.UpshotLift"] = stx_nano_UpshotLift;
stx_nano_UpshotLift.__name__ = "stx.nano.UpshotLift";
stx_nano_UpshotLift.toString = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return "Accept(" + Std.string(t) + ")";
	case 1:
		var e = self.e;
		return "Reject(" + e.toString() + ")";
	}
};
stx_nano_UpshotLift.errata = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_Upshot.accept(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_Upshot.reject(fn(e));
		break;
	}
	return self1;
};
stx_nano_UpshotLift.errate = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_Upshot.accept(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_Upshot.reject(stx_fail_Refuse.errate(e,fn));
		break;
	}
	return self1;
};
stx_nano_UpshotLift.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var tt = that.t;
			var t = _g;
			return stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
		case 1:
			var e = that.e;
			return stx_nano_UpshotSum.Reject(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var ee = that.e;
			var e = _g;
			return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
		} else {
			var e = _g;
			return stx_nano_UpshotSum.Reject(e);
		}
		break;
	}
};
stx_nano_UpshotLift.zip_with = function(self,that,$with) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var tt = that.t;
			var t = _g;
			return stx_nano_UpshotSum.Accept($with(t,tt));
		case 1:
			var e = that.e;
			return stx_nano_UpshotSum.Reject(e);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var ee = that.e;
			var e = _g;
			return stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
		} else {
			var e = _g;
			return stx_nano_UpshotSum.Reject(e);
		}
		break;
	}
};
stx_nano_UpshotLift.map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = stx_nano_UpshotSum.Accept(fn(t));
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_UpshotSum.Reject(e);
		break;
	}
	return self1;
};
stx_nano_UpshotLift.flat_map = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = fn(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_UpshotSum.Reject(e);
		break;
	}
	return self1;
};
stx_nano_UpshotLift.adjust = function(self,fn) {
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = fn(t);
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_UpshotSum.Reject(e);
		break;
	}
	return self1;
};
stx_nano_UpshotLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_nano_UpshotLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_nano_UpshotLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_UpshotSum.Reject(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_UpshotSum.Accept(e);
		break;
	}
	return tmp;
};
stx_nano_UpshotLift.option = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = haxe_ds_Option.Some(t);
		break;
	case 1:
		var e = self.e;
		tmp = haxe_ds_Option.None;
		break;
	}
	return tmp;
};
stx_nano_UpshotLift.report = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Report.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_Report.pure(e);
		break;
	}
	return tmp;
};
stx_nano_UpshotLift.usher = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Report.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_Report.pure(e);
		break;
	}
	return stx_nano_ReportLift.usher(tmp,fn);
};
stx_nano_UpshotLift.rectify = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_Upshot.accept(t);
		break;
	case 1:
		var e = self.e;
		tmp = fn(e);
		break;
	}
	return tmp;
};
stx_nano_UpshotLift.recover = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		return fn(e);
	}
};
stx_nano_UpshotLift.effects = function(self,success,failure) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		success(t);
		tmp = stx_nano_Upshot.accept(t);
		break;
	case 1:
		var e = self.e;
		failure(e);
		tmp = stx_nano_Upshot.reject(e);
		break;
	}
	return tmp;
};
stx_nano_UpshotLift.is_ok = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return true;
	case 1:
		var e = self.e;
		return false;
	}
};
stx_nano_UpshotLift.toPledge = function(self) {
	return stx_nano_Pledge.fromUpshot(self);
};
stx_nano_UpshotLift.pledge = function(self) {
	return stx_nano_Pledge.fromUpshot(self);
};
stx_nano_UpshotLift.point = function(self,fn) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return stx_fail_RefuseLift.report(e);
	}
};
stx_nano_UpshotLift.toChunk = function(self) {
	if(self == null) {
		return stx_nano_ChunkSum.Tap;
	} else {
		switch(self._hx_index) {
		case 0:
			var _g = self.t;
			if(_g == null) {
				return stx_nano_ChunkSum.Tap;
			} else {
				var v = _g;
				return stx_nano_ChunkSum.Val(v);
			}
			break;
		case 1:
			var e = self.e;
			return stx_nano_ChunkSum.End(e);
		}
	}
};
var stx_nano_Upshot = {};
stx_nano_Upshot._new = function(self) {
	return self;
};
stx_nano_Upshot.get_self = function(this1) {
	return this1;
};
stx_nano_Upshot.lift = function(self) {
	return self;
};
stx_nano_Upshot.accept = function(t) {
	return stx_nano_UpshotSum.Accept(t);
};
stx_nano_Upshot.reject = function(e) {
	return stx_nano_UpshotSum.Reject(e);
};
stx_nano_Upshot.fromReport = function(self) {
	var self1;
	if(self == null) {
		self1 = stx_nano_Upshot.accept(0);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			self1 = stx_nano_Upshot.reject(v);
			break;
		case 1:
			self1 = stx_nano_Upshot.accept(0);
			break;
		}
	}
	return self1;
};
stx_nano_Upshot.prj = function(this1) {
	return this1;
};
stx_nano_Upshot.fromOutcome = function(self) {
	var ocd;
	switch(self._hx_index) {
	case 0:
		var ok = self.t;
		ocd = stx_nano_UpshotSum.Accept(ok);
		break;
	case 1:
		var no = self.e;
		ocd = stx_nano_UpshotSum.Reject(no);
		break;
	}
	return ocd;
};
stx_nano_Upshot.toOutcome = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var ok = this1.t;
		return stx_pico_OutcomeSum.Success(ok);
	case 1:
		var no = this1.e;
		return stx_pico_OutcomeSum.Failure(no);
	}
};
stx_nano_Upshot.bind_fold = function(arr,fn,init) {
	return stx_nano_IterLift.lfold(arr,function(next,memo) {
		switch(memo._hx_index) {
		case 0:
			var t = memo.t;
			return fn(next,t);
		case 1:
			var e = memo.e;
			return stx_nano_Upshot.reject(e);
		}
	},stx_nano_Upshot.accept(init));
};
stx_nano_Upshot.toStringable = function(this1) {
	var self = this1;
	return { toString : function() {
		return stx_nano_Upshot._.toString(self);
	}};
};
stx_nano_Upshot.toIterable = function(this1) {
	var _e = this1;
	return { iterator : function() {
		return $iterator(stx_nano_Upshot)(_e);
	}};
};
stx_nano_Upshot.iterator = function(this1) {
	var done = false;
	return { hasNext : function() {
		switch(this1._hx_index) {
		case 0:
			var t = this1.t;
			return !done;
		case 1:
			var e = this1.e;
			throw haxe_Exception.thrown(e);
		}
	}, next : function() {
		done = true;
		switch(this1._hx_index) {
		case 0:
			var t = this1.t;
			return t;
		case 1:
			var e = this1.e;
			throw haxe_Exception.thrown(e);
		}
	}};
};
var stx_nano_VBlock = {};
stx_nano_VBlock.unit = function() {
	return function() {
	};
};
stx_nano_VBlock._new = function(self) {
	return self;
};
var stx_nano_Way = {};
stx_nano_Way._new = function(self) {
	return self;
};
stx_nano_Way.lift = function(self) {
	return stx_nano_Way._new(self);
};
stx_nano_Way.make = function(self) {
	return stx_nano_Way._new(self);
};
stx_nano_Way.unit = function() {
	return stx_nano_Way.lift(stx_nano_Cluster.unit());
};
stx_nano_Way.fromArray = function(self) {
	return stx_nano_Way.lift(stx_nano_Cluster.lift(self));
};
stx_nano_Way.fromPath = function(path) {
	var dir = haxe_io_Path.directory(path.toString());
	var ext = path.ext;
	var file = path.file;
	var name = ext == null ? file : "" + file + "." + ext;
	var sep = path.backslash ? "\\" : "/";
	var data = dir.split(sep);
	data.push(name);
	return stx_nano_Way.lift(stx_nano_Cluster.lift(data));
};
stx_nano_Way.fromStringDotted = function(self) {
	return stx_nano_Way.lift(self.split("."));
};
stx_nano_Way.prj = function(this1) {
	return this1;
};
stx_nano_Way.get_self = function(this1) {
	return stx_nano_Way.lift(this1);
};
stx_nano_Way.snoc = function(this1,that) {
	return stx_nano_Way.lift(stx_nano_ClusterLift.snoc(this1,that));
};
stx_nano_Way.concat = function(this1,that) {
	return stx_nano_Way.lift(stx_nano_Cluster.concat(this1,that));
};
stx_nano_Way.toOsString = function(this1) {
	var value = stx_nano_Cluster.toIterable(this1);
	return (((value) instanceof Array) ? value : null).join(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
};
stx_nano_Way.into = function(this1,name) {
	return stx_nano_Ident.make(name,this1);
};
stx_nano_Way.get = function(this1,i) {
	return this1[i];
};
stx_nano_Way.toArray = function(this1) {
	var value = stx_nano_Cluster.toIterable(this1);
	if(((value) instanceof Array)) {
		return value;
	} else {
		return null;
	}
};
stx_nano_Way.up = function(this1) {
	return stx_nano_Way.lift(stx_nano_ClusterLift.rdropn(this1,1));
};
var stx_nano_digest_term_EDigestUUIDReserved = function(uuid) {
	stx_fail_Digest.call(this,"01FRQ557XM5KFRCSZ2Q0FFY069","Uuid \"" + uuid + "\" already registered.");
};
$hxClasses["stx.nano.digest.term.EDigestUUIDReserved"] = stx_nano_digest_term_EDigestUUIDReserved;
stx_nano_digest_term_EDigestUUIDReserved.__name__ = "stx.nano.digest.term.EDigestUUIDReserved";
stx_nano_digest_term_EDigestUUIDReserved.__super__ = stx_fail_Digest;
stx_nano_digest_term_EDigestUUIDReserved.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_EDigestUUIDReserved
});
var stx_nano_digest_term_EJsError = function(error) {
	stx_fail_Digest.call(this,error.name,error.message);
};
$hxClasses["stx.nano.digest.term.EJsError"] = stx_nano_digest_term_EJsError;
stx_nano_digest_term_EJsError.__name__ = "stx.nano.digest.term.EJsError";
stx_nano_digest_term_EJsError.__super__ = stx_fail_Digest;
stx_nano_digest_term_EJsError.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_EJsError
});
var stx_nano_digest_term_ENoField = function(field_name) {
	stx_fail_Digest.call(this,"01FRQ55MMVX2D7JEHJ6CE4X1NY","No field \"" + field_name + "\".");
};
$hxClasses["stx.nano.digest.term.ENoField"] = stx_nano_digest_term_ENoField;
stx_nano_digest_term_ENoField.__name__ = "stx.nano.digest.term.ENoField";
stx_nano_digest_term_ENoField.__super__ = stx_fail_Digest;
stx_nano_digest_term_ENoField.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_ENoField
});
var stx_nano_digest_term_EResourceNotFound = function(resource_name) {
	stx_fail_Digest.call(this,"01FRQ55MMVX2D7JEHJ6CE4X1NY","Resource \"" + resource_name + "\" not found.");
};
$hxClasses["stx.nano.digest.term.EResourceNotFound"] = stx_nano_digest_term_EResourceNotFound;
stx_nano_digest_term_EResourceNotFound.__name__ = "stx.nano.digest.term.EResourceNotFound";
stx_nano_digest_term_EResourceNotFound.__super__ = stx_fail_Digest;
stx_nano_digest_term_EResourceNotFound.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_EResourceNotFound
});
var stx_nano_digest_term_ETinkError = function(msg,code) {
	stx_fail_Digest.call(this,"01FRQ5TP22YD13E22X767DTHJC",msg,code);
};
$hxClasses["stx.nano.digest.term.ETinkError"] = stx_nano_digest_term_ETinkError;
stx_nano_digest_term_ETinkError.__name__ = "stx.nano.digest.term.ETinkError";
stx_nano_digest_term_ETinkError.__super__ = stx_fail_Digest;
stx_nano_digest_term_ETinkError.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_ETinkError
});
var stx_nano_digest_term_EUndefined = function() {
	stx_fail_Digest.call(this,"01FRQ56BJH83N0QXF6ZFJ9Y4MN","Encountered Undefined.");
};
$hxClasses["stx.nano.digest.term.EUndefined"] = stx_nano_digest_term_EUndefined;
stx_nano_digest_term_EUndefined.__name__ = "stx.nano.digest.term.EUndefined";
stx_nano_digest_term_EUndefined.__super__ = stx_fail_Digest;
stx_nano_digest_term_EUndefined.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_EUndefined
});
var stx_nano_digest_term_EUnimplemented = function() {
	stx_fail_Digest.call(this,"01FRQ86121X4G17EEQ7DDNVEHH","Unimplemented");
};
$hxClasses["stx.nano.digest.term.EUnimplemented"] = stx_nano_digest_term_EUnimplemented;
stx_nano_digest_term_EUnimplemented.__name__ = "stx.nano.digest.term.EUnimplemented";
stx_nano_digest_term_EUnimplemented.__super__ = stx_fail_Digest;
stx_nano_digest_term_EUnimplemented.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_digest_term_EUnimplemented
});
var stx_nano_lift_LiftArrayNano = function() { };
$hxClasses["stx.nano.lift.LiftArrayNano"] = stx_nano_lift_LiftArrayNano;
stx_nano_lift_LiftArrayNano.__name__ = "stx.nano.lift.LiftArrayNano";
stx_nano_lift_LiftArrayNano.cross = function(self,that) {
	return stx_lift_ArrayLift.cross_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
stx_nano_lift_LiftArrayNano.zip = function(self,that) {
	return stx_lift_ArrayLift.zip_with(self,that,function(tI,tII) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,tI,tII);
	});
};
var stx_nano_lift_LiftArrayToIter = function() { };
$hxClasses["stx.nano.lift.LiftArrayToIter"] = stx_nano_lift_LiftArrayToIter;
stx_nano_lift_LiftArrayToIter.__name__ = "stx.nano.lift.LiftArrayToIter";
stx_nano_lift_LiftArrayToIter.toIter = function(arr) {
	return arr;
};
var stx_nano_lift_LiftBytes = function() { };
$hxClasses["stx.nano.lift.LiftBytes"] = stx_nano_lift_LiftBytes;
stx_nano_lift_LiftBytes.__name__ = "stx.nano.lift.LiftBytes";
stx_nano_lift_LiftBytes.get = function(self,pos,quantity) {
	switch(quantity) {
	case "dbe":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var e = self.b[pos + 4];
		var f = self.b[pos + 5];
		var g = self.b[pos + 6];
		var h = self.b[pos + 7];
		var r = new haxe_io_Bytes(new ArrayBuffer(8));
		r.b[0] = h;
		r.b[1] = g;
		r.b[2] = f;
		r.b[3] = e;
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(r.getDouble(0)));
	case "dle":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(self.getDouble(0)));
	case "fbe":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(r.getFloat(0)));
	case "fle":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(self.getFloat(0)));
	case "i16+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = b;
		r.b[1] = a;
		r.b[2] = 0;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i16-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = 0;
		r.b[2] = a;
		r.b[3] = b;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i24+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = c;
		r.b[1] = b;
		r.b[2] = a;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i24-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = a;
		r.b[2] = b;
		r.b[3] = c;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i32+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var d = self.b[pos + 3];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = d;
		r.b[1] = c;
		r.b[2] = b;
		r.b[3] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "i32-":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.getInt32(0)));
	case "i8":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.b[pos]));
	case "ln":
		return stx_nano_SprigSum.Textal(self.toString());
	case "ui16+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = b;
		r.b[1] = a;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getUInt16(0)));
	case "ui16-":
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(self.getUInt16(0)));
	case "ui24+":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = c;
		r.b[1] = b;
		r.b[2] = a;
		r.b[3] = 0;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	case "ui24-":
		var a = self.b[pos];
		var b = self.b[pos + 1];
		var c = self.b[pos + 2];
		var r = new haxe_io_Bytes(new ArrayBuffer(4));
		r.b[0] = 0;
		r.b[1] = a;
		r.b[2] = b;
		r.b[3] = c;
		return stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NInt(r.getInt32(0)));
	}
};
var stx_nano_lift_LiftContractToJsPromise = function() { };
$hxClasses["stx.nano.lift.LiftContractToJsPromise"] = stx_nano_lift_LiftContractToJsPromise;
stx_nano_lift_LiftContractToJsPromise.__name__ = "stx.nano.lift.LiftContractToJsPromise";
stx_nano_lift_LiftContractToJsPromise.toJsPromise = function(self) {
	return stx_nano_Contract._.toJsPromise(self);
};
var stx_nano_lift_LiftErrToChunk = function() { };
$hxClasses["stx.nano.lift.LiftErrToChunk"] = stx_nano_lift_LiftErrToChunk;
stx_nano_lift_LiftErrToChunk.__name__ = "stx.nano.lift.LiftErrToChunk";
stx_nano_lift_LiftErrToChunk.toChunk = function(err) {
	return stx_nano_Chunk.fromError(err);
};
var stx_nano_lift_LiftError = function() { };
$hxClasses["stx.nano.lift.LiftError"] = stx_nano_lift_LiftError;
stx_nano_lift_LiftError.__name__ = "stx.nano.lift.LiftError";
stx_nano_lift_LiftError.fault = function(self) {
	var self1 = self.get_pos();
	var tmp;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp = v;
	} else {
		tmp = null;
	}
	return stx_nano_Fault.lift(tmp);
};
stx_nano_lift_LiftError.report = function(error) {
	return stx_nano_ReportSum.Reported(error);
};
stx_nano_lift_LiftError.toTinkError = function(self,code) {
	if(code == null) {
		code = 500;
	}
	var tmp = stx_nano_Iter.lift(stx_fail_Error.toIterable(self));
	var self1 = self.get_pos();
	var tmp1;
	if(self1._hx_index == 0) {
		var v = self1.v;
		tmp1 = v;
	} else {
		tmp1 = null;
	}
	return tink_core_TypedError.withData(code,"TINK_ERROR",tmp,tmp1);
};
var stx_nano_lift_LiftErrorDigestToRefuse = function() { };
$hxClasses["stx.nano.lift.LiftErrorDigestToRefuse"] = stx_nano_lift_LiftErrorDigestToRefuse;
stx_nano_lift_LiftErrorDigestToRefuse.__name__ = "stx.nano.lift.LiftErrorDigestToRefuse";
stx_nano_lift_LiftErrorDigestToRefuse.toRefuse = function(self) {
	return stx_fail_Error.errate(self,stx_fail_DeclineSum.INTERNAL);
};
var stx_nano_lift_LiftErrorStringToRefuse = function() { };
$hxClasses["stx.nano.lift.LiftErrorStringToRefuse"] = stx_nano_lift_LiftErrorStringToRefuse;
stx_nano_lift_LiftErrorStringToRefuse.__name__ = "stx.nano.lift.LiftErrorStringToRefuse";
stx_nano_lift_LiftErrorStringToRefuse.toRefuse = function(self) {
	return stx_fail_Refuse.lift(stx_fail_Error.errate(self,function(x) {
		return stx_fail_DeclineSum.INTERNAL(new stx_nano_lift_ESubsumed(x));
	}));
};
var stx_nano_lift_ESubsumed = function(string) {
	stx_fail_Digest.call(this,"01FT8HA5MKCMG7X3VW2DQ1YAN2",string);
};
$hxClasses["stx.nano.lift.ESubsumed"] = stx_nano_lift_ESubsumed;
stx_nano_lift_ESubsumed.__name__ = "stx.nano.lift.ESubsumed";
stx_nano_lift_ESubsumed.__super__ = stx_fail_Digest;
stx_nano_lift_ESubsumed.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_nano_lift_ESubsumed
});
var stx_nano_lift_LiftErrorToAlert = function() { };
$hxClasses["stx.nano.lift.LiftErrorToAlert"] = stx_nano_lift_LiftErrorToAlert;
stx_nano_lift_LiftErrorToAlert.__name__ = "stx.nano.lift.LiftErrorToAlert";
stx_nano_lift_LiftErrorToAlert.alert = function(self) {
	return stx_nano_Report.alert(stx_nano_lift_LiftError.report(stx_fail_Error.errate(self,function(except) {
		return stx_nano_lift_LiftNano.decline(stx_nano_Wildcard.__,except);
	})));
};
var stx_nano_lift_LiftErrorToRefuse = function() { };
$hxClasses["stx.nano.lift.LiftErrorToRefuse"] = stx_nano_lift_LiftErrorToRefuse;
stx_nano_lift_LiftErrorToRefuse.__name__ = "stx.nano.lift.LiftErrorToRefuse";
stx_nano_lift_LiftErrorToRefuse.except = function(self) {
	return stx_fail_Refuse.lift(stx_fail_Error.errate(self,stx_fail_DeclineSum.EXTERNAL));
};
var stx_nano_lift_LiftErrorToReport = function() { };
$hxClasses["stx.nano.lift.LiftErrorToReport"] = stx_nano_lift_LiftErrorToReport;
stx_nano_lift_LiftErrorToReport.__name__ = "stx.nano.lift.LiftErrorToReport";
var stx_nano_lift_LiftFuture = function() { };
$hxClasses["stx.nano.lift.LiftFuture"] = stx_nano_lift_LiftFuture;
stx_nano_lift_LiftFuture.__name__ = "stx.nano.lift.LiftFuture";
stx_nano_lift_LiftFuture.fudge = function(self) {
	var val = null;
	self.handle(function(x) {
		val = x;
	});
	return val;
};
stx_nano_lift_LiftFuture.option = function(future) {
	var result = haxe_ds_Option.None;
	var cancelled = false;
	future.handle(function(x) {
		cancelled = true;
		result = haxe_ds_Option.Some(x);
	});
	return result;
};
stx_nano_lift_LiftFuture.prototype = {
	zip: function(self,that) {
		var left = haxe_ds_Option.None;
		var right = haxe_ds_Option.None;
		var trigger = new tink_core_FutureTrigger();
		var on_done = function() {
			if(left._hx_index == 0) {
				if(right._hx_index == 0) {
					var r = right.v;
					var l = left.v;
					trigger.trigger(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
				}
			}
		};
		var l_handler = function(l) {
			left = haxe_ds_Option.Some(l);
			on_done();
		};
		var r_handler = function(r) {
			right = haxe_ds_Option.Some(r);
			on_done();
		};
		self.handle(l_handler);
		that.handle(r_handler);
		return trigger;
	}
	,__class__: stx_nano_lift_LiftFuture
};
var stx_nano_lift_LiftFutureResToPledge = function() { };
$hxClasses["stx.nano.lift.LiftFutureResToPledge"] = stx_nano_lift_LiftFutureResToPledge;
stx_nano_lift_LiftFutureResToPledge.__name__ = "stx.nano.lift.LiftFutureResToPledge";
stx_nano_lift_LiftFutureResToPledge.toPledge = function(self) {
	return stx_nano_Pledge.lift(self);
};
var stx_nano_lift_LiftIMapToArrayKV = function() { };
$hxClasses["stx.nano.lift.LiftIMapToArrayKV"] = stx_nano_lift_LiftIMapToArrayKV;
stx_nano_lift_LiftIMapToArrayKV.__name__ = "stx.nano.lift.LiftIMapToArrayKV";
stx_nano_lift_LiftIMapToArrayKV.toArrayKV = function(map) {
	var out = [];
	var _g = map.keyValueIterator();
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var key = _g1.key;
		var val = _g1.value;
		out.push(stx_nano_KV.fromTup(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,key,val)));
	}
	return out;
};
var stx_nano_lift_LiftIterableToIter = function() { };
$hxClasses["stx.nano.lift.LiftIterableToIter"] = stx_nano_lift_LiftIterableToIter;
stx_nano_lift_LiftIterableToIter.__name__ = "stx.nano.lift.LiftIterableToIter";
stx_nano_lift_LiftIterableToIter.toIter = function(it) {
	return it;
};
var stx_nano_lift_LiftIteratorToIter = function() { };
$hxClasses["stx.nano.lift.LiftIteratorToIter"] = stx_nano_lift_LiftIteratorToIter;
stx_nano_lift_LiftIteratorToIter.__name__ = "stx.nano.lift.LiftIteratorToIter";
stx_nano_lift_LiftIteratorToIter.toIter = function(it) {
	return { iterator : function() {
		return it;
	}};
};
var stx_nano_lift_LiftJsPromiseToContract = function() { };
$hxClasses["stx.nano.lift.LiftJsPromiseToContract"] = stx_nano_lift_LiftJsPromiseToContract;
stx_nano_lift_LiftJsPromiseToContract.__name__ = "stx.nano.lift.LiftJsPromiseToContract";
stx_nano_lift_LiftJsPromiseToContract.toContract = function(self,pos) {
	return stx_nano_Contract.fromJsPromise(self,pos);
};
var stx_nano_lift_LiftJsPromiseToPledge = function() { };
$hxClasses["stx.nano.lift.LiftJsPromiseToPledge"] = stx_nano_lift_LiftJsPromiseToPledge;
stx_nano_lift_LiftJsPromiseToPledge.__name__ = "stx.nano.lift.LiftJsPromiseToPledge";
stx_nano_lift_LiftJsPromiseToPledge.toPledge = function(self,pos) {
	return stx_nano_Pledge.fromJsPromise(self,pos);
};
var stx_nano_lift_LiftMapToIter = function() { };
$hxClasses["stx.nano.lift.LiftMapToIter"] = stx_nano_lift_LiftMapToIter;
stx_nano_lift_LiftMapToIter.__name__ = "stx.nano.lift.LiftMapToIter";
stx_nano_lift_LiftMapToIter.toIter = function(map) {
	return { iterator : function() {
		var source = map.keyValueIterator();
		return { next : function() {
			var out = source.next();
			return { key : out.key, val : out.value};
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_nano_lift_LiftMapToIterKV = function() { };
$hxClasses["stx.nano.lift.LiftMapToIterKV"] = stx_nano_lift_LiftMapToIterKV;
stx_nano_lift_LiftMapToIterKV.__name__ = "stx.nano.lift.LiftMapToIterKV";
stx_nano_lift_LiftMapToIterKV.toIterKV = function(map) {
	return { keyValueIterator : function() {
		var source = map.keyValueIterator();
		return { next : function() {
			var out = source.next();
			return out;
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_nano_lift_StringToIdentifier = function() { };
$hxClasses["stx.nano.lift.StringToIdentifier"] = stx_nano_lift_StringToIdentifier;
stx_nano_lift_StringToIdentifier.__name__ = "stx.nano.lift.StringToIdentifier";
stx_nano_lift_StringToIdentifier.identifier = function(wildcard,str) {
	return stx_pico_Identifier._new(str);
};
var stx_nano_lift_LiftIdentifierToIdent = function() { };
$hxClasses["stx.nano.lift.LiftIdentifierToIdent"] = stx_nano_lift_LiftIdentifierToIdent;
stx_nano_lift_LiftIdentifierToIdent.__name__ = "stx.nano.lift.LiftIdentifierToIdent";
var stx_nano_lift_LiftOptionNano = function() { };
$hxClasses["stx.nano.lift.LiftOptionNano"] = stx_nano_lift_LiftOptionNano;
stx_nano_lift_LiftOptionNano.__name__ = "stx.nano.lift.LiftOptionNano";
stx_nano_lift_LiftOptionNano.zip = function(self,that) {
	if(self._hx_index == 0) {
		if(that._hx_index == 0) {
			var r = that.v;
			var l = self.v;
			return haxe_ds_Option.Some(stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
stx_nano_lift_LiftOptionNano.fudge = function(self,err) {
	var self1 = stx_pico_Option.make(stx_fail_Refuse.lift(stx_fail_Error.errate(err,stx_fail_DeclineSum.EXTERNAL)));
	var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/nano/lift/LiftOptionNano.hx", lineNumber : 20, className : "stx.nano.lift.LiftOptionNano", methodName : "fudge"});
	var v = stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
		return stx_nano_Digests.e_undefined(_);
	},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
	var exception;
	if(self1._hx_index == 0) {
		var v1 = self1.v;
		exception = v1;
	} else {
		exception = v;
	}
	if(self == null) {
		throw haxe_Exception.thrown(exception);
	} else {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			return v;
		case 1:
			throw haxe_Exception.thrown(exception);
		}
	}
};
stx_nano_lift_LiftOptionNano.resolve = function(self,fn,pos) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.v;
		tmp = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t);
		break;
	case 1:
		tmp = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_CTR.apply(fn,stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos))),{ fileName : "stx/nano/lift/LiftOptionNano.hx", lineNumber : 37, className : "stx.nano.lift.LiftOptionNano", methodName : "resolve"});
		break;
	}
	return tmp;
};
var stx_nano_lift_LiftOptionToChunk = function() { };
$hxClasses["stx.nano.lift.LiftOptionToChunk"] = stx_nano_lift_LiftOptionToChunk;
stx_nano_lift_LiftOptionToChunk.__name__ = "stx.nano.lift.LiftOptionToChunk";
stx_nano_lift_LiftOptionToChunk.toChunk = function(opt) {
	switch(opt._hx_index) {
	case 0:
		var v = opt.v;
		return stx_nano_ChunkSum.Val(v);
	case 1:
		return stx_nano_ChunkSum.Tap;
	}
};
var stx_nano_lift_LiftOutcomeTDefect = function() { };
$hxClasses["stx.nano.lift.LiftOutcomeTDefect"] = stx_nano_lift_LiftOutcomeTDefect;
stx_nano_lift_LiftOutcomeTDefect.__name__ = "stx.nano.lift.LiftOutcomeTDefect";
stx_nano_lift_LiftOutcomeTDefect.zip = function(self,that) {
	switch(self._hx_index) {
	case 0:
		var _g = self.t;
		switch(that._hx_index) {
		case 0:
			var r = that.t;
			var l = _g;
			return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
		case 1:
			var r = that.e;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,r);
		}
		break;
	case 1:
		var _g = self.e;
		if(that._hx_index == 1) {
			var r = that.e;
			var l = _g;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,stx_nano_DefectLift.concat(l,r));
		} else {
			var l = _g;
			return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,l);
		}
		break;
	}
};
var stx_nano_lift_LiftPath = function() { };
$hxClasses["stx.nano.lift.LiftPath"] = stx_nano_lift_LiftPath;
stx_nano_lift_LiftPath.__name__ = "stx.nano.lift.LiftPath";
stx_nano_lift_LiftPath.into = function(path,v) {
	var base = haxe_io_Path.addTrailingSlash(path.toString());
	var rest = stx_nano_OneOrMany.toArray(v).join(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
	var next = "" + base + rest;
	return new haxe_io_Path(next);
};
stx_nano_lift_LiftPath.toArray = function(path) {
	var base = path.toString();
	if(StringTools.startsWith(base,stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__))) {
		base = HxOverrides.substr(base,1,null);
	}
	var next = base.split(stx_nano_lift_LiftNano.sep(stx_nano_Wildcard.__));
	return next;
};
var stx_nano_lift_LiftRefuseToRes = function() { };
$hxClasses["stx.nano.lift.LiftRefuseToRes"] = stx_nano_lift_LiftRefuseToRes;
stx_nano_lift_LiftRefuseToRes.__name__ = "stx.nano.lift.LiftRefuseToRes";
stx_nano_lift_LiftRefuseToRes.toUpshot = function(self) {
	return stx_nano_UpshotSum.Reject(self);
};
stx_nano_lift_LiftRefuseToRes.reject = function(self) {
	return stx_nano_UpshotSum.Reject(self);
};
var stx_nano_lift_LiftResToChunk = function() { };
$hxClasses["stx.nano.lift.LiftResToChunk"] = stx_nano_lift_LiftResToChunk;
stx_nano_lift_LiftResToChunk.__name__ = "stx.nano.lift.LiftResToChunk";
stx_nano_lift_LiftResToChunk.toChunk = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_nano_ChunkSum.Val(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_nano_ChunkSum.End(e);
		break;
	}
	return tmp;
};
var stx_nano_lift_LiftStringMapToIter = function() { };
$hxClasses["stx.nano.lift.LiftStringMapToIter"] = stx_nano_lift_LiftStringMapToIter;
stx_nano_lift_LiftStringMapToIter.__name__ = "stx.nano.lift.LiftStringMapToIter";
stx_nano_lift_LiftStringMapToIter.toIter = function(map) {
	return stx_nano_IterLift.map(stx_nano_lift_LiftMapToIter.toIter(map),function(x) {
		return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_KVLift.fst(x),stx_nano_KVLift.snd(x));
	});
};
var stx_nano_lift_LiftStringMapToIterKV = function() { };
$hxClasses["stx.nano.lift.LiftStringMapToIterKV"] = stx_nano_lift_LiftStringMapToIterKV;
stx_nano_lift_LiftStringMapToIterKV.__name__ = "stx.nano.lift.LiftStringMapToIterKV";
stx_nano_lift_LiftStringMapToIterKV.toIterKV = function(map) {
	return { keyValueIterator : function() {
		var source = new haxe_ds__$StringMap_StringMapKeyValueIterator(map.h);
		return { next : function() {
			var out = source.next();
			return out;
		}, hasNext : $bind(source,source.hasNext)};
	}};
};
var stx_nano_lift_LiftStringToResource = function() { };
$hxClasses["stx.nano.lift.LiftStringToResource"] = stx_nano_lift_LiftStringToResource;
stx_nano_lift_LiftStringToResource.__name__ = "stx.nano.lift.LiftStringToResource";
stx_nano_lift_LiftStringToResource.resource = function(stx,str,pos) {
	var str1 = str;
	if(!stx_nano_Resource.exists(str1)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str1 + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var error = stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
				return stx_nano_Digests.e_resource_not_found(_,str1);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
			throw haxe_Exception.thrown(error);
		}
	}
	return str1;
};
var stx_nano_lift_LiftTinkErrorToRefuse = function() { };
$hxClasses["stx.nano.lift.LiftTinkErrorToRefuse"] = stx_nano_lift_LiftTinkErrorToRefuse;
stx_nano_lift_LiftTinkErrorToRefuse.__name__ = "stx.nano.lift.LiftTinkErrorToRefuse";
stx_nano_lift_LiftTinkErrorToRefuse.toRefuse = function(self) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_Digests.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),self.message,self.code))),haxe_ds_Option.None,stx_pico_Option.fromNullT(self.pos));
};
stx_nano_lift_LiftTinkErrorToRefuse.except = function(self) {
	return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_Digests.e_tink_error(stx_Nano.digests(stx_nano_Wildcard.__),self.message,self.code))),haxe_ds_Option.None,stx_pico_Option.fromNullT(self.pos));
};
var stx_nano_lift_LiftTinkOutcomeToChunk = function() { };
$hxClasses["stx.nano.lift.LiftTinkOutcomeToChunk"] = stx_nano_lift_LiftTinkOutcomeToChunk;
stx_nano_lift_LiftTinkOutcomeToChunk.__name__ = "stx.nano.lift.LiftTinkOutcomeToChunk";
stx_nano_lift_LiftTinkOutcomeToChunk.core = function(oc) {
	return stx_nano_Chunk.fromTinkOutcome(oc);
};
var stx_om_core_SectionSum = $hxEnums["stx.om.core.SectionSum"] = { __ename__:"stx.om.core.SectionSum",__constructs__:null
	,SIdx: ($_=function(int) { return {_hx_index:0,int:int,__enum__:"stx.om.core.SectionSum",toString:$estr}; },$_._hx_name="SIdx",$_.__params__ = ["int"],$_)
	,SKey: ($_=function(key) { return {_hx_index:1,key:key,__enum__:"stx.om.core.SectionSum",toString:$estr}; },$_._hx_name="SKey",$_.__params__ = ["key"],$_)
};
stx_om_core_SectionSum.__constructs__ = [stx_om_core_SectionSum.SIdx,stx_om_core_SectionSum.SKey];
var stx_om_core_Section = {};
stx_om_core_Section._new = function(self) {
	return self;
};
stx_om_core_Section.lift = function(self) {
	return stx_om_core_Section._new(self);
};
stx_om_core_Section.prj = function(this1) {
	return this1;
};
stx_om_core_Section.get_self = function(this1) {
	return stx_om_core_Section.lift(this1);
};
stx_om_core_Section.fromString = function(self) {
	return stx_om_core_Section.lift(stx_om_core_SectionSum.SKey(self));
};
stx_om_core_Section.fromInt = function(self) {
	return stx_om_core_Section.lift(stx_om_core_SectionSum.SIdx(self));
};
var stx_om_sig_CompositeKind = $hxEnums["stx.om.sig.CompositeKind"] = { __ename__:"stx.om.sig.CompositeKind",__constructs__:null
	,CK_Nominal: {_hx_name:"CK_Nominal",_hx_index:0,__enum__:"stx.om.sig.CompositeKind",toString:$estr}
	,CK_Ordinal: {_hx_name:"CK_Ordinal",_hx_index:1,__enum__:"stx.om.sig.CompositeKind",toString:$estr}
};
stx_om_sig_CompositeKind.__constructs__ = [stx_om_sig_CompositeKind.CK_Nominal,stx_om_sig_CompositeKind.CK_Ordinal];
var stx_om_sig_KindSum = $hxEnums["stx.om.sig.KindSum"] = { __ename__:"stx.om.sig.KindSum",__constructs__:null
	,Simple: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"stx.om.sig.KindSum",toString:$estr}; },$_._hx_name="Simple",$_.__params__ = ["p"],$_)
	,Composite: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"stx.om.sig.KindSum",toString:$estr}; },$_._hx_name="Composite",$_.__params__ = ["c"],$_)
};
stx_om_sig_KindSum.__constructs__ = [stx_om_sig_KindSum.Simple,stx_om_sig_KindSum.Composite];
var stx_om_sig_Kind = {};
stx_om_sig_Kind._new = function(self) {
	return self;
};
stx_om_sig_Kind.lift = function(self) {
	return stx_om_sig_Kind._new(self);
};
stx_om_sig_Kind.prj = function(this1) {
	return this1;
};
stx_om_sig_Kind.get_self = function(this1) {
	return stx_om_sig_Kind.lift(this1);
};
stx_om_sig_Kind.fromPrimitiveType = function(p) {
	return stx_om_sig_Kind.lift(stx_om_sig_KindSum.Simple(p));
};
var stx_om_sig_SignatureCtr = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.om.sig.SignatureCtr"] = stx_om_sig_SignatureCtr;
stx_om_sig_SignatureCtr.__name__ = "stx.om.sig.SignatureCtr";
stx_om_sig_SignatureCtr.__super__ = stx_pico_Clazz;
stx_om_sig_SignatureCtr.prototype = $extend(stx_pico_Clazz.prototype,{
	Unknown: function() {
		return stx_om_sig_SignatureSum.SigUnknown;
	}
	,Primate: function(fn) {
		return stx_om_sig_SignatureSum.SigPrimate(fn(new stx_nano_PrimitiveTypeCtr()));
	}
	,Collect: function(fn) {
		var _gthis = this;
		return stx_om_sig_SignatureSum.SigCollect(function() {
			return fn(_gthis);
		});
	}
	,Collate: function(fn) {
		return stx_om_sig_SignatureSum.SigCollate(stx_nano_Record.fromMap(fn(this)));
	}
	,Predate: function(self) {
		return stx_om_sig_SignatureSum.SigPredate(self);
	}
	,__class__: stx_om_sig_SignatureCtr
});
var stx_om_sig_SignatureSum = $hxEnums["stx.om.sig.SignatureSum"] = { __ename__:"stx.om.sig.SignatureSum",__constructs__:null
	,SigUnknown: {_hx_name:"SigUnknown",_hx_index:0,__enum__:"stx.om.sig.SignatureSum",toString:$estr}
	,SigPredate: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.om.sig.SignatureSum",toString:$estr}; },$_._hx_name="SigPredate",$_.__params__ = ["v"],$_)
	,SigPrimate: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"stx.om.sig.SignatureSum",toString:$estr}; },$_._hx_name="SigPrimate",$_.__params__ = ["s"],$_)
	,SigCollect: ($_=function(fn) { return {_hx_index:3,fn:fn,__enum__:"stx.om.sig.SignatureSum",toString:$estr}; },$_._hx_name="SigCollect",$_.__params__ = ["fn"],$_)
	,SigCollate: ($_=function(arr) { return {_hx_index:4,arr:arr,__enum__:"stx.om.sig.SignatureSum",toString:$estr}; },$_._hx_name="SigCollate",$_.__params__ = ["arr"],$_)
};
stx_om_sig_SignatureSum.__constructs__ = [stx_om_sig_SignatureSum.SigUnknown,stx_om_sig_SignatureSum.SigPredate,stx_om_sig_SignatureSum.SigPrimate,stx_om_sig_SignatureSum.SigCollect,stx_om_sig_SignatureSum.SigCollate];
var stx_om_sig_Signature = {};
stx_om_sig_Signature._new = function(self) {
	return self;
};
stx_om_sig_Signature.lift = function(self) {
	return stx_om_sig_Signature._new(self);
};
stx_om_sig_Signature.prj = function(this1) {
	return this1;
};
stx_om_sig_Signature.get_self = function(this1) {
	return stx_om_sig_Signature.lift(this1);
};
var stx_om_sig_SignatureLift = function() { };
$hxClasses["stx.om.sig.SignatureLift"] = stx_om_sig_SignatureLift;
stx_om_sig_SignatureLift.__name__ = "stx.om.sig.SignatureLift";
stx_om_sig_SignatureLift.equals = function(lhs,rhs,inner) {
	return new stx_assert_om_eq_term_Signature(inner).comply(lhs,rhs);
};
stx_om_sig_SignatureLift.fold = function(self,recd,prim,array,fn,n) {
	var recd1 = recd;
	var prim1 = prim;
	var array1 = array;
	var fn1 = fn;
	var n1 = n;
	var f = function(self) {
		return stx_om_sig_SignatureLift.fold(self,recd1,prim1,array1,fn1,n1);
	};
	var _g = stx_om_sig_Signature.prj(self);
	switch(_g._hx_index) {
	case 0:
		return n();
	case 1:
		var v = _g.v;
		return fn(v);
	case 2:
		var s = _g.s;
		return prim(s);
	case 3:
		var t = _g.fn;
		return array(t);
	case 4:
		var arr = _g.arr;
		return recd(stx_nano_Record.map(arr,f));
	}
};
var stx_om_spine_LenseSum = $hxEnums["stx.om.spine.LenseSum"] = { __ename__:"stx.om.spine.LenseSum",__constructs__:null
	,LsId: {_hx_name:"LsId",_hx_index:0,__enum__:"stx.om.spine.LenseSum",toString:$estr}
	,LsConstant: ($_=function(value,_default) { return {_hx_index:1,value:value,_default:_default,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsConstant",$_.__params__ = ["value","_default"],$_)
	,LsSequence: ($_=function(l,r) { return {_hx_index:2,l:l,r:r,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsSequence",$_.__params__ = ["l","r"],$_)
	,LsRename: ($_=function(source,target) { return {_hx_index:3,source:source,target:target,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsRename",$_.__params__ = ["source","target"],$_)
	,LsHoist: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsHoist",$_.__params__ = ["name"],$_)
	,LsPivot: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsPivot",$_.__params__ = ["name"],$_)
	,LsXFork: ($_=function(from,into,lhs,rhs) { return {_hx_index:6,from:from,into:into,lhs:lhs,rhs:rhs,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsXFork",$_.__params__ = ["from","into","lhs","rhs"],$_)
	,LsMap: ($_=function(lense) { return {_hx_index:7,lense:lense,__enum__:"stx.om.spine.LenseSum",toString:$estr}; },$_._hx_name="LsMap",$_.__params__ = ["lense"],$_)
};
stx_om_spine_LenseSum.__constructs__ = [stx_om_spine_LenseSum.LsId,stx_om_spine_LenseSum.LsConstant,stx_om_spine_LenseSum.LsSequence,stx_om_spine_LenseSum.LsRename,stx_om_spine_LenseSum.LsHoist,stx_om_spine_LenseSum.LsPivot,stx_om_spine_LenseSum.LsXFork,stx_om_spine_LenseSum.LsMap];
var stx_om_spine_Lense = {};
stx_om_spine_Lense._new = function(self) {
	return self;
};
stx_om_spine_Lense.lift = function(self) {
	return stx_om_spine_Lense._new(self);
};
stx_om_spine_Lense.prj = function(this1) {
	return this1;
};
stx_om_spine_Lense.get_self = function(this1) {
	return stx_om_spine_Lense.lift(this1);
};
var stx_om_spine_LenseLift = function() { };
$hxClasses["stx.om.spine.LenseLift"] = stx_om_spine_LenseLift;
stx_om_spine_LenseLift.__name__ = "stx.om.spine.LenseLift";
stx_om_spine_LenseLift.put = function(self,data) {
	switch(self._hx_index) {
	case 0:
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,data);
	case 1:
		var value = self.value;
		var _default = self._default;
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,value);
	case 2:
		var l = self.l;
		var r = self.r;
		var self1 = stx_om_spine_LenseLift.put(l,data);
		var self2;
		switch(self1._hx_index) {
		case 0:
			var t = self1.t;
			self2 = stx_om_spine_LenseLift.put(r,t);
			break;
		case 1:
			var e = self1.e;
			self2 = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self2;
	case 3:
		var source = self.source;
		var target = self.target;
		if(data._hx_index == 3) {
			var rec = data.arr;
			var self1 = stx_nano_Record.get(rec,source);
			switch(self1._hx_index) {
			case 0:
				var t = self1.v;
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_om_spine_SpineSum.Collate(stx_nano_Record.fold(rec,function(next,memo) {
					if(next.key == source) {
						return stx_nano_Record.add(memo,stx_nano_Field.make(target,next.val));
					} else {
						return stx_nano_Record.add(memo,stx_nano_Field.make(next.key,next.val));
					}
				},stx_nano_Record.unit())));
			case 1:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 44, className : "stx.om.spine.LenseLift", methodName : "put"});
				return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_KeyNotFound(source))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 44, className : "stx.om.spine.LenseLift", methodName : "put"});
			}
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 46, className : "stx.om.spine.LenseLift", methodName : "put"});
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_KeyNotFound(source))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 46, className : "stx.om.spine.LenseLift", methodName : "put"});
		}
		break;
	case 4:
		var name = self.name;
		if(data._hx_index == 3) {
			var rec = data.arr;
			var self1 = stx_nano_Record.get(rec,name);
			switch(self1._hx_index) {
			case 0:
				var t = self1.v;
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t());
			case 1:
				return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_om_spine_SpineSum.Unknown);
			}
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 53, className : "stx.om.spine.LenseLift", methodName : "put"});
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_KeyNotFound(name))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 53, className : "stx.om.spine.LenseLift", methodName : "put"});
		}
		break;
	case 5:
		var name = self.name;
		if(data._hx_index == 3) {
			var rec = data.arr;
			var self1 = stx_nano_Record.get(rec,name);
			var self2;
			switch(self1._hx_index) {
			case 0:
				var t = self1.v;
				var ok = t;
				var _g = ok();
				if(_g._hx_index == 3) {
					var recI = _g.arr;
					var rest = stx_nano_ClusterLift.filter(stx_nano_Record.prj(rec),function(x) {
						return x.val() != ok();
					});
					var next = stx_nano_ClusterLift.head(stx_nano_Record.prj(recI));
					switch(next._hx_index) {
					case 0:
						var t = next.v;
						self2 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_Record.add(stx_nano_Record.unit(),stx_nano_Field.make(t.key,function() {
							return stx_om_spine_SpineSum.Collate(rest);
						})));
						break;
					case 1:
						var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 67, className : "stx.om.spine.LenseLift", methodName : "put"});
						self2 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnexpectedEmpty)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 67, className : "stx.om.spine.LenseLift", methodName : "put"});
						break;
					}
				} else {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 69, className : "stx.om.spine.LenseLift", methodName : "put"});
					self2 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnexpectedEmpty)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 69, className : "stx.om.spine.LenseLift", methodName : "put"});
				}
				break;
			case 1:
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 72, className : "stx.om.spine.LenseLift", methodName : "put"});
				self2 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_KeyNotFound(name))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 72, className : "stx.om.spine.LenseLift", methodName : "put"});
				break;
			}
			var self1;
			switch(self2._hx_index) {
			case 0:
				var t = self2.t;
				self1 = stx_nano_UpshotSum.Accept(stx_om_spine_SpineSum.Collate(t));
				break;
			case 1:
				var e = self2.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 74, className : "stx.om.spine.LenseLift", methodName : "put"});
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_KeyNotFound(name))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 74, className : "stx.om.spine.LenseLift", methodName : "put"});
		}
		break;
	case 6:
		var from = self.from;
		var into = self.into;
		var lhs = self.lhs;
		var rhs = self.rhs;
		if(data._hx_index == 3) {
			var rec = data.arr;
			var f = function(x) {
				return stx_ds_RedBlackSet.has(from,x.key);
			};
			var sets = function(self) {
				var f1 = f;
				return stx_lift_ArrayLift.lfold(self,function(next,memo) {
					if(f1(next)) {
						memo.a.push(next);
					} else {
						memo.b.push(next);
					}
					return memo;
				},{ a : [], b : []});
			};
			var value = stx_nano_Cluster.toIterable(stx_nano_Record.prj(rec));
			var sets1 = sets(((value) instanceof Array) ? value : null);
			var lval = stx_om_spine_SpineSum.Collate(stx_nano_Record.lift(stx_nano_Cluster.lift(sets1.a)));
			var rval = stx_om_spine_SpineSum.Collate(stx_nano_Record.lift(stx_nano_Cluster.lift(sets1.b)));
			var l = stx_om_spine_LenseLift.put(lhs,lval);
			var r = stx_om_spine_LenseLift.put(rhs,rval);
			var self1;
			switch(l._hx_index) {
			case 0:
				var _g = l.t;
				switch(r._hx_index) {
				case 0:
					var tt = r.t;
					var t = _g;
					self1 = stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
					break;
				case 1:
					var e = r.e;
					self1 = stx_nano_UpshotSum.Reject(e);
					break;
				}
				break;
			case 1:
				var _g = l.e;
				if(r._hx_index == 1) {
					var ee = r.e;
					var e = _g;
					self1 = stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
				} else {
					var e = _g;
					self1 = stx_nano_UpshotSum.Reject(e);
				}
				break;
			}
			var fn = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(lres,rres) {
				if(lres._hx_index == 3) {
					if(rres._hx_index == 3) {
						var rs = rres.arr;
						var ls = lres.arr;
						var set_fails = stx_nano_ReportLift.resolve(stx_nano_Record.fold(ls,function(next,memo) {
							return stx_nano_ReportLift.concat(memo,stx_LiftIf.if_else(stx_ds_RedBlackSet.has(into,next.key),function() {
								return stx_nano_Report.unit();
							},function() {
								var _ = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 94, className : "stx.om.spine.LenseLift", methodName : "put"});
								return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnexpectedKey(next.key))),haxe_ds_Option.None,stx_pico_Option.fromNullT(_)));
							}));
						},stx_nano_Report.unit()),function() {
							return ls;
						});
						var unset_fails = stx_nano_ReportLift.resolve(stx_nano_Record.fold(rs,function(next,memo) {
							return stx_nano_ReportLift.concat(memo,stx_LiftIf.if_else(!stx_ds_RedBlackSet.has(into,next.key),function() {
								return stx_nano_Report.unit();
							},function() {
								var _ = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 103, className : "stx.om.spine.LenseLift", methodName : "put"});
								return stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnexpectedKey(next.key))),haxe_ds_Option.None,stx_pico_Option.fromNullT(_)));
							}));
						},stx_nano_Report.unit()),function() {
							return rs;
						});
						var self;
						switch(set_fails._hx_index) {
						case 0:
							var _g = set_fails.t;
							switch(unset_fails._hx_index) {
							case 0:
								var tt = unset_fails.t;
								var t = _g;
								self = stx_nano_UpshotSum.Accept(stx_nano_Couple.make(t,tt));
								break;
							case 1:
								var e = unset_fails.e;
								self = stx_nano_UpshotSum.Reject(e);
								break;
							}
							break;
						case 1:
							var _g = set_fails.e;
							if(unset_fails._hx_index == 1) {
								var ee = unset_fails.e;
								var e = _g;
								self = stx_nano_UpshotSum.Reject(stx_fail_Refuse.concat(e,ee));
							} else {
								var e = _g;
								self = stx_nano_UpshotSum.Reject(e);
							}
							break;
						}
						var fn = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(a,b) {
							return stx_om_spine_SpineSum.Collate(stx_nano_Record.concat(a,b));
						});
						var self1;
						switch(self._hx_index) {
						case 0:
							var t = self.t;
							self1 = stx_nano_UpshotSum.Accept(fn(t));
							break;
						case 1:
							var e = self.e;
							self1 = stx_nano_UpshotSum.Reject(e);
							break;
						}
						return self1;
					} else {
						var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 114, className : "stx.om.spine.LenseLift", methodName : "put"});
						return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnmatchedValueType())),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 114, className : "stx.om.spine.LenseLift", methodName : "put"});
					}
				} else {
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 114, className : "stx.om.spine.LenseLift", methodName : "put"});
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnmatchedValueType())),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 114, className : "stx.om.spine.LenseLift", methodName : "put"});
				}
			});
			var self2;
			switch(self1._hx_index) {
			case 0:
				var t = self1.t;
				self2 = fn(t);
				break;
			case 1:
				var e = self1.e;
				self2 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self2;
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 118, className : "stx.om.spine.LenseLift", methodName : "put"});
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_NotFound)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 118, className : "stx.om.spine.LenseLift", methodName : "put"});
		}
		break;
	case 7:
		var lense = self.lense;
		switch(data._hx_index) {
		case 3:
			var x = data.arr;
			var self = stx_nano_Record.fold(x,function(next,memo) {
				var self;
				switch(memo._hx_index) {
				case 0:
					var t = memo.t;
					var record = t;
					var self1 = stx_om_spine_LenseLift.put(lense,next.val());
					var fn = function(item) {
						return stx_nano_Record.add(record,stx_nano_Field.make(next.key,function() {
							return item;
						}));
					};
					var self2;
					switch(self1._hx_index) {
					case 0:
						var t = self1.t;
						self2 = stx_nano_UpshotSum.Accept(fn(t));
						break;
					case 1:
						var e = self1.e;
						self2 = stx_nano_UpshotSum.Reject(e);
						break;
					}
					self = self2;
					break;
				case 1:
					var e = memo.e;
					self = stx_nano_UpshotSum.Reject(e);
					break;
				}
				return self;
			},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_Record.unit()));
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				self1 = stx_nano_UpshotSum.Accept(stx_om_spine_SpineSum.Collate(t));
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		case 4:
			var x = data.arr;
			var self = stx_nano_ClusterLift.lfold(x,function(next,memo) {
				var self;
				switch(memo._hx_index) {
				case 0:
					var t = memo.t;
					var cluster = t;
					var self1 = stx_om_spine_LenseLift.put(lense,next());
					var fn = function(y) {
						return stx_nano_ClusterLift.snoc(cluster,function() {
							return y;
						});
					};
					var self2;
					switch(self1._hx_index) {
					case 0:
						var t = self1.t;
						self2 = stx_nano_UpshotSum.Accept(fn(t));
						break;
					case 1:
						var e = self1.e;
						self2 = stx_nano_UpshotSum.Reject(e);
						break;
					}
					self = self2;
					break;
				case 1:
					var e = memo.e;
					self = stx_nano_UpshotSum.Reject(e);
					break;
				}
				return self;
			},stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_Cluster.unit()));
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				self1 = stx_nano_UpshotSum.Accept(stx_om_spine_SpineSum.Collect(t));
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		default:
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/om/spine/Lense.hx", lineNumber : 138, className : "stx.om.spine.LenseLift", methodName : "put"});
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_OMFailureSum.E_OM_UnmatchedValueType())),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/om/spine/Lense.hx", lineNumber : 138, className : "stx.om.spine.LenseLift", methodName : "put"});
		}
		break;
	}
};
var stx_om_spine_SpineSum = $hxEnums["stx.om.spine.SpineSum"] = { __ename__:"stx.om.spine.SpineSum",__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"stx.om.spine.SpineSum",toString:$estr}
	,Predate: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"stx.om.spine.SpineSum",toString:$estr}; },$_._hx_name="Predate",$_.__params__ = ["v"],$_)
	,Primate: ($_=function(sc) { return {_hx_index:2,sc:sc,__enum__:"stx.om.spine.SpineSum",toString:$estr}; },$_._hx_name="Primate",$_.__params__ = ["sc"],$_)
	,Collate: ($_=function(arr) { return {_hx_index:3,arr:arr,__enum__:"stx.om.spine.SpineSum",toString:$estr}; },$_._hx_name="Collate",$_.__params__ = ["arr"],$_)
	,Collect: ($_=function(arr) { return {_hx_index:4,arr:arr,__enum__:"stx.om.spine.SpineSum",toString:$estr}; },$_._hx_name="Collect",$_.__params__ = ["arr"],$_)
};
stx_om_spine_SpineSum.__constructs__ = [stx_om_spine_SpineSum.Unknown,stx_om_spine_SpineSum.Predate,stx_om_spine_SpineSum.Primate,stx_om_spine_SpineSum.Collate,stx_om_spine_SpineSum.Collect];
var stx_om_spine_Spine = {};
stx_om_spine_Spine.fromPrimitive = function(v) {
	return stx_om_spine_SpineSum.Primate(v);
};
stx_om_spine_Spine.record = function() {
	return stx_om_spine_SpineSum.Collate(stx_nano_Cluster.unit());
};
stx_om_spine_Spine.array = function() {
	return stx_om_spine_SpineSum.Collect([]);
};
stx_om_spine_Spine.unbox = function(this1) {
	return this1;
};
stx_om_spine_Spine.access = function(this1,key) {
	if(this1._hx_index == 3) {
		var arr = this1.arr;
		return stx_pico_OptionLift.map(stx_nano_Record.get(arr,key),function(_) {
			return _();
		});
	} else {
		return haxe_ds_Option.None;
	}
};
var stx_om_spine_SpineLift = function() { };
$hxClasses["stx.om.spine.SpineLift"] = stx_om_spine_SpineLift;
stx_om_spine_SpineLift.__name__ = "stx.om.spine.SpineLift";
stx_om_spine_SpineLift.toJson = function(self) {
	var rec = null;
	rec = function(v) {
		haxe_Log.trace(v,{ fileName : "stx/om/spine/Spine.hx", lineNumber : 38, className : "stx.om.spine.SpineLift", methodName : "toJson"});
		switch(v._hx_index) {
		case 0:
			return null;
		case 1:
			var v1 = v.v;
			return v1;
		case 2:
			var _g = v.sc;
			if(_g._hx_index == 1) {
				var b = _g.b;
				return b;
			} else {
				var p = _g;
				return stx_nano_Primitive.toAny(p);
			}
			break;
		case 3:
			var arr = v.arr;
			var obj = { };
			var _g_current = 0;
			var _g_array = arr;
			while(_g_current < _g_array.length) {
				var x = _g_array[_g_current++];
				obj[stx_nano_KVLift.fst(x)] = rec((stx_nano_KVLift.snd(x))());
			}
			return obj;
		case 4:
			var arr = v.arr;
			return stx_nano_ClusterLift.map(arr,function(x) {
				return rec(x());
			});
		}
	};
	return JSON.stringify(rec(self),null," ");
};
stx_om_spine_SpineLift.mod = function(spine,fn) {
	var handler = null;
	handler = function(spine) {
		switch(spine._hx_index) {
		case 0:
			return fn(stx_om_spine_SpineSum.Unknown);
		case 1:
			var t = spine.v;
			return fn(stx_om_spine_SpineSum.Predate(t));
		case 2:
			var s = spine.sc;
			return fn(stx_om_spine_SpineSum.Primate(s));
		case 3:
			var arr = spine.arr;
			return stx_om_spine_SpineSum.Collate(stx_nano_Record.map(arr,handler));
		case 4:
			var arr = spine.arr;
			return stx_om_spine_SpineSum.Collect(stx_nano_ClusterLift.map(arr,function(thk) {
				return function() {
					return handler(thk());
				};
			}));
		}
	};
	return handler(spine);
};
stx_om_spine_SpineLift.equals = function(thiz,that,$with) {
	return new stx_assert_om_eq_term_Spine($with).comply(thiz,that);
};
stx_om_spine_SpineLift.fold = function(self,unknown,primate,collect,collate,predate) {
	var unknown1 = unknown;
	var primate1 = primate;
	var collect1 = collect;
	var collate1 = collate;
	var predate1 = predate;
	var f = function(self) {
		return stx_om_spine_SpineLift.fold(self,unknown1,primate1,collect1,collate1,predate1);
	};
	switch(self._hx_index) {
	case 0:
		return unknown();
	case 1:
		var v = self.v;
		return predate(v);
	case 2:
		var sc = self.sc;
		return primate(sc);
	case 3:
		var arr = self.arr;
		return collate(stx_nano_Record.map(arr,f));
	case 4:
		var arr = self.arr;
		return collect(stx_nano_ClusterLift.map(arr,function(x) {
			return f(x());
		}));
	}
};
stx_om_spine_SpineLift.toSig = function(self,primate,collect,collect_unit,collate,predate) {
	var primate1 = primate;
	var collect1 = collect;
	var collect_unit1 = collect_unit;
	var collate1 = collate;
	var predate1 = predate;
	var f = function(self) {
		return stx_om_spine_SpineLift.toSig(self,primate1,collect1,collect_unit1,collate1,predate1);
	};
	switch(self._hx_index) {
	case 0:
		return stx_om_sig_SignatureSum.SigUnknown;
	case 1:
		var v = self.v;
		return predate(v);
	case 2:
		var sc = self.sc;
		return primate(sc);
	case 3:
		var arr = self.arr;
		return collate(stx_nano_Record.map(arr,f));
	case 4:
		var arr = self.arr;
		return stx_nano_ClusterLift.lfold(arr,function(next,memo) {
			return collect(next(),memo);
		},collect_unit);
	}
};
var stx_parse_Logging = function() { };
$hxClasses["stx.parse.Logging"] = stx_parse_Logging;
stx_parse_Logging.__name__ = "stx.parse.Logging";
stx_parse_Logging.log = function(wildcard) {
	return stx_log_Log.empty();
};
var stx_parse_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.parse.Module"] = stx_parse_Module;
stx_parse_Module.__name__ = "stx.parse.Module";
stx_parse_Module.__super__ = stx_pico_Clazz;
stx_parse_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	greedy: function(prs) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_Many(prs,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),new stx_parse_parser_term_Eof(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 71, className : "stx.parse.Parsers", methodName : "Eof"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
	}
	,alts: function(arr) {
		var self = stx_nano_ClusterLift.lfold1(arr,function(next,memo) {
			return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(memo,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
		});
		var v = stx_parse_Parser.get_self(new stx_parse_parser_term_Failed("not one alternative specified",false,{ fileName : "stx/parse/Module.hx", lineNumber : 11, className : "stx.parse.Module", methodName : "alts"}));
		if(self._hx_index == 0) {
			var v1 = self.v;
			return v1;
		} else {
			return v;
		}
	}
	,when: function(fn) {
		return new stx_parse_parser_term_When(fn,null,{ fileName : "stx/parse/Module.hx", lineNumber : 15, className : "stx.parse.Module", methodName : "when"});
	}
	,inspect: function(prefix,postfix,pos) {
		return new stx_parse_parser_term_Inspect(prefix,postfix,null,pos);
	}
	,parsers: function() {
		return new stx_parse_module_Parsers();
	}
	,__class__: stx_parse_Module
});
var stx_parse_ParseInputCls = function(content,memo,tag,cursor,tree) {
	this.content = content;
	this.memo = memo;
	this.tag = tag;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cursor);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = [];
	}
	this.cursor = tmp;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tree);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_parse_core_Lung.unit();
	}
	this.tree = tmp;
};
$hxClasses["stx.parse.ParseInputCls"] = stx_parse_ParseInputCls;
stx_parse_ParseInputCls.__name__ = "stx.parse.ParseInputCls";
stx_parse_ParseInputCls.make = function(content,memo,tag,cursor,tree) {
	return new stx_parse_ParseInputCls(content,memo,tag,cursor,tree);
};
stx_parse_ParseInputCls.prototype = {
	content: null
	,memo: null
	,cursor: null
	,tree: null
	,tag: null
	,toString: function() {
		return "path: " + Std.string(this.cursor) + " at " + this.content.index + ":#(" + Std.string(this.content.head()) + ")";
	}
	,head: function() {
		return this.content.head();
	}
	,copy: function(content,memo,tag,cursor,tree) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,content);
		var content;
		if(self._hx_index == 0) {
			var v = self.v;
			content = v;
		} else {
			content = this.content;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,memo);
		var memo;
		if(self._hx_index == 0) {
			var v = self.v;
			memo = v;
		} else {
			memo = this.memo;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tag);
		var tag;
		if(self._hx_index == 0) {
			var v = self.v;
			tag = v;
		} else {
			tag = this.tag;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cursor);
		var cursor;
		if(self._hx_index == 0) {
			var v = self.v;
			cursor = v;
		} else {
			cursor = this.cursor;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tree);
		var tree;
		if(self._hx_index == 0) {
			var v = self.v;
			tree = v;
		} else {
			tree = this.tree;
		}
		return new stx_parse_ParseInputCls(content,memo,tag,cursor,tree);
	}
	,inside: function(index,name) {
		return this.copy(null,null,null,null,stx_parse_core_Lung.push(this.tree,index,name));
	}
	,push: function(tag) {
		return this.copy(null,null,null,stx_lift_ArrayLift.snoc(this.cursor,tag));
	}
	,pop: function() {
		return this.copy(null,null,null,stx_lift_ArrayLift.ltaken(this.cursor,this.cursor.length - 1));
	}
	,__class__: stx_parse_ParseInputCls
};
var stx_parse_ParseInput = {};
stx_parse_ParseInput.lift = function(self) {
	return self;
};
stx_parse_ParseInput.make = function(content,memo,tag,cursor,tree) {
	return new stx_parse_ParseInputCls(content,memo,tag,cursor,tree);
};
stx_parse_ParseInput.pure = function(en) {
	return stx_parse_ParseInput.make(en,stx_parse_core_Memo.unit());
};
stx_parse_ParseInput.drop = function(this1,len) {
	return this1.copy(this1.content.drop(len));
};
stx_parse_ParseInput.take = function(this1,len) {
	return this1.content.take(len);
};
stx_parse_ParseInput.foldn = function(this1,fn,n,z) {
	var memo = z;
	var self = stx_parse_ParseInput.lift(this1);
	while(n > 0) {
		var next = stx_parse_ParseInput.get_content(self).take(1);
		memo = fn(next,memo);
		self = self.copy(self.content.drop(1));
		--n;
	}
	return memo;
};
stx_parse_ParseInput.tail = function(this1) {
	return this1.copy(this1.content.drop(1));
};
stx_parse_ParseInput.matchedBy = function(this1,e) {
	return this1.content.match(e);
};
stx_parse_ParseInput.position = function(this1) {
	return this1.content.index;
};
stx_parse_ParseInput.prepend = function(this1,i) {
	return stx_parse_ParseInput.make(this1.content.prepend(i),this1.memo,this1.tag);
};
stx_parse_ParseInput.setRecursionHead = function(this1,head) {
	this1.memo.recursionHeads.h[this1.content.index + ""] = head;
};
stx_parse_ParseInput.removeRecursionHead = function(this1) {
	var key = this1.content.index + "";
	var _this = this1.memo.recursionHeads;
	if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
		delete(_this.h[key]);
	}
};
stx_parse_ParseInput.getRecursionHead = function(this1) {
	var res = this1.memo.recursionHeads.h[this1.content.index + ""];
	if(res == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(res);
	}
};
stx_parse_ParseInput.getFromCache = function(this1,genKey) {
	var key = genKey(this1.content.index);
	var res = this1.memo.memoEntries.h[key];
	if(res == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(res);
	}
};
stx_parse_ParseInput.updateCacheAndGet = function(this1,genKey,entry) {
	var key = genKey(this1.content.index);
	this1.memo.memoEntries.h[key] = entry;
	return entry;
};
stx_parse_ParseInput.is_end = function(this1) {
	return this1.content.is_end();
};
stx_parse_ParseInput.get_offset = function(this1) {
	return this1.content.index;
};
stx_parse_ParseInput.get_content = function(this1) {
	return this1.content;
};
stx_parse_ParseInput.get_index = function(this1) {
	return this1.content.index;
};
stx_parse_ParseInput.prj = function(this1) {
	return this1;
};
var stx_parse_ParseResultCls = function(error,value,asset) {
	stx_nano_EquityCls.call(this,error,value,asset);
};
$hxClasses["stx.parse.ParseResultCls"] = stx_parse_ParseResultCls;
stx_parse_ParseResultCls.__name__ = "stx.parse.ParseResultCls";
stx_parse_ParseResultCls.__super__ = stx_nano_EquityCls;
stx_parse_ParseResultCls.prototype = $extend(stx_nano_EquityCls.prototype,{
	toString: function() {
		return stx_parse_ParseResult._.toString(this);
	}
	,errate: function(fn) {
		return this.errata(function(x) {
			return stx_fail_Refuse.errate(x,fn);
		});
	}
	,errata: function(fn) {
		return stx_parse_ParseResult.make(this.asset,this.value,stx_fail_Error.errata(this.get_error(),fn));
	}
	,with_errata: function(error) {
		return this.errata(function(e) {
			return stx_fail_Refuse.concat(e,error);
		});
	}
	,__class__: stx_parse_ParseResultCls
});
var stx_parse_ParseResultLift = function() { };
$hxClasses["stx.parse.ParseResultLift"] = stx_parse_ParseResultLift;
stx_parse_ParseResultLift.__name__ = "stx.parse.ParseResultLift";
stx_parse_ParseResultLift.toString = function(self) {
	return stx_nano_lift_LiftNano.if_else(stx_nano_EquityLift.has_error(self),function() {
		return Std.string(self.get_error());
	},function() {
		if(self.value == null) {
			return "null";
		} else {
			return stx_pico_Option.toString(self.value);
		}
	});
};
stx_parse_ParseResultLift.mkLR = function(seed,rule,head) {
	return { seed : seed, rule : stx_parse_Parser.get_self(rule), head : head};
};
stx_parse_ParseResultLift.mod = function(self,fn) {
	return stx_parse_ParseResult.fromEquity(stx_nano_EquityLift.copy(self,fn(self.asset)));
};
stx_parse_ParseResultLift.flat_map = function(self,fn) {
	return stx_nano_lift_LiftNano.if_else(self.get_error().is_defined() == false,function() {
		var self1 = self.value;
		switch(self1._hx_index) {
		case 0:
			var t = self1.v;
			return fn(t);
		case 1:
			return stx_LiftParse.nil(self.asset);
		}
	},function() {
		return stx_parse_ParseResult.make(self.asset,haxe_ds_Option.None,self.get_error());
	});
};
stx_parse_ParseResultLift.fudge = function(self) {
	return stx_pico_OptionLift.fudge(self.value);
};
stx_parse_ParseResultLift.toUpshot = function(self) {
	if(self.get_error().is_defined() == false) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self.value);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(self.toDefect())),{ fileName : "stx/parse/ParseResult.hx", lineNumber : 95, className : "stx.parse.ParseResultLift", methodName : "toUpshot"});
	}
};
stx_parse_ParseResultLift.toChunk = function(self) {
	if(self.get_error().is_defined() == false) {
		var _g = self.value;
		switch(_g._hx_index) {
		case 0:
			var x = _g.v;
			return stx_nano_ChunkSum.Val(x);
		case 1:
			return stx_nano_ChunkSum.Tap;
		}
	} else {
		return stx_nano_ChunkSum.End(self.get_error());
	}
};
var stx_parse_ParseResult = {};
stx_parse_ParseResult._new = function(self) {
	return self;
};
stx_parse_ParseResult.lift = function(self) {
	return stx_parse_ParseResult._new(self);
};
stx_parse_ParseResult.make = function(asset,value,error) {
	return stx_parse_ParseResult.lift(new stx_parse_ParseResultCls(error,value,asset));
};
stx_parse_ParseResult.fromEquity = function(self) {
	return stx_parse_ParseResult.make(self.asset,self.value,self.get_error());
};
stx_parse_ParseResult.map = function(this1,fn) {
	return stx_parse_ParseResult.fromEquity(stx_nano_Equity._.map(this1.toEquity(),function(opt) {
		return stx_pico_OptionLift.map(opt,fn);
	}));
};
stx_parse_ParseResult.is_ok = function(this1) {
	return this1.get_error().is_defined() == false;
};
stx_parse_ParseResult.fails = function(this1) {
	return stx_parse_ParseResult.make(this1.asset,haxe_ds_Option.None,this1.get_error());
};
stx_parse_ParseResult.elide = function(this1) {
	return this1;
};
stx_parse_ParseResult.prj = function(this1) {
	return this1;
};
stx_parse_ParseResult.get_self = function(this1) {
	return stx_parse_ParseResult.lift(this1);
};
stx_parse_ParseResult.pos = function(this1) {
	return this1.asset;
};
stx_parse_ParseResult.toChunk = function(this1) {
	if(this1.get_error().is_defined() == false) {
		var _g = this1.value;
		switch(_g._hx_index) {
		case 0:
			var x = _g.v;
			return stx_nano_ChunkSum.Val(x);
		case 1:
			return stx_nano_ChunkSum.Tap;
		}
	} else {
		return stx_nano_ChunkSum.End(this1.get_error());
	}
};
stx_parse_ParseResult.toUpshot = function(this1) {
	if(this1.get_error().is_defined() == false) {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,this1.value);
	} else {
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_nano_Defect.toRefuse(this1.toDefect())),{ fileName : "stx/parse/ParseResult.hx", lineNumber : 95, className : "stx.parse.ParseResultLift", methodName : "toUpshot"});
	}
};
var stx_parse_parser_ParserLift = function() { };
$hxClasses["stx.parse.parser.ParserLift"] = stx_parse_parser_ParserLift;
stx_parse_parser_ParserLift.__name__ = "stx.parse.parser.ParserLift";
stx_parse_parser_ParserLift.or = function(pI,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(pI,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
};
stx_parse_parser_ParserLift.ors = function(self,rest) {
	var self1 = stx_nano_ClusterLift.lfold1(stx_nano_Cluster.concat(stx_nano_Cluster.lift([self]),rest),function(memo,next) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(memo,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
	});
	if(self1._hx_index == 0) {
		var v = self1.v;
		return v;
	} else {
		return self;
	}
};
stx_parse_parser_ParserLift.then = function(p,f) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(p,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_parse_parser_ParserLift.and_then = function(p,fn) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndThen(p,fn,{ fileName : "stx/parse/Parsers.hx", lineNumber : 50, className : "stx.parse.Parsers", methodName : "AndThen"}));
};
stx_parse_parser_ParserLift.many = function(pI) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Many(pI,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"}));
};
stx_parse_parser_ParserLift.one_many = function(pI) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(pI,{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"}));
};
stx_parse_parser_ParserLift.and_ = function(pI,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(pI,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
};
stx_parse_parser_ParserLift.and = function(pI,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(pI,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"}));
};
stx_parse_parser_ParserLift.and_seq = function(pI,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonWith(pI,p2,function(l,r) {
		return stx_pico_Option.fromNullT([l,r]);
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 125, className : "stx.parse.Parsers", methodName : "AnonWith"}));
};
stx_parse_parser_ParserLift.__and = function(pI,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(pI,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"}));
};
stx_parse_parser_ParserLift.and_with = function(pI,p2,f) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonWith(pI,p2,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 125, className : "stx.parse.Parsers", methodName : "AnonWith"}));
};
stx_parse_parser_ParserLift.commit = function(pI) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Commit(pI,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 134, className : "stx.parse.Parsers", methodName : "Commit"}));
};
stx_parse_parser_ParserLift.notEmpty = function(arr) {
	return stx_nano_Cluster.get_length(arr) > 0;
};
stx_parse_parser_ParserLift.trace = function(p,f) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(p,function(x) {
		haxe_Log.trace(f(x),{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 62, className : "stx.parse.parser.ParserLift", methodName : "trace"});
		return x;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_parse_parser_ParserLift.rep1sep = function(pI,sep) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Rep1Sep(pI,sep));
};
stx_parse_parser_ParserLift.rep1sep0 = function(pI,sep) {
	var next = stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(sep,pI,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})));
	return stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(pI,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"}))),function(t) {
		var fst = stx_nano_CoupleLift.fst(t);
		var _g = [];
		var x = $getIterator(stx_nano_Cluster.toIterable(stx_nano_CoupleLift.snd(t)));
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push([stx_nano_CoupleLift.fst(x1),stx_nano_CoupleLift.snd(x1)]);
		}
		var _g1 = [];
		var e = $getIterator(_g);
		while(e.hasNext()) {
			var e1 = e.next();
			var x = $getIterator(e1);
			while(x.hasNext()) {
				var x1 = x.next();
				_g1.push(x1);
			}
		}
		var snd = Lambda.array(_g1);
		var out = [stx_nano_CoupleLift.fst(t)].concat(snd);
		return out;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})));
};
stx_parse_parser_ParserLift.repsep0 = function(pI,sep) {
	var next = stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(sep,pI,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})));
	return stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(pI,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"}))),function(t) {
		var fst = stx_nano_CoupleLift.fst(t);
		var _g = [];
		var x = $getIterator(stx_nano_Cluster.toIterable(stx_nano_CoupleLift.snd(t)));
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push([stx_nano_CoupleLift.fst(x1),stx_nano_CoupleLift.snd(x1)]);
		}
		var _g1 = [];
		var e = $getIterator(_g);
		while(e.hasNext()) {
			var e1 = e.next();
			var x = $getIterator(e1);
			while(x.hasNext()) {
				var x1 = x.next();
				_g1.push(x1);
			}
		}
		var snd = Lambda.array(_g1);
		var out = [stx_nano_CoupleLift.fst(t)].concat(snd);
		return out;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}))),new stx_parse_parser_term_Succeed([],{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 88, className : "stx.parse.parser.ParserLift", methodName : "repsep0"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})));
};
stx_parse_parser_ParserLift.repsep = function(pI,sep) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Rep1Sep(pI,sep));
};
stx_parse_parser_ParserLift.option = function(p) {
	return new stx_parse_parser_term_Option(p,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 94, className : "stx.parse.parser.ParserLift", methodName : "option"});
};
stx_parse_parser_ParserLift.inspect = function(parser,pre,post) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Inspect(parser,pre,post,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 97, className : "stx.parse.parser.ParserLift", methodName : "inspect"}));
};
stx_parse_parser_ParserLift.lookahead = function(p) {
	return new stx_parse_parser_term_Lookahead(p,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 74, className : "stx.parse.Parsers", methodName : "Lookahead"});
};
stx_parse_parser_ParserLift.not = function(p,pos) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Not(p,pos));
};
stx_parse_parser_ParserLift.filter = function(p,fn) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndThen(p,function(o) {
		if(fn(o)) {
			return new stx_parse_parser_term_Succeed(o,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 112, className : "stx.parse.parser.ParserLift", methodName : "filter"});
		} else {
			var is_fatal = false;
			if(is_fatal == null) {
				is_fatal = false;
			}
			return new stx_parse_parser_term_Failed("filter failed",is_fatal,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 112, className : "stx.parse.parser.ParserLift", methodName : "filter"});
		}
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 50, className : "stx.parse.Parsers", methodName : "AndThen"}));
};
stx_parse_parser_ParserLift.tokenize = function(p) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(p,function(arr) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,arr);
		var _this;
		if(self._hx_index == 0) {
			var v = self.v;
			_this = v;
		} else {
			_this = [];
		}
		return _this.join("");
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_parse_parser_ParserLift.tag_error = function(p,name,pos) {
	return new stx_parse_parser_term_TagRefuse(p,name,pos);
};
stx_parse_parser_ParserLift.with_tag = function(p,tag) {
	return new stx_parse_parser_term_Named(p,tag);
};
stx_parse_parser_ParserLift.memo = function(p) {
	return new stx_parse_parser_term_Memoise(p,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 136, className : "stx.parse.parser.ParserLift", methodName : "memo"});
};
stx_parse_parser_ParserLift.parse = function(self,input) {
	var self1 = stx_parse_ParseResult.toUpshot(self.apply(input));
	var self;
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		self = stx_nano_Upshot.accept(t);
		break;
	case 1:
		var e = self1.e;
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 142, className : "stx.parse.parser.ParserLift", methodName : "parse"});
		self = stx_nano_Upshot.reject(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
			return stx_parse_core_Refuses.e_parse_failure(_);
		},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		break;
	}
	return self;
};
stx_parse_parser_ParserLift.match = function(self,input) {
	var self1 = stx_parse_parser_ParserLift.parse(self,input);
	switch(self1._hx_index) {
	case 0:
		var t = self1.t;
		return stx_pico_OptionLift.fudge(t);
	case 1:
		var e = self1.e;
		throw haxe_Exception.thrown(e);
	}
};
var stx_parse_Parser = {};
stx_parse_Parser._new = function(self) {
	return self;
};
stx_parse_Parser.fromConstructor = function(fn) {
	return new stx_parse_parser_term_LAnon(fn,{ fileName : "stx/parse/Parser.hx", lineNumber : 11, className : "stx.parse._Parser.Parser_Impl_", methodName : "fromConstructor"});
};
stx_parse_Parser.fromParserApi = function(it) {
	return it;
};
stx_parse_Parser.fromFunction = function(f,tag) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_SyncAnon(f,tag,{ fileName : "stx/parse/Parser.hx", lineNumber : 17, className : "stx.parse._Parser.Parser_Impl_", methodName : "fromFunction"}));
};
stx_parse_Parser.lift = function(it) {
	return it;
};
stx_parse_Parser.mkHead = function(this1) {
	return { headParser : stx_parse_Parser.get_self(this1), involvedSet : stx_ds_LinkedList.unit(), evalSet : stx_ds_LinkedList.unit()};
};
stx_parse_Parser.elide = function(this1) {
	return stx_parse_Parser.get_self(this1);
};
stx_parse_Parser.get_self = function(this1) {
	return this1;
};
stx_parse_Parser.asParser = function(this1) {
	return stx_parse_Parser.get_self(this1);
};
stx_parse_Parser.then = function(this1,f) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(this1,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_parse_Parser.or = function(this1,p2) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(this1,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
};
var stx_parse_ParserApi = function() { };
$hxClasses["stx.parse.ParserApi"] = stx_parse_ParserApi;
stx_parse_ParserApi.__name__ = "stx.parse.ParserApi";
stx_parse_ParserApi.__isInterface__ = true;
stx_parse_ParserApi.prototype = {
	tag: null
	,pos: null
	,asParser: null
	,apply: null
	,toString: null
	,__class__: stx_parse_ParserApi
};
var stx_parse_ParserCls = function(tag,pos) {
	stx_pico_Clazz.call(this);
	this.pos = pos;
	var self = stx_pico_OptionLift.flatten(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,tag));
	var c = js_Boot.getClass(this);
	var v = stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__));
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.tag = stx_pico_Option.fromNullT(tmp);
};
$hxClasses["stx.parse.ParserCls"] = stx_parse_ParserCls;
stx_parse_ParserCls.__name__ = "stx.parse.ParserCls";
stx_parse_ParserCls.__interfaces__ = [stx_parse_ParserApi];
stx_parse_ParserCls.__super__ = stx_pico_Clazz;
stx_parse_ParserCls.prototype = $extend(stx_pico_Clazz.prototype,{
	pos: null
	,tag: null
	,apply: null
	,asParser: function() {
		return this;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__));
	}
	,__class__: stx_parse_ParserCls
});
var stx_parse_Parsers = function() { };
$hxClasses["stx.parse.Parsers"] = stx_parse_Parsers;
stx_parse_Parsers.__name__ = "stx.parse.Parsers";
stx_parse_Parsers.Anon = function(fn,tag,pos) {
	return new stx_parse_parser_term_Anon(fn,tag,pos);
};
stx_parse_Parsers.Equals = function(v) {
	return new stx_parse_parser_term_Equals(v,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
};
stx_parse_Parsers.Sub = function(p,fn) {
	return new stx_parse_parser_term_Sub(p,fn,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 11, className : "stx.parse.Parsers", methodName : "Sub"});
};
stx_parse_Parsers.SyncAnon = function(fn,tag,pos) {
	return new stx_parse_parser_term_SyncAnon(fn,tag,pos);
};
stx_parse_Parsers.TaggedAnon = function(fn,tag,pos) {
	return new stx_parse_parser_term_TaggedAnon(fn,tag,pos);
};
stx_parse_Parsers.Failed = function(msg,is_fatal,id) {
	if(is_fatal == null) {
		is_fatal = false;
	}
	return new stx_parse_parser_term_Failed(msg,is_fatal,id);
};
stx_parse_Parsers.Succeed = function(value,pos) {
	return new stx_parse_parser_term_Succeed(value,pos);
};
stx_parse_Parsers.Stamp = function(result,pos) {
	return new stx_parse_parser_term_Stamp(result,pos);
};
stx_parse_Parsers.Range = function(min,max) {
	return new stx_parse_parser_term_Range(min,max,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
};
stx_parse_Parsers.Named = function(self,name) {
	return new stx_parse_parser_term_Named(self,name);
};
stx_parse_Parsers.Regex = function(str) {
	return new stx_parse_parser_term_Regex(str,{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"});
};
stx_parse_Parsers.Or = function(pI,pII) {
	return new stx_parse_parser_term_Or(pI,pII,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"});
};
stx_parse_Parsers.Ors = function(ps) {
	return new stx_parse_parser_term_Ors(ps,{ fileName : "stx/parse/Parsers.hx", lineNumber : 44, className : "stx.parse.Parsers", methodName : "Ors"});
};
stx_parse_Parsers.AnonThen = function(p,f) {
	return new stx_parse_parser_term_AnonThen(p,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"});
};
stx_parse_Parsers.AndThen = function(p,f) {
	return new stx_parse_parser_term_AndThen(p,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 50, className : "stx.parse.Parsers", methodName : "AndThen"});
};
stx_parse_Parsers.Many = function(p) {
	return new stx_parse_parser_term_Many(p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"});
};
stx_parse_Parsers.OneMany = function(p) {
	return new stx_parse_parser_term_OneMany(p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"});
};
stx_parse_Parsers.Repeated = function(p,n) {
	return new stx_parse_parser_term_Repeated(p,n,{ fileName : "stx/parse/Parsers.hx", lineNumber : 59, className : "stx.parse.Parsers", methodName : "Repeated"});
};
stx_parse_Parsers.RepeatedUpto = function(p,n) {
	return new stx_parse_parser_term_RepeatedUpto(p,n,{ fileName : "stx/parse/Parsers.hx", lineNumber : 62, className : "stx.parse.Parsers", methodName : "RepeatedUpto"});
};
stx_parse_Parsers.RepeatedOnlyUpto = function(p,n) {
	return new stx_parse_parser_term_RepeatedOnlyUpto(p,n,{ fileName : "stx/parse/Parsers.hx", lineNumber : 65, className : "stx.parse.Parsers", methodName : "RepeatedOnlyUpto"});
};
stx_parse_Parsers.RepeatedOnly = function(p,n) {
	return new stx_parse_parser_term_RepeatedOnly(p,n,{ fileName : "stx/parse/Parsers.hx", lineNumber : 68, className : "stx.parse.Parsers", methodName : "RepeatedOnly"});
};
stx_parse_Parsers.Eof = function() {
	return new stx_parse_parser_term_Eof(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 71, className : "stx.parse.Parsers", methodName : "Eof"});
};
stx_parse_Parsers.Lookahead = function(parser) {
	return new stx_parse_parser_term_Lookahead(parser,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 74, className : "stx.parse.Parsers", methodName : "Lookahead"});
};
stx_parse_Parsers.Identifier = function(str) {
	return new stx_parse_parser_term_Identifier(str,{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
};
stx_parse_Parsers.Option = function(p) {
	return new stx_parse_parser_term_Option(p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 80, className : "stx.parse.Parsers", methodName : "Option"});
};
stx_parse_Parsers.Choose = function(fn,tag,pos) {
	return new stx_parse_parser_term_Choose(fn,tag,pos);
};
stx_parse_Parsers.When = function(fn,tag,pos) {
	return new stx_parse_parser_term_When(fn,tag,pos);
};
stx_parse_Parsers.Materialize = function(parser) {
	return new stx_parse_parser_term_Materialize(parser,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 89, className : "stx.parse.Parsers", methodName : "Materialize"});
};
stx_parse_Parsers.Inspect = function(parser,prefix,postfix,pos) {
	return new stx_parse_parser_term_Inspect(parser,prefix,postfix,pos);
};
stx_parse_Parsers.TagRefuse = function(parser,name,pos) {
	return new stx_parse_parser_term_TagRefuse(parser,name,pos);
};
stx_parse_Parsers.Something = function() {
	return new stx_parse_parser_term_Something(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 101, className : "stx.parse.Parsers", methodName : "Something"});
};
stx_parse_Parsers.Always = function() {
	return new stx_parse_parser_term_Always(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 104, className : "stx.parse.Parsers", methodName : "Always"});
};
stx_parse_Parsers.Nothing = function() {
	return new stx_parse_parser_term_Nothing(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 107, className : "stx.parse.Parsers", methodName : "Nothing"});
};
stx_parse_Parsers.Never = function() {
	return new stx_parse_parser_term_Never(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 110, className : "stx.parse.Parsers", methodName : "Never"});
};
stx_parse_Parsers.Head = function(fn) {
	return new stx_parse_parser_term_Head(fn,{ fileName : "stx/parse/Parsers.hx", lineNumber : 113, className : "stx.parse.Parsers", methodName : "Head"});
};
stx_parse_Parsers.AndR = function(l,r) {
	return new stx_parse_parser_term_AndR(l,r,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"});
};
stx_parse_Parsers.AndL = function(l,r) {
	return new stx_parse_parser_term_AndL(l,r,{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"});
};
stx_parse_Parsers.LAnon = function(fn,pos) {
	return new stx_parse_parser_term_LAnon(fn,pos);
};
stx_parse_Parsers.AnonWith = function(pI,pII,f) {
	return new stx_parse_parser_term_AnonWith(pI,pII,f,{ fileName : "stx/parse/Parsers.hx", lineNumber : 125, className : "stx.parse.Parsers", methodName : "AnonWith"});
};
stx_parse_Parsers.CoupleWith = function(pI,pII) {
	return new stx_parse_parser_term_CoupleWith(pI,pII,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"});
};
stx_parse_Parsers.Rep1Sep = function(pI,sep) {
	return new stx_parse_parser_term_Rep1Sep(pI,sep);
};
stx_parse_Parsers.Commit = function(pI) {
	return new stx_parse_parser_term_Commit(pI,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 134, className : "stx.parse.Parsers", methodName : "Commit"});
};
stx_parse_Parsers.Not = function(p,pos) {
	return new stx_parse_parser_term_Not(p,pos);
};
stx_parse_Parsers.While = function(p,pos) {
	return new stx_parse_parser_term_While(p,null,pos);
};
stx_parse_Parsers.Position = function(p,pos) {
	return new stx_parse_parser_term_Position(p,pos);
};
stx_parse_Parsers.CharCode = function(i) {
	return new stx_parse_parser_term_CharCode(i,{ fileName : "stx/parse/Parsers.hx", lineNumber : 146, className : "stx.parse.Parsers", methodName : "CharCode"});
};
stx_parse_Parsers.Bag = function(choices) {
	return new stx_parse_parser_term_Bag(choices,{ fileName : "stx/parse/Parsers.hx", lineNumber : 149, className : "stx.parse.Parsers", methodName : "Bag"});
};
var stx_parse_core_EnumerableApi = function() { };
$hxClasses["stx.parse.core.EnumerableApi"] = stx_parse_core_EnumerableApi;
stx_parse_core_EnumerableApi.__name__ = "stx.parse.core.EnumerableApi";
stx_parse_core_EnumerableApi.__isInterface__ = true;
stx_parse_core_EnumerableApi.prototype = {
	data: null
	,index: null
	,zero: null
	,copy: null
	,head: null
	,take: null
	,drop: null
	,match: null
	,prepend: null
	,is_end: null
	,asEnumerable: null
	,__class__: stx_parse_core_EnumerableApi
};
var stx_parse_core_Enumerable = {};
stx_parse_core_Enumerable._new = function(self) {
	return self;
};
stx_parse_core_Enumerable.lift = function(self) {
	return stx_parse_core_Enumerable._new(self);
};
stx_parse_core_Enumerable.Array = function(array) {
	return new stx_parse_core_enumerable_term_Array(array);
};
stx_parse_core_Enumerable.String = function(string) {
	return new stx_parse_core_enumerable_term_String(string);
};
stx_parse_core_Enumerable.LinkedList = function(list) {
	return new stx_parse_core_enumerable_term_LinkedList(list);
};
stx_parse_core_Enumerable.prj = function(this1) {
	return this1;
};
stx_parse_core_Enumerable.get_self = function(this1) {
	return stx_parse_core_Enumerable.lift(this1);
};
var stx_parse_core_EnumerableCls = function(data,index) {
	if(index == null) {
		index = 0;
	}
	this.data = data;
	this.index = index;
};
$hxClasses["stx.parse.core.EnumerableCls"] = stx_parse_core_EnumerableCls;
stx_parse_core_EnumerableCls.__name__ = "stx.parse.core.EnumerableCls";
stx_parse_core_EnumerableCls.__interfaces__ = [stx_parse_core_EnumerableApi];
stx_parse_core_EnumerableCls.prototype = {
	data: null
	,index: null
	,zero: function() {
		return this.copy(0);
	}
	,is_end: null
	,match: null
	,prepend: null
	,head: null
	,drop: null
	,take: null
	,copy: null
	,asEnumerable: function() {
		return this;
	}
	,__class__: stx_parse_core_EnumerableCls
};
var stx_parse_core_Head = {};
stx_parse_core_Head.getHead = function(this1) {
	return this1.headParser;
};
var stx_parse_core_LRLift = function() { };
$hxClasses["stx.parse.core.LRLift"] = stx_parse_core_LRLift;
stx_parse_core_LRLift.__name__ = "stx.parse.core.LRLift";
stx_parse_core_LRLift.lrAnswer = function(p,genKey,input,growable) {
	var _g = growable.head;
	switch(_g._hx_index) {
	case 0:
		var head = _g.v;
		if(stx_parse_core_Head.getHead(head) != p) {
			return growable.seed;
		} else {
			var entry = stx_parse_core_MemoEntry.MemoParsed(growable.seed);
			var key = genKey(input.content.index);
			input.memo.memoEntries.h[key] = entry;
			return stx_nano_lift_LiftNano.if_else(growable.seed.get_error().is_defined() == false,function() {
				return stx_parse_core_LRLift.grow(p,genKey,input,head);
			},function() {
				return growable.seed;
			});
		}
		break;
	case 1:
		return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("E_NoRecursionHead"),true),input);
	}
};
stx_parse_core_LRLift.recall = function(p,genKey,input) {
	var key = genKey(input.content.index);
	var res = input.memo.memoEntries.h[key];
	var cached = res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res);
	var res = input.memo.recursionHeads.h[input.content.index + ""];
	var _g = res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res);
	switch(_g._hx_index) {
	case 0:
		var head = _g.v;
		if(cached == haxe_ds_Option.None && !stx_ds_LinkedList.has(stx_ds_LinkedList.cons(head.involvedSet,head.headParser),stx_parse_Parser.get_self(p))) {
			return haxe_ds_Option.Some(stx_parse_core_MemoEntry.MemoParsed(stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("dummy")),input)));
		} else if(stx_ds_LinkedList.has(head.evalSet,p)) {
			head.evalSet = stx_ds_LinkedList.filter(head.evalSet,function(x) {
				return x != p;
			});
			var res = p.apply(input);
			var memo = stx_parse_core_MemoEntry.MemoParsed(res);
			var key = genKey(input.content.index);
			input.memo.memoEntries.h[key] = memo;
			return haxe_ds_Option.Some(memo);
		} else {
			return cached;
		}
		break;
	case 1:
		return cached;
	}
};
stx_parse_core_LRLift.setupLR = function(p,input,recDetect) {
	if(recDetect.head == haxe_ds_Option.None) {
		recDetect.head = haxe_ds_Option.Some(stx_parse_Parser.mkHead(p));
	}
	var stack = input.memo.lrStack;
	var h = stx_pico_OptionLift.fudge(recDetect.head);
	while(stx_ds_LinkedList.head(stack) != null && stx_ds_LinkedList.head(stack).rule != p) {
		var head = stx_ds_LinkedList.head(stack);
		head.head = recDetect.head;
		h.involvedSet = stx_ds_LinkedList.cons(h.involvedSet,head.rule);
		stack = stx_ds_LinkedList.tail(stack);
	}
};
stx_parse_core_LRLift.grow = function(p,genKey,rest,head) {
	rest.memo.recursionHeads.h[rest.content.index + ""] = head;
	var oldRes;
	var key = genKey(rest.content.index);
	var res = rest.memo.memoEntries.h[key];
	var _g = stx_pico_OptionLift.fudge(res == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res));
	if(_g._hx_index == 0) {
		var ans = _g.ans;
		oldRes = ans;
	} else {
		throw haxe_Exception.thrown("impossible match");
	}
	head.evalSet = head.involvedSet;
	if(p == null) {
		throw haxe_Exception.thrown("undefined parse delegate");
	}
	var res = p.apply(rest);
	if(res.get_error().is_defined() == false) {
		if(stx_parse_ParseInput.get_offset(oldRes.asset) < stx_parse_ParseInput.get_offset(res.asset)) {
			var entry = stx_parse_core_MemoEntry.MemoParsed(res);
			var key = genKey(rest.content.index);
			rest.memo.memoEntries.h[key] = entry;
			return stx_parse_core_LRLift.grow(p,genKey,rest,head);
		} else {
			var key = rest.content.index + "";
			var _this = rest.memo.recursionHeads;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			var key = genKey(rest.content.index);
			var res1 = rest.memo.memoEntries.h[key];
			var _g = stx_pico_OptionLift.fudge(res1 == null ? haxe_ds_Option.None : haxe_ds_Option.Some(res1));
			if(_g._hx_index == 0) {
				var ans = _g.ans;
				return ans;
			} else {
				throw haxe_Exception.thrown("impossible match");
			}
		}
	} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
		return stx_LiftIf.if_else(memo,function() {
			return true;
		},function() {
			var self = next.get_data();
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_fail_DeclineLift.fold(t,function(x) {
					return x.fatal;
				},function(_) {
					return false;
				});
			case 1:
				return false;
			}
		});
	},false)) {
		var entry = stx_parse_core_MemoEntry.MemoParsed(res);
		var key = genKey(rest.content.index);
		rest.memo.memoEntries.h[key] = entry;
		var key = rest.content.index + "";
		var _this = rest.memo.recursionHeads;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
		return res;
	} else {
		var key = rest.content.index + "";
		var _this = rest.memo.recursionHeads;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
		return oldRes;
	}
};
var stx_parse_core_LR = {};
stx_parse_core_LR.pos = function(this1) {
	return this1.seed.asset;
};
var stx_parse_core_Lung = {};
stx_parse_core_Lung.unit = function() {
	return stx_parse_core_Lung._new();
};
stx_parse_core_Lung.lift = function(self) {
	return stx_parse_core_Lung._new(self);
};
stx_parse_core_Lung._new = function(self) {
	var this1;
	var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,self);
	if(self1._hx_index == 0) {
		var v = self1.v;
		this1 = v;
	} else {
		this1 = new haxe_ds_IntMap();
	}
	return this1;
};
stx_parse_core_Lung.get = function(this1,i) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this1.h[i]);
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		var o = [];
		this1.h[i] = o;
		return o;
	}
};
stx_parse_core_Lung.push = function(this1,i,str) {
	var next = stx_parse_core_Lung.copy(this1);
	stx_parse_core_Lung.get(next,i).push(str);
	return next;
};
stx_parse_core_Lung.copy = function(this1) {
	var next = new haxe_ds_IntMap();
	var map = this1;
	var _g_map = map;
	var _g_keys = map.keys();
	while(_g_keys.hasNext()) {
		var key = _g_keys.next();
		var _g_value = _g_map.get(key);
		var _g_key = key;
		var key1 = _g_key;
		var val = _g_value;
		var value = val.slice();
		next.h[key1] = value;
	}
	return stx_parse_core_Lung.lift(next);
};
var stx_parse_core_MemoEntry = $hxEnums["stx.parse.core.MemoEntry"] = { __ename__:"stx.parse.core.MemoEntry",__constructs__:null
	,MemoParsed: ($_=function(ans) { return {_hx_index:0,ans:ans,__enum__:"stx.parse.core.MemoEntry",toString:$estr}; },$_._hx_name="MemoParsed",$_.__params__ = ["ans"],$_)
	,MemoLR: ($_=function(lr) { return {_hx_index:1,lr:lr,__enum__:"stx.parse.core.MemoEntry",toString:$estr}; },$_._hx_name="MemoLR",$_.__params__ = ["lr"],$_)
};
stx_parse_core_MemoEntry.__constructs__ = [stx_parse_core_MemoEntry.MemoParsed,stx_parse_core_MemoEntry.MemoLR];
var stx_parse_core_Memo = {};
stx_parse_core_Memo.unit = function() {
	return { symbols : new haxe_ds_ObjectMap(), memoEntries : new haxe_ds_StringMap(), recursionHeads : new haxe_ds_StringMap(), lrStack : stx_ds_LinkedList.unit()};
};
stx_parse_core_Memo.get = function(this1,key) {
	var value = this1.memoEntries.h[key];
	if(value == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
var stx_parse_core_MemoEntryLift = function() { };
$hxClasses["stx.parse.core.MemoEntryLift"] = stx_parse_core_MemoEntryLift;
stx_parse_core_MemoEntryLift.__name__ = "stx.parse.core.MemoEntryLift";
var stx_parse_core_Refuses = function() { };
$hxClasses["stx.parse.core.Refuses"] = stx_parse_core_Refuses;
stx_parse_core_Refuses.__name__ = "stx.parse.core.Refuses";
stx_parse_core_Refuses.e_parse_failure = function(digests) {
	return new stx_parse_core_EParseFailure();
};
var stx_parse_core_EParseFailure = function() {
	stx_fail_Digest.call(this,"01FRQ9XPNHGFY88XHMMSS8GBPZ","parse failed");
};
$hxClasses["stx.parse.core.EParseFailure"] = stx_parse_core_EParseFailure;
stx_parse_core_EParseFailure.__name__ = "stx.parse.core.EParseFailure";
stx_parse_core_EParseFailure.__super__ = stx_fail_Digest;
stx_parse_core_EParseFailure.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_parse_core_EParseFailure
});
var stx_parse_core_UID = {};
stx_parse_core_UID._new = function() {
	return stx_parse_core__$UID_UIDs.parserUid();
};
var stx_parse_core__$UID_UIDs = function() { };
$hxClasses["stx.parse.core._UID.UIDs"] = stx_parse_core__$UID_UIDs;
stx_parse_core__$UID_UIDs.__name__ = "stx.parse.core._UID.UIDs";
stx_parse_core__$UID_UIDs.parserUid = function() {
	if(stx_pico_OptionLift.is_defined(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_parse_core__$UID_UIDs._parserUid))) {
		return ++stx_parse_core__$UID_UIDs._parserUid;
	} else {
		return stx_parse_core__$UID_UIDs._parserUid = 0;
	}
};
var stx_parse_core_enumerable_term_Array = function(v,i) {
	stx_parse_core_EnumerableCls.call(this,v,i);
};
$hxClasses["stx.parse.core.enumerable.term.Array"] = stx_parse_core_enumerable_term_Array;
stx_parse_core_enumerable_term_Array.__name__ = "stx.parse.core.enumerable.term.Array";
stx_parse_core_enumerable_term_Array.__super__ = stx_parse_core_EnumerableCls;
stx_parse_core_enumerable_term_Array.prototype = $extend(stx_parse_core_EnumerableCls.prototype,{
	is_end: function() {
		return this.data.length <= this.index;
	}
	,match: function(e) {
		var _g = this.head();
		if(_g._hx_index == 0) {
			var x = _g.v;
			return e(x);
		} else {
			return false;
		}
	}
	,prepend: function(v) {
		var lhs = this.data.slice(0,this.index);
		var rhs = this.data.slice(this.index);
		return new stx_parse_core_enumerable_term_Array(lhs.concat(stx_lift_ArrayLift.cons(rhs,v)),this.index);
	}
	,take: function(len) {
		if(len == null) {
			len = this.data.length - this.index;
		}
		return stx_lift_ArrayLift.prj(this.data).slice(this.index,this.index + len);
	}
	,drop: function(i) {
		return new stx_parse_core_enumerable_term_Array(this.data,this.index + i);
	}
	,copy: function(index) {
		var tmp = this.data;
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,index);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.index;
		}
		return new stx_parse_core_enumerable_term_Array(tmp,tmp1).asEnumerable();
	}
	,head: function() {
		if(this.index >= this.data.length) {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/parse/core/enumerable/term/Array.hx", lineNumber : 33, className : "stx.parse.core.enumerable.term.Array", methodName : "head"});
			return stx_nano_ChunkSum.End(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_ParseFailureCodeSum.E_Parse_Eof)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		} else {
			var _g = this.data[this.index];
			if(_g == null) {
				return stx_nano_ChunkSum.Tap;
			} else {
				var x = _g;
				return stx_nano_ChunkSum.Val(x);
			}
		}
	}
	,__class__: stx_parse_core_enumerable_term_Array
});
var stx_parse_core_enumerable_term_LinkedList = function(data,index) {
	stx_parse_core_EnumerableCls.call(this,data,index);
};
$hxClasses["stx.parse.core.enumerable.term.LinkedList"] = stx_parse_core_enumerable_term_LinkedList;
stx_parse_core_enumerable_term_LinkedList.__name__ = "stx.parse.core.enumerable.term.LinkedList";
stx_parse_core_enumerable_term_LinkedList.__super__ = stx_parse_core_EnumerableCls;
stx_parse_core_enumerable_term_LinkedList.prototype = $extend(stx_parse_core_EnumerableCls.prototype,{
	is_end: function() {
		return !stx_ds_LinkedList.is_defined(this.data);
	}
	,match: function(fn) {
		var _g = this.head();
		if(_g._hx_index == 0) {
			var v = _g.v;
			return fn(v);
		} else {
			return false;
		}
	}
	,prepend: function(v) {
		return new stx_parse_core_enumerable_term_LinkedList(stx_ds_LinkedList.cons(this.data,v),this.index);
	}
	,take: function(len) {
		if(len == null) {
			return this.data;
		} else {
			var go = null;
			go = function(source,i) {
				if(i == 0) {
					return stx_LiftLinkedList.ds(stx_ds_LinkedListSum.Nil);
				} else if(source == null) {
					return stx_LiftLinkedList.ds(stx_ds_LinkedListSum.Nil);
				} else {
					switch(source._hx_index) {
					case 0:
						return stx_LiftLinkedList.ds(stx_ds_LinkedListSum.Nil);
					case 1:
						var x = source.head;
						var xs = source.tail;
						return stx_ds_LinkedList.cons(go(xs,i--),x);
					}
				}
			};
			return go(this.data,len);
		}
	}
	,drop: function(n) {
		var i = n;
		var x = this.data;
		while(i > 0) {
			if(x._hx_index == 1) {
				var x1 = x.head;
				var xs = x.tail;
				x = xs;
			} else {
				x = stx_ds_LinkedListSum.Nil;
			}
			--i;
		}
		return new stx_parse_core_enumerable_term_LinkedList(x,this.index + n);
	}
	,head: function() {
		if(this.index >= stx_ds_LinkedList.size(this.data)) {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/parse/core/enumerable/term/LinkedList.hx", lineNumber : 48, className : "stx.parse.core.enumerable.term.LinkedList", methodName : "head"});
			return stx_nano_ChunkSum.End(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_ParseFailureCodeSum.E_Parse_Eof)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		} else {
			return stx_nano_ChunkSum.Val(stx_ds_LinkedList.head(this.data));
		}
	}
	,copy: function(index) {
		var tmp = this.data;
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,index);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.index;
		}
		return new stx_parse_core_enumerable_term_LinkedList(tmp,tmp1).asEnumerable();
	}
	,__class__: stx_parse_core_enumerable_term_LinkedList
});
var stx_parse_core_enumerable_term_String = function(v,i) {
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/core/enumerable/term/String.hx", lineNumber : 7, className : "stx.parse.core.enumerable.term.String", methodName : "new"}).module.exists().apply(v);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v1 = self.v;
			throw haxe_Exception.thrown(v1);
		case 1:
			break;
		}
	}
	stx_parse_core_EnumerableCls.call(this,v,i);
};
$hxClasses["stx.parse.core.enumerable.term.String"] = stx_parse_core_enumerable_term_String;
stx_parse_core_enumerable_term_String.__name__ = "stx.parse.core.enumerable.term.String";
stx_parse_core_enumerable_term_String.__super__ = stx_parse_core_EnumerableCls;
stx_parse_core_enumerable_term_String.prototype = $extend(stx_parse_core_EnumerableCls.prototype,{
	is_end: function() {
		return this.data.length <= this.index;
	}
	,match: function(e) {
		var to_match = this.take();
		return e(to_match);
	}
	,prepend: function(v) {
		var left = HxOverrides.substr(this.data,0,this.index);
		var right = HxOverrides.substr(this.data,this.index,null);
		return new stx_parse_core_enumerable_term_String(this.data = left + v + right,this.index);
	}
	,take: function(len) {
		if(len == null) {
			len = this.data.length - this.index;
		}
		if(len == 0) {
			len = 1;
		}
		var out = HxOverrides.substr(this.data,this.index,len);
		return out;
	}
	,drop: function(i) {
		return new stx_parse_core_enumerable_term_String(this.data,this.index + i);
	}
	,head: function() {
		if(this.index >= this.data.length) {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/parse/core/enumerable/term/String.hx", lineNumber : 37, className : "stx.parse.core.enumerable.term.String", methodName : "head"});
			return stx_nano_ChunkSum.End(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_ParseFailureCodeSum.E_Parse_Eof)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
		} else {
			return stx_nano_ChunkSum.Val(this.data.charAt(this.index));
		}
	}
	,copy: function(index) {
		var tmp = this.data;
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,index);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.index;
		}
		return new stx_parse_core_enumerable_term_String(tmp,tmp1).asEnumerable();
	}
	,toString: function() {
		return "Enumerable(" + this.data + ")";
	}
	,__class__: stx_parse_core_enumerable_term_String
});
var stx_parse_lift_LiftArrayOfParser = function() { };
$hxClasses["stx.parse.lift.LiftArrayOfParser"] = stx_parse_lift_LiftArrayOfParser;
stx_parse_lift_LiftArrayOfParser.__name__ = "stx.parse.lift.LiftArrayOfParser";
stx_parse_lift_LiftArrayOfParser.ors = function(self) {
	var self1 = stx_lift_ArrayLift.lfold1(self,function(memo,next) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(memo,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
	});
	var this1 = new stx_parse_parser_term_Failed("No Parser in Array",false,{ fileName : "stx/parse/lift/LiftArrayOfParser.hx", lineNumber : 6, className : "stx.parse.lift.LiftArrayOfParser", methodName : "ors"});
	if(self1._hx_index == 0) {
		var v = self1.v;
		return v;
	} else {
		return this1;
	}
};
var stx_parse_lift_LiftArrayReader = function() { };
$hxClasses["stx.parse.lift.LiftArrayReader"] = stx_parse_lift_LiftArrayReader;
stx_parse_lift_LiftArrayReader.__name__ = "stx.parse.lift.LiftArrayReader";
stx_parse_lift_LiftArrayReader.reader = function(arr) {
	return stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(arr));
};
var stx_parse_lift_LiftClusterReader = function() { };
$hxClasses["stx.parse.lift.LiftClusterReader"] = stx_parse_lift_LiftClusterReader;
stx_parse_lift_LiftClusterReader.__name__ = "stx.parse.lift.LiftClusterReader";
stx_parse_lift_LiftClusterReader.reader = function(arr) {
	return stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj(arr)));
};
var stx_parse_lift_LiftLinkedListReader = function() { };
$hxClasses["stx.parse.lift.LiftLinkedListReader"] = stx_parse_lift_LiftLinkedListReader;
stx_parse_lift_LiftLinkedListReader.__name__ = "stx.parse.lift.LiftLinkedListReader";
stx_parse_lift_LiftLinkedListReader.reader = function(arr) {
	return stx_parse_ParseInput.pure(stx_parse_core_Enumerable.LinkedList(arr));
};
var stx_parse_lift_LiftParseFailureCodeRefuse = function() { };
$hxClasses["stx.parse.lift.LiftParseFailureCodeRefuse"] = stx_parse_lift_LiftParseFailureCodeRefuse;
stx_parse_lift_LiftParseFailureCodeRefuse.__name__ = "stx.parse.lift.LiftParseFailureCodeRefuse";
stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with = function(self,rest,fatal) {
	if(fatal == null) {
		fatal = false;
	}
	return stx_fail_Refuse.errate(self,function(e) {
		return stx_fail_ParseFailure.make(rest.content.index,e,fatal);
	});
};
var stx_parse_lift_LiftParseFailureCodeResult = function() { };
$hxClasses["stx.parse.lift.LiftParseFailureCodeResult"] = stx_parse_lift_LiftParseFailureCodeResult;
stx_parse_lift_LiftParseFailureCodeResult.__name__ = "stx.parse.lift.LiftParseFailureCodeResult";
stx_parse_lift_LiftParseFailureCodeResult.toParseResult_with = function(self,rest,fatal) {
	if(fatal == null) {
		fatal = false;
	}
	return stx_LiftParse.failure(stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with(self,rest,fatal),rest);
};
var stx_parse_lift_LiftStringReader = function() { };
$hxClasses["stx.parse.lift.LiftStringReader"] = stx_parse_lift_LiftStringReader;
stx_parse_lift_LiftStringReader.__name__ = "stx.parse.lift.LiftStringReader";
stx_parse_lift_LiftStringReader.reader = function(str) {
	return stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(str));
};
var stx_parse_module_Parsers = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.parse.module.Parsers"] = stx_parse_module_Parsers;
stx_parse_module_Parsers.__name__ = "stx.parse.module.Parsers";
stx_parse_module_Parsers.__super__ = stx_pico_Clazz;
stx_parse_module_Parsers.prototype = $extend(stx_pico_Clazz.prototype,{
	__class__: stx_parse_module_Parsers
});
var stx_parse_parser_term_Base = function(delegation,tag,pos) {
	stx_parse_ParserCls.call(this,tag,pos);
	this.delegation = delegation;
};
$hxClasses["stx.parse.parser.term.Base"] = stx_parse_parser_term_Base;
stx_parse_parser_term_Base.__name__ = "stx.parse.parser.term.Base";
stx_parse_parser_term_Base.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_Base.prototype = $extend(stx_parse_ParserCls.prototype,{
	delegation: null
	,check: function() {
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return "" + stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__));
	}
	,__class__: stx_parse_parser_term_Base
});
var stx_parse_parser_term_SyncBase = function(delegation,tag,pos) {
	stx_parse_parser_term_Base.call(this,null,tag,pos);
	this.delegation = delegation;
};
$hxClasses["stx.parse.parser.term.SyncBase"] = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_SyncBase.__name__ = "stx.parse.parser.term.SyncBase";
stx_parse_parser_term_SyncBase.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_SyncBase.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	__class__: stx_parse_parser_term_SyncBase
});
var stx_parse_parser_term_Sync = function(tag,id) {
	stx_parse_parser_term_SyncBase.call(this,0,tag,id);
};
$hxClasses["stx.parse.parser.term.Sync"] = stx_parse_parser_term_Sync;
stx_parse_parser_term_Sync.__name__ = "stx.parse.parser.term.Sync";
stx_parse_parser_term_Sync.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_Sync.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	__class__: stx_parse_parser_term_Sync
});
var stx_parse_parser_term_Always = function(tag,id) {
	stx_parse_parser_term_Sync.call(this,tag,id);
};
$hxClasses["stx.parse.parser.term.Always"] = stx_parse_parser_term_Always;
stx_parse_parser_term_Always.__name__ = "stx.parse.parser.term.Always";
stx_parse_parser_term_Always.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Always.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	apply: function(input) {
		var _g = input.content.head();
		switch(_g._hx_index) {
		case 0:
			var i = _g.v;
			return stx_LiftParse.nil(input);
		case 1:
			return stx_LiftParse.nil(input);
		case 2:
			var e = _g.err;
			return stx_parse_lift_LiftParseFailureCodeResult.toParseResult_with(e,input,false);
		}
	}
	,__class__: stx_parse_parser_term_Always
});
var stx_parse_parser_term_With = function(l,r,pos) {
	stx_parse_parser_term_Base.call(this,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r),null,pos);
};
$hxClasses["stx.parse.parser.term.With"] = stx_parse_parser_term_With;
stx_parse_parser_term_With.__name__ = "stx.parse.parser.term.With";
stx_parse_parser_term_With.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_With.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	transform: null
	,check: function() {
		var self = new stx_assert_Module({ fileName : "stx/parse/parser/term/With.hx", lineNumber : 17, className : "stx.parse.parser.term.With", methodName : "check"}).exists().apply(this.delegation);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,apply: function(input) {
		var res = stx_nano_CoupleLift.fst(this.delegation).apply(input);
		if(res.get_error().is_defined() == false) {
			var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/With.hx", lineNumber : 31, className : "stx.parse.parser.term.With", methodName : "apply"});
			var t = this.delegation;
			var self = _this.module.exists().apply(t);
			if(self != null) {
				switch(self._hx_index) {
				case 0:
					var v = self.v;
					throw haxe_Exception.thrown(v);
				case 1:
					break;
				}
			}
			var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/With.hx", lineNumber : 32, className : "stx.parse.parser.term.With", methodName : "apply"});
			var t = stx_nano_CoupleLift.snd(this.delegation);
			var self = _this.module.exists().apply(t);
			if(self != null) {
				switch(self._hx_index) {
				case 0:
					var v = self.v;
					throw haxe_Exception.thrown(v);
				case 1:
					break;
				}
			}
			var resI = stx_nano_CoupleLift.snd(this.delegation).apply(res.asset);
			if(resI.get_error().is_defined() == false) {
				var self = res.value;
				var result;
				if(self._hx_index == 0) {
					var v = self.v;
					result = v;
				} else {
					result = null;
				}
				var self = resI.value;
				var result1;
				if(self._hx_index == 0) {
					var v = self.v;
					result1 = v;
				} else {
					result1 = null;
				}
				var result2 = this.transform(result,result1);
				switch(result2._hx_index) {
				case 0:
					var x = result2.v;
					return stx_LiftParse.ok(resI.asset,x);
				case 1:
					return stx_LiftParse.nil(resI.asset);
				}
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(resI.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_parse_ParseResult.make(resI.asset,haxe_ds_Option.None,resI.get_error());
			} else {
				return stx_LiftParse.failure(stx_fail_Refuse.concat(resI.get_error(),stx_LiftParse.erration(input,stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed("With lhs"))),input);
			}
		} else {
			return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(input,stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed("With")),res.get_error()),input);
		}
	}
	,toString: function() {
		return "" + stx_nano_Couple.toString(this.delegation);
	}
	,__class__: stx_parse_parser_term_With
});
var stx_parse_parser_term_AndL = function(l,r,pos) {
	stx_parse_parser_term_With.call(this,l,r,pos);
};
$hxClasses["stx.parse.parser.term.AndL"] = stx_parse_parser_term_AndL;
stx_parse_parser_term_AndL.__name__ = "stx.parse.parser.term.AndL";
stx_parse_parser_term_AndL.__super__ = stx_parse_parser_term_With;
stx_parse_parser_term_AndL.prototype = $extend(stx_parse_parser_term_With.prototype,{
	check: function() {
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/AndL.hx", lineNumber : 8, className : "stx.parse.parser.term.AndL", methodName : "check"});
		var t = this.delegation;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,transform: function(lhs,rhs) {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,lhs);
	}
	,__class__: stx_parse_parser_term_AndL
});
var stx_parse_parser_term_AndR = function(l,r,pos) {
	stx_parse_parser_term_With.call(this,l,r,pos);
};
$hxClasses["stx.parse.parser.term.AndR"] = stx_parse_parser_term_AndR;
stx_parse_parser_term_AndR.__name__ = "stx.parse.parser.term.AndR";
stx_parse_parser_term_AndR.__super__ = stx_parse_parser_term_With;
stx_parse_parser_term_AndR.prototype = $extend(stx_parse_parser_term_With.prototype,{
	check: function() {
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/AndR.hx", lineNumber : 12, className : "stx.parse.parser.term.AndR", methodName : "check"});
		var t = this.delegation;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,transform: function(lhs,rhs) {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,rhs);
	}
	,__class__: stx_parse_parser_term_AndR
});
var stx_parse_parser_term_ThroughBind = function(delegate,pos) {
	stx_parse_ParserCls.call(this,null,pos);
	this.delegate = delegate;
};
$hxClasses["stx.parse.parser.term.ThroughBind"] = stx_parse_parser_term_ThroughBind;
stx_parse_parser_term_ThroughBind.__name__ = "stx.parse.parser.term.ThroughBind";
stx_parse_parser_term_ThroughBind.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_ThroughBind.prototype = $extend(stx_parse_ParserCls.prototype,{
	delegate: null
	,after: null
	,through_bind: null
	,apply: function(input) {
		var ok = this.delegate.apply(input);
		this.after = this.through_bind(input,ok);
		return this.after.apply(ok.asset);
	}
	,toString: function() {
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this.after),function(_) {
			return _.toString();
		});
		var n;
		if(self._hx_index == 0) {
			var v = self.v;
			n = v;
		} else {
			n = "?";
		}
		return "" + Std.string(this.delegate) + " => " + n;
	}
	,__class__: stx_parse_parser_term_ThroughBind
});
var stx_parse_parser_term_AndThen = function(delegation,flat_map,pos) {
	stx_parse_parser_term_ThroughBind.call(this,delegation,pos);
	this.flat_map = flat_map;
};
$hxClasses["stx.parse.parser.term.AndThen"] = stx_parse_parser_term_AndThen;
stx_parse_parser_term_AndThen.__name__ = "stx.parse.parser.term.AndThen";
stx_parse_parser_term_AndThen.__super__ = stx_parse_parser_term_ThroughBind;
stx_parse_parser_term_AndThen.prototype = $extend(stx_parse_parser_term_ThroughBind.prototype,{
	flat_map: null
	,through_bind: function(input,result) {
		var _gthis = this;
		return stx_nano_lift_LiftNano.if_else(result.get_error().is_defined() == false,function() {
			var self = stx_pico_OptionLift.map(result.value,_gthis.flat_map);
			var this1 = new stx_parse_parser_term_Stamp(stx_LiftParse.nil(result.asset),{ fileName : "stx/parse/parser/term/AndThen.hx", lineNumber : 14, className : "stx.parse.parser.term.AndThen", methodName : "through_bind"});
			if(self._hx_index == 0) {
				var v = self.v;
				return v;
			} else {
				return this1;
			}
		},function() {
			return new stx_parse_parser_term_Stamp(stx_parse_ParseResult.make(result.asset,haxe_ds_Option.None,result.get_error()),{ fileName : "stx/parse/parser/term/AndThen.hx", lineNumber : 15, className : "stx.parse.parser.term.AndThen", methodName : "through_bind"});
		});
	}
	,__class__: stx_parse_parser_term_AndThen
});
var stx_parse_parser_term_Anon = function(delegation,tag,pos) {
	stx_parse_parser_term_Base.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.Anon"] = stx_parse_parser_term_Anon;
stx_parse_parser_term_Anon.__name__ = "stx.parse.parser.term.Anon";
stx_parse_parser_term_Anon.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Anon.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(ipt) {
		return this.delegation(ipt);
	}
	,toString: function() {
		return "Anon(" + (this.tag == null ? "null" : stx_pico_Option.toString(this.tag)) + ")";
	}
	,__class__: stx_parse_parser_term_Anon
});
var stx_parse_parser_term_Then = function(delegation,pos) {
	stx_parse_parser_term_Base.call(this,delegation,null,pos);
	this.tag = delegation.tag;
};
$hxClasses["stx.parse.parser.term.Then"] = stx_parse_parser_term_Then;
stx_parse_parser_term_Then.__name__ = "stx.parse.parser.term.Then";
stx_parse_parser_term_Then.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Then.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	transform: null
	,check: function() {
		var self = stx_assert_PredicateLift.errata(new stx_assert_Module(this.pos).exists(),function(e) {
			var this1 = stx_nano_lift_LiftError.fault(e);
			return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_ParseFailureCodeSum.E_Parse_UndefinedParseDelegate)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
		}).apply(this.delegation);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,apply: function(input) {
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Then.hx", lineNumber : 16, className : "stx.parse.parser.term.Then", methodName : "apply"});
		var t = this.delegation;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
		var res = this.delegation.apply(input);
		var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(res));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Then.hx", lineNumber : 18, className : "stx.parse.parser.term.Then", methodName : "apply"}));
		if(res.get_error().is_defined() == false) {
			var fn = $bind(this,this.transform);
			var result = stx_parse_ParseResult.fromEquity(stx_nano_Equity._.map(res.toEquity(),function(opt) {
				return stx_pico_OptionLift.map(opt,fn);
			}));
			return result;
		} else {
			return stx_parse_ParseResult.make(res.asset,haxe_ds_Option.None,res.get_error());
		}
	}
	,toString: function() {
		return "" + Std.string(this.delegation) + "&";
	}
	,__class__: stx_parse_parser_term_Then
});
var stx_parse_parser_term_AnonThen = function(delegation,__transform,pos) {
	stx_parse_parser_term_Then.call(this,delegation,pos);
	this.__transform = __transform;
};
$hxClasses["stx.parse.parser.term.AnonThen"] = stx_parse_parser_term_AnonThen;
stx_parse_parser_term_AnonThen.__name__ = "stx.parse.parser.term.AnonThen";
stx_parse_parser_term_AnonThen.__super__ = stx_parse_parser_term_Then;
stx_parse_parser_term_AnonThen.prototype = $extend(stx_parse_parser_term_Then.prototype,{
	__transform: function(p) {
		return null;
	}
	,transform: function(p) {
		return this.__transform(p);
	}
	,__class__: stx_parse_parser_term_AnonThen
});
var stx_parse_parser_term_AnonWith = function(l,r,__transform,pos) {
	stx_parse_parser_term_With.call(this,l,r,pos);
	this.__transform = __transform;
};
$hxClasses["stx.parse.parser.term.AnonWith"] = stx_parse_parser_term_AnonWith;
stx_parse_parser_term_AnonWith.__name__ = "stx.parse.parser.term.AnonWith";
stx_parse_parser_term_AnonWith.__super__ = stx_parse_parser_term_With;
stx_parse_parser_term_AnonWith.prototype = $extend(stx_parse_parser_term_With.prototype,{
	__transform: function(lhs,rhs) {
		throw haxe_Exception.thrown("constructor not called");
	}
	,transform: function(lhs,rhs) {
		return this.__transform(lhs,rhs);
	}
	,__class__: stx_parse_parser_term_AnonWith
});
var stx_parse_parser_term_Bag = function(delegation,id) {
	stx_parse_parser_term_Base.call(this,delegation,null,id);
};
$hxClasses["stx.parse.parser.term.Bag"] = stx_parse_parser_term_Bag;
stx_parse_parser_term_Bag.__name__ = "stx.parse.parser.term.Bag";
stx_parse_parser_term_Bag.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Bag.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(input) {
		var _gthis = this;
		var parsers = this.delegation;
		var rec = null;
		rec = function(input,arr) {
			if(parsers.length == 0) {
				return stx_LiftParse.ok(input,arr);
			} else {
				var pr = null;
				var res = null;
				var _g = 0;
				var _g1 = _gthis.delegation;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					res = p.apply(input);
					if(res.get_error().is_defined() == false) {
						pr = p;
						break;
					}
				}
				if(res.get_error().is_defined() == false) {
					HxOverrides.remove(parsers,pr);
					var x = $iterator(stx_pico_OptionLift)(res.value);
					while(x.hasNext()) {
						var x1 = x.next();
						arr.push(x1);
					}
					return rec(res.asset,arr);
				} else {
					return stx_LiftParse.no(input,stx_fail_ParseFailureCode.fromString("Bag failed"));
				}
			}
		};
		return rec(input,[]);
	}
	,__class__: stx_parse_parser_term_Bag
});
var stx_parse_parser_term_BoundFun = function(parser,pos) {
	stx_parse_ParserCls.call(this,null,pos);
	this.parser = parser;
};
$hxClasses["stx.parse.parser.term.BoundFun"] = stx_parse_parser_term_BoundFun;
stx_parse_parser_term_BoundFun.__name__ = "stx.parse.parser.term.BoundFun";
stx_parse_parser_term_BoundFun.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_BoundFun.prototype = $extend(stx_parse_ParserCls.prototype,{
	parser: null
	,bound: null
	,apply: function(i) {
		return this.bound(i,this.parser.apply(i));
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var a = stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__));
		var b = this.parser.toString();
		return "" + a + "(" + b + ")";
	}
	,__class__: stx_parse_parser_term_BoundFun
});
var stx_parse_parser_term_CharCode = function(code,id) {
	stx_parse_parser_term_Sync.call(this,haxe_ds_Option.Some("code"),id);
	this.code = code;
};
$hxClasses["stx.parse.parser.term.CharCode"] = stx_parse_parser_term_CharCode;
stx_parse_parser_term_CharCode.__name__ = "stx.parse.parser.term.CharCode";
stx_parse_parser_term_CharCode.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_CharCode.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	code: null
	,apply: function(ipt) {
		var _gthis = this;
		var chk = ipt.content.head();
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			if(HxOverrides.cca(v,0) == _gthis.code) {
				return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),v);
			} else {
				return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("charcode not #" + _gthis.code));
			}
			break;
		case 1:
			return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("code failed"));
		case 2:
			var e = chk.err;
			return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("code failed")),stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with(e,ipt,false)),ipt);
		}
	}
	,toString: function() {
		var code = this.code;
		var v = String.fromCodePoint(code);
		return "'" + v + "'";
	}
	,__class__: stx_parse_parser_term_CharCode
});
var stx_parse_parser_term_Choose = function(delegation,tag,pos) {
	stx_parse_parser_term_SyncBase.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.Choose"] = stx_parse_parser_term_Choose;
stx_parse_parser_term_Choose.__name__ = "stx.parse.parser.term.Choose";
stx_parse_parser_term_Choose.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_Choose.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	apply: function(ipt) {
		var _gthis = this;
		var chk = ipt.content.head();
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			var self = _gthis.delegation(v);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),t);
			case 1:
				return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("predicate failed")),ipt);
			}
			break;
		case 1:
			return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("predicate failed"));
		case 2:
			var e = chk.err;
			return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("predicate failed")),stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with(e,ipt,false)),ipt);
		}
	}
	,__class__: stx_parse_parser_term_Choose
});
var stx_parse_parser_term_Commit = function(delegation,tag,pos) {
	stx_parse_parser_term_Base.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.Commit"] = stx_parse_parser_term_Commit;
stx_parse_parser_term_Commit.__name__ = "stx.parse.parser.term.Commit";
stx_parse_parser_term_Commit.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Commit.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(ipt) {
		return this.mod(this.delegation.apply(ipt));
	}
	,mod: function(result) {
		return stx_nano_lift_LiftNano.if_else(result.get_error().is_defined() == false,function() {
			return result;
		},function() {
			return stx_nano_lift_LiftNano.if_else(!stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(result.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false),function() {
				return result;
			},function() {
				return stx_parse_ParseResult.lift(result.errata(function(err) {
					return stx_fail_Refuse.concat(err,stx_fail_ParseFailure.toRefuse(stx_fail_ParseFailure.make(stx_parse_ParseInput.get_content(result.asset).index,stx_fail_ParseFailureCode.fromString("Cannot Commit"),true)));
				}));
			});
		});
	}
	,__class__: stx_parse_parser_term_Commit
});
var stx_parse_parser_term_CoupleWith = function(l,r,pos) {
	stx_parse_parser_term_With.call(this,l,r,pos);
};
$hxClasses["stx.parse.parser.term.CoupleWith"] = stx_parse_parser_term_CoupleWith;
stx_parse_parser_term_CoupleWith.__name__ = "stx.parse.parser.term.CoupleWith";
stx_parse_parser_term_CoupleWith.__super__ = stx_parse_parser_term_With;
stx_parse_parser_term_CoupleWith.prototype = $extend(stx_parse_parser_term_With.prototype,{
	transform: function(l,r) {
		return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,l,r));
	}
	,__class__: stx_parse_parser_term_CoupleWith
});
var stx_parse_parser_term_Delegate = function(delegation,pos) {
	stx_parse_parser_term_Base.call(this,delegation,null,pos);
	this.tag = delegation.tag;
};
$hxClasses["stx.parse.parser.term.Delegate"] = stx_parse_parser_term_Delegate;
stx_parse_parser_term_Delegate.__name__ = "stx.parse.parser.term.Delegate";
stx_parse_parser_term_Delegate.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Delegate.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	check: function() {
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,this.pos);
		var t = this.delegation;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
	}
	,apply: function(ipt) {
		return this.delegation.apply(ipt);
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return "" + stx_pico_Identifier.get_name(stx_pico_Identifier._new(c.__name__)) + "(" + Std.string(this.delegation) + ")";
	}
	,__class__: stx_parse_parser_term_Delegate
});
var stx_parse_parser_term_Eof = function(tag,id) {
	stx_parse_parser_term_Sync.call(this,tag,id);
};
$hxClasses["stx.parse.parser.term.Eof"] = stx_parse_parser_term_Eof;
stx_parse_parser_term_Eof.__name__ = "stx.parse.parser.term.Eof";
stx_parse_parser_term_Eof.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Eof.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	apply: function(input) {
		if(stx_parse_ParseInput.is_end(input)) {
			return stx_LiftParse.nil(input);
		} else {
			return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCodeSum.E_Parse_NotEof),input);
		}
	}
	,__class__: stx_parse_parser_term_Eof
});
var stx_parse_parser_term_Equals = function(value,tag,pos) {
	stx_parse_ParserCls.call(this,tag,pos);
	this.value = value;
};
$hxClasses["stx.parse.parser.term.Equals"] = stx_parse_parser_term_Equals;
stx_parse_parser_term_Equals.__name__ = "stx.parse.parser.term.Equals";
stx_parse_parser_term_Equals.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_Equals.prototype = $extend(stx_parse_ParserCls.prototype,{
	value: null
	,apply: function(input) {
		var _gthis = this;
		var chk = input.content.head();
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			if(_gthis.value == v) {
				return stx_LiftParse.ok(input.copy(input.content.drop(1)),v);
			} else {
				return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("eq")),input);
			}
			break;
		case 1:
			return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed("eq")),input);
		case 2:
			var e = chk.err;
			return stx_LiftParse.failure(stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with(e,input,false),input);
		}
	}
	,__class__: stx_parse_parser_term_Equals
});
var stx_parse_parser_term_Failed = function(msg,is_fatal,id) {
	if(is_fatal == null) {
		is_fatal = false;
	}
	stx_parse_parser_term_Sync.call(this,null,id);
	this.msg = msg;
	this.is_fatal = is_fatal;
};
$hxClasses["stx.parse.parser.term.Failed"] = stx_parse_parser_term_Failed;
stx_parse_parser_term_Failed.__name__ = "stx.parse.parser.term.Failed";
stx_parse_parser_term_Failed.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Failed.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	msg: null
	,is_fatal: null
	,apply: function(ipt) {
		return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString(this.msg),this.is_fatal),ipt);
	}
	,__class__: stx_parse_parser_term_Failed
});
var stx_parse_parser_term_Head = function(delegate,id) {
	stx_parse_parser_term_Sync.call(this,null,id);
	this.delegate = delegate;
};
$hxClasses["stx.parse.parser.term.Head"] = stx_parse_parser_term_Head;
stx_parse_parser_term_Head.__name__ = "stx.parse.parser.term.Head";
stx_parse_parser_term_Head.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Head.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	delegate: null
	,apply: function(ipt) {
		var _gthis = this;
		var head = ipt.content.head();
		switch(head._hx_index) {
		case 0:
			var v = head.v;
			var self = _gthis.delegate(v);
			switch(self._hx_index) {
			case 0:
				var t = self.v;
				return stx_nano_CoupleLift.decouple(t,function(o,i) {
					var tmp;
					switch(i._hx_index) {
					case 0:
						var t = i.v;
						tmp = stx_parse_ParseInput.prepend(ipt,t);
						break;
					case 1:
						tmp = ipt;
						break;
					}
					return stx_LiftParse.ok(tmp,o);
				});
			case 1:
				return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("no head"));
			}
			break;
		case 1:
			return stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("no head"));
		case 2:
			var e = head.err;
			return stx_parse_lift_LiftParseFailureCodeResult.toParseResult_with(e,ipt);
		}
	}
	,__class__: stx_parse_parser_term_Head
});
var stx_parse_parser_term_Identifier = function(stamp,id) {
	stx_parse_parser_term_Sync.call(this,null,id);
	this.stamp = stamp;
};
$hxClasses["stx.parse.parser.term.Identifier"] = stx_parse_parser_term_Identifier;
stx_parse_parser_term_Identifier.__name__ = "stx.parse.parser.term.Identifier";
stx_parse_parser_term_Identifier.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Identifier.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	stamp: null
	,apply: function(ipt) {
		var len = this.stamp.length;
		var head = ipt.content.head();
		var offset = stx_parse_ParseInput.get_offset(ipt);
		var string = ipt.content.take(len);
		if(string == this.stamp) {
			var next = ipt.copy(ipt.content.drop(this.stamp.length));
			return stx_LiftParse.ok(next,this.stamp);
		} else {
			return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("\"Identifier expected *** " + this.stamp + " *** instead found: *** " + string + " ***"),false),ipt);
		}
	}
	,toString: function() {
		return "\"" + this.stamp + "\"";
	}
	,__class__: stx_parse_parser_term_Identifier
});
var stx_parse_parser_term_Inspect = function(delegation,prefix,postfix,id) {
	stx_parse_parser_term_Delegate.call(this,delegation,id);
	if(stx_nano_Report.is_ok(new stx_assert_Module({ fileName : "stx/parse/parser/term/Inspect.hx", lineNumber : 16, className : "stx.parse.parser.term.Inspect", methodName : "new"}).exists().apply(prefix))) {
		this.prefix = prefix;
	}
	if(stx_nano_Report.is_ok(new stx_assert_Module({ fileName : "stx/parse/parser/term/Inspect.hx", lineNumber : 19, className : "stx.parse.parser.term.Inspect", methodName : "new"}).exists().apply(postfix))) {
		this.postfix = postfix;
	}
};
$hxClasses["stx.parse.parser.term.Inspect"] = stx_parse_parser_term_Inspect;
stx_parse_parser_term_Inspect.__name__ = "stx.parse.parser.term.Inspect";
stx_parse_parser_term_Inspect.__super__ = stx_parse_parser_term_Delegate;
stx_parse_parser_term_Inspect.prototype = $extend(stx_parse_parser_term_Delegate.prototype,{
	prefix: function(input) {
		var tmp = input.tag != null;
	}
	,postfix: function(result) {
		var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString(stx_parse_ParseResultLift.toString(result));
		var pos = this.pos;
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos(pos));
	}
	,apply: function(input) {
		this.prefix(input);
		var out = this.delegation.apply(input);
		this.postfix(out);
		return out;
	}
	,toString: function() {
		return "" + Std.string(this.delegation);
	}
	,__class__: stx_parse_parser_term_Inspect
});
var stx_parse_parser_term_LAnon = function(closure,id) {
	stx_parse_parser_term_Base.call(this,null,null,id);
	this.closure = closure;
};
$hxClasses["stx.parse.parser.term.LAnon"] = stx_parse_parser_term_LAnon;
stx_parse_parser_term_LAnon.__name__ = "stx.parse.parser.term.LAnon";
stx_parse_parser_term_LAnon.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_LAnon.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	closure: null
	,open: function() {
		this.delegation = this.closure();
	}
	,apply: function(ipt) {
		if(this.delegation == null) {
			this.open();
			var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/LAnon.hx", lineNumber : 19, className : "stx.parse.parser.term.LAnon", methodName : "apply"});
			var t = this.delegation;
			var self = _this.module.exists().apply(t);
			if(self != null) {
				switch(self._hx_index) {
				case 0:
					var v = self.v;
					throw haxe_Exception.thrown(v);
				case 1:
					break;
				}
			}
			return this.delegation.apply(ipt);
		} else {
			return this.delegation.apply(ipt);
		}
	}
	,__class__: stx_parse_parser_term_LAnon
});
var stx_parse_parser_term_Mod = function(delegate,tag,pos) {
	stx_parse_ParserCls.call(this,tag,pos);
	this.delegate = delegate;
};
$hxClasses["stx.parse.parser.term.Mod"] = stx_parse_parser_term_Mod;
stx_parse_parser_term_Mod.__name__ = "stx.parse.parser.term.Mod";
stx_parse_parser_term_Mod.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_Mod.prototype = $extend(stx_parse_ParserCls.prototype,{
	delegate: null
	,bound: null
	,apply: function(input) {
		return this.bound(input,this.delegate.apply(input));
	}
	,__class__: stx_parse_parser_term_Mod
});
var stx_parse_parser_term_Lookahead = function(delegate,tag,pos) {
	stx_parse_parser_term_Mod.call(this,delegate,tag,pos);
};
$hxClasses["stx.parse.parser.term.Lookahead"] = stx_parse_parser_term_Lookahead;
stx_parse_parser_term_Lookahead.__name__ = "stx.parse.parser.term.Lookahead";
stx_parse_parser_term_Lookahead.__super__ = stx_parse_parser_term_Mod;
stx_parse_parser_term_Lookahead.prototype = $extend(stx_parse_parser_term_Mod.prototype,{
	bound: function(input,result) {
		return stx_nano_lift_LiftNano.if_else(result.get_error().is_defined() == false,function() {
			return stx_LiftParse.nil(input);
		},function() {
			return result;
		});
	}
	,toString: function() {
		return "Lookahead(" + Std.string(this.delegate) + ")";
	}
	,__class__: stx_parse_parser_term_Lookahead
});
var stx_parse_parser_term_Many = function(delegation,id) {
	stx_parse_parser_term_Base.call(this,delegation,null,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
$hxClasses["stx.parse.parser.term.Many"] = stx_parse_parser_term_Many;
stx_parse_parser_term_Many.__name__ = "stx.parse.parser.term.Many";
stx_parse_parser_term_Many.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Many.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	check: function() {
	}
	,apply: function(inputI) {
		var _gthis = this;
		var arr = [];
		var out = haxe_ds_Option.None;
		var ipt = inputI;
		var step = function() {
			var res = _gthis.delegation.apply(ipt);
			if(res.get_error().is_defined() == false) {
				var _g = res.value;
				if(_g != null) {
					if(_g._hx_index == 0) {
						var x = _g.v;
						arr.push(x);
					}
				}
				ipt = res.asset;
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				out = haxe_ds_Option.Some(stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(inputI,stx_fail_ParseFailureCode.fromString("failed many " + Std.string(_gthis.delegation)),true),res.get_error()),inputI));
			} else {
				out = haxe_ds_Option.Some(stx_LiftParse.ok(ipt,arr));
			}
		};
		while(!stx_pico_OptionLift.is_defined(out)) step();
		var v = stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("FAIL"));
		if(out._hx_index == 0) {
			var v1 = out.v;
			return v1;
		} else {
			return v;
		}
	}
	,toString: function() {
		return "Many(" + Std.string(this.delegation) + ")";
	}
	,__class__: stx_parse_parser_term_Many
});
var stx_parse_parser_term_Materialize = function(delegation,tag,pos) {
	stx_parse_parser_term_Base.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.Materialize"] = stx_parse_parser_term_Materialize;
stx_parse_parser_term_Materialize.__name__ = "stx.parse.parser.term.Materialize";
stx_parse_parser_term_Materialize.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Materialize.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(ipt) {
		var result = this.delegation.apply(ipt);
		if(stx_nano_EquityLift.is_defined(result)) {
			return result;
		} else {
			return stx_LiftParse.failure(stx_LiftParse.erration(result.asset,stx_fail_ParseFailureCode.fromString("result of " + Std.string(this.delegation) + " is not defined ")),result.asset);
		}
	}
	,__class__: stx_parse_parser_term_Materialize
});
var stx_parse_parser_term_Memoise = function(delegation,pos) {
	stx_parse_parser_term_Base.call(this,delegation,null,pos);
	this.uid = stx_parse_core_UID._new();
};
$hxClasses["stx.parse.parser.term.Memoise"] = stx_parse_parser_term_Memoise;
stx_parse_parser_term_Memoise.__name__ = "stx.parse.parser.term.Memoise";
stx_parse_parser_term_Memoise.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Memoise.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	uid: null
	,genKey: function(pos) {
		return this.uid + "@" + pos;
	}
	,apply: function(ipt) {
		var memo = stx_parse_core_LRLift.recall(this.delegation,$bind(this,this.genKey),ipt);
		switch(memo._hx_index) {
		case 0:
			var mEntry = memo.v;
			switch(mEntry._hx_index) {
			case 0:
				var ans = mEntry.ans;
				return ans;
			case 1:
				var recDetect = mEntry.lr;
				stx_parse_core_LR._.setupLR(this.delegation,ipt,recDetect);
				return recDetect.seed;
			}
			break;
		case 1:
			var base = stx_parse_ParseResultLift.mkLR(stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString(stx_fail_ParseFailure.FAIL),false),ipt),this.delegation,haxe_ds_Option.None);
			ipt.memo.lrStack = stx_ds_LinkedList.cons(ipt.memo.lrStack,base);
			var entry = stx_parse_core_MemoEntry.MemoLR(base);
			var key = this.genKey(ipt.content.index);
			ipt.memo.memoEntries.h[key] = entry;
			var res = this.delegation.apply(ipt);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + Std.string(res));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Memoise.hx", lineNumber : 27, className : "stx.parse.parser.term.Memoise", methodName : "apply"}));
			ipt.memo.lrStack = stx_ds_LinkedList.tail(ipt.memo.lrStack);
			var _g = base.head;
			switch(_g._hx_index) {
			case 0:
				var _g1 = _g.v;
				base.seed = res;
				return stx_parse_core_LRLift.lrAnswer(this.delegation,$bind(this,this.genKey),ipt,base);
			case 1:
				var entry = stx_parse_core_MemoEntry.MemoParsed(res);
				var key = this.genKey(ipt.content.index);
				ipt.memo.memoEntries.h[key] = entry;
				return res;
			}
			break;
		}
	}
	,__class__: stx_parse_parser_term_Memoise
});
var stx_parse_parser_term_Named = function(delegation,name) {
	stx_parse_parser_term_Base.call(this,delegation,null,delegation.pos);
	this.tag = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,name);
};
$hxClasses["stx.parse.parser.term.Named"] = stx_parse_parser_term_Named;
stx_parse_parser_term_Named.__name__ = "stx.parse.parser.term.Named";
stx_parse_parser_term_Named.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Named.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(ipt) {
		return this.delegation.apply(ipt);
	}
	,toString: function() {
		var self = this.tag;
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return "named";
		}
	}
	,__class__: stx_parse_parser_term_Named
});
var stx_parse_parser_term_Never = function(tag,id) {
	stx_parse_parser_term_Sync.call(this,tag,id);
};
$hxClasses["stx.parse.parser.term.Never"] = stx_parse_parser_term_Never;
stx_parse_parser_term_Never.__name__ = "stx.parse.parser.term.Never";
stx_parse_parser_term_Never.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Never.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	apply: function(input) {
		return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("Never")),input);
	}
	,__class__: stx_parse_parser_term_Never
});
var stx_parse_parser_term_Not = function(parser,pos) {
	stx_parse_parser_term_BoundFun.call(this,parser,pos);
};
$hxClasses["stx.parse.parser.term.Not"] = stx_parse_parser_term_Not;
stx_parse_parser_term_Not.__name__ = "stx.parse.parser.term.Not";
stx_parse_parser_term_Not.__super__ = stx_parse_parser_term_BoundFun;
stx_parse_parser_term_Not.prototype = $extend(stx_parse_parser_term_BoundFun.prototype,{
	bound: function(input,result) {
		var _gthis = this;
		return stx_nano_lift_LiftNano.if_else(result.get_error().is_defined() == false,function() {
			return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("Parser \"" + (_gthis.parser.tag == null ? "null" : stx_pico_Option.toString(_gthis.parser.tag)) + "\" succeeded rather than failed in Not")),input);
		},function() {
			if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(result.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return result;
			} else {
				return stx_LiftParse.nil(input);
			}
		});
	}
	,toString: function() {
		return "NOT " + Std.string(this.parser);
	}
	,__class__: stx_parse_parser_term_Not
});
var stx_parse_parser_term_Nothing = function(tag,id) {
	stx_parse_parser_term_Sync.call(this,tag,id);
};
$hxClasses["stx.parse.parser.term.Nothing"] = stx_parse_parser_term_Nothing;
stx_parse_parser_term_Nothing.__name__ = "stx.parse.parser.term.Nothing";
stx_parse_parser_term_Nothing.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Nothing.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	apply: function(input) {
		return stx_LiftParse.nil(input);
	}
	,__class__: stx_parse_parser_term_Nothing
});
var stx_parse_parser_term_OneMany = function(l,pos) {
	stx_parse_parser_term_With.call(this,l,new stx_parse_parser_term_Option(new stx_parse_parser_term_Many(l,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"}),{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 94, className : "stx.parse.parser.ParserLift", methodName : "option"}),pos);
};
$hxClasses["stx.parse.parser.term.OneMany"] = stx_parse_parser_term_OneMany;
stx_parse_parser_term_OneMany.__name__ = "stx.parse.parser.term.OneMany";
stx_parse_parser_term_OneMany.__super__ = stx_parse_parser_term_With;
stx_parse_parser_term_OneMany.prototype = $extend(stx_parse_parser_term_With.prototype,{
	transform: function(lhs,rhs) {
		return stx_pico_OptionLift.or(stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,lhs),function(oI) {
			var arr = [];
			arr.push(oI);
			var a = $iterator(stx_pico_OptionLift)(stx_pico_OptionLift.flatten(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,rhs)));
			while(a.hasNext()) {
				var a1 = a.next();
				var _g = 0;
				while(_g < a1.length) {
					var v = a1[_g];
					++_g;
					arr.push(v);
				}
			}
			return arr;
		}),function() {
			return stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,rhs),function(x) {
				return x;
			});
		});
	}
	,toString: function() {
		return "OneMany(" + (this.delegation == null ? "null" : stx_nano_Couple.toString(this.delegation)) + ")";
	}
	,__class__: stx_parse_parser_term_OneMany
});
var stx_parse_parser_term_Option = function(delegation,pos) {
	stx_parse_parser_term_Base.call(this,delegation,null,pos);
};
$hxClasses["stx.parse.parser.term.Option"] = stx_parse_parser_term_Option;
stx_parse_parser_term_Option.__name__ = "stx.parse.parser.term.Option";
stx_parse_parser_term_Option.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Option.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(input) {
		var result = this.delegation.apply(input);
		if(stx_nano_EquityLift.has_error(result)) {
			if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(result.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_parse_ParseResult.fromEquity(stx_nano_Equity._.map(result.toEquity(),function(opt) {
					return stx_pico_OptionLift.map(opt,haxe_ds_Option.Some);
				}));
			} else {
				return stx_LiftParse.ok(input,haxe_ds_Option.None);
			}
		} else {
			return stx_parse_ParseResult.fromEquity(stx_nano_Equity._.map(result.toEquity(),function(opt) {
				return stx_pico_OptionLift.map(opt,haxe_ds_Option.Some);
			}));
		}
	}
	,toString: function() {
		return "" + Std.string(this.delegation) + "?";
	}
	,__class__: stx_parse_parser_term_Option
});
var stx_parse_parser_term_Or = function(lhs,rhs,pos) {
	stx_parse_ParserCls.call(this,null,pos);
	this.lhs = lhs;
	this.rhs = rhs;
};
$hxClasses["stx.parse.parser.term.Or"] = stx_parse_parser_term_Or;
stx_parse_parser_term_Or.__name__ = "stx.parse.parser.term.Or";
stx_parse_parser_term_Or.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_Or.prototype = $extend(stx_parse_ParserCls.prototype,{
	lhs: null
	,rhs: null
	,apply: function(input) {
		var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Or.hx", lineNumber : 18, className : "stx.parse.parser.term.Or", methodName : "apply"}).module.exists().apply(input);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Or.hx", lineNumber : 19, className : "stx.parse.parser.term.Or", methodName : "apply"});
		var t = this.lhs;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
		var result = this.lhs.apply(input);
		if(result.get_error().is_defined() == false) {
			return result;
		} else {
			var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Or.hx", lineNumber : 31, className : "stx.parse.parser.term.Or", methodName : "apply"});
			var t = this.rhs;
			var self = _this.module.exists().apply(t);
			if(self != null) {
				switch(self._hx_index) {
				case 0:
					var v = self.v;
					throw haxe_Exception.thrown(v);
				case 1:
					break;
				}
			}
			return this.rhs.apply(input);
		}
	}
	,toString: function() {
		return "" + Std.string(this.lhs) + " | " + Std.string(this.rhs);
	}
	,__class__: stx_parse_parser_term_Or
});
var stx_parse_parser_term_Ors = function(delegation,id) {
	stx_parse_parser_term_Base.call(this,delegation,null,id);
};
$hxClasses["stx.parse.parser.term.Ors"] = stx_parse_parser_term_Ors;
stx_parse_parser_term_Ors.__name__ = "stx.parse.parser.term.Ors";
stx_parse_parser_term_Ors.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Ors.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	check: function() {
		var _g = 0;
		var _g1 = this.delegation;
		while(_g < _g1.length) {
			var delegate = _g1[_g];
			++_g;
			var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Ors.hx", lineNumber : 9, className : "stx.parse.parser.term.Ors", methodName : "check"}).module.exists().apply(delegate);
			if(self != null) {
				switch(self._hx_index) {
				case 0:
					var v = self.v;
					throw haxe_Exception.thrown(v);
				case 1:
					break;
				}
			}
		}
	}
	,apply: function(input) {
		var _gthis = this;
		var idx = 1;
		var res = this.delegation[0].apply(input);
		var rec = function(res) {
			if(res.get_error().is_defined() == false) {
				return res;
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return res;
			} else if(idx < _gthis.delegation.length) {
				var n = idx;
				idx += 1;
				var d = _gthis.delegation[n];
				var resI = d.apply(res.asset);
				if(resI.get_error().is_defined() != false) {
					return stx_parse_ParseResult.make(resI.asset,haxe_ds_Option.None,resI.get_error());
				} else {
					return resI;
				}
			} else {
				var _this = _gthis.delegation;
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = _this[i].tag;
				}
				var opts = result;
				return stx_parse_ParseResult.make(res.asset,haxe_ds_Option.None,res.get_error());
			}
		};
		return rec(res);
	}
	,__class__: stx_parse_parser_term_Ors
});
var stx_parse_parser_term_Position = function(delegate,pos) {
	stx_parse_parser_term_ThroughBind.call(this,delegate,pos);
};
$hxClasses["stx.parse.parser.term.Position"] = stx_parse_parser_term_Position;
stx_parse_parser_term_Position.__name__ = "stx.parse.parser.term.Position";
stx_parse_parser_term_Position.__super__ = stx_parse_parser_term_ThroughBind;
stx_parse_parser_term_Position.prototype = $extend(stx_parse_parser_term_ThroughBind.prototype,{
	through_bind: function(input,result) {
		var result1 = new stx_parse_parser_term_PositionReport(stx_parse_ParseInput.get_content(result.asset).index,"error").apply(input.copy(stx_parse_ParseInput.get_content(input).zero()));
		return new stx_parse_parser_term_Stamp(result1,{ fileName : "stx/parse/parser/term/Position.hx", lineNumber : 9, className : "stx.parse.parser.term.Position", methodName : "through_bind"});
	}
	,__class__: stx_parse_parser_term_Position
});
var stx_parse_parser_term_PositionReport = function(cursor,error,pos) {
	stx_parse_parser_term_SyncBase.call(this,pos,null,{ fileName : "stx/parse/parser/term/PositionReport.hx", lineNumber : 10, className : "stx.parse.parser.term.PositionReport", methodName : "new"});
	this.cursor = cursor;
	this.error = error;
};
$hxClasses["stx.parse.parser.term.PositionReport"] = stx_parse_parser_term_PositionReport;
stx_parse_parser_term_PositionReport.__name__ = "stx.parse.parser.term.PositionReport";
stx_parse_parser_term_PositionReport.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_PositionReport.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	cursor: null
	,error: null
	,apply: function(ipt) {
		var count = 0;
		var line = 1;
		var column = 0;
		var i = ipt;
		var result = stx_LiftParse.no(ipt,stx_fail_ParseFailureCode.fromString("default error"));
		while(true) if(count == this.cursor) {
			result = stx_LiftParse.no(ipt,stx_fail_ParseFailureCodeSum.E_Parse_ParseFailed(this.error,{ line : line, column : column}),true);
			break;
		} else if(stx_parse_ParseInput.get_content(i).match(function(x) {
			return StringTools.startsWith(x,"\n");
		})) {
			++line;
			column = 0;
			++count;
			i = i.copy(i.content.drop(1));
		} else if(stx_parse_ParseInput.get_content(i).match(function(x) {
			return StringTools.startsWith(x,"\r\n");
		})) {
			++line;
			column = 0;
			count += 2;
			var this1 = i.copy(i.content.drop(1));
			i = this1.copy(this1.content.drop(1));
		} else {
			++count;
			++column;
			i = i.copy(i.content.drop(1));
		}
		return result;
	}
	,__class__: stx_parse_parser_term_PositionReport
});
var stx_parse_parser_term_Range = function(min,max,pos) {
	stx_parse_parser_term_Sync.call(this,null,pos);
	this.min = min;
	this.max = max;
};
$hxClasses["stx.parse.parser.term.Range"] = stx_parse_parser_term_Range;
stx_parse_parser_term_Range.__name__ = "stx.parse.parser.term.Range";
stx_parse_parser_term_Range.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Range.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	min: null
	,max: null
	,apply: function(ipt) {
		var _gthis = this;
		var _g = ipt.content.head();
		if(_g._hx_index == 0) {
			var s = _g.v;
			var x = s.charCodeAt(0);
			var v = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x);
			var self = stx_pico_OptionLift.map(v,function(x) {
				return x >= _gthis.min;
			});
			var l;
			if(self._hx_index == 0) {
				var v1 = self.v;
				l = v1;
			} else {
				l = false;
			}
			var self = stx_pico_OptionLift.map(v,function(x) {
				return x <= _gthis.max;
			});
			var r;
			if(self._hx_index == 0) {
				var v = self.v;
				r = v;
			} else {
				r = false;
			}
			if(l && r) {
				return stx_LiftParse.ok(ipt.copy(ipt.content.drop(1)),s);
			} else {
				return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("range: " + this.min + " -> " + this.max)),ipt);
			}
		} else {
			return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("null head")),ipt);
		}
	}
	,toString: function() {
		var code = this.min;
		var l = String.fromCodePoint(code);
		var code = this.max;
		var r = String.fromCodePoint(code);
		return "Range[" + l + "..." + r + "]";
	}
	,__class__: stx_parse_parser_term_Range
});
var stx_parse_parser_term_RefuseTransformer = function(delegation,transformer,pos) {
	stx_parse_parser_term_Base.call(this,delegation,null,pos);
	this.transformer = transformer;
};
$hxClasses["stx.parse.parser.term.RefuseTransformer"] = stx_parse_parser_term_RefuseTransformer;
stx_parse_parser_term_RefuseTransformer.__name__ = "stx.parse.parser.term.RefuseTransformer";
stx_parse_parser_term_RefuseTransformer.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_RefuseTransformer.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	transformer: null
	,apply: function(input) {
		var result = this.delegation.apply(input);
		return this.mod(result);
	}
	,mod: function(result) {
		var out = result.errata(this.transformer);
		return stx_parse_ParseResult.lift(out);
	}
	,toString: function() {
		return this.delegation.toString();
	}
	,__class__: stx_parse_parser_term_RefuseTransformer
});
var stx_parse_parser_term_Regex = function(stamp,id) {
	stx_parse_parser_term_Sync.call(this,null,id);
	this.stamp = stamp;
	this.tag = haxe_ds_Option.Some("Regex(" + stamp + ")");
};
$hxClasses["stx.parse.parser.term.Regex"] = stx_parse_parser_term_Regex;
stx_parse_parser_term_Regex.__name__ = "stx.parse.parser.term.Regex";
stx_parse_parser_term_Regex.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Regex.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	stamp: null
	,apply: function(ipt) {
		var reg = new EReg(this.stamp,"g");
		var is_matched = ipt.content.match($bind(reg,reg.match));
		var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("stamp=\"" + this.stamp + "\" matching: " + Std.string(ipt.content.take(100)) + " is_matched=\"" + (is_matched == null ? "null" : "" + is_matched) + "\" ");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Regex.hx", lineNumber : 17, className : "stx.parse.parser.term.Regex", methodName : "apply"}));
		if(is_matched) {
			var match = reg.matched(0);
			var length = match.length;
			var next = ipt.copy(ipt.content.drop(length));
			var data = ipt.content.take(length);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("length " + match.length + " data " + data + " index: " + stx_parse_ParseInput.get_content(next).index);
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Regex.hx", lineNumber : 24, className : "stx.parse.parser.term.Regex", methodName : "apply"}));
			return stx_LiftParse.ok(next,data);
		} else {
			return stx_LiftParse.failure(stx_LiftParse.erration(ipt,stx_fail_ParseFailureCode.fromString("" + this.stamp + " not matched to |||" + ipt.content.take(null) + "|||"),false),ipt);
		}
	}
	,toString: function() {
		return "~/" + this.stamp + "/";
	}
	,__class__: stx_parse_parser_term_Regex
});
var stx_parse_parser_term_Rep1Sep = function(delegate,sep,pos) {
	stx_parse_parser_term_Base.call(this,delegate,pos,{ fileName : "stx/parse/parser/term/Rep1Sep.hx", lineNumber : 6, className : "stx.parse.parser.term.Rep1Sep", methodName : "new"});
	this.sep = sep;
};
$hxClasses["stx.parse.parser.term.Rep1Sep"] = stx_parse_parser_term_Rep1Sep;
stx_parse_parser_term_Rep1Sep.__name__ = "stx.parse.parser.term.Rep1Sep";
stx_parse_parser_term_Rep1Sep.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Rep1Sep.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	sep: null
	,actual: function() {
		return stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(this.delegation,stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.sep,new stx_parse_parser_term_Option(this.delegation,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 94, className : "stx.parse.parser.ParserLift", methodName : "option"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
			return stx_nano_ClusterLift.cons(stx_nano_ClusterLift.flat_map(r,function(opt) {
				return stx_pico_OptionLift.toArray(opt);
			}),l);
		}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})));
	}
	,apply: function(ipt) {
		return stx_parse_Parser.get_self(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(this.delegation,stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.sep,new stx_parse_parser_term_Option(this.delegation,{ fileName : "stx/parse/parser/ParserLift.hx", lineNumber : 94, className : "stx.parse.parser.ParserLift", methodName : "option"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
			return stx_nano_ClusterLift.cons(stx_nano_ClusterLift.flat_map(r,function(opt) {
				return stx_pico_OptionLift.toArray(opt);
			}),l);
		}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}))).apply(ipt);
	}
	,toString: function() {
		return "Rep1Sep(" + Std.string(this.delegation) + "," + Std.string(this.sep) + ")";
	}
	,__class__: stx_parse_parser_term_Rep1Sep
});
var stx_parse_parser_term_Repeated = function(delegation,number,id) {
	this.number = number;
	stx_parse_parser_term_Base.call(this,delegation,null,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
$hxClasses["stx.parse.parser.term.Repeated"] = stx_parse_parser_term_Repeated;
stx_parse_parser_term_Repeated.__name__ = "stx.parse.parser.term.Repeated";
stx_parse_parser_term_Repeated.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Repeated.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	number: null
	,check: function() {
	}
	,apply: function(inputI) {
		var _gthis = this;
		var count = 0;
		var rec = null;
		rec = function(inputII,arr) {
			var res = _gthis.delegation.apply(inputII);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromInt(count);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Repeated.hx", lineNumber : 37, className : "stx.parse.parser.term.Repeated", methodName : "apply"}));
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromBool(res.get_error().is_defined() == false);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Repeated.hx", lineNumber : 38, className : "stx.parse.parser.term.Repeated", methodName : "apply"}));
			if(res.get_error().is_defined() == false) {
				if(count > _gthis.number) {
					return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
				} else {
					count += 1;
					var _g = res.value;
					if(_g != null) {
						if(_g._hx_index == 0) {
							var x = _g.v;
							arr.push(x);
						}
					}
					var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(res));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Repeated.hx", lineNumber : 50, className : "stx.parse.parser.term.Repeated", methodName : "apply"}));
					return rec(res.asset,arr);
				}
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(inputI,stx_fail_ParseFailureCode.fromString("failed many " + Std.string(_gthis.delegation)),true),res.get_error()),inputI);
			} else if(count == _gthis.number) {
				return stx_LiftParse.ok(res.asset,arr);
			} else {
				return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
			}
		};
		return rec(inputI,[]);
	}
	,__class__: stx_parse_parser_term_Repeated
});
var stx_parse_parser_term_RepeatedOnly = function(delegation,number,id) {
	this.number = number;
	stx_parse_parser_term_Base.call(this,delegation,null,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
$hxClasses["stx.parse.parser.term.RepeatedOnly"] = stx_parse_parser_term_RepeatedOnly;
stx_parse_parser_term_RepeatedOnly.__name__ = "stx.parse.parser.term.RepeatedOnly";
stx_parse_parser_term_RepeatedOnly.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_RepeatedOnly.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	number: null
	,check: function() {
	}
	,apply: function(inputI) {
		var _gthis = this;
		var count = 0;
		var rec = null;
		rec = function(inputII,arr) {
			var res = _gthis.delegation.apply(inputII);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromInt(count);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnly.hx", lineNumber : 37, className : "stx.parse.parser.term.RepeatedOnly", methodName : "apply"}));
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromBool(res.get_error().is_defined() == false);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnly.hx", lineNumber : 38, className : "stx.parse.parser.term.RepeatedOnly", methodName : "apply"}));
			if(res.get_error().is_defined() == false) {
				count += 1;
				var _g = res.value;
				if(_g != null) {
					if(_g._hx_index == 0) {
						var x = _g.v;
						arr.push(x);
					}
				}
				if(count == _gthis.number) {
					return stx_LiftParse.ok(res.asset,arr);
				} else {
					var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(res));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnly.hx", lineNumber : 50, className : "stx.parse.parser.term.RepeatedOnly", methodName : "apply"}));
					return rec(res.asset,arr);
				}
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(inputI,stx_fail_ParseFailureCode.fromString("failed many " + Std.string(_gthis.delegation)),true),res.get_error()),inputI);
			} else if(count == _gthis.number) {
				return stx_LiftParse.ok(inputII,arr);
			} else {
				return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
			}
		};
		return rec(inputI,[]);
	}
	,__class__: stx_parse_parser_term_RepeatedOnly
});
var stx_parse_parser_term_RepeatedOnlyUpto = function(delegation,number,id) {
	this.number = number;
	stx_parse_parser_term_Base.call(this,delegation,null,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
$hxClasses["stx.parse.parser.term.RepeatedOnlyUpto"] = stx_parse_parser_term_RepeatedOnlyUpto;
stx_parse_parser_term_RepeatedOnlyUpto.__name__ = "stx.parse.parser.term.RepeatedOnlyUpto";
stx_parse_parser_term_RepeatedOnlyUpto.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_RepeatedOnlyUpto.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	number: null
	,check: function() {
	}
	,apply: function(inputI) {
		var _gthis = this;
		var count = 0;
		var rec = null;
		rec = function(inputII,arr) {
			var res = _gthis.delegation.apply(inputII);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromInt(count);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnlyUpto.hx", lineNumber : 37, className : "stx.parse.parser.term.RepeatedOnlyUpto", methodName : "apply"}));
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromBool(res.get_error().is_defined() == false);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnlyUpto.hx", lineNumber : 38, className : "stx.parse.parser.term.RepeatedOnlyUpto", methodName : "apply"}));
			if(res.get_error().is_defined() == false) {
				count += 1;
				var _g = res.value;
				if(_g != null) {
					if(_g._hx_index == 0) {
						var x = _g.v;
						arr.push(x);
					}
				}
				if(count == _gthis.number) {
					return stx_LiftParse.ok(res.asset,arr);
				} else {
					var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(res));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedOnlyUpto.hx", lineNumber : 50, className : "stx.parse.parser.term.RepeatedOnlyUpto", methodName : "apply"}));
					return rec(res.asset,arr);
				}
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(inputI,stx_fail_ParseFailureCode.fromString("failed many " + Std.string(_gthis.delegation)),true),res.get_error()),inputI);
			} else if(count <= _gthis.number) {
				return stx_LiftParse.ok(inputII,arr);
			} else {
				return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
			}
		};
		return rec(inputI,[]);
	}
	,__class__: stx_parse_parser_term_RepeatedOnlyUpto
});
var stx_parse_parser_term_RepeatedUpto = function(delegation,number,id) {
	this.number = number;
	stx_parse_parser_term_Base.call(this,delegation,null,id);
	var _g = delegation.tag;
	var tmp;
	if(_g._hx_index == 0) {
		var v = _g.v;
		tmp = haxe_ds_Option.Some("(" + v + ")*");
	} else {
		tmp = haxe_ds_Option.None;
	}
	this.tag = tmp;
};
$hxClasses["stx.parse.parser.term.RepeatedUpto"] = stx_parse_parser_term_RepeatedUpto;
stx_parse_parser_term_RepeatedUpto.__name__ = "stx.parse.parser.term.RepeatedUpto";
stx_parse_parser_term_RepeatedUpto.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_RepeatedUpto.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	number: null
	,check: function() {
	}
	,apply: function(inputI) {
		var _gthis = this;
		var count = 0;
		var rec = null;
		rec = function(inputII,arr) {
			var res = _gthis.delegation.apply(inputII);
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromInt(count);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedUpto.hx", lineNumber : 37, className : "stx.parse.parser.term.RepeatedUpto", methodName : "apply"}));
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromBool(res.get_error().is_defined() == false);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedUpto.hx", lineNumber : 38, className : "stx.parse.parser.term.RepeatedUpto", methodName : "apply"}));
			if(res.get_error().is_defined() == false) {
				if(count > _gthis.number) {
					return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
				} else {
					count += 1;
					var _g = res.value;
					if(_g != null) {
						if(_g._hx_index == 0) {
							var x = _g.v;
							arr.push(x);
						}
					}
					var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(res));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/RepeatedUpto.hx", lineNumber : 50, className : "stx.parse.parser.term.RepeatedUpto", methodName : "apply"}));
					return rec(res.asset,arr);
				}
			} else if(stx_nano_IterLift.lfold(stx_nano_lift_LiftIterableToIter.toIter(stx_fail_Error.toIterable(res.get_error())),function(next,memo) {
				return stx_LiftIf.if_else(memo,function() {
					return true;
				},function() {
					var self = next.get_data();
					switch(self._hx_index) {
					case 0:
						var t = self.v;
						return stx_fail_DeclineLift.fold(t,function(x) {
							return x.fatal;
						},function(_) {
							return false;
						});
					case 1:
						return false;
					}
				});
			},false)) {
				return stx_LiftParse.failure(stx_fail_Refuse.concat(stx_LiftParse.erration(inputI,stx_fail_ParseFailureCode.fromString("failed many " + Std.string(_gthis.delegation)),true),res.get_error()),inputI);
			} else if(count <= _gthis.number) {
				return stx_LiftParse.ok(res.asset,arr);
			} else {
				return stx_LiftParse.no(inputI,stx_fail_ParseFailureCode.fromString("Should repeat " + _gthis.number + " times, but repeated " + count + " times"));
			}
		};
		return rec(inputI,[]);
	}
	,__class__: stx_parse_parser_term_RepeatedUpto
});
var stx_parse_parser_term_Something = function(tag,id) {
	stx_parse_parser_term_Sync.call(this,tag,id);
};
$hxClasses["stx.parse.parser.term.Something"] = stx_parse_parser_term_Something;
stx_parse_parser_term_Something.__name__ = "stx.parse.parser.term.Something";
stx_parse_parser_term_Something.__super__ = stx_parse_parser_term_Sync;
stx_parse_parser_term_Something.prototype = $extend(stx_parse_parser_term_Sync.prototype,{
	apply: function(input) {
		if(stx_parse_ParseInput.is_end(input)) {
			return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("EOF")),input);
		} else {
			var this1 = stx_parse_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + Std.string(stx_nano_ChunkLift.def(input.content.head(),null)));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/parse/parser/term/Something.hx", lineNumber : 8, className : "stx.parse.parser.term.Something", methodName : "apply"}));
			var chk = input.content.head();
			switch(chk._hx_index) {
			case 0:
				var v = chk.v;
				return stx_LiftParse.ok(input.copy(input.content.drop(1)),v);
			case 1:
				return stx_LiftParse.failure(stx_LiftParse.erration(input.copy(input.content.drop(1)),stx_fail_ParseFailureCode.fromString("Something")),input);
			case 2:
				var e = chk.err;
				return stx_LiftParse.failure(stx_parse_lift_LiftParseFailureCodeRefuse.toParseFailure_with(e,input),input);
			}
		}
	}
	,toString: function() {
		return "*";
	}
	,__class__: stx_parse_parser_term_Something
});
var stx_parse_parser_term_Stamp = function(value,pos) {
	stx_parse_ParserCls.call(this,null,pos);
	this.value = value;
};
$hxClasses["stx.parse.parser.term.Stamp"] = stx_parse_parser_term_Stamp;
stx_parse_parser_term_Stamp.__name__ = "stx.parse.parser.term.Stamp";
stx_parse_parser_term_Stamp.__super__ = stx_parse_ParserCls;
stx_parse_parser_term_Stamp.prototype = $extend(stx_parse_ParserCls.prototype,{
	value: null
	,apply: function(input) {
		return this.value;
	}
	,toString: function() {
		return "Stamp(" + Std.string(this.value) + ")";
	}
	,__class__: stx_parse_parser_term_Stamp
});
var stx_parse_parser_term_Sub = function(delegation,transform,tag,pos) {
	stx_parse_parser_term_Base.call(this,delegation,tag,pos);
	this.transform = transform;
};
$hxClasses["stx.parse.parser.term.Sub"] = stx_parse_parser_term_Sub;
stx_parse_parser_term_Sub.__name__ = "stx.parse.parser.term.Sub";
stx_parse_parser_term_Sub.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_Sub.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	transform: null
	,apply: function(input) {
		var res = this.delegation.apply(input);
		if(res.get_error().is_defined() == false) {
			var out = this.transform(res.value);
			var reader = stx_nano_CoupleLift.fst(out);
			var parser = stx_nano_CoupleLift.snd(out);
			var resII = parser.apply(reader);
			var inner;
			if(resII.get_error().is_defined() == false) {
				var _g = resII.value;
				switch(_g._hx_index) {
				case 0:
					var ok = _g.v;
					inner = stx_LiftParse.ok(res.asset,ok);
					break;
				case 1:
					inner = stx_LiftParse.nil(res.asset);
					break;
				}
			} else {
				inner = stx_parse_ParseResult.make(input,haxe_ds_Option.None,resII.get_error());
			}
			return inner;
		} else {
			return stx_parse_ParseResult.make(res.asset,haxe_ds_Option.None,res.get_error());
		}
	}
	,__class__: stx_parse_parser_term_Sub
});
var stx_parse_parser_term_Succeed = function(value,pos) {
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "stx/parse/parser/term/Succeed.hx", lineNumber : 5, className : "stx.parse.parser.term.Succeed", methodName : "new"}).module.exists().apply(value);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	stx_parse_parser_term_SyncBase.call(this,value,null,pos);
};
$hxClasses["stx.parse.parser.term.Succeed"] = stx_parse_parser_term_Succeed;
stx_parse_parser_term_Succeed.__name__ = "stx.parse.parser.term.Succeed";
stx_parse_parser_term_Succeed.pure = function(r) {
	return new stx_parse_parser_term_Succeed(r,{ fileName : "stx/parse/parser/term/Succeed.hx", lineNumber : 9, className : "stx.parse.parser.term.Succeed", methodName : "pure"});
};
stx_parse_parser_term_Succeed.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_Succeed.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	apply: function(ipt) {
		return stx_LiftParse.ok(ipt,this.delegation);
	}
	,__class__: stx_parse_parser_term_Succeed
});
var stx_parse_parser_term_SyncAnonLift = function() { };
$hxClasses["stx.parse.parser.term.SyncAnonLift"] = stx_parse_parser_term_SyncAnonLift;
stx_parse_parser_term_SyncAnonLift.__name__ = "stx.parse.parser.term.SyncAnonLift";
var stx_parse_parser_term_SyncAnon = function(method,tag,pos) {
	stx_parse_parser_term_SyncBase.call(this,null,tag,pos);
	this.method = method;
};
$hxClasses["stx.parse.parser.term.SyncAnon"] = stx_parse_parser_term_SyncAnon;
stx_parse_parser_term_SyncAnon.__name__ = "stx.parse.parser.term.SyncAnon";
stx_parse_parser_term_SyncAnon.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_SyncAnon.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	method: null
	,apply: function(ipt) {
		var result = this.method(ipt);
		return result;
	}
	,toString: function() {
		return "SyncAnon(" + (this.tag == null ? "null" : stx_pico_Option.toString(this.tag)) + ")";
	}
	,__class__: stx_parse_parser_term_SyncAnon
});
var stx_parse_parser_term_TagRefuse = function(delegate,name,pos) {
	stx_parse_parser_term_RefuseTransformer.call(this,delegate,function(err) {
		return stx_fail_Refuse.errate(err,function(info) {
			return stx_fail_ParseFailure.tag(info,name);
		});
	},pos);
	this.name = name;
};
$hxClasses["stx.parse.parser.term.TagRefuse"] = stx_parse_parser_term_TagRefuse;
stx_parse_parser_term_TagRefuse.__name__ = "stx.parse.parser.term.TagRefuse";
stx_parse_parser_term_TagRefuse.__super__ = stx_parse_parser_term_RefuseTransformer;
stx_parse_parser_term_TagRefuse.prototype = $extend(stx_parse_parser_term_RefuseTransformer.prototype,{
	name: null
	,toString: function() {
		return this.name;
	}
	,__class__: stx_parse_parser_term_TagRefuse
});
var stx_parse_parser_term_TaggedAnon = function(method,tag,id) {
	stx_parse_parser_term_Anon.call(this,method,tag,id);
};
$hxClasses["stx.parse.parser.term.TaggedAnon"] = stx_parse_parser_term_TaggedAnon;
stx_parse_parser_term_TaggedAnon.__name__ = "stx.parse.parser.term.TaggedAnon";
stx_parse_parser_term_TaggedAnon.__super__ = stx_parse_parser_term_Anon;
stx_parse_parser_term_TaggedAnon.prototype = $extend(stx_parse_parser_term_Anon.prototype,{
	__class__: stx_parse_parser_term_TaggedAnon
});
var stx_parse_parser_term_When = function(delegation,tag,pos) {
	stx_parse_parser_term_SyncBase.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.When"] = stx_parse_parser_term_When;
stx_parse_parser_term_When.__name__ = "stx.parse.parser.term.When";
stx_parse_parser_term_When.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_parser_term_When.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	apply: function(input) {
		var _gthis = this;
		var chk = input.content.head();
		var result;
		switch(chk._hx_index) {
		case 0:
			var v = chk.v;
			var x = v;
			result = stx_nano_lift_LiftNano.if_else(_gthis.delegation(x),function() {
				return stx_LiftParse.ok(input.copy(input.content.drop(1)),x);
			},function() {
				return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("When")),input);
			});
			break;
		case 1:
			result = stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("When")),input);
			break;
		case 2:
			var e = chk.err;
			result = stx_parse_lift_LiftParseFailureCodeResult.toParseResult_with(e,input);
			break;
		}
		return result;
	}
	,__class__: stx_parse_parser_term_When
});
var stx_parse_parser_term_While = function(delegation,tag,pos) {
	stx_parse_parser_term_Base.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.parser.term.While"] = stx_parse_parser_term_While;
stx_parse_parser_term_While.__name__ = "stx.parse.parser.term.While";
stx_parse_parser_term_While.__super__ = stx_parse_parser_term_Base;
stx_parse_parser_term_While.prototype = $extend(stx_parse_parser_term_Base.prototype,{
	apply: function(ipt) {
		var _gthis = this;
		var result = [];
		var rec = null;
		rec = function(ipt) {
			var res = _gthis.delegation.apply(ipt);
			if(res.get_error().is_defined() == false) {
				var v = $iterator(stx_pico_OptionLift)(res.value);
				while(v.hasNext()) {
					var v1 = v.next();
					result.push(v1);
				}
				return rec(res.asset);
			} else if(result.length == 0) {
				return stx_LiftParse.failure(stx_LiftParse.erration(res.asset,stx_fail_ParseFailureCode.fromString("While coming up empty")),res.asset);
			} else {
				return stx_LiftParse.ok(res.asset,stx_nano_Cluster.lift(result));
			}
		};
		return rec(ipt);
	}
	,__class__: stx_parse_parser_term_While
});
var stx_pico_Identifier = {};
stx_pico_Identifier.fromPath = function(path) {
	var dir = haxe_io_Path.directory(path.toString());
	var ext = path.ext;
	var file = path.file;
	var name = ext == null ? file : "" + file + "." + ext;
	var sep = path.backslash ? "\\" : "/";
	var data = dir.split(sep);
	data.push(name);
	return stx_pico_Identifier.lift(data.join("."));
};
stx_pico_Identifier.lift = function(data) {
	return stx_pico_Identifier._new(data);
};
stx_pico_Identifier._new = function(data) {
	return data;
};
stx_pico_Identifier.get_name = function(this1) {
	var self = stx_lift_ArrayLift.last(this1.split("."));
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return "?";
	}
};
stx_pico_Identifier.get_pack = function(this1) {
	return stx_lift_ArrayLift.rdropn(this1.split("."),1);
};
stx_pico_Identifier.toString = function(this1) {
	return this1;
};
stx_pico_Identifier.toArray = function(this1) {
	var p = stx_pico_Identifier.get_pack(this1).slice();
	p.push(stx_pico_Identifier.get_name(this1));
	return p;
};
var stx_parse_term_Literal = function(delegation,tag,pos) {
	stx_parse_parser_term_SyncBase.call(this,delegation,tag,pos);
};
$hxClasses["stx.parse.term.Literal"] = stx_parse_term_Literal;
stx_parse_term_Literal.__name__ = "stx.parse.term.Literal";
stx_parse_term_Literal.__super__ = stx_parse_parser_term_SyncBase;
stx_parse_term_Literal.prototype = $extend(stx_parse_parser_term_SyncBase.prototype,{
	apply: function(input) {
		var all = stx_parse_ParseInput.get_content(input).data;
		var data = HxOverrides.substr(all,stx_parse_ParseInput.get_offset(input),null);
		var code = StringTools.fastCodeAt;
		var has = stx_parse_Parsers.Range;
		var q = 34;
		var fst = code(data,0);
		if(fst == 39) {
			q = 39;
		}
		var ok = q == fst;
		var idx = 1;
		var failed = false;
		if(ok) {
			while(true) {
				var val = code(data,idx);
				if(val == null) {
					failed = true;
					break;
				} else if(val == 92) {
					if(code(data,idx + 1) == q) {
						idx += 2;
					} else {
						++idx;
					}
				} else {
					var x = val;
					if(x == q) {
						++idx;
						break;
					} else {
						++idx;
					}
				}
			}
		} else {
			failed = true;
		}
		if(failed) {
			return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("Literal encountered null")),input);
		} else {
			var out = input.content.take(idx);
			out = HxOverrides.substr(out,1,out.length - 2);
			if(idx > 1) {
				return stx_LiftParse.ok(input.copy(input.content.drop(idx)),out);
			} else {
				return stx_LiftParse.failure(stx_LiftParse.erration(input,stx_fail_ParseFailureCode.fromString("Literal")),input);
			}
		}
	}
	,__class__: stx_parse_term_Literal
});
var stx_parse_parsers_StringParsers = function() { };
$hxClasses["stx.parse.parsers.StringParsers"] = stx_parse_parsers_StringParsers;
stx_parse_parsers_StringParsers.__name__ = "stx.parse.parsers.StringParsers";
stx_parse_parsers_StringParsers.reg = function(str) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Regex(str,{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"}));
};
stx_parse_parsers_StringParsers.id = function(str) {
	return new stx_parse_parser_term_Identifier(str,{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
};
stx_parse_parsers_StringParsers.code = function(int) {
	return stx_parse_Parsers.CharCode(int);
};
stx_parse_parsers_StringParsers.range = function(start,finish) {
	return new stx_parse_parser_term_Range(start,finish,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
};
stx_parse_parsers_StringParsers.primitive = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.boolean,function(x) {
		return stx_nano_PrimitiveDef.PBool(x == "true");
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.float,stx_fn_UnaryLift.then(Std.parseFloat,function(x) {
		return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(x)));
	}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})),stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.integer,function(str) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Std.parseInt(str));
		var _this;
		if(self._hx_index == 0) {
			var v = self.v;
			_this = v;
		} else {
			_this = 0;
		}
		return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Byteal(stx_nano_NumericSum.NFloat(_this)));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})),stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.literal,function(x) {
		return stx_nano_PrimitiveDef.PSprig(stx_nano_SprigSum.Textal(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
};
stx_parse_parsers_StringParsers.spaced = function(p) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(p,stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_parsers_StringParsers.gap,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
};
stx_parse_parsers_StringParsers.returned = function(p) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(p,stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_parsers_StringParsers.whitespace,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
};
var stx_parse_pml_Lexer = function() { };
$hxClasses["stx.parse.pml.Lexer"] = stx_parse_pml_Lexer;
stx_parse_pml_Lexer.__name__ = "stx.parse.pml.Lexer";
stx_parse_pml_Lexer.t_hash_lbracket = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(new stx_parse_parser_term_Identifier("#",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),stx_parse_pml_Lexer.tl_bracket,{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTHashLBracket;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_parse_pml_Lexer.float = function(str) {
	return eu_ohmrun_pml_PTokenSum.PTData(eu_ohmrun_pml_AtomSum.N(eu_ohmrun_pml_Num.KLFloat(parseFloat(str))));
};
stx_parse_pml_Lexer.int = function(str) {
	return eu_ohmrun_pml_PTokenSum.PTData(eu_ohmrun_pml_AtomSum.N(eu_ohmrun_pml_Num.KLInt(Std.parseInt(str))));
};
stx_parse_pml_Lexer.between = function(current) {
	return StringTools.trim(HxOverrides.substr(current,1,current.length - 2));
};
stx_parse_pml_Lexer.print_ipt = function(ipt) {
	haxe_Log.trace(ipt,{ fileName : "stx/parse/pml/Lexer.hx", lineNumber : 74, className : "stx.parse.pml.Lexer", methodName : "print_ipt"});
};
stx_parse_pml_Lexer.print_opt = function(opt) {
	haxe_Log.trace(opt,{ fileName : "stx/parse/pml/Lexer.hx", lineNumber : 77, className : "stx.parse.pml.Lexer", methodName : "print_opt"});
};
function stx_parse_pml_Lexer_id(string) {
	return new stx_parse_parser_term_Identifier(string,{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
}
function stx_parse_pml_Lexer_reg(string) {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Regex(string,{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"}));
}
var stx_parse_pml_Parser = function() {
};
$hxClasses["stx.parse.pml.Parser"] = stx_parse_pml_Parser;
stx_parse_pml_Parser.__name__ = "stx.parse.pml.Parser";
stx_parse_pml_Parser.prototype = {
	lparen_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTLParen,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("lparen");
		return new stx_parse_parser_term_TagRefuse(p,"lparen",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,rparen_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTRParen,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("rparen");
		return new stx_parse_parser_term_TagRefuse(p,"rparen",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,hash_lbracket_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTHashLBracket,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("hash_lbracket");
		return new stx_parse_parser_term_TagRefuse(p,"hash_lbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,lbracket_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTLBracket,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("lbracket");
		return new stx_parse_parser_term_TagRefuse(p,"lbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,rbracket_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTRBracket,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("rbracket");
		return new stx_parse_parser_term_TagRefuse(p,"rbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,l_square_bracket_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTLSquareBracket,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("lbracket");
		return new stx_parse_parser_term_TagRefuse(p,"lbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,r_square_bracket_p: function() {
		var p = new stx_parse_parser_term_Equals(eu_ohmrun_pml_PTokenSum.PTRSquareBracket,null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 8, className : "stx.parse.Parsers", methodName : "Equals"});
		p.tag = haxe_ds_Option.Some("rbracket");
		return new stx_parse_parser_term_TagRefuse(p,"rbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,val: function() {
		var p = new stx_parse_parser_term_Choose(function(t) {
			if(t == null) {
				return haxe_ds_Option.None;
			} else if(t._hx_index == 7) {
				var _g = t.v;
				if(_g._hx_index == 0) {
					var s = _g.s;
					if(StringTools.startsWith(s,":")) {
						return haxe_ds_Option.Some(eu_ohmrun_pml_PExprSum.PLabel(HxOverrides.substr(s,1,null)));
					} else {
						var atm = _g;
						return haxe_ds_Option.Some(eu_ohmrun_pml_PExprSum.PValue(atm));
					}
				} else {
					var atm = _g;
					return haxe_ds_Option.Some(eu_ohmrun_pml_PExprSum.PValue(atm));
				}
			} else {
				return haxe_ds_Option.None;
			}
		},null,{ fileName : "stx/parse/pml/Parser.hx", lineNumber : 33, className : "stx.parse.pml.Parser", methodName : "val"});
		p.tag = haxe_ds_Option.Some("val");
		return new stx_parse_parser_term_TagRefuse(p,"val",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,engroup: function(arr) {
		return eu_ohmrun_pml_PExprSum.PGroup(stx_LiftClusterToLinkedList.toLinkedList(arr));
	}
	,main: function() {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(this.expr_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),$bind(this,this.engroup),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,expr_p: function() {
		var self = stx_lift_ArrayLift.lfold1([this.set_p(),this.map_p(),this.val(),this.list_p()],function(memo,next) {
			return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(memo,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
		});
		var this1 = new stx_parse_parser_term_Failed("No Parser in Array",false,{ fileName : "stx/parse/lift/LiftArrayOfParser.hx", lineNumber : 6, className : "stx.parse.lift.LiftArrayOfParser", methodName : "ors"});
		var p;
		if(self._hx_index == 0) {
			var v = self.v;
			p = v;
		} else {
			p = this1;
		}
		p.tag = haxe_ds_Option.Some("expr");
		return new stx_parse_parser_term_TagRefuse(p,"expr",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,map_p: function() {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.lbracket_p(),stx_parse_Parser.get_self(new stx_parse_parser_term_Many(this.map_item_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),this.rbracket_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),eu_ohmrun_pml_PExprSum.PAssoc,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,map_item_p: function() {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(stx_LiftParse.cache($bind(this,this.expr_p)),stx_LiftParse.cache($bind(this,this.expr_p)),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,stx_Tup2.tuple2),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,list_p: function() {
		var p = stx_LiftParse.cache($bind(this,this.expr_p));
		p.tag = haxe_ds_Option.Some("expr");
		var p1 = stx_parse_Parser.get_self(new stx_parse_parser_term_Many(new stx_parse_parser_term_TagRefuse(p,"expr",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"}));
		p1.tag = haxe_ds_Option.Some("exprs");
		var p = this.bracketed(new stx_parse_parser_term_TagRefuse(p1,"exprs",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"}));
		p.tag = haxe_ds_Option.Some("list");
		return new stx_parse_parser_term_TagRefuse(p,"list",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	}
	,set_p: function() {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.hash_lbracket_p(),stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_LiftParse.cache($bind(this,this.expr_p)),{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),this.rbracket_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),function(arr) {
			return eu_ohmrun_pml_PExprSum.PSet(arr);
		},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,bracketed: function(p) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.lparen_p(),p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),this.rparen_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),function(arr) {
			return eu_ohmrun_pml_PExprSum.PGroup(stx_LiftClusterToLinkedList.toLinkedList(arr));
		},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,square_bracketed: function(p) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(this.l_square_bracket_p(),p,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),this.r_square_bracket_p(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),function(arr) {
			return eu_ohmrun_pml_PExprSum.PArray(arr);
		},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	}
	,__class__: stx_parse_pml_Parser
};
function stx_parse_pml_Parser_id(wildcard,s) {
	var _this = stx_Parse.string(stx_LiftParse.parse(stx_nano_Wildcard.__).parsers());
	return new stx_parse_parser_term_Identifier(s,{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
}
var stx_pico_ApplyLift = function() { };
$hxClasses["stx.pico.ApplyLift"] = stx_pico_ApplyLift;
stx_pico_ApplyLift.__name__ = "stx.pico.ApplyLift";
stx_pico_ApplyLift.lift = function(self) {
	return stx_pico_Apply._new(self);
};
stx_pico_ApplyLift.map = function(self,fn) {
	return stx_pico_Apply.Map(self,fn);
};
var stx_pico_Apply = {};
stx_pico_Apply._new = function(self) {
	return self;
};
stx_pico_Apply.lift = function(self) {
	return stx_pico_Apply._new(self);
};
stx_pico_Apply.Anon = function(self) {
	return stx_pico_Apply._new(new stx_pico_apply_term_Anon(self));
};
stx_pico_Apply.prj = function(this1) {
	return this1;
};
stx_pico_Apply.get_self = function(this1) {
	return stx_pico_Apply._new(this1);
};
stx_pico_Apply.Map = function(self,fn) {
	return stx_pico_Apply._new(new stx_pico_apply_term_AnonMap(self,fn));
};
var stx_pico_ComplyApi = function() { };
$hxClasses["stx.pico.ComplyApi"] = stx_pico_ComplyApi;
stx_pico_ComplyApi.__name__ = "stx.pico.ComplyApi";
stx_pico_ComplyApi.__isInterface__ = true;
stx_pico_ComplyApi.prototype = {
	comply: null
	,toComply: null
	,__class__: stx_pico_ComplyApi
};
var stx_pico_ComplyCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.pico.ComplyCls"] = stx_pico_ComplyCls;
stx_pico_ComplyCls.__name__ = "stx.pico.ComplyCls";
stx_pico_ComplyCls.__interfaces__ = [stx_pico_ComplyApi];
stx_pico_ComplyCls.__super__ = stx_pico_Clazz;
stx_pico_ComplyCls.prototype = $extend(stx_pico_Clazz.prototype,{
	comply: null
	,toComply: function() {
		return this;
	}
	,__class__: stx_pico_ComplyCls
});
var stx_pico_ComplyLift = function() { };
$hxClasses["stx.pico.ComplyLift"] = stx_pico_ComplyLift;
stx_pico_ComplyLift.__name__ = "stx.pico.ComplyLift";
var stx_pico_Comply = {};
stx_pico_Comply._new = function(self) {
	return self;
};
stx_pico_Comply.lift = function(self) {
	return stx_pico_Comply._new(self);
};
stx_pico_Comply.prj = function(this1) {
	return this1;
};
stx_pico_Comply.get_self = function(this1) {
	return stx_pico_Comply._new(this1);
};
var stx_pico_delay_term_Javascript = function(op,ms) {
	this.op = op;
	this.ms = ms;
	this.cancelled = false;
	this.done = false;
};
$hxClasses["stx.pico.delay.term.Javascript"] = stx_pico_delay_term_Javascript;
stx_pico_delay_term_Javascript.__name__ = "stx.pico.delay.term.Javascript";
stx_pico_delay_term_Javascript.prototype = {
	done: null
	,cancelled: null
	,id: null
	,op: null
	,ms: null
	,cancel: function() {
		this.cancelled = true;
	}
	,start: function() {
		var _gthis = this;
		if(this.done) {
			throw haxe_Exception.thrown("delay already called");
		} else {
			var me = this;
			this.id = setInterval(function() {
				clearInterval(_gthis.id);
				if(!_gthis.cancelled) {
					_gthis.done = true;
					me.op();
				}
			},this.ms);
		}
	}
	,__class__: stx_pico_delay_term_Javascript
};
var stx_pico_Delay = function(op,ms) {
	stx_pico_delay_term_Javascript.call(this,op,ms);
};
$hxClasses["stx.pico.Delay"] = stx_pico_Delay;
stx_pico_Delay.__name__ = "stx.pico.Delay";
stx_pico_Delay.comply = function(op,ms) {
	var delay = new stx_pico_Delay(op,ms);
	delay.start();
	return delay;
};
stx_pico_Delay.__super__ = stx_pico_delay_term_Javascript;
stx_pico_Delay.prototype = $extend(stx_pico_delay_term_Javascript.prototype,{
	__class__: stx_pico_Delay
});
var stx_pico_EitherLift = function() { };
$hxClasses["stx.pico.EitherLift"] = stx_pico_EitherLift;
stx_pico_EitherLift.__name__ = "stx.pico.EitherLift";
stx_pico_EitherLift.fold = function(self,lhs,rhs) {
	switch(self._hx_index) {
	case 0:
		var l = self.v;
		return lhs(l);
	case 1:
		var r = self.v;
		return rhs(r);
	}
};
stx_pico_EitherLift.map = function(self,fn) {
	return stx_pico_EitherLift.flat_map(self,function(x) {
		return haxe_ds_Either.Right(fn(x));
	});
};
stx_pico_EitherLift.flat_map = function(self,fn) {
	return stx_pico_EitherLift.fold(self,haxe_ds_Either.Left,function(r) {
		return fn(r);
	});
};
stx_pico_EitherLift.flip = function(self) {
	return stx_pico_EitherLift.fold(self,function(l) {
		return haxe_ds_Either.Right(l);
	},function(r) {
		return haxe_ds_Either.Left(r);
	});
};
stx_pico_EitherLift.get_data = function(self) {
	return stx_pico_EitherLift.fold(self,function(x) {
		return x;
	},function(x) {
		return x;
	});
};
stx_pico_EitherLift.is_left = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return true;
	},function(_) {
		return false;
	});
};
stx_pico_EitherLift.is_right = function(self) {
	return stx_pico_EitherLift.fold(self,function(_) {
		return false;
	},function(_) {
		return true;
	});
};
var stx_pico_Either = {};
stx_pico_Either._new = function(self) {
	return self;
};
stx_pico_Either.lift = function(self) {
	return stx_pico_Either._new(self);
};
stx_pico_Either.left = function(tI) {
	return haxe_ds_Either.Left(tI);
};
stx_pico_Either.right = function(tII) {
	return haxe_ds_Either.Right(tII);
};
stx_pico_Either.prj = function(this1) {
	return this1;
};
var stx_pico_IFaze = function() { };
$hxClasses["stx.pico.IFaze"] = stx_pico_IFaze;
stx_pico_IFaze.__name__ = "stx.pico.IFaze";
stx_pico_IFaze.__isInterface__ = true;
stx_pico_IFaze.prototype = {
	definition: null
	,identifier: null
	,__class__: stx_pico_IFaze
};
var stx_pico_Logging = function() { };
$hxClasses["stx.pico.Logging"] = stx_pico_Logging;
stx_pico_Logging.__name__ = "stx.pico.Logging";
stx_pico_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/pico/Logging.hx", lineNumber : 11, className : "stx.pico.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_pico_Nada = {};
stx_pico_Nada.fromDynamic = function(_) {
	return 0;
};
var stx_pico_OutcomeSum = $hxEnums["stx.pico.OutcomeSum"] = { __ename__:"stx.pico.OutcomeSum",__constructs__:null
	,Success: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["t"],$_)
	,Failure: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"stx.pico.OutcomeSum",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["e"],$_)
};
stx_pico_OutcomeSum.__constructs__ = [stx_pico_OutcomeSum.Success,stx_pico_OutcomeSum.Failure];
var stx_pico_OutcomeLift = function() { };
$hxClasses["stx.pico.OutcomeLift"] = stx_pico_OutcomeLift;
stx_pico_OutcomeLift.__name__ = "stx.pico.OutcomeLift";
stx_pico_OutcomeLift.map = function(self,fn) {
	return stx_pico_OutcomeLift.flat_map(self,function(x) {
		return stx_pico_OutcomeSum.Success(fn(x));
	});
};
stx_pico_OutcomeLift.flat_map = function(self,fn) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = fn(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Failure(e);
		break;
	}
	return stx_pico_Outcome.lift(tmp);
};
stx_pico_OutcomeLift.fold = function(self,fn,er) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return fn(t);
	case 1:
		var e = self.e;
		return er(e);
	}
};
stx_pico_OutcomeLift.fudge = function(self) {
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		throw haxe_Exception.thrown(e);
	}
};
stx_pico_OutcomeLift.elide = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_OutcomeSum.Failure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_OutcomeSum.Success(e);
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.value = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.pure(t);
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.unit();
		break;
	}
	return tmp;
};
stx_pico_OutcomeLift.error = function(self) {
	var tmp;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		tmp = stx_pico_Option.unit();
		break;
	case 1:
		var e = self.e;
		tmp = stx_pico_Option.pure(e);
		break;
	}
	return tmp;
};
var stx_pico_Outcome = {};
stx_pico_Outcome._new = function(self) {
	return self;
};
stx_pico_Outcome.lift = function(self) {
	return stx_pico_Outcome._new(self);
};
stx_pico_Outcome.success = function(t) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Success(t));
};
stx_pico_Outcome.failure = function(e) {
	return stx_pico_Outcome.lift(stx_pico_OutcomeSum.Failure(e));
};
stx_pico_Outcome.prj = function(this1) {
	return this1;
};
stx_pico_Outcome.get_self = function(this1) {
	return stx_pico_Outcome.lift(this1);
};
var stx_pico_ReactApi = function() { };
$hxClasses["stx.pico.ReactApi"] = stx_pico_ReactApi;
stx_pico_ReactApi.__name__ = "stx.pico.ReactApi";
stx_pico_ReactApi.__isInterface__ = true;
stx_pico_ReactApi.prototype = {
	react: null
	,__class__: stx_pico_ReactApi
};
var stx_pico_ReactCls = function() { };
$hxClasses["stx.pico.ReactCls"] = stx_pico_ReactCls;
stx_pico_ReactCls.__name__ = "stx.pico.ReactCls";
stx_pico_ReactCls.__interfaces__ = [stx_pico_ReactApi];
stx_pico_ReactCls.prototype = {
	react: null
	,__class__: stx_pico_ReactCls
};
var stx_pico_React = {};
stx_pico_React._new = function(self) {
	return self;
};
stx_pico_React.lift = function(self) {
	return stx_pico_React._new(self);
};
stx_pico_React.prj = function(this1) {
	return this1;
};
stx_pico_React.get_self = function(this1) {
	return stx_pico_React.lift(this1);
};
var stx_pico_ReplyApi = function() { };
$hxClasses["stx.pico.ReplyApi"] = stx_pico_ReplyApi;
stx_pico_ReplyApi.__name__ = "stx.pico.ReplyApi";
stx_pico_ReplyApi.__isInterface__ = true;
stx_pico_ReplyApi.prototype = {
	react: null
	,__class__: stx_pico_ReplyApi
};
var stx_pico_ReplyCls = function() { };
$hxClasses["stx.pico.ReplyCls"] = stx_pico_ReplyCls;
stx_pico_ReplyCls.__name__ = "stx.pico.ReplyCls";
stx_pico_ReplyCls.__interfaces__ = [stx_pico_ReplyApi];
stx_pico_ReplyCls.prototype = {
	react: null
	,reply: null
	,__class__: stx_pico_ReplyCls
};
var stx_pico_Reply = {};
stx_pico_Reply._new = function(self) {
	return self;
};
stx_pico_Reply.lift = function(self) {
	return stx_pico_Reply._new(self);
};
stx_pico_Reply.prj = function(this1) {
	return this1;
};
stx_pico_Reply.get_self = function(this1) {
	return stx_pico_Reply.lift(this1);
};
var stx_pico_SpendApi = function() { };
$hxClasses["stx.pico.SpendApi"] = stx_pico_SpendApi;
stx_pico_SpendApi.__name__ = "stx.pico.SpendApi";
stx_pico_SpendApi.__isInterface__ = true;
stx_pico_SpendApi.prototype = {
	spend: null
	,toSpend: null
	,__class__: stx_pico_SpendApi
};
var stx_pico_SpendCls = function() { };
$hxClasses["stx.pico.SpendCls"] = stx_pico_SpendCls;
stx_pico_SpendCls.__name__ = "stx.pico.SpendCls";
stx_pico_SpendCls.__interfaces__ = [stx_pico_SpendApi];
stx_pico_SpendCls.prototype = {
	toSpend: null
	,spend: null
	,__class__: stx_pico_SpendCls
};
var stx_pico_Spend = {};
stx_pico_Spend._new = function(self) {
	return self;
};
stx_pico_Spend.lift = function(self) {
	return stx_pico_Spend._new(self);
};
stx_pico_Spend.prj = function(this1) {
	return this1;
};
stx_pico_Spend.get_self = function(this1) {
	return stx_pico_Spend.lift(this1);
};
var stx_pico_apply_term_Anon = function(_apply) {
	this._apply = _apply;
};
$hxClasses["stx.pico.apply.term.Anon"] = stx_pico_apply_term_Anon;
stx_pico_apply_term_Anon.__name__ = "stx.pico.apply.term.Anon";
stx_pico_apply_term_Anon.__super__ = stx_pico_ApplyCls;
stx_pico_apply_term_Anon.prototype = $extend(stx_pico_ApplyCls.prototype,{
	_apply: null
	,apply: function(p) {
		return this._apply(p);
	}
	,__class__: stx_pico_apply_term_Anon
});
var stx_pico_apply_term_Delegate = function(delegate) {
	this.delegate = delegate;
};
$hxClasses["stx.pico.apply.term.Delegate"] = stx_pico_apply_term_Delegate;
stx_pico_apply_term_Delegate.__name__ = "stx.pico.apply.term.Delegate";
stx_pico_apply_term_Delegate.__super__ = stx_pico_ApplyCls;
stx_pico_apply_term_Delegate.prototype = $extend(stx_pico_ApplyCls.prototype,{
	delegate: null
	,__class__: stx_pico_apply_term_Delegate
});
var stx_pico_apply_term_Map = function(delegate) {
	stx_pico_apply_term_Delegate.call(this,delegate);
};
$hxClasses["stx.pico.apply.term.Map"] = stx_pico_apply_term_Map;
stx_pico_apply_term_Map.__name__ = "stx.pico.apply.term.Map";
stx_pico_apply_term_Map.__super__ = stx_pico_apply_term_Delegate;
stx_pico_apply_term_Map.prototype = $extend(stx_pico_apply_term_Delegate.prototype,{
	map: null
	,apply: function(p) {
		return this.map(this.delegate.apply(p));
	}
	,__class__: stx_pico_apply_term_Map
});
var stx_pico_apply_term_AnonMap = function(delegate,_map) {
	stx_pico_apply_term_Map.call(this,delegate);
	this._map = _map;
};
$hxClasses["stx.pico.apply.term.AnonMap"] = stx_pico_apply_term_AnonMap;
stx_pico_apply_term_AnonMap.__name__ = "stx.pico.apply.term.AnonMap";
stx_pico_apply_term_AnonMap.__super__ = stx_pico_apply_term_Map;
stx_pico_apply_term_AnonMap.prototype = $extend(stx_pico_apply_term_Map.prototype,{
	_map: null
	,map: function(p) {
		return this._map(p);
	}
	,__class__: stx_pico_apply_term_AnonMap
});
var stx_pkg_Packed = function(pos) {
	this.pkg = stx_PkgLift.pkg(stx_nano_Wildcard.__,pos);
};
$hxClasses["stx.pkg.Packed"] = stx_pkg_Packed;
stx_pkg_Packed.__name__ = "stx.pkg.Packed";
stx_pkg_Packed.prototype = {
	pkg: null
	,__class__: stx_pkg_Packed
};
var stx_pkg_Pkg = {};
stx_pkg_Pkg._new = function(self) {
	return self;
};
stx_pkg_Pkg.fromScope = function(p) {
	return stx_pkg_Pkg._new(stx_pkg__$Pkg_Registry.instance.get(p));
};
stx_pkg_Pkg.source = function(this1) {
	return stx_pkg__$Pkg_Registry.instance.embed.unpack(this1);
};
stx_pkg_Pkg.toString = function(this1) {
	if(stx_pkg_Pkg.source(this1) == null) {
		return "null";
	} else {
		return stx_pico_Option.toString(stx_pkg_Pkg.source(this1));
	}
};
var stx_pkg__$Pkg_Registry = function() {
	this.embed = stx_nano_Embed._new();
	this.register = new haxe_ds_StringMap();
};
$hxClasses["stx.pkg._Pkg.Registry"] = stx_pkg__$Pkg_Registry;
stx_pkg__$Pkg_Registry.__name__ = "stx.pkg._Pkg.Registry";
stx_pkg__$Pkg_Registry.prototype = {
	embed: null
	,register: null
	,get: function(p) {
		var key = stx_pkg_Scope.identifier(p);
		if(!Object.prototype.hasOwnProperty.call(this.register.h,key)) {
			var _this = this.register;
			var value = this.embed.pack(p);
			_this.h[key] = value;
		}
		return this.register.h[key];
	}
	,__class__: stx_pkg__$Pkg_Registry
};
var stx_pkg_Scope = {};
stx_pkg_Scope._new = function(self) {
	return self;
};
stx_pkg_Scope.fromPosInfos = function(pos) {
	var module = stx_nano_lift_LiftNano.toIdentifier(stx_nano_Position.fromPos(pos));
	var out = { name : stx_pico_Identifier.get_name(module), pack : stx_nano_Way.lift(stx_pico_Identifier.get_pack(module))};
	return stx_pkg_Scope._new(out);
};
stx_pkg_Scope.fromPosition = function(pos) {
	var module = stx_nano_lift_LiftNano.toIdentifier(stx_nano_Position.toPos(pos));
	var out = { name : stx_pico_Identifier.get_name(module), pack : stx_nano_Way.lift(stx_pico_Identifier.get_pack(module))};
	return stx_pkg_Scope._new(out);
};
stx_pkg_Scope.equals = function(this1,that) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,this1.pack);
	var packl;
	if(self._hx_index == 0) {
		var v = self.v;
		packl = v;
	} else {
		packl = stx_nano_Way.unit();
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,that.pack);
	var packr;
	if(self._hx_index == 0) {
		var v = self.v;
		packr = v;
	} else {
		packr = stx_nano_Way.unit();
	}
	var pack_ok = stx_nano_Cluster.get_length(packl) == stx_nano_Cluster.get_length(packr);
	if(pack_ok) {
		var _g = 0;
		var _g1 = stx_nano_Cluster.get_length(packl);
		while(_g < _g1) {
			var i = _g++;
			pack_ok = packl[i] == packr[i];
			if(!pack_ok) {
				break;
			}
		}
	}
	if(this1.name == that.name) {
		return pack_ok;
	} else {
		return false;
	}
};
stx_pkg_Scope.identifier = function(this1) {
	if(stx_nano_Cluster.get_length(this1.pack) == 0) {
		return this1.name;
	} else {
		return stx_nano_Way.snoc(this1.pack,this1.name).join(".");
	}
};
var stx_pkg_core_WhereApi = function() { };
$hxClasses["stx.pkg.core.WhereApi"] = stx_pkg_core_WhereApi;
stx_pkg_core_WhereApi.__name__ = "stx.pkg.core.WhereApi";
stx_pkg_core_WhereApi.__isInterface__ = true;
stx_pkg_core_WhereApi.prototype = {
	where: null
	,__class__: stx_pkg_core_WhereApi
};
var stx_pkg_core_WhereCls = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.pkg.core.WhereCls"] = stx_pkg_core_WhereCls;
stx_pkg_core_WhereCls.__name__ = "stx.pkg.core.WhereCls";
stx_pkg_core_WhereCls.__interfaces__ = [stx_pkg_core_WhereApi];
stx_pkg_core_WhereCls.__super__ = stx_pico_Clazz;
stx_pkg_core_WhereCls.prototype = $extend(stx_pico_Clazz.prototype,{
	where: function(pos) {
		return stx_PkgLift.pkg(stx_nano_Wildcard.__,stx_nano_Position.fromPos(pos));
	}
	,__class__: stx_pkg_core_WhereCls
});
var stx_show_ShowableApi = function() { };
$hxClasses["stx.show.ShowableApi"] = stx_show_ShowableApi;
stx_show_ShowableApi.__name__ = "stx.show.ShowableApi";
stx_show_ShowableApi.__isInterface__ = true;
stx_show_ShowableApi.prototype = {
	show: null
	,toShowable: null
	,__class__: stx_show_ShowableApi
};
var stx_show_ShowableCls = function() {
};
$hxClasses["stx.show.ShowableCls"] = stx_show_ShowableCls;
stx_show_ShowableCls.__name__ = "stx.show.ShowableCls";
stx_show_ShowableCls.__interfaces__ = [stx_show_ShowableApi];
stx_show_ShowableCls.prototype = {
	show: null
	,toShowable: function() {
		return this;
	}
	,__class__: stx_show_ShowableCls
};
var stx_show_Showable = {};
stx_show_Showable._new = function(self) {
	return self;
};
stx_show_Showable.lift = function(self) {
	return stx_show_Showable._new(self);
};
stx_show_Showable.prj = function(this1) {
	return this1;
};
stx_show_Showable.get_self = function(this1) {
	return stx_show_Showable.lift(this1);
};
var stx_show_core_Axis = $hxEnums["stx.show.core.Axis"] = { __ename__:"stx.show.core.Axis",__constructs__:null
	,H: {_hx_name:"H",_hx_index:0,__enum__:"stx.show.core.Axis",toString:$estr}
	,V: {_hx_name:"V",_hx_index:1,__enum__:"stx.show.core.Axis",toString:$estr}
};
stx_show_core_Axis.__constructs__ = [stx_show_core_Axis.H,stx_show_core_Axis.V];
var stx_show_core_LayoutNodeSum = $hxEnums["stx.show.core.LayoutNodeSum"] = { __ename__:"stx.show.core.LayoutNodeSum",__constructs__:null
	,LEscape: ($_=function(node) { return {_hx_index:0,node:node,__enum__:"stx.show.core.LayoutNodeSum",toString:$estr}; },$_._hx_name="LEscape",$_.__params__ = ["node"],$_)
	,LTree: {_hx_name:"LTree",_hx_index:1,__enum__:"stx.show.core.LayoutNodeSum",toString:$estr}
	,LArray: ($_=function(axis) { return {_hx_index:2,axis:axis,__enum__:"stx.show.core.LayoutNodeSum",toString:$estr}; },$_._hx_name="LArray",$_.__params__ = ["axis"],$_)
	,LBlock: {_hx_name:"LBlock",_hx_index:3,__enum__:"stx.show.core.LayoutNodeSum",toString:$estr}
};
stx_show_core_LayoutNodeSum.__constructs__ = [stx_show_core_LayoutNodeSum.LEscape,stx_show_core_LayoutNodeSum.LTree,stx_show_core_LayoutNodeSum.LArray,stx_show_core_LayoutNodeSum.LBlock];
var stx_show_core_LayoutNodeLift = function() { };
$hxClasses["stx.show.core.LayoutNodeLift"] = stx_show_core_LayoutNodeLift;
stx_show_core_LayoutNodeLift.__name__ = "stx.show.core.LayoutNodeLift";
stx_show_core_LayoutNodeLift.lift = function(self) {
	return self;
};
var stx_show_core_LayoutNode = {};
stx_show_core_LayoutNode._new = function(self) {
	return self;
};
stx_show_core_LayoutNode.lift = function(self) {
	return self;
};
stx_show_core_LayoutNode.prj = function(this1) {
	return this1;
};
stx_show_core_LayoutNode.get_self = function(this1) {
	return this1;
};
var stx_show_core_Options = function(width) {
	this.width = width;
};
$hxClasses["stx.show.core.Options"] = stx_show_core_Options;
stx_show_core_Options.__name__ = "stx.show.core.Options";
stx_show_core_Options.make = function(width) {
	return new stx_show_core_Options(width);
};
stx_show_core_Options.make0 = function(width) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,width);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = 100;
	}
	return stx_show_core_Options.make(tmp);
};
stx_show_core_Options.unit = function() {
	return stx_show_core_Options.make0();
};
stx_show_core_Options.prototype = {
	width: null
	,__class__: stx_show_core_Options
};
var stx_show_core_Request = function(xindex,yindex,node) {
	this.xindex = xindex;
	this.yindex = yindex;
	this.node = node;
};
$hxClasses["stx.show.core.Request"] = stx_show_core_Request;
stx_show_core_Request.__name__ = "stx.show.core.Request";
stx_show_core_Request.make = function(xindex,yindex,node) {
	return new stx_show_core_Request(xindex,yindex,node);
};
stx_show_core_Request.unit = function() {
	return new stx_show_core_Request(0,0,haxe_ds_Option.None);
};
stx_show_core_Request.prototype = {
	xindex: null
	,yindex: null
	,node: null
	,with_node: function(fn) {
		return new stx_show_core_Request(this.xindex,this.yindex,fn(this.node));
	}
	,with_xindex: function(i) {
		return stx_show_core_Request.make(i,this.yindex,this.node);
	}
	,__class__: stx_show_core_Request
};
var stx_show_core_Response = function(state,width,height,prefix,postfix,children,node) {
	this.state = state;
	this.width = width;
	this.height = height;
	this.prefix = prefix;
	this.postfix = postfix;
	this.children = children;
	this.node = node;
};
$hxClasses["stx.show.core.Response"] = stx_show_core_Response;
stx_show_core_Response.__name__ = "stx.show.core.Response";
stx_show_core_Response.make = function(state,width,height,prefix,postfix,children,node) {
	return new stx_show_core_Response(state,width,height,prefix,postfix,children,node);
};
stx_show_core_Response.make0 = function(state,width,height,prefix,postfix,children,node) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,prefix);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = haxe_ds_Option.None;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,postfix);
	var tmp1;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp1 = v;
	} else {
		tmp1 = haxe_ds_Option.None;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,children);
	var v = stx_nano_Cluster.lift([]);
	var tmp2;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp2 = v1;
	} else {
		tmp2 = v;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,node);
	var tmp3;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp3 = v;
	} else {
		tmp3 = stx_show_core_LayoutNodeSum.LTree;
	}
	return stx_show_core_Response.make(state,width,height,tmp,tmp1,tmp2,tmp3);
};
stx_show_core_Response.prototype = {
	state: null
	,width: null
	,height: null
	,prefix: null
	,postfix: null
	,children: null
	,node: null
	,yextent: null
	,get_yextent: function() {
		var extent = this.state.request.yindex + this.height;
		var _g_current = 0;
		var _g_array = this.children;
		while(_g_current < _g_array.length) {
			var response = _g_array[_g_current++];
			if(response.get_yextent() > extent) {
				extent = response.get_yextent();
			}
		}
		return extent;
	}
	,xextent: null
	,get_xextent: function() {
		var extent = this.state.request.xindex + this.width;
		var _g_current = 0;
		var _g_array = this.children;
		while(_g_current < _g_array.length) {
			var response = _g_array[_g_current++];
			if(response.get_xextent() > extent) {
				extent = response.get_xextent();
			}
		}
		return extent;
	}
	,__class__: stx_show_core_Response
};
var stx_show_core_State = function(options,request,cache) {
	this.options = options;
	this.request = request;
	this.cache = cache;
};
$hxClasses["stx.show.core.State"] = stx_show_core_State;
stx_show_core_State.__name__ = "stx.show.core.State";
stx_show_core_State.make = function(options,request,cache) {
	return new stx_show_core_State(options,request,cache);
};
stx_show_core_State.make0 = function(options,request,cache) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,options);
	var v = stx_show_core_Options.unit();
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,request);
	var v = stx_show_core_Request.unit();
	var tmp1;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp1 = v1;
	} else {
		tmp1 = v;
	}
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cache);
	var v = stx_nano_Cluster.lift([]);
	var tmp2;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp2 = v1;
	} else {
		tmp2 = v;
	}
	return new stx_show_core_State(tmp,tmp1,tmp2);
};
stx_show_core_State.prototype = {
	options: null
	,request: null
	,cache: null
	,copy: function(Int1,options,xindex,request,cache) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,options);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.options;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,request);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.request;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cache);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.cache;
		}
		return stx_show_core_State.make(tmp,tmp1,tmp2);
	}
	,width: null
	,get_width: function() {
		return this.options.width;
	}
	,width_remaining: null
	,get_width_remaining: function() {
		return this.get_width() - this.request.xindex;
	}
	,lookup: function(block) {
		return new stx_show_showable_term_Mono().toShowable();
	}
	,with_request: function(fn) {
		return stx_show_core_State.make(this.options,fn(this.request),this.cache);
	}
	,respond: function(width,height,prefix,postfix,children,node) {
		var r = this.request;
		return stx_show_core_Response.make(this,width,height,prefix,postfix,children,node);
	}
	,__class__: stx_show_core_State
};
var stx_show_showable_term_Bool = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Bool"] = stx_show_showable_term_Bool;
stx_show_showable_term_Bool.__name__ = "stx.show.showable.term.Bool";
stx_show_showable_term_Bool.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Bool.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		return new stx_show_showable_term_String().show("" + (self == null ? "null" : "" + self),state);
	}
	,__class__: stx_show_showable_term_Bool
});
var stx_show_showable_term_Class = function(type) {
	stx_show_ShowableCls.call(this);
	this.type = type;
};
$hxClasses["stx.show.showable.term.Class"] = stx_show_showable_term_Class;
stx_show_showable_term_Class.__name__ = "stx.show.showable.term.Class";
stx_show_showable_term_Class.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Class.prototype = $extend(stx_show_ShowableCls.prototype,{
	type: null
	,show: function(self,state) {
		throw haxe_Exception.thrown("UNIMPLEMENTED");
	}
	,__class__: stx_show_showable_term_Class
});
var stx_show_showable_term_Dynamic = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Dynamic"] = stx_show_showable_term_Dynamic;
stx_show_showable_term_Dynamic.__name__ = "stx.show.showable.term.Dynamic";
stx_show_showable_term_Dynamic.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Dynamic.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		var _g = Type.typeof(self);
		switch(_g._hx_index) {
		case 0:
			return new stx_show_showable_term_String().show("null",state);
		case 1:
			return new stx_show_showable_term_Int().show(self,state);
		case 2:
			return new stx_show_showable_term_Float().show(self,state);
		case 3:
			return new stx_show_showable_term_Bool().show(self,state);
		case 4:
			return new stx_show_showable_term_Object().show(self,state);
		case 5:
			return new stx_show_showable_term_String().show("<function>",state);
		case 6:
			var c = _g.c;
			return new stx_show_showable_term_Class(c).show(self,state);
		case 7:
			var e = _g.e;
			return new stx_show_showable_term_Enum(e).show(self,state);
		case 8:
			return new stx_show_showable_term_String().show("<unknown>",state);
		}
	}
	,__class__: stx_show_showable_term_Dynamic
});
var stx_show_showable_term_Enum = function(type) {
	stx_show_ShowableCls.call(this);
	this.type = type;
};
$hxClasses["stx.show.showable.term.Enum"] = stx_show_showable_term_Enum;
stx_show_showable_term_Enum.__name__ = "stx.show.showable.term.Enum";
stx_show_showable_term_Enum.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Enum.prototype = $extend(stx_show_ShowableCls.prototype,{
	type: null
	,show: function(self,state) {
		throw haxe_Exception.thrown("UNIMPLEMENTED");
	}
	,__class__: stx_show_showable_term_Enum
});
var stx_show_showable_term_Float = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Float"] = stx_show_showable_term_Float;
stx_show_showable_term_Float.__name__ = "stx.show.showable.term.Float";
stx_show_showable_term_Float.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Float.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		return new stx_show_showable_term_String().show("" + self,state);
	}
	,__class__: stx_show_showable_term_Float
});
var stx_show_showable_term_Int = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Int"] = stx_show_showable_term_Int;
stx_show_showable_term_Int.__name__ = "stx.show.showable.term.Int";
stx_show_showable_term_Int.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Int.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		return new stx_show_showable_term_String().show("" + self,state);
	}
	,__class__: stx_show_showable_term_Int
});
var stx_show_showable_term_Mono = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Mono"] = stx_show_showable_term_Mono;
stx_show_showable_term_Mono.__name__ = "stx.show.showable.term.Mono";
stx_show_showable_term_Mono.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Mono.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		var thiz = self;
		return new stx_show_showable_term_Dynamic().show(thiz,state);
	}
	,__class__: stx_show_showable_term_Mono
});
var stx_show_showable_term_Object = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.Object"] = stx_show_showable_term_Object;
stx_show_showable_term_Object.__name__ = "stx.show.showable.term.Object";
stx_show_showable_term_Object.__super__ = stx_show_ShowableCls;
stx_show_showable_term_Object.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		var _this = Reflect.fields(self);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var field_name = _this[i];
			result[i] = stx_nano_KV.make(field_name,Reflect.field(self,field_name));
		}
		var fields = result;
		throw haxe_Exception.thrown("UNIMPLEMENTED");
	}
	,try_layout_horizontally: function(fields,state) {
		var state1 = state.with_request(function(request) {
			return request.with_node(function(_) {
				return stx_pico_Option.fromNullT(stx_show_core_LayoutNodeSum.LArray(stx_show_core_Axis.H));
			});
		});
		var responses = stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(fields),function(next,memo) {
			var key_display = "" + next.key + ": ";
			var next_state = state1.with_request(function(req) {
				return req.with_xindex(req.xindex + key_display.length);
			});
			var self = state1.lookup(function() {
			}).show(next.val,stx_nano_CoupleLift.snd(memo));
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				var res = t;
				var _g = res.node;
				if(_g._hx_index == 0) {
					var _g1 = _g.node;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "stx/show/showable/term/Object.hx", lineNumber : 25, className : "stx.show.showable.term.Object", methodName : "try_layout_horizontally"});
					self1 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_ShowFailureSum.E_Show_Escaped)),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "stx/show/showable/term/Object.hx", lineNumber : 25, className : "stx.show.showable.term.Object", methodName : "try_layout_horizontally"});
				} else {
					var next_state = state1.with_request(function(_) {
						return stx_show_core_Request.make(res.state.request.xindex + res.width,res.state.request.yindex,res.state.request.node);
					});
					self1 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,stx_nano_ClusterLift.snoc(stx_nano_CoupleLift.fst(memo),res),next_state));
				}
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		},stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,[],state1));
	}
	,__class__: stx_show_showable_term_Object
});
var stx_show_showable_term_String = function() {
	stx_show_ShowableCls.call(this);
};
$hxClasses["stx.show.showable.term.String"] = stx_show_showable_term_String;
stx_show_showable_term_String.__name__ = "stx.show.showable.term.String";
stx_show_showable_term_String.__super__ = stx_show_ShowableCls;
stx_show_showable_term_String.prototype = $extend(stx_show_ShowableCls.prototype,{
	show: function(self,state) {
		throw haxe_Exception.thrown("UNIMPLEMENTED");
	}
	,__class__: stx_show_showable_term_String
});
var stx_stream_CYCLED = $hxEnums["stx.stream.CYCLED"] = { __ename__:"stx.stream.CYCLED",__constructs__:null
	,CYCLED: {_hx_name:"CYCLED",_hx_index:0,__enum__:"stx.stream.CYCLED",toString:$estr}
};
stx_stream_CYCLED.__constructs__ = [stx_stream_CYCLED.CYCLED];
var stx_stream_CyclerApi = function() { };
$hxClasses["stx.stream.CyclerApi"] = stx_stream_CyclerApi;
stx_stream_CyclerApi.__name__ = "stx.stream.CyclerApi";
stx_stream_CyclerApi.__isInterface__ = true;
stx_stream_CyclerApi.prototype = {
	state: null
	,get_state: null
	,value: null
	,get_value: null
	,toString: null
	,toCyclerApi: null
	,uuid: null
	,__class__: stx_stream_CyclerApi
};
var stx_stream_CyclerCls = function() {
	this.uuid = stx_nano_lift_LiftNano.uuid(stx_nano_Wildcard.__,"xxxxx");
};
$hxClasses["stx.stream.CyclerCls"] = stx_stream_CyclerCls;
stx_stream_CyclerCls.__name__ = "stx.stream.CyclerCls";
stx_stream_CyclerCls.__interfaces__ = [stx_stream_CyclerApi];
stx_stream_CyclerCls.prototype = {
	uuid: null
	,state: null
	,get_state: null
	,value: null
	,get_value: null
	,toString: function() {
		var type = stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this));
		return "" + (type == null ? "null" : stx_pico_Identifier.toString(type)) + "[" + this.uuid + "](" + this.get_state() + ":" + Std.string(this.get_value()) + ")";
	}
	,toCyclerApi: function() {
		return this;
	}
	,__class__: stx_stream_CyclerCls
};
var stx_stream_AnonCyclerCls = function(method) {
	stx_stream_CyclerCls.call(this);
	this.method = stx_fn_Thunk.prj(stx_fn_Thunk.cache(method));
};
$hxClasses["stx.stream.AnonCyclerCls"] = stx_stream_AnonCyclerCls;
stx_stream_AnonCyclerCls.__name__ = "stx.stream.AnonCyclerCls";
stx_stream_AnonCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_AnonCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	method: null
	,get_value: function() {
		return this.method();
	}
	,get_state: function() {
		if(this.get_value() == null) {
			return 0;
		} else {
			return 1;
		}
	}
	,__class__: stx_stream_AnonCyclerCls
});
var stx_stream_UnitCyclerCls = function() {
	stx_stream_CyclerCls.call(this);
};
$hxClasses["stx.stream.UnitCyclerCls"] = stx_stream_UnitCyclerCls;
stx_stream_UnitCyclerCls.__name__ = "stx.stream.UnitCyclerCls";
stx_stream_UnitCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_UnitCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	get_value: function() {
		return null;
	}
	,get_state: function() {
		return 0;
	}
	,__class__: stx_stream_UnitCyclerCls
});
var stx_stream_PureCyclerCls = function(value) {
	stx_stream_CyclerCls.call(this);
	this.value = value;
};
$hxClasses["stx.stream.PureCyclerCls"] = stx_stream_PureCyclerCls;
stx_stream_PureCyclerCls.__name__ = "stx.stream.PureCyclerCls";
stx_stream_PureCyclerCls.__super__ = stx_stream_CyclerCls;
stx_stream_PureCyclerCls.prototype = $extend(stx_stream_CyclerCls.prototype,{
	get_value: function() {
		return this.value;
	}
	,get_state: function() {
		return 1;
	}
	,__class__: stx_stream_PureCyclerCls
});
var stx_stream_Cycler = {};
stx_stream_Cycler._new = function(self) {
	return self;
};
stx_stream_Cycler.lift = function(self) {
	return stx_stream_Cycler._new(self);
};
stx_stream_Cycler.prj = function(this1) {
	return this1;
};
stx_stream_Cycler.get_self = function(this1) {
	return stx_stream_Cycler._new(this1);
};
stx_stream_Cycler.unit = function() {
	return stx_stream_Cycler._new(new stx_stream_UnitCyclerCls());
};
stx_stream_Cycler.fromFuture = function(f) {
	return stx_stream_Cycler._new(new stx_stream_PureCyclerCls(f));
};
stx_stream_Cycler.pure = function(f) {
	return stx_stream_Cycler._new(new stx_stream_PureCyclerCls(f));
};
stx_stream_Cycler.toCycle = function(this1) {
	return stx_stream_Cycle._new(this1);
};
var stx_stream_Cycle = {};
stx_stream_Cycle._new = function(self) {
	return self;
};
stx_stream_Cycle.lift = function(self) {
	return stx_stream_Cycle._new(self);
};
stx_stream_Cycle.ZERO = null;
stx_stream_Cycle.get_ZERO = function() {
	if(stx_stream_Cycle.ZERO == null) {
		return stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	} else {
		return stx_stream_Cycle.ZERO;
	}
};
stx_stream_Cycle.unit = function() {
	return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
};
stx_stream_Cycle.anon = function(f) {
	return stx_stream_Cycle._new(new stx_stream_AnonCyclerCls(f));
};
stx_stream_Cycle.fromFutureCycle = function(self) {
	return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(self)));
};
stx_stream_Cycle.fromWork = function(self) {
	if(stx_stream_Work.is_defined(self)) {
		return stx_stream_Cycle._new(self.toCyclerApi());
	} else if(stx_stream_Cycle.ZERO == null) {
		return stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	} else {
		return stx_stream_Cycle.ZERO;
	}
};
stx_stream_Cycle.step = function(this1) {
	if(this1 == null) {
		return stx_stream_Cycler._new(new stx_stream_UnitCyclerCls());
	} else {
		return this1;
	}
};
stx_stream_Cycle.is_defined = function(this1) {
	return this1 != null;
};
stx_stream_Cycle.toString = function(this1) {
	var type = stx_nano_lift_LiftNano.identifier(stx_nano_lift_LiftNano.definition(stx_nano_Wildcard.__,this1));
	return "" + (type == null ? "null" : stx_pico_Identifier.toString(type)) + "[" + this1.uuid + "](" + this1.get_state() + ")";
};
var stx_stream_CycleLift = function() { };
$hxClasses["stx.stream.CycleLift"] = stx_stream_CycleLift;
stx_stream_CycleLift.__name__ = "stx.stream.CycleLift";
stx_stream_CycleLift.lift = function(self) {
	return stx_stream_Cycle._new(self);
};
stx_stream_CycleLift.seq = function(self,that) {
	var _g = that != null;
	if(self != null) {
		if(_g) {
			var next = self == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : self;
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + next.get_state());
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 158, className : "stx.stream.CycleLift", methodName : "seq"}));
			switch(next.get_state()) {
			case 0:
				next.get_value();
				return that;
			case 1:
				var that1 = that;
				var f = function(self) {
					return stx_stream_CycleLift.seq(self,that1);
				};
				return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.map(tink_core_Future.map(next.get_value(),function(x) {
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + (x == null ? "null" : stx_stream_Cycle.toString(x)));
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 165, className : "stx.stream.CycleLift", methodName : "seq"}));
					return x;
				}),f))));
			}
		} else {
			return self;
		}
	} else if(_g) {
		return that;
	} else {
		return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
	}
};
stx_stream_CycleLift.par = function(self,that) {
	var l = self == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : self;
	l.get_value();
	var r = that == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : that;
	r.get_value();
	var _g = l.get_state();
	var _g1 = r.get_state();
	switch(_g) {
	case 0:
		switch(_g1) {
		case 0:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()));
		case 1:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(r.get_value())));
		}
		break;
	case 1:
		switch(_g1) {
		case 0:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(l.get_value())));
		case 1:
			return stx_stream_Cycler.toCycle(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.merge(l.get_value(),r.get_value(),stx_stream_CycleLift.par))));
		}
		break;
	}
};
stx_stream_CycleLift.submit = function(self,pos) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var tmp = pos;
	var v = stx_log_Stringify.fromString("cycle/submit: " + (self == null ? "null" : stx_stream_Cycle.toString(self)) + " " + (tmp == null ? "null" : stx_nano_Position.toString(tmp)));
	new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 195, className : "stx.stream.CycleLift", methodName : "submit"}));
	stx_stream_scheduler_Haxe.apply(self,pos);
};
stx_stream_CycleLift.crunch = function(self) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("cycle/crunch");
	new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 200, className : "stx.stream.CycleLift", methodName : "crunch"}));
	var inner = function(self) {
		var cont = true;
		while(cont) {
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = self == null ? "null" : stx_stream_Cycle.toString(self);
			var v1 = stx_log_Stringify.fromString("" + (cont == null ? "null" : "" + cont) + " " + v);
			new stx_log_log_term_Level(this1,0).toLogApi().comply(v1(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 205, className : "stx.stream.CycleLift", methodName : "crunch"}));
			if(self != null) {
				var this2 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v2 = stx_log_Stringify.fromString("crunching:call");
				new stx_log_log_term_Level(this2,0).toLogApi().comply(v2(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 207, className : "stx.stream.CycleLift", methodName : "crunch"}));
				var call = self;
				self = null;
				var result = call == null ? stx_stream_Cycler._new(new stx_stream_UnitCyclerCls()) : call;
				var this3 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v3 = stx_log_Stringify.fromString("step " + Std.string(result));
				new stx_log_log_term_Level(this3,0).toLogApi().comply(v3(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Cycle.hx", lineNumber : 212, className : "stx.stream.CycleLift", methodName : "crunch"}));
				switch(result.get_state()) {
				case 0:
					cont = false;
					break;
				case 1:
					result.get_value().handle(function(x) {
						self = x;
					});
					break;
				}
			}
		}
	};
	inner(self);
};
var stx_stream_Logging = function() { };
$hxClasses["stx.stream.Logging"] = stx_stream_Logging;
stx_stream_Logging.__name__ = "stx.stream.Logging";
stx_stream_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "stx/stream/Logging.hx", lineNumber : 5, className : "stx.stream.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_stream_Timeout = {};
stx_stream_Timeout._new = function(ms) {
	if(ms == null) {
		ms = 10;
	}
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		var delay = stx_pico_Delay.comply(function() {
			cb(0);
		},ms);
		return new tink_core_SimpleLink($bind(delay,delay.cancel));
	});
};
stx_stream_Timeout.prj = function(this1) {
	return this1;
};
var stx_stream__$Timeout_Backoff = function() { };
$hxClasses["stx.stream._Timeout.Backoff"] = stx_stream__$Timeout_Backoff;
stx_stream__$Timeout_Backoff.__name__ = "stx.stream._Timeout.Backoff";
var stx_stream_Window = {};
stx_stream_Window._new = function(self) {
	return self;
};
stx_stream_Window.lift = function(self) {
	return stx_stream_Window._new(self);
};
stx_stream_Window.make = function(delegate,buffer) {
	return stx_stream_Window.lift(new stx_stream_WindowCls(delegate,buffer));
};
stx_stream_Window.toSignal = function(this1) {
	return this1.toSignal();
};
stx_stream_Window.prj = function(this1) {
	return this1;
};
stx_stream_Window.get_self = function(this1) {
	return stx_stream_Window.lift(this1);
};
var stx_stream_WindowCls = function(delegate,buffer) {
	var _gthis = this;
	this.delegate = delegate;
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,buffer);
	var rec = null;
	rec = function(x) {
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("emit");
		new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 25, className : "stx.stream.WindowCls", methodName : "new"}));
		var fn = rec;
		return stx_coroutine_core_CoroutineSum.Emit(x,stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
			return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
			},function() {
				return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
			});
		})));
	};
	var fn = rec;
	var v = stx_coroutine_pack_Tunnel.lift(stx_coroutine_core_CoroutineSum.Wait(stx_coroutine_core_Transmission.lift(function(control) {
		return stx_coroutine_core_ControlLift.fold(control,fn,function(e) {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_Cause.fromRefuse(stx_nano_lift_LiftErrorDigestToRefuse.toRefuse(e))));
		},function() {
			return stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Terminated(stx_coroutine_core_CauseSum.Stop));
		});
	})));
	var tmp;
	if(self._hx_index == 0) {
		var v1 = self.v;
		tmp = v1;
	} else {
		tmp = v;
	}
	this.buffer = tmp;
	new stx_log_log_term_Level(stx_stream_Logging.log(stx_nano_Wildcard.__),1).toLogApi().comply(new stx_log_EntryCtr().pure(_gthis.buffer),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 30, className : "stx.stream.WindowCls", methodName : "new"}));
	this.delegate.listen(function(x) {
		var next = _gthis.buffer;
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(next));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 34, className : "stx.stream.WindowCls", methodName : "new"}));
		_gthis.buffer = next;
	});
};
$hxClasses["stx.stream.WindowCls"] = stx_stream_WindowCls;
stx_stream_WindowCls.__name__ = "stx.stream.WindowCls";
stx_stream_WindowCls.prototype = {
	buffer: null
	,delegate: null
	,listen: function(handler) {
		var _gthis = this;
		var uptake = [];
		var canceller = null;
		var uptaker = function(x) {
			uptake.push(x);
		};
		canceller = this.delegate.listen(uptaker);
		var partial = this.buffer;
		var transfer = function() {
			uptaker = function(_) {
			};
			var _g = 0;
			while(_g < uptake.length) {
				var t = uptake[_g];
				++_g;
				tink_core_Callback.invoke(handler,t);
			}
			if(canceller != null) {
				if(canceller != null) {
					canceller.cancel();
				}
			}
			_gthis.delegate.listen(handler);
		};
		stx_coroutine_pack_EffectLift.run(stx_coroutine_pack_EmiterLift.secure(stx_coroutine_pack_SourceLift.emiter(stx_coroutine_core_CoroutineLift.source(partial,function() {
			return tink_core_Future.irreversible(function(cb) {
				cb(haxe_ds_Either.Right(stx_coroutine_core_CauseSum.Stop));
			});
		}),function(_) {
			return stx_nano_ChunkSum.End();
		}),stx_coroutine_pack_Secure.handler(handler))).handle(function(cause) {
			if(cause._hx_index == 0) {
				var _g = cause.v;
				if(_g._hx_index == 1) {
					var e = _g.err;
					new stx_log_log_term_Level(stx_stream_Logging.log(stx_nano_Wildcard.__),5).toLogApi().comply(new stx_log_EntryCtr().pure(e),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Window.hx", lineNumber : 66, className : "stx.stream.WindowCls", methodName : "listen"}));
					throw haxe_Exception.thrown(e);
				} else {
					transfer();
				}
			} else {
				transfer();
			}
		});
		return new tink_core_SimpleLink(function() {
		});
	}
	,toSignal: function() {
		return new tink_core__$Signal_Suspendable($bind(this,this.listen),null);
	}
	,__class__: stx_stream_WindowCls
};
var stx_stream_Work = {};
stx_stream_Work.unit = function() {
	return null;
};
stx_stream_Work.wait = function() {
	return stx_stream_Bang._new();
};
stx_stream_Work._new = function(self) {
	return self;
};
stx_stream_Work.lift = function(self) {
	return self;
};
stx_stream_Work.prj = function(this1) {
	return this1;
};
stx_stream_Work.get_self = function(this1) {
	return this1;
};
stx_stream_Work.fromCycle = function(self) {
	return self;
};
stx_stream_Work.fromFutureWork = function(ft) {
	return stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(tink_core_Future.flatMap(ft,function(bang) {
		if(bang == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(bang));
		}
	}))));
};
stx_stream_Work.toCycle = function(this1) {
	return stx_stream_Cycle.fromWork(this1);
};
stx_stream_Work.is_defined = function(this1) {
	return this1 != null;
};
var stx_stream_Bang = {};
stx_stream_Bang._new = function() {
	return new tink_core_FutureTrigger();
};
stx_stream_Bang.fill = function(this1,block) {
	this1.trigger(block);
};
stx_stream_Bang.done = function(this1) {
	this1.trigger(stx_stream_Cycle.ZERO == null ? stx_stream_Cycle.ZERO = stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_UnitCyclerCls())) : stx_stream_Cycle.ZERO);
};
stx_stream_Bang.toWork = function(this1) {
	return this1 == null ? null : stx_stream_Cycle._new(stx_stream_Cycler._new(new stx_stream_PureCyclerCls(this1)));
};
stx_stream_Bang.unit = function() {
	return stx_stream_Bang._new();
};
var stx_stream_WorkLift = function() { };
$hxClasses["stx.stream.WorkLift"] = stx_stream_WorkLift;
stx_stream_WorkLift.__name__ = "stx.stream.WorkLift";
stx_stream_WorkLift.lift = function(self) {
	return self;
};
stx_stream_WorkLift.seq = function(self,that) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("work seq setup " + Std.string(self) + " " + Std.string(that));
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/Work.hx", lineNumber : 63, className : "stx.stream.WorkLift", methodName : "seq"}));
	var self1;
	if(self == null) {
		if(that == null) {
			self1 = null;
		} else {
			var y = that;
			self1 = y;
		}
	} else if(that == null) {
		var x = self;
		self1 = x;
	} else {
		var x = self;
		var y = that;
		self1 = stx_stream_CycleLift.seq(x,y);
	}
	return self1;
};
stx_stream_WorkLift.par = function(self,that) {
	var self1;
	if(self == null) {
		if(that == null) {
			self1 = null;
		} else {
			var y = that;
			self1 = y;
		}
	} else if(that == null) {
		var x = self;
		self1 = x;
	} else {
		var x = self;
		var y = that;
		self1 = stx_stream_CycleLift.par(x,y);
	}
	return self1;
};
var stx_stream_core_Errors = function() { };
$hxClasses["stx.stream.core.Errors"] = stx_stream_core_Errors;
stx_stream_core_Errors.__name__ = "stx.stream.core.Errors";
stx_stream_core_Errors.e_end_called_twice = function(digests) {
	return new stx_stream_core_EEndCalledTwice();
};
var stx_stream_core_EEndCalledTwice = function() {
	stx_fail_Digest.call(this,"01FRQ80PZA3A57AZPXPQA7Z8YT","End called twice");
};
$hxClasses["stx.stream.core.EEndCalledTwice"] = stx_stream_core_EEndCalledTwice;
stx_stream_core_EEndCalledTwice.__name__ = "stx.stream.core.EEndCalledTwice";
stx_stream_core_EEndCalledTwice.__super__ = stx_fail_Digest;
stx_stream_core_EEndCalledTwice.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_stream_core_EEndCalledTwice
});
var stx_stream_scheduler_Haxe = function() { };
$hxClasses["stx.stream.scheduler.Haxe"] = stx_stream_scheduler_Haxe;
stx_stream_scheduler_Haxe.__name__ = "stx.stream.scheduler.Haxe";
stx_stream_scheduler_Haxe.apply = function(self,pos) {
	var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("Haxe.apply");
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 7, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
	var ignition = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(0));
	var event = null;
	var start = null;
	start = function(cycle) {
		var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
		var tmp = cycle[0];
		var v = stx_log_Stringify.fromString("start " + (tmp == null ? "null" : stx_stream_Cycle.toString(tmp)));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 12, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
		var tmp = cycle[0];
		var _g = tmp != null ? tmp.get_value() : null;
		if(_g == null) {
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("nothing remains");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 15, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
			event.stop();
		} else {
			var x = _g;
			var local = null;
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("initialise local");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 19, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
			var next = function() {
				x.handle(function(x) {
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("start");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 23, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
					var start1 = start;
					var ret = new Array(1);
					ret[0] = x;
					start1(ret);
				});
			};
			var cancelled = false;
			var cbh = x.handle(function(c) {
				if(!cancelled) {
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("set local as " + (c == null ? "null" : stx_stream_Cycle.toString(c)));
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 32, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
					local = c;
				} else {
					var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("already cancelled");
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 35, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
				}
			});
			var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("local is set synchronousely as " + (local == null ? "null" : stx_stream_Cycle.toString(local)));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 39, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
			if(local == null) {
				if(cbh != null) {
					cbh.cancel();
				}
				cancelled = true;
				var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("STOP");
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 43, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
				event.stop();
				event = haxe_MainLoop.add(next);
			} else {
				var this1 = stx_stream_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("switch out cycle value " + Std.string(haxe_MainLoop.hasEvents()));
				new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/stream/scheduler/Haxe.hx", lineNumber : 47, className : "stx.stream.scheduler.Haxe", methodName : "apply"}));
				cycle[0] = local;
			}
		}
	};
	var _g = start;
	var ret = new Array(1);
	ret[0] = self;
	var cycle = ret;
	event = haxe_MainLoop.add(function() {
		_g(cycle);
	});
};
var stx_stub_Assert = {};
stx_stub_Assert._new = function() {
	return "0bed2be8-2b68-4191-8b92-1a59383aa7a1";
};
var stx_test_Assert = function() {
	this.__assertions = [];
};
$hxClasses["stx.test.Assert"] = stx_test_Assert;
stx_test_Assert.__name__ = "stx.test.Assert";
stx_test_Assert.prototype = {
	__assertions: null
	,assert: function(assertion) {
		this.__assertions.push(assertion);
	}
	,eq: function(self,that,eq,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,self).should().be_equal_to(that);
		},reason);
		this.assert(stx_test_core_Assertion.make(stx_assert_EqualedSum.is_equal(eq.comply(self,that)),reason,stx_fail_TestFailureSum.TestFailedBecause(reason),pos));
	}
	,equals: function(self,that,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,self).should().be_equal_to(that);
		},reason);
		this.assert(stx_test_core_Assertion.make(self == that,reason,stx_fail_TestFailureSum.TestFailedBecause(reason),pos));
	}
	,raise: function(error,reason,pos) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,reason);
		if(self._hx_index == 0) {
			var v = self.v;
			reason = v;
		} else {
			reason = Std.string(error);
		}
		this.assert(stx_test_core_Assertion.make(false,reason,stx_fail_TestFailureSum.E_Test_Exception(error),pos));
	}
	,pass: function(reason,pos) {
		if(reason == null) {
			reason = "pass";
		}
		this.assert(stx_test_core_Assertion.make(true,reason,stx_fail_TestFailureSum.NullTestFailure,pos));
	}
	,fail: function(reason,pos) {
		if(reason == null) {
			reason = "force fail";
		}
		this.assert(stx_test_core_Assertion.make(false,reason,null,pos));
	}
	,refuse: function(err,pos) {
		this.assert(stx_test_core_Assertion.make(false,stx_pico_Option.toString(err.get_data()),stx_fail_TestFailureSum.E_Test_Refuse(err),pos));
	}
	,error: function(err,pos) {
		this.assert(stx_test_core_Assertion.make(false,stx_pico_Option.toString(err.get_data()),stx_fail_TestFailureSum.E_Test_Refuse(stx_fail_Error.map(err,stx_fail_DeclineSum.EXTERNAL)),pos));
	}
	,exception: function(err,pos) {
		this.assert(stx_test_core_Assertion.make(false,err.details(),stx_fail_TestFailureSum.E_Test_Exception(err),pos));
	}
	,error_test: function(reason,err,pos) {
		this.assert(stx_test_core_Assertion.make(false,reason,err,pos));
	}
	,same: function(lhs,rhs,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,lhs).should().be(rhs,"the same as");
		},reason);
		this.assert(stx_test_core_Assertion.make(equals_Equal.equals(lhs,rhs),reason,null,pos));
	}
	,is_true: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(true);
		},reason);
		this.assert(stx_test_core_Assertion.make(v,reason,null,pos));
	}
	,is_false: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(false);
		},reason);
		this.assert(stx_test_core_Assertion.make(!v,reason,null,pos));
	}
	,exists: function(v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,"value").should().exist();
		},reason);
		this.assert(stx_test_core_Assertion.make(v != null,reason,null,pos));
	}
	,iz: function(clazz,v,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,v).should().be(clazz,"a value of type");
		},reason);
		var truth;
		var _g = Type.typeof(v);
		if(_g._hx_index == 6) {
			var cls = _g.c;
			truth = stx_nano_lift_LiftNano.identifier(cls) == stx_nano_lift_LiftNano.identifier(clazz);
		} else {
			truth = false;
		}
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,raises: function(fn,reason,pos) {
		if(reason == null) {
			reason = "Expectation of thrown error not met";
		}
		var truth = false;
		try {
			fn();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			truth = true;
		}
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,alike: function(oI,oII,reason,pos) {
		var e0 = oI;
		var e1 = oII;
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,e0).should().be_like(e1);
		},reason);
		var truth = stx_nano_EnumValue.get_index(e0) == stx_nano_EnumValue.get_index(e1) && stx_nano_EnumValue.ctr(e0) == stx_nano_EnumValue.ctr(e1);
		this.assert(stx_test_core_Assertion.make(truth,reason,null,pos));
	}
	,accepted: function(o,reason,pos) {
		reason = this.reasoning(function() {
			return stx_Test.explain(stx_nano_Wildcard.__,o).should().be_like(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null));
		},reason);
		this.alike(stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,null),o,reason,pos);
	}
	,reasoning: function(op,def) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,def);
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return op().toString();
		}
	}
	,__class__: stx_test_Assert
};
var stx_test_Assertions = {};
stx_test_Assertions.get_failures = function(this1) {
	return stx_lift_ArrayLift.map_filter(this1,function(x) {
		var self = stx_test_core_Assertion.outcome(x);
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return haxe_ds_Option.None;
		case 1:
			var e = self.e;
			return haxe_ds_Option.Some(e);
		}
	});
};
stx_test_Assertions.has_failures = function(this1) {
	return stx_test_Assertions.get_failures(this1).length > 0;
};
var stx_test_Async = {};
stx_test_Async.wait = function() {
	return new tink_core_FutureTrigger();
};
stx_test_Async.done = function(this1) {
	this1.trigger(stx_test_TestEffect.unit());
};
var stx_test_AsyncResult = {};
stx_test_AsyncResult.lift = function(self) {
	return self;
};
stx_test_AsyncResult.pure = function(v) {
	return stx_test_AsyncResult.lift(haxe_ds_Option.Some(v));
};
stx_test_AsyncResult.unit = function() {
	return stx_test_AsyncResult.lift(haxe_ds_Option.None);
};
stx_test_AsyncResult.tap = function(this1,fn) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		fn(t);
		break;
	case 1:
		break;
	}
};
stx_test_AsyncResult.use = function(this1,fn,nil,pos) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		var self;
		try {
			var _g = fn;
			var a1 = t;
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,(function() {
				return _g(a1);
			})());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(js_Boot.__implements(_g3,stx_fail_ErrorApi)) {
				var e = _g3;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(pos))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			var f = null;
			var v = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/AsyncResult.hx", lineNumber : 22, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				return v1;
			} else {
				return v;
			}
			break;
		case 1:
			var e = self.e;
			return stx_fail_RefuseLift.report(e);
		}
		break;
	case 1:
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,nil);
		var fn;
		if(self._hx_index == 0) {
			var v = self.v;
			fn = v;
		} else {
			fn = function() {
				var f = null;
				if(f == null) {
					return stx_nano_Report.unit();
				} else {
					return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/AsyncResult.hx", lineNumber : 25, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
				}
			};
		}
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(js_Boot.__implements(_g3,stx_fail_ErrorApi)) {
				var e = _g3;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT({ fileName : "src/main/haxe/stx/test/AsyncResult.hx", lineNumber : 25, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"}))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,t);
			var f = null;
			var v = f == null ? stx_nano_Report.unit() : stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/AsyncResult.hx", lineNumber : 26, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "use"})));
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				return v1;
			} else {
				return v;
			}
			break;
		case 1:
			var e = self.e;
			return stx_fail_RefuseLift.report(e);
		}
		break;
	}
};
stx_test_AsyncResult.test = function(this1,val,nil,pos) {
	switch(this1._hx_index) {
	case 0:
		var t = this1.v;
		var _g = val;
		var a1 = t;
		var fn = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(function() {
			_g(a1);
		},null));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(js_Boot.__implements(_g3,stx_fail_ErrorApi)) {
				var e = _g3;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(pos))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var f = null;
			if(f == null) {
				return stx_nano_Report.unit();
			} else {
				return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/AsyncResult.hx", lineNumber : 34, className : "stx.test._AsyncResult.AsyncResult_Impl_", methodName : "test"})));
			}
			break;
		case 1:
			var e = self.e;
			return stx_fail_RefuseLift.report(e);
		}
		break;
	case 1:
		var fn = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(nil,null));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g1 ) {
			haxe_NativeStackTrace.lastError = _g1;
			var _g2 = haxe_Exception.caught(_g1);
			var _g3 = _g2.unwrap();
			if(js_Boot.__implements(_g3,stx_fail_ErrorApi)) {
				var e = _g3;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(pos))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		var tmp;
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			var f = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			tmp = stx_nano_Report.pure(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.NullTestFailure)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f)));
			break;
		case 1:
			var e = self.e;
			tmp = stx_fail_RefuseLift.report(e);
			break;
		}
		return tmp;
	}
};
var stx_test_FnType = $hxEnums["stx.test.FnType"] = { __ename__:"stx.test.FnType",__constructs__:null
	,ZeroZero: {_hx_name:"ZeroZero",_hx_index:0,__enum__:"stx.test.FnType",toString:$estr}
	,ZeroOne: {_hx_name:"ZeroOne",_hx_index:1,__enum__:"stx.test.FnType",toString:$estr}
	,OneZero: {_hx_name:"OneZero",_hx_index:2,__enum__:"stx.test.FnType",toString:$estr}
};
stx_test_FnType.__constructs__ = [stx_test_FnType.ZeroZero,stx_test_FnType.ZeroOne,stx_test_FnType.OneZero];
var stx_test_Logging = function() { };
$hxClasses["stx.test.Logging"] = stx_test_Logging;
stx_test_Logging.__name__ = "stx.test.Logging";
stx_test_Logging.log = function(wildcard) {
	var self = stx_pico_OptionLift.map(stx_pkg_Pkg.source(stx_PkgLift.pkg(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/Logging.hx", lineNumber : 10, className : "stx.test.Logging", methodName : "log"})),function(scope) {
		var this1 = stx_log_Log.unit();
		var tag = scope.pack.join("/");
		return new stx_log_log_term_ModAnon(this1,function(pos) {
			return pos.with_stamp(function(stamp) {
				return stamp.tag(tag);
			});
		});
	});
	if(self._hx_index == 0) {
		var v = self.v;
		return v;
	} else {
		return stx_log_Log.unit();
	}
};
var stx_test_MacroTestCaseLift = function() { };
$hxClasses["stx.test.MacroTestCaseLift"] = stx_test_MacroTestCaseLift;
stx_test_MacroTestCaseLift.__name__ = "stx.test.MacroTestCaseLift";
stx_test_MacroTestCaseLift.get_tests = function(self,timeout) {
	var clazz = js_Boot.getClass(self);
	var type_meta = haxe_rtti_Meta.getType(clazz);
	var all_test_async = Object.prototype.hasOwnProperty.call(type_meta,"stx.test.async");
	var field_meta = haxe_rtti_Meta.getFields(clazz);
};
var stx_test_MethodCall = function(object,class_name,field_name,_call,timeout) {
	this.object = object;
	this.class_name = class_name;
	this.field_name = field_name;
	this._call = _call;
	this.timeout = timeout;
	this.assertions = [];
};
$hxClasses["stx.test.MethodCall"] = stx_test_MethodCall;
stx_test_MethodCall.__name__ = "stx.test.MethodCall";
stx_test_MethodCall.prototype = {
	object: null
	,class_name: null
	,field_name: null
	,_call: null
	,timeout: null
	,timestamp: null
	,call: function() {
		var _gthis = this;
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("call: timeout : " + this.get_timeout());
		new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/MethodCall.hx", lineNumber : 21, className : "stx.test.MethodCall", methodName : "call"}));
		var _this = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/MethodCall.hx", lineNumber : 22, className : "stx.test.MethodCall", methodName : "call"});
		var t = this._call;
		var self = _this.module.exists().apply(t);
		if(self != null) {
			switch(self._hx_index) {
			case 0:
				var v = self.v;
				throw haxe_Exception.thrown(v);
			case 1:
				break;
			}
		}
		this.timestamp = HxOverrides.now() / 1000;
		var all_assertions = this.object.__assertions;
		var before_assertions_length = all_assertions.length;
		var fn = stx_test_TestMethodZero.prj(this._call);
		var res;
		try {
			res = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(js_Boot.__implements(_g2,stx_fail_ErrorApi)) {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				res = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g1;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				res = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT({ fileName : "src/main/haxe/stx/test/MethodCall.hx", lineNumber : 31, className : "stx.test.MethodCall", methodName : "call"}))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("" + Std.string(res));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/MethodCall.hx", lineNumber : 33, className : "stx.test.MethodCall", methodName : "call"}));
		var result;
		switch(res._hx_index) {
		case 0:
			var t = res.t;
			switch(t._hx_index) {
			case 0:
				var t1 = t.v;
				result = tink_core_Future.first(t1,stx_test_core_Timeout.make(_gthis.get_timeout()));
				break;
			case 1:
				result = stx_test_TestResult.unit();
				break;
			}
			break;
		case 1:
			var e = res.e;
			result = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(stx_test_TestEffect.fromRefuse(e)));
			break;
		}
		var result1 = stx_test_TestResult.tap(stx_test_TestResult.lift(result),function(x) {
			var after_assertions_length = all_assertions.length;
			var _g = before_assertions_length;
			var _g1 = after_assertions_length;
			while(_g < _g1) {
				var i = _g++;
				_gthis.get_assertions().push(all_assertions[i]);
			}
		});
		return result1;
	}
	,assertions: null
	,get_assertions: function() {
		return this.assertions;
	}
	,position: function() {
		var _gthis = this;
		var type = js_Boot.getClass(this.object);
		return stx_LiftIf.if_else(haxe_rtti_Rtti.hasRtti(type),function() {
			var clazz = haxe_rtti_Rtti.getRtti(type);
			var field = stx_lift_ArrayLift.search(clazz.fields,function(x) {
				return x.name == _gthis.field_name;
			});
			return stx_pico_OptionLift.map(field,function(field) {
				var parts = clazz.path.split(".");
				var fileName = clazz.file;
				var className = parts[parts.length - 1];
				var methodName = _gthis.field_name;
				var lineNumber = field.line;
				return stx_nano_Position.make(fileName,className,methodName,lineNumber);
			});
		},function() {
			return haxe_ds_Option.None;
		});
	}
	,depends: function() {
		var fields_meta = haxe_rtti_Meta.getFields(js_Boot.getClass(this.object));
		var self = stx_pico_OptionLift.flat_map(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fields_meta),function(obj) {
			return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(obj,"stx.test.depends"));
		}),function(arr) {
			var result = new Array(arr.length);
			var _g = 0;
			var _g1 = arr.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = Std.string(arr[i]);
			}
			var _this = result;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				var s = _this[i];
				var out = HxOverrides.substr(s,1,s.length - 2);
				result[i] = out;
			}
			return stx_pico_Option.fromNullT(result);
		});
		var field_meta;
		if(self._hx_index == 0) {
			var v = self.v;
			field_meta = v;
		} else {
			field_meta = [];
		}
		return field_meta;
	}
	,get_timeout: function() {
		var fields_meta = haxe_rtti_Meta.getFields(js_Boot.getClass(this.object));
		var field_meta = Reflect.field(fields_meta,this.field_name);
		var self = stx_pico_OptionLift.map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(field_meta,"timeout")),function(arr) {
			return arr[0];
		});
		if(self._hx_index == 0) {
			var v = self.v;
			return v;
		} else {
			return this.timeout;
		}
	}
	,has_assertions: function() {
		return this.get_assertions().length > 0;
	}
	,toString: function() {
		var location = this.class_name + this.field_name;
		return "MethodCall(" + location + ")";
	}
	,__class__: stx_test_MethodCall
};
var stx_test_Module = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.test.Module"] = stx_test_Module;
stx_test_Module.__name__ = "stx.test.Module";
stx_test_Module.__super__ = stx_pico_Clazz;
stx_test_Module.prototype = $extend(stx_pico_Clazz.prototype,{
	auto: function(timeout) {
		try {
			var self = stx_test_module_Auto.reply();
			var fn = function(o) {
				var self = stx_nano_ClusterLift.head(o.specs);
				var fn;
				if(self._hx_index == 0) {
					var v = self.v;
					fn = v;
				} else {
					fn = { name : "main", specs : [], op : stx_test_auto_Op.Exclude};
				}
				return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,o,fn);
			};
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				self1 = stx_nano_UpshotSum.Accept(fn(t));
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			var self = self1;
			var fn = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(suite,spec) {
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(suite));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 34, className : "stx.test.Module", methodName : "auto"}));
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(spec));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 35, className : "stx.test.Module", methodName : "auto"}));
				return stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(suite.cases),function(n,m) {
					var c = js_Boot.getClass(n);
					var test_case_name = c.__name__;
					var spec_ref = stx_nano_ClusterLift.search(spec.specs,function(class_spec) {
						var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
						var v = stx_log_Stringify.fromString("" + stx_test_auto_ClassPath.prj(class_spec.path) + " " + test_case_name);
						new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 42, className : "stx.test.Module", methodName : "auto"}));
						return stx_test_auto_ClassPath.prj(class_spec.path) == test_case_name;
					});
					var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(spec.op));
					new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 46, className : "stx.test.Module", methodName : "auto"}));
					switch(spec.op._hx_index) {
					case 0:
						var fn;
						switch(spec_ref._hx_index) {
						case 0:
							var t = spec_ref.v;
							var x = t;
							var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
							var v = stx_log_Stringify.fromString("" + Std.string(x));
							new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 50, className : "stx.test.Module", methodName : "auto"}));
							var data = stx_test_TestCaseLift.get_tests(n,timeout);
							var method_calls = data.method_calls;
							var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,x.methods);
							var self1;
							switch(self._hx_index) {
							case 0:
								var t = self.v;
								var methods = t;
								var self = stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(method_calls),function(n,m) {
									var has_method = stx_nano_ClusterLift.any(methods,function(x) {
										return n.field_name == x;
									});
									var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
									var v = stx_log_Stringify.fromString("" + (has_method == null ? "null" : "" + has_method) + " " + n.field_name);
									new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 61, className : "stx.test.Module", methodName : "auto"}));
									var self;
									switch(x.op._hx_index) {
									case 0:
										self = has_method ? stx_nano_ClusterLift.snoc(m,n) : m;
										break;
									case 1:
										self = has_method ? m : stx_nano_ClusterLift.snoc(m,n);
										break;
									}
									return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,self);
								},[]);
								var fn1 = function(calls) {
									return data.copy(null,null,calls);
								};
								var self2;
								switch(self._hx_index) {
								case 0:
									var t = self.t;
									self2 = stx_nano_UpshotSum.Accept(fn1(t));
									break;
								case 1:
									var e = self.e;
									self2 = stx_nano_UpshotSum.Reject(e);
									break;
								}
								var next = self2;
								self1 = next;
								break;
							case 1:
								self1 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,data);
								break;
							}
							var fn1 = function(x) {
								return stx_nano_ClusterLift.snoc(m,x);
							};
							var self;
							switch(self1._hx_index) {
							case 0:
								var t = self1.t;
								self = stx_nano_UpshotSum.Accept(fn1(t));
								break;
							case 1:
								var e = self1.e;
								self = stx_nano_UpshotSum.Reject(e);
								break;
							}
							fn = self;
							break;
						case 1:
							fn = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,m);
							break;
						}
						return fn;
					case 1:
						var fn;
						switch(spec_ref._hx_index) {
						case 0:
							var t = spec_ref.v;
							fn = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,m);
							break;
						case 1:
							var data1 = stx_test_TestCaseLift.get_tests(n,timeout);
							fn = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_ClusterLift.snoc(m,data1));
							break;
						}
						return fn;
					}
				},[]);
			});
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				self1 = fn(t);
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			var spec = self1;
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + Std.string(stx_nano_UpshotLift.point(spec,function(x) {
				new stx_test_Reporter(new stx_test_Runner().applyI(x)).enact();
				var f = null;
				if(f == null) {
					return stx_nano_Report.unit();
				} else {
					return stx_nano_Report.pure(f(stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 96, className : "stx.test.Module", methodName : "auto"})));
				}
			})));
			new stx_log_log_term_Level(this1,3).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 92, className : "stx.test.Module", methodName : "auto"}));
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString(e.details());
			new stx_log_log_term_Level(this1,6).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Module.hx", lineNumber : 100, className : "stx.test.Module", methodName : "auto"}));
			throw haxe_Exception.thrown(e);
		}
	}
	,run: function(tests,poke) {
		var tests1 = tests;
		new stx_test_Reporter(new stx_test_Runner().apply(tests1)).enact();
	}
	,__class__: stx_test_Module
});
var stx_test_Reporter = function(stream) {
	stx_pico_Clazz.call(this);
	this.stream = stream;
	this.printing = new stx_test_reporter_RuntimeReporting();
};
$hxClasses["stx.test.Reporter"] = stx_test_Reporter;
stx_test_Reporter.__name__ = "stx.test.Reporter";
stx_test_Reporter.__super__ = stx_pico_Clazz;
stx_test_Reporter.prototype = $extend(stx_pico_Clazz.prototype,{
	stream: null
	,printing: null
	,close: function(err) {
		if(err != null) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString(err.toString());
			new stx_log_log_term_Level(this1,5).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Reporter.hx", lineNumber : 13, className : "stx.test.Reporter", methodName : "close"}));
		}
	}
	,indenter: function(indent) {
		return "" + indent + "\t";
	}
	,enact: function() {
		var _gthis = this;
		var p = this.printing;
		var closed = false;
		var serve = function(data) {
			var l0 = _gthis.indenter("");
			var l1 = _gthis.indenter(l0);
			var l2 = _gthis.indenter(l1);
			var l3 = _gthis.indenter(l2);
			var method_call_string_fn = $bind(p,p.method_call_string);
			var test_case_string_fn = $bind(p,p.test_case_string);
			switch(data._hx_index) {
			case 0:
				break;
			case 1:
				var info = data.info;
				p.println(info);
				break;
			case 2:
				var test_case_data = data.test_case_data;
				p.println(test_case_string_fn(test_case_data),l1);
				break;
			case 3:
				var method_call = data.method_call;
				p.println(method_call_string_fn(method_call),l2);
				break;
			case 4:
				var err = data.err;
				p.println("<red>" + err.toString() + "</red>");
				var p1 = p;
				var tmp = err.get_stack();
				p1.println("" + (tmp == null ? "null" : stx_pico_Option.toString(tmp)));
				break;
			case 5:
				var err = data.f;
				p.println("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				break;
			case 6:
				var err = data.f;
				p.println("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				break;
			case 7:
				var err = data.f;
				p.println("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				break;
			case 8:
				var err = data.f;
				p.println("<red>" + stx_fail_TestFailure.toString(err) + "</red>");
				break;
			case 9:
				var xs = data.xs;
				var _g_current = 0;
				var _g_array = xs;
				while(_g_current < _g_array.length) {
					var x = _g_array[_g_current++];
					p.println("<red>" + stx_fail_TestFailure.toString(x) + "</red>");
				}
				break;
			case 10:
				var _g = data.method_call;
				var assertion = data.assertion;
				var self = stx_test_core_Assertion.outcome(assertion);
				var assertion_string;
				switch(self._hx_index) {
				case 0:
					var t = self.t;
					assertion_string = t;
					break;
				case 1:
					var e = self.e;
					assertion_string = stx_Show.show(stx_nano_Wildcard.__,e);
					break;
				}
				p.print_status(p.get_red_cross_on_black(),p.fail_string("" + assertion_string),l3);
				break;
			case 11:
				var method_call = data.method_call;
				if(!method_call.has_assertions()) {
					p.print_status(p.get_yellow_question_on_black(),p.warn_string("no assertions"),l3);
				}
				break;
			case 12:
				var test_case_data = data.test_case_data;
				if(!test_case_data.has_assertions()) {
					p.print_status(p.get_yellow_question_on_black(),p.warn_string("no assertions"),l3);
				}
				break;
			case 13:
				var test_suite = data.test_suite;
				p.println("_________________________________________________");
				var _g_current = 0;
				var _g_array = test_suite.test_cases;
				while(_g_current < _g_array.length) {
					var test_case_data = _g_array[_g_current++];
					var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromBool(test_case_data.has_assertions());
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Reporter.hx", lineNumber : 84, className : "stx.test.Reporter", methodName : "enact"}));
					if(!test_case_data.has_assertions()) {
						p.print_status(p.get_yellow_question_on_black(),p.warn_string("" + test_case_data.class_name));
					} else if(!test_case_data.has_failures()) {
						p.print_status(p.get_green_tick_on_black(),p.ok_string("" + test_case_data.class_name));
					} else {
						p.print_status(p.get_red_cross_on_black(),p.fail_string("" + test_case_data.class_name));
					}
					var _g_current1 = 0;
					var _g_array1 = test_case_data.method_calls;
					while(_g_current1 < _g_array1.length) {
						var method_call = [_g_array1[_g_current1++]];
						var status = stx_LiftIf.if_else(method_call[0].has_assertions(),(function(method_call) {
							return function() {
								return stx_LiftIf.if_else(stx_test_Assertions.has_failures(method_call[0].get_assertions()),(function() {
									return function() {
										return p.get_red_cross_on_black();
									};
								})(),(function() {
									return function() {
										return p.get_green_tick_on_black();
									};
								})());
							};
						})(method_call),(function() {
							return function() {
								return p.get_yellow_question_on_black();
							};
						})());
						p.print_status(status,p.info_string("" + method_call[0].field_name));
						var _g = 0;
						var _g1 = method_call[0].get_assertions();
						while(_g < _g1.length) {
							var assertion = [_g1[_g]];
							++_g;
							var predicate = false;
							if(predicate) {
								stx_LiftIf.if_else(assertion[0].truth,(function(assertion) {
									return function() {
										p.print_status(p.get_green_tick_on_black(),p.ok_string("" + (assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]))),l1);
									};
								})(assertion),(function(assertion) {
									return function() {
										p.print_status(p.get_red_cross_on_black(),p.fail_string("" + (assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]))),l1);
										var stack = $iterator(stx_pico_OptionLift)(stx_pico_OptionLift.flat_map(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,assertion[0].failure),(function() {
											return function(x) {
												return stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_TestFailure.get_stack(x));
											};
										})()));
										while(stack.hasNext()) {
											var stack1 = stack.next();
											var item = $iterator(stx_pico_OptionLift)(stack1);
											while(item.hasNext()) {
												var item1 = item.next();
												p.println(p.fail_string("" + (item1 == null ? "null" : haxe_CallStack.toString(item1))));
											}
										}
									};
								})(assertion));
							} else {
								stx_LiftIf.if_else(assertion[0].truth,(function() {
									return function() {
										return;
									};
								})(),(function(assertion) {
									return function() {
										p.print_status(p.get_red_cross_on_black(),p.fail_string("" + (assertion[0] == null ? "null" : stx_test_core_Assertion.toString(assertion[0]))),l1);
									};
								})(assertion));
							}
						}
					}
				}
				if(!test_suite.is_clean()) {
					var _gthis1 = _gthis;
					var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/Reporter.hx", lineNumber : 132, className : "stx.test.Reporter", methodName : "enact"});
					_gthis1.close(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
						return stx_test_core_Errors.e_suite_failed(_);
					},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)));
				} else {
					_gthis.close(null);
				}
				closed = true;
				break;
			}
		};
		this.stream.listen(function(chunk) {
			switch(chunk._hx_index) {
			case 0:
				var v = chunk.v;
				serve(v);
				break;
			case 1:
				break;
			case 2:
				var e = chunk.err;
				if(!closed) {
					_gthis.close(e);
				}
				break;
			}
		});
	}
	,__class__: stx_test_Reporter
});
var stx_test_Runner = function(timeout) {
	if(timeout == null) {
		timeout = 6000;
	}
	this.timeout = timeout;
};
$hxClasses["stx.test.Runner"] = stx_test_Runner;
stx_test_Runner.__name__ = "stx.test.Runner";
stx_test_Runner.prototype = {
	timeout: null
	,apply: function(cases) {
		var _gthis = this;
		var result = new Array(cases.length);
		var _g = 0;
		var _g1 = cases.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = cases[i].__stx__tests(_gthis.timeout);
		}
		var test_cases = result;
		return this.applyI(test_cases);
	}
	,applyI: function(cases) {
		var _gthis = this;
		var sig = stx_Stream.fromCluster(cases);
		return stx_StreamLift.seq(stx_StreamLift.flat_map(sig,function(val) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("TestCase:= " + Std.string(val));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 18, className : "stx.test.Runner", methodName : "applyI"}));
			return stx_StreamLift.seq(stx_StreamLift.seq(stx_Stream.pure(stx_test_TestPhaseSum.TP_StartTestCase(val)),stx_test_TestCaseDataRun.apply(val,_gthis.timeout)),stx_Stream.effect(function() {
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("After TestCaseDataRun");
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 21, className : "stx.test.Runner", methodName : "applyI"}));
			}));
		}),stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportTestSuiteComplete(new stx_test_TestSuite(cases))));
	}
	,__class__: stx_test_Runner
};
var stx_test_TestCaseDataRun = function() { };
$hxClasses["stx.test.TestCaseDataRun"] = stx_test_TestCaseDataRun;
stx_test_TestCaseDataRun.__name__ = "stx.test.TestCaseDataRun";
stx_test_TestCaseDataRun.apply = function(test_case_data,timeout) {
	var setup = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__setup)),timeout,stx_test_TestPhaseSum.TP_Setup);
	var teardown = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__teardown)),timeout,stx_test_TestPhaseSum.TP_Teardown);
	return stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(setup,stx_StreamLift.flat_map(stx_Stream.fromCluster(test_case_data.method_calls),function(method_call) {
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("apply: TestCaseDataRun: " + Std.string(test_case_data) + " " + Std.string(method_call));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 32, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		var init = stx_Stream.pure(stx_test_TestPhaseSum.TP_StartTest(method_call));
		var before = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__before)),timeout,stx_test_TestPhaseSum.TP_Before);
		var after = stx_test_TestCaseDataRun.updown(($_=test_case_data.test_case,$bind($_,$_.__after)),timeout,stx_test_TestPhaseSum.TP_After);
		return stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(stx_StreamLift.seq(init,before),stx_Stream.effect(function() {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("before " + Std.string(test_case_data) + " " + Std.string(method_call));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 38, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		})),stx_test_MethodCallRun.apply(method_call)),stx_Stream.effect(function() {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("after " + Std.string(test_case_data) + " " + Std.string(method_call));
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 40, className : "stx.test.TestCaseDataRun", methodName : "apply"}));
		})),after);
	})),teardown),stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportTestCaseComplete(test_case_data)));
};
stx_test_TestCaseDataRun.updown = function(fn,timeout,cons) {
	var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("updown");
	new stx_log_log_term_Level(this1,0).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 46, className : "stx.test.TestCaseDataRun", methodName : "updown"}));
	var self = function() {
		var self = stx_pico_OptionLift.flatten(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,fn()));
		var self1;
		switch(self._hx_index) {
		case 0:
			var t = self.v;
			self1 = tink_core_Future.first(t,stx_test_core_Timeout.make(timeout));
			break;
		case 1:
			self1 = stx_test_TestResult.unit();
			break;
		}
		return tink_core_Future.map(tink_core_Future.map(self1,function(x) {
			return x();
		}),function(arr) {
			var value = stx_nano_Cluster.toIterable(arr);
			return stx_LiftIf.if_else((((value) instanceof Array) ? value : null).length > 0,function() {
				return stx_test_TestPhaseSum.TP_Failures(arr);
			},function() {
				return stx_test_TestPhaseSum.TP_Null;
			});
		});
	};
	return stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	}));
};
var stx_test_MethodCallRun = function() { };
$hxClasses["stx.test.MethodCallRun"] = stx_test_MethodCallRun;
stx_test_MethodCallRun.__name__ = "stx.test.MethodCallRun";
stx_test_MethodCallRun.apply = function(method_call) {
	var self = function() {
		return tink_core_Future.map(method_call.call(),function(eff) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("TEST: " + method_call.field_name + " called");
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 64, className : "stx.test.MethodCallRun", methodName : "apply"}));
			var failures = eff();
			var _g_current = 0;
			var _g_array = failures;
			while(_g_current < _g_array.length) {
				var failure = _g_array[_g_current++];
				var self = method_call.get_assertions();
				var self1 = method_call.position();
				var self2;
				if(self1._hx_index == 0) {
					var v = self1.v;
					self2 = v;
				} else {
					self2 = null;
				}
				self.push(stx_test_core_Assertion.make(false,"FAIL",failure,self2));
			}
			return 0;
		});
	};
	return stx_StreamLift.flat_map(stx_Stream.lift(stx_nano_Signal.make(function(cb) {
		return self().handle(function(x) {
			cb(stx_nano_ChunkSum.Val(x));
			cb(stx_nano_ChunkSum.End());
		});
	})),function(_) {
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("after " + method_call.field_name + " effects");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 72, className : "stx.test.MethodCallRun", methodName : "apply"}));
		var asserts = method_call.get_assertions();
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("assertions: " + Std.string(asserts));
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 74, className : "stx.test.MethodCallRun", methodName : "apply"}));
		var stream = stx_StreamLift.flat_map(stx_Stream.fromArray(asserts),function(val) {
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("before " + method_call.field_name + " AssertionRun");
			new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Runner.hx", lineNumber : 77, className : "stx.test.MethodCallRun", methodName : "apply"}));
			return stx_test_AssertionRun.apply(val,method_call);
		});
		return stream;
	});
};
var stx_test_AssertionRun = function() { };
$hxClasses["stx.test.AssertionRun"] = stx_test_AssertionRun;
stx_test_AssertionRun.__name__ = "stx.test.AssertionRun";
stx_test_AssertionRun.apply = function(assertion,method_call) {
	return stx_LiftIf.if_else(assertion.truth,function() {
		return stx_Stream.unit();
	},function() {
		return stx_Stream.pure(stx_test_TestPhaseSum.TP_ReportFailure(assertion,method_call));
	});
};
var stx_test_TestCase = function() {
	stx_test_Assert.call(this);
};
$hxClasses["stx.test.TestCase"] = stx_test_TestCase;
stx_test_TestCase.__name__ = "stx.test.TestCase";
stx_test_TestCase.__super__ = stx_test_Assert;
stx_test_TestCase.prototype = $extend(stx_test_Assert.prototype,{
	__stx__tests: function(timeout) {
		return stx_test_TestCaseLift.get_tests(this,timeout);
	}
	,__setup: function() {
		return haxe_ds_Option.None;
	}
	,__teardown: function() {
		return haxe_ds_Option.None;
	}
	,__before: function() {
		return haxe_ds_Option.None;
	}
	,__after: function() {
		return haxe_ds_Option.None;
	}
	,asTestCase: function() {
		return this;
	}
	,wrap: function(future,pos) {
		var _gthis = this;
		return stx_test_WrappedFuture.lift(new tink_core__$Future_SuspendableFuture(function(cb) {
			try {
				return future.handle(function(v) {
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.pure(v)));
				});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g);
				var _g2 = _g1.unwrap();
				if(js_Boot.__implements(_g2,stx_fail_ErrorApi)) {
					var e = _g2;
					var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(e));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/TestCase.hx", lineNumber : 32, className : "stx.test.TestCase", methodName : "wrap"}));
					_gthis.error(e,pos);
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.unit()));
					return null;
				} else {
					var e = _g1;
					var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
					var v = stx_log_Stringify.fromString("" + Std.string(e));
					new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/TestCase.hx", lineNumber : 37, className : "stx.test.TestCase", methodName : "wrap"}));
					_gthis.exception(e,pos);
					cb(stx_nano_lift_LiftNano.triple(stx_nano_Wildcard.__,pos,_gthis,stx_test_AsyncResult.unit()));
					return null;
				}
			}
		}));
	}
	,__class__: stx_test_TestCase
});
var stx_test_TestCaseData = function(test_case,class_name,method_calls) {
	this.test_case = test_case;
	this.class_name = class_name;
	this.method_calls = method_calls;
};
$hxClasses["stx.test.TestCaseData"] = stx_test_TestCaseData;
stx_test_TestCaseData.__name__ = "stx.test.TestCaseData";
stx_test_TestCaseData.make = function(test_case,class_name,method_calls) {
	return new stx_test_TestCaseData(test_case,class_name,method_calls);
};
stx_test_TestCaseData.prototype = {
	test_case: null
	,class_name: null
	,method_calls: null
	,has_failures: function() {
		var failed = false;
		var _g_current = 0;
		var _g_array = this.method_calls;
		while(_g_current < _g_array.length) {
			var mc = _g_array[_g_current++];
			if(stx_test_Assertions.get_failures(mc.get_assertions()).length > 0) {
				failed = true;
				break;
			}
		}
		return failed;
	}
	,has_assertions: function() {
		var bool = false;
		var _g_current = 0;
		var _g_array = this.method_calls;
		while(_g_current < _g_array.length) {
			var mc = _g_array[_g_current++];
			bool = mc.has_assertions();
			if(bool) {
				break;
			}
		}
		return bool;
	}
	,toString: function() {
		return "TestCaseData(" + this.class_name + ")";
	}
	,copy: function(test_case,class_name,method_calls) {
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,test_case);
		var tmp;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp = v;
		} else {
			tmp = this.test_case;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,class_name);
		var tmp1;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp1 = v;
		} else {
			tmp1 = this.class_name;
		}
		var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,method_calls);
		var tmp2;
		if(self._hx_index == 0) {
			var v = self.v;
			tmp2 = v;
		} else {
			tmp2 = this.method_calls;
		}
		return stx_test_TestCaseData.make(tmp,tmp1,tmp2);
	}
	,__class__: stx_test_TestCaseData
};
var stx_test_TestCaseLift = function() { };
$hxClasses["stx.test.TestCaseLift"] = stx_test_TestCaseLift;
stx_test_TestCaseLift.__name__ = "stx.test.TestCaseLift";
stx_test_TestCaseLift.get_tests = function(v,timeout) {
	var clazz = js_Boot.getClass(v);
	var class_name = clazz.__name__;
	var type_meta = haxe_rtti_Meta.getType(clazz);
	var type_is_async = Object.prototype.hasOwnProperty.call(type_meta,"stx.test.async");
	var fields = Type.getInstanceFields(clazz);
	var fields_meta = haxe_rtti_Meta.getFields(clazz);
	new stx_log_log_term_Level(stx_test_Logging.log(stx_nano_Wildcard.__),2).toLogApi().comply(new stx_log_EntryCtr().pure(fields),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/TestCaseLift.hx", lineNumber : 17, className : "stx.test.TestCaseLift", methodName : "get_tests"}));
	var _g = [];
	var _g1 = 0;
	var _g2 = fields;
	while(_g1 < _g2.length) {
		var v1 = _g2[_g1];
		++_g1;
		if(StringTools.startsWith(v1,"test")) {
			_g.push(v1);
		}
	}
	var test_fields = _g;
	var applications = stx_lift_ArrayLift.map_filter(test_fields,function(field_name) {
		var field_meta = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,Reflect.field(fields_meta,field_name));
		var self = stx_pico_OptionLift.map(field_meta,function(o) {
			return Object.prototype.hasOwnProperty.call(o,"stx.test.async");
		});
		var field_is_async;
		if(self._hx_index == 0) {
			var v1 = self.v;
			field_is_async = v1;
		} else {
			field_is_async = false;
		}
		if(type_is_async || field_is_async) {
			return haxe_ds_Option.Some(stx_test_TestCaseLift.get_test(v,class_name,field_name,stx_test_FnType.OneZero,timeout));
		} else {
			return haxe_ds_Option.Some(stx_test_TestCaseLift.get_test(v,class_name,field_name,stx_test_FnType.ZeroZero,timeout));
		}
	});
	var result = new Array(applications.length);
	var _g = 0;
	var _g1 = applications.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = applications[i].field_name;
	}
	var names = result;
	var name_exists = function(name) {
		return stx_lift_ArrayLift.any(names,function(n) {
			return n == name;
		});
	};
	var depends_on = function(l,r) {
		return stx_lift_ArrayLift.any(l.depends(),function(name) {
			return r.field_name == name;
		});
	};
	var _this = applications.slice();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var application = _this[i];
		var get_depends = [null];
		get_depends[0] = (function(get_depends) {
			return function(application,stack) {
				var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stack);
				if(self._hx_index == 0) {
					var v = self.v;
					stack = v;
				} else {
					stack = [];
				}
				var _this = application.depends();
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					var string = [_this[i]];
					result[i] = stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,string[0],stx_lift_ArrayLift.search(applications,(function(string) {
						return function(application) {
							return application.field_name == string[0];
						};
					})(string)));
				}
				var _this = result;
				var f = stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,(function() {
					return function(string,option) {
						var self = stx_nano_lift_LiftOptionNano.resolve(option,(function() {
							return function(f) {
								return stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply((function() {
									return function(_) {
										return stx_test_core_Errors.e_dependency_not_found(_,"" + string);
									};
								})(),stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
							};
						})(),{ fileName : "src/main/haxe/stx/test/TestCaseLift.hx", lineNumber : 51, className : "stx.test.TestCaseLift", methodName : "get_tests"});
						var value;
						switch(self._hx_index) {
						case 0:
							var t = self.t;
							value = t;
							break;
						case 1:
							var e = self.e;
							throw haxe_Exception.thrown(e);
						}
						return stx_nano_lift_LiftNano.couple(stx_nano_Wildcard.__,string,value);
					};
				})());
				var result = new Array(_this.length);
				var _g = 0;
				var _g1 = _this.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = f(_this[i]);
				}
				var dependencies = result;
				var _g = [];
				var _g1 = 0;
				var _g2 = dependencies;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(!stx_lift_ArrayLift.any(stack,(function(couple) {
						return function(name) {
							return stx_nano_CoupleLift.fst(couple[0]) == name;
						};
					})([v]))) {
						_g.push(v);
					}
				}
				return stx_lift_ArrayLift.flat_map(_g,(function(get_depends) {
					return function(couple) {
						return stx_LiftIf.if_else(stx_nano_CoupleLift.snd(couple).depends().length > 0,(function(get_depends) {
							return function() {
								var get_depends1 = get_depends[0];
								var tmp = stx_nano_CoupleLift.snd(couple);
								var result = new Array(dependencies.length);
								var _g = 0;
								var _g1 = dependencies.length;
								while(_g < _g1) {
									var i = _g++;
									result[i] = stx_nano_CoupleLift.fst(dependencies[i]);
								}
								return get_depends1(tmp,result);
							};
						})(get_depends),(function() {
							return function() {
								var result = new Array(dependencies.length);
								var _g = 0;
								var _g1 = dependencies.length;
								while(_g < _g1) {
									var i = _g++;
									result[i] = stx_nano_CoupleLift.fst(dependencies[i]);
								}
								return result;
							};
						})());
					};
				})(get_depends));
			};
		})(get_depends);
		var dependencies = get_depends[0](application);
		var result1 = new Array(dependencies.length);
		var _g2 = 0;
		var _g3 = dependencies.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var s = [dependencies[i1]];
			var self = stx_lift_ArrayLift.search(applications,(function(s) {
				return function(application) {
					return application.field_name == s[0];
				};
			})(s));
			var tmp;
			if(self._hx_index == 0) {
				var v1 = self.v;
				tmp = v1;
			} else {
				throw haxe_Exception.thrown("no method named `" + s[0] + "` available on " + application.field_name + "}");
			}
			result1[i1] = tmp;
		}
		var depends = result1;
		result[i] = [application].concat(depends);
	}
	var ordered_applications = result;
	var inner_order = function(l,r) {
		return stx_lift_ArrayLift.any(l,function(x) {
			return stx_lift_ArrayLift.any(r,function(y) {
				return x.field_name == y.field_name;
			});
		});
	};
	haxe_ds_ArraySort.sort(ordered_applications,function(lhs,rhs) {
		if(inner_order(lhs,rhs)) {
			return 1;
		} else if(inner_order(rhs,lhs)) {
			return -1;
		} else {
			return 0;
		}
	});
	var reworked_applications = stx_lift_ArrayLift.map_filter(ordered_applications,function(_) {
		return stx_lift_ArrayLift.head(_);
	});
	var reordered_applications = stx_lift_ArrayLift.map_filter(ordered_applications,function(_) {
		return stx_lift_ArrayLift.head(_);
	});
	return new stx_test_TestCaseData(v.asTestCase(),class_name,reordered_applications);
};
stx_test_TestCaseLift.get_test = function(test_case,class_name,field_name,size,timeout) {
	var c = js_Boot.getClass(test_case);
	var type_name = c.__name__;
	var call = stx_test_TestCaseLift.make_call(test_case,field_name,size);
	return new stx_test_MethodCall(test_case,class_name,field_name,call,timeout);
};
stx_test_TestCaseLift.make_call = function(test_case,field_name,len) {
	var call_zero_zero = function() {
		return Reflect.field(test_case,field_name).apply(test_case,[]);
	};
	var call_zero_one = function() {
		return Reflect.field(test_case,field_name).apply(test_case,[]);
	};
	var call_one = function(v) {
		return Reflect.field(test_case,field_name).apply(test_case,[v]);
	};
	var wrap = function(fn) {
		return function() {
			try {
				return fn();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/TestCaseLift.hx", lineNumber : 127, className : "stx.test.TestCaseLift", methodName : "make_call"}));
				test_case.raise(e,null,{ fileName : "src/main/haxe/stx/test/TestCaseLift.hx", lineNumber : 128, className : "stx.test.TestCaseLift", methodName : "make_call"});
				return haxe_ds_Option.None;
			}
		};
	};
	var tmp;
	switch(len._hx_index) {
	case 0:
		tmp = wrap(function() {
			call_zero_zero();
			return haxe_ds_Option.None;
		});
		break;
	case 1:
		tmp = wrap(function() {
			var out = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,call_zero_one());
			return out;
		});
		break;
	case 2:
		tmp = wrap(function() {
			var async = stx_test_Async.wait();
			call_one(async);
			return haxe_ds_Option.Some(async);
		});
		break;
	}
	return stx_test_TestMethodZero.lift(tmp);
};
var stx_test_TestEffect = {};
stx_test_TestEffect.unit = function() {
	return function() {
		return stx_nano_Cluster.unit();
	};
};
stx_test_TestEffect.lift = function(self) {
	return self;
};
stx_test_TestEffect.fromCluster = function(self) {
	return stx_test_TestEffect.lift(function() {
		return self;
	});
};
stx_test_TestEffect.fromFn = function(fn,pos) {
	return function() {
		var fn1 = stx_fn_Thunk.prj(stx_fn_BlockLift.returning(fn,0));
		var self;
		try {
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn1());
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(js_Boot.__implements(_g2,stx_fail_ErrorApi)) {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g1;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(pos))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			return stx_nano_Cluster.unit();
		case 1:
			var e = self.e;
			return stx_nano_Cluster.lift([stx_fail_TestFailureSum.E_Test_Refuse(e)]);
		}
	};
};
stx_test_TestEffect.fromTestFailure = function(self) {
	return function() {
		return stx_nano_Cluster.lift([self]);
	};
};
stx_test_TestEffect.fromError = function(err) {
	return function() {
		return stx_nano_Cluster.lift([stx_fail_TestFailureSum.E_Test_Refuse(stx_fail_Refuse.lift(stx_fail_Error.errate(err,stx_fail_DeclineSum.EXTERNAL)))]);
	};
};
stx_test_TestEffect.fromRefuse = function(err) {
	return function() {
		return stx_nano_Cluster.lift([stx_fail_TestFailureSum.E_Test_Refuse(err)]);
	};
};
stx_test_TestEffect.concat = function(this1,that) {
	return function() {
		return stx_nano_Cluster.concat(this1(),that());
	};
};
var stx_test_TestMethodSum = $hxEnums["stx.test.TestMethodSum"] = { __ename__:"stx.test.TestMethodSum",__constructs__:null
	,TMZero: ($_=function(m) { return {_hx_index:0,m:m,__enum__:"stx.test.TestMethodSum",toString:$estr}; },$_._hx_name="TMZero",$_.__params__ = ["m"],$_)
	,TMOne: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"stx.test.TestMethodSum",toString:$estr}; },$_._hx_name="TMOne",$_.__params__ = ["m"],$_)
};
stx_test_TestMethodSum.__constructs__ = [stx_test_TestMethodSum.TMZero,stx_test_TestMethodSum.TMOne];
var stx_test_TestMethod = {};
stx_test_TestMethod._new = function(self) {
	return self;
};
stx_test_TestMethod.lift = function(self) {
	return stx_test_TestMethod._new(self);
};
stx_test_TestMethod.fromTestMethodZero = function(self) {
	return stx_test_TestMethod.lift(stx_test_TestMethodSum.TMZero(self));
};
stx_test_TestMethod.fromTestMethodOne = function(self) {
	return stx_test_TestMethod.lift(stx_test_TestMethodSum.TMOne(self));
};
stx_test_TestMethod.prj = function(this1) {
	return this1;
};
var stx_test_TestMethodOne = {};
stx_test_TestMethodOne._new = function(self) {
	return self;
};
stx_test_TestMethodOne.fromCallback = function(fn) {
	return stx_test_TestMethodOne._new(fn);
};
var stx_test_TestMethodZero = {};
stx_test_TestMethodZero._new = function(self) {
	return self;
};
stx_test_TestMethodZero.lift = function(self) {
	return stx_test_TestMethodZero._new(self);
};
stx_test_TestMethodZero.fromVoid = function(fn) {
	return stx_test_TestMethodZero.lift(function() {
		fn();
		return haxe_ds_Option.None;
	});
};
stx_test_TestMethodZero.fromAsync = function(fn) {
	return stx_test_TestMethodZero.lift(function() {
		return haxe_ds_Option.Some(fn());
	});
};
stx_test_TestMethodZero.prj = function(this1) {
	return this1;
};
var stx_test_TestPhaseSum = $hxEnums["stx.test.TestPhaseSum"] = { __ename__:"stx.test.TestPhaseSum",__constructs__:null
	,TP_Null: {_hx_name:"TP_Null",_hx_index:0,__enum__:"stx.test.TestPhaseSum",toString:$estr}
	,TP_Tick: ($_=function(info) { return {_hx_index:1,info:info,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Tick",$_.__params__ = ["info"],$_)
	,TP_StartTestCase: ($_=function(test_case_data) { return {_hx_index:2,test_case_data:test_case_data,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_StartTestCase",$_.__params__ = ["test_case_data"],$_)
	,TP_StartTest: ($_=function(method_call) { return {_hx_index:3,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_StartTest",$_.__params__ = ["method_call"],$_)
	,TP_ReportFatal: ($_=function(err) { return {_hx_index:4,err:err,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportFatal",$_.__params__ = ["err"],$_)
	,TP_Setup: ($_=function(f) { return {_hx_index:5,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Setup",$_.__params__ = ["f"],$_)
	,TP_Before: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Before",$_.__params__ = ["f"],$_)
	,TP_After: ($_=function(f) { return {_hx_index:7,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_After",$_.__params__ = ["f"],$_)
	,TP_Teardown: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Teardown",$_.__params__ = ["f"],$_)
	,TP_Failures: ($_=function(xs) { return {_hx_index:9,xs:xs,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_Failures",$_.__params__ = ["xs"],$_)
	,TP_ReportFailure: ($_=function(assertion,method_call) { return {_hx_index:10,assertion:assertion,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportFailure",$_.__params__ = ["assertion","method_call"],$_)
	,TP_ReportTestComplete: ($_=function(method_call) { return {_hx_index:11,method_call:method_call,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestComplete",$_.__params__ = ["method_call"],$_)
	,TP_ReportTestCaseComplete: ($_=function(test_case_data) { return {_hx_index:12,test_case_data:test_case_data,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestCaseComplete",$_.__params__ = ["test_case_data"],$_)
	,TP_ReportTestSuiteComplete: ($_=function(test_suite) { return {_hx_index:13,test_suite:test_suite,__enum__:"stx.test.TestPhaseSum",toString:$estr}; },$_._hx_name="TP_ReportTestSuiteComplete",$_.__params__ = ["test_suite"],$_)
};
stx_test_TestPhaseSum.__constructs__ = [stx_test_TestPhaseSum.TP_Null,stx_test_TestPhaseSum.TP_Tick,stx_test_TestPhaseSum.TP_StartTestCase,stx_test_TestPhaseSum.TP_StartTest,stx_test_TestPhaseSum.TP_ReportFatal,stx_test_TestPhaseSum.TP_Setup,stx_test_TestPhaseSum.TP_Before,stx_test_TestPhaseSum.TP_After,stx_test_TestPhaseSum.TP_Teardown,stx_test_TestPhaseSum.TP_Failures,stx_test_TestPhaseSum.TP_ReportFailure,stx_test_TestPhaseSum.TP_ReportTestComplete,stx_test_TestPhaseSum.TP_ReportTestCaseComplete,stx_test_TestPhaseSum.TP_ReportTestSuiteComplete];
var stx_test_TestResource = function() {
	stx_test_TestCase.call(this);
};
$hxClasses["stx.test.TestResource"] = stx_test_TestResource;
stx_test_TestResource.__name__ = "stx.test.TestResource";
stx_test_TestResource.__super__ = stx_test_TestCase;
stx_test_TestResource.prototype = $extend(stx_test_TestCase.prototype,{
	__class__: stx_test_TestResource
});
var stx_test_TestResult = {};
stx_test_TestResult.lift = function(self) {
	return self;
};
stx_test_TestResult.pure = function(self) {
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_test_TestResult.unit = function() {
	var self = stx_test_TestEffect.unit();
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_test_TestResult.fromError = function(err) {
	var self = stx_test_TestEffect.fromError(err);
	return tink_core_Future.irreversible(function(cb) {
		cb(self);
	});
};
stx_test_TestResult.concat = function(this1,that) {
	return tink_core_Future.map(stx_nano_lift_LiftNano.nano(stx_nano_Wildcard.__).Ft().zip(this1,stx_test_TestResult.prj(that)),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(l,r) {
		return stx_test_TestEffect.concat(l,r);
	}));
};
stx_test_TestResult.tap = function(this1,fn) {
	return stx_test_TestResult.lift(tink_core_Future.map(this1,function(x) {
		fn(x);
		return x;
	}));
};
stx_test_TestResult.prj = function(this1) {
	return this1;
};
var stx_test_TestSuite = function(test_cases) {
	this.test_cases = test_cases;
};
$hxClasses["stx.test.TestSuite"] = stx_test_TestSuite;
stx_test_TestSuite.__name__ = "stx.test.TestSuite";
stx_test_TestSuite.prototype = {
	test_cases: null
	,is_clean: function() {
		var clean = true;
		var _g_current = 0;
		var _g_array = this.test_cases;
		while(_g_current < _g_array.length) {
			var tcd = _g_array[_g_current++];
			if(tcd.has_failures()) {
				clean = false;
				break;
			}
		}
		return clean;
	}
	,__class__: stx_test_TestSuite
};
var stx_test_Util = function() { };
$hxClasses["stx.test.Util"] = stx_test_Util;
stx_test_Util.__name__ = "stx.test.Util";
stx_test_Util.or_res = function(fn,pos) {
	try {
		return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,fn());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var _g1 = haxe_Exception.caught(_g);
		var _g2 = _g1.unwrap();
		if(js_Boot.__implements(_g2,stx_fail_ErrorApi)) {
			var e = _g2;
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + Std.string(e));
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
		} else {
			var e = _g1;
			var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
			var v = stx_log_Stringify.fromString("" + Std.string(e));
			new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(pos))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
		}
	}
};
var stx_test_WrappedFuture = {};
stx_test_WrappedFuture._new = function(self) {
	return self;
};
stx_test_WrappedFuture.consume = function(this1,cb,async) {
	var link = this1.handle(function(x) {
		var self;
		try {
			var self1 = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,cb(stx_nano_TripleLift.thd(x)));
			var v = stx_nano_Report.unit();
			var self2;
			if(self1._hx_index == 0) {
				var v1 = self1.v;
				self2 = v1;
			} else {
				self2 = v;
			}
			if(self2 != null) {
				switch(self2._hx_index) {
				case 0:
					var v = self2.v;
					var str = stx_Show.show(stx_nano_Wildcard.__,v.get_data());
					stx_nano_TripleLift.snd(x).error(v,stx_nano_TripleLift.fst(x));
					break;
				case 1:
					break;
				}
			}
			self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,0);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var _g1 = haxe_Exception.caught(_g);
			var _g2 = _g1.unwrap();
			if(js_Boot.__implements(_g2,stx_fail_ErrorApi)) {
				var e = _g2;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 8, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(stx_fail_Refuse.lift(stx_fail_Error.errate(e,stx_fail_DeclineSum.EXTERNAL)),stx_fail_TestFailureSum.E_Test_Refuse)),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 9, className : "stx.test.Util", methodName : "or_res"});
			} else {
				var e = _g1;
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 11, className : "stx.test.Util", methodName : "or_res"}));
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Exception(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT({ fileName : "src/main/haxe/stx/test/WrappedFuture.hx", lineNumber : 8, className : "stx.test._WrappedFuture.WrappedFuture_Impl_", methodName : "consume"}))),{ fileName : "src/main/haxe/stx/test/Util.hx", lineNumber : 12, className : "stx.test.Util", methodName : "or_res"});
			}
		}
		switch(self._hx_index) {
		case 0:
			var t = self.t;
			break;
		case 1:
			var e = self.e;
			var link = stx_nano_TripleLift.snd(x);
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,stx_nano_TripleLift.fst(x));
			link.error(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_Refuse(e))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1)),stx_nano_TripleLift.fst(x));
			break;
		}
		if(async != null) {
			stx_test_Async.done(async);
		}
	});
};
stx_test_WrappedFuture.lift = function(self) {
	return stx_test_WrappedFuture._new(self);
};
stx_test_WrappedFuture.prj = function(this1) {
	return this1;
};
stx_test_WrappedFuture.get_self = function(this1) {
	return this1;
};
var stx_test_auto_ClassPath = {};
stx_test_auto_ClassPath._new = function(self) {
	return self;
};
stx_test_auto_ClassPath.make = function(self) {
	return stx_test_auto_ClassPath._new(self);
};
stx_test_auto_ClassPath.prj = function(this1) {
	return this1;
};
var stx_test_auto_Errors = function() { };
$hxClasses["stx.test.auto.Errors"] = stx_test_auto_Errors;
stx_test_auto_Errors.__name__ = "stx.test.auto.Errors";
stx_test_auto_Errors.e = function(x,section) {
	var str = "unsupported form " + stx_Show.show(stx_nano_Wildcard.__,x);
	if(section != null) {
		str = "" + str + " in " + section;
	}
	return str;
};
stx_test_auto_Errors.eI = function(section,explanation) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,explanation);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = "unsupported form";
	}
	return stx_fail_TestFailureSum.E_Test_ReaderFailure(tmp,section);
};
var stx_test_auto_Index = function(path,data) {
	this.path = path;
	this.data = data;
};
$hxClasses["stx.test.auto.Index"] = stx_test_auto_Index;
stx_test_auto_Index.__name__ = "stx.test.auto.Index";
stx_test_auto_Index.prototype = {
	path: null
	,data: null
	,__class__: stx_test_auto_Index
};
var stx_test_auto_Op = $hxEnums["stx.test.auto.Op"] = { __ename__:"stx.test.auto.Op",__constructs__:null
	,Include: {_hx_name:"Include",_hx_index:0,__enum__:"stx.test.auto.Op",toString:$estr}
	,Exclude: {_hx_name:"Exclude",_hx_index:1,__enum__:"stx.test.auto.Op",toString:$estr}
};
stx_test_auto_Op.__constructs__ = [stx_test_auto_Op.Include,stx_test_auto_Op.Exclude];
var stx_test_core_Assertion = {};
stx_test_core_Assertion.make = function(truth,explanation,failure,pos) {
	var self = stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,failure);
	var tmp;
	if(self._hx_index == 0) {
		var v = self.v;
		tmp = v;
	} else {
		tmp = stx_fail_TestFailureSum.TestFailedBecause(explanation);
	}
	return stx_test_core_Assertion._new({ truth : truth, explanation : explanation, failure : tmp, pos : pos});
};
stx_test_core_Assertion.outcome = function(this1) {
	if(this1.truth) {
		return stx_nano_lift_LiftNano.success(stx_nano_Wildcard.__,this1.explanation);
	} else {
		return stx_nano_lift_LiftNano.failure(stx_nano_Wildcard.__,this1.failure);
	}
};
stx_test_core_Assertion.toString = function(this1) {
	var self = stx_test_core_Assertion.outcome(this1);
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		return t;
	case 1:
		var e = self.e;
		return stx_Show.show(stx_nano_Wildcard.__,e);
	}
};
stx_test_core_Assertion._new = function(self) {
	return self;
};
var stx_test_core_Dependencies = function(source) {
	this.source = source;
};
$hxClasses["stx.test.core.Dependencies"] = stx_test_core_Dependencies;
stx_test_core_Dependencies.__name__ = "stx.test.core.Dependencies";
stx_test_core_Dependencies.prototype = {
	source: null
	,reply: function() {
		var target = this.source.slice();
	}
	,center: function(arr) {
		return Math.round(this.source.length / 2);
	}
	,__class__: stx_test_core_Dependencies
};
var stx_test_core_Errors = function() { };
$hxClasses["stx.test.core.Errors"] = stx_test_core_Errors;
stx_test_core_Errors.__name__ = "stx.test.core.Errors";
stx_test_core_Errors.e_dependency_not_found = function(digests,name) {
	return new stx_test_core_EDependencyNotFound(name);
};
stx_test_core_Errors.e_suite_failed = function(digests) {
	return new stx_test_core_ESuiteFailed();
};
var stx_test_core_EDependencyNotFound = function(name) {
	stx_fail_Digest.call(this,"01FRQ8G5NCTBY7YV908Y41NZPP","Dependency " + name + " not found");
};
$hxClasses["stx.test.core.EDependencyNotFound"] = stx_test_core_EDependencyNotFound;
stx_test_core_EDependencyNotFound.__name__ = "stx.test.core.EDependencyNotFound";
stx_test_core_EDependencyNotFound.__super__ = stx_fail_Digest;
stx_test_core_EDependencyNotFound.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_test_core_EDependencyNotFound
});
var stx_test_core_ESuiteFailed = function() {
	stx_fail_Digest.call(this,"01FRQ8KHEHGBBSTN89XC492A0E","TestSuite failed");
};
$hxClasses["stx.test.core.ESuiteFailed"] = stx_test_core_ESuiteFailed;
stx_test_core_ESuiteFailed.__name__ = "stx.test.core.ESuiteFailed";
stx_test_core_ESuiteFailed.__super__ = stx_fail_Digest;
stx_test_core_ESuiteFailed.prototype = $extend(stx_fail_Digest.prototype,{
	__class__: stx_test_core_ESuiteFailed
});
var stx_test_core_Timeout = function() { };
$hxClasses["stx.test.core.Timeout"] = stx_test_core_Timeout;
stx_test_core_Timeout.__name__ = "stx.test.core.Timeout";
stx_test_core_Timeout.make = function(timeout) {
	var self = stx_LiftAssert.assert(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/core/Timeout.hx", lineNumber : 5, className : "stx.test.core.Timeout", methodName : "make"}).module.exists().apply(timeout);
	if(self != null) {
		switch(self._hx_index) {
		case 0:
			var v = self.v;
			throw haxe_Exception.thrown(v);
		case 1:
			break;
		}
	}
	var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
	var v = stx_log_Stringify.fromString("make timeout");
	new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/core/Timeout.hx", lineNumber : 6, className : "stx.test.core.Timeout", methodName : "make"}));
	return tink_core_Future.map(stx_stream_Timeout._new(timeout),function(_) {
		var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
		var v = stx_log_Stringify.fromString("timeout called");
		new stx_log_log_term_Level(this1,1).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/core/Timeout.hx", lineNumber : 9, className : "stx.test.core.Timeout", methodName : "make"}));
		return stx_test_TestEffect.fromTestFailure(stx_fail_TestFailureSum.TestTimedOut(timeout));
	});
};
var stx_test_macro_Plugin = function() { };
$hxClasses["stx.test.macro.Plugin"] = stx_test_macro_Plugin;
stx_test_macro_Plugin.__name__ = "stx.test.macro.Plugin";
var stx_test_module__$Auto_AutoSpecToken = $hxEnums["stx.test.module._Auto.AutoSpecToken"] = { __ename__:"stx.test.module._Auto.AutoSpecToken",__constructs__:null
	,AIndeces: ($_=function(array) { return {_hx_index:0,array:array,__enum__:"stx.test.module._Auto.AutoSpecToken",toString:$estr}; },$_._hx_name="AIndeces",$_.__params__ = ["array"],$_)
	,AClassSpec: ($_=function(typename,op,tests) { return {_hx_index:1,typename:typename,op:op,tests:tests,__enum__:"stx.test.module._Auto.AutoSpecToken",toString:$estr}; },$_._hx_name="AClassSpec",$_.__params__ = ["typename","op","tests"],$_)
	,ASuiteSpec: ($_=function(name,op,classes) { return {_hx_index:2,name:name,op:op,classes:classes,__enum__:"stx.test.module._Auto.AutoSpecToken",toString:$estr}; },$_._hx_name="ASuiteSpec",$_.__params__ = ["name","op","classes"],$_)
};
stx_test_module__$Auto_AutoSpecToken.__constructs__ = [stx_test_module__$Auto_AutoSpecToken.AIndeces,stx_test_module__$Auto_AutoSpecToken.AClassSpec,stx_test_module__$Auto_AutoSpecToken.ASuiteSpec];
var stx_test_module_Auto = function() { };
$hxClasses["stx.test.module.Auto"] = stx_test_module_Auto;
stx_test_module_Auto.__name__ = "stx.test.module.Auto";
stx_test_module_Auto.main = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(eu_ohmrun_pml_Extract.imbibe(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(stx_test_module_Auto.indeces(),stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(stx_test_module_Auto.suite_spec(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),"main"),stx_nano_lift_LiftNano.decouple(stx_nano_Wildcard.__,function(tI,tII) {
		if(tI._hx_index == 0) {
			var arr = tI.array;
			var self = stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(tII),function(next,memo) {
				if(next._hx_index == 2) {
					var name = next.name;
					var op = next.op;
					var classes = next.classes;
					var self = stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(classes),function(next,memo) {
						if(next._hx_index == 1) {
							var tname = next.typename;
							var op = next.op;
							var tests = next.tests;
							return stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,stx_nano_ClusterLift.snoc(memo,{ path : stx_test_auto_ClassPath.make(tname), op : op, methods : tests}));
						} else {
							return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
								return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_BadSpec)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
							},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 37, className : "stx.test.module.Auto", methodName : "main"});
						}
					},stx_nano_Cluster.lift([]));
					var fn = function(x) {
						return { name : name, specs : x, op : op};
					};
					var self1;
					switch(self._hx_index) {
					case 0:
						var t = self.t;
						self1 = stx_nano_UpshotSum.Accept(fn(t));
						break;
					case 1:
						var e = self.e;
						self1 = stx_nano_UpshotSum.Reject(e);
						break;
					}
					var self = self1;
					var _e = memo;
					var fn = function(t) {
						return stx_nano_ClusterLift.snoc(_e,t);
					};
					var self1;
					switch(self._hx_index) {
					case 0:
						var t = self.t;
						self1 = stx_nano_UpshotSum.Accept(fn(t));
						break;
					case 1:
						var e = self.e;
						self1 = stx_nano_UpshotSum.Reject(e);
						break;
					}
					return self1;
				} else {
					return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
						return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_BadSpec)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
					},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 49, className : "stx.test.module.Auto", methodName : "main"});
				}
			},[]);
			var self1;
			switch(self._hx_index) {
			case 0:
				var t = self.t;
				var specs = t;
				var self2 = stx_nano_Upshot.bind_fold(stx_nano_Cluster.toIter(arr),function(next,memo) {
					var self = stx_test_module_Auto.resolve_index(next);
					var _e = memo;
					var fn = function(that) {
						return stx_nano_Cluster.concat(_e,that);
					};
					var self1;
					switch(self._hx_index) {
					case 0:
						var t = self.t;
						self1 = stx_nano_UpshotSum.Accept(fn(t));
						break;
					case 1:
						var e = self.e;
						self1 = stx_nano_UpshotSum.Reject(e);
						break;
					}
					return self1;
				},stx_nano_Cluster.lift([]));
				var fn = function(cases) {
					return { cases : cases, specs : specs};
				};
				var self3;
				switch(self2._hx_index) {
				case 0:
					var t = self2.t;
					self3 = stx_nano_UpshotSum.Accept(fn(t));
					break;
				case 1:
					var e = self2.e;
					self3 = stx_nano_UpshotSum.Reject(e);
					break;
				}
				self1 = self3;
				break;
			case 1:
				var e = self.e;
				self1 = stx_nano_UpshotSum.Reject(e);
				break;
			}
			return self1;
		} else {
			return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
				return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_NoIndeces)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
			},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 70, className : "stx.test.module.Auto", methodName : "main"});
		}
	}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_test_module_Auto.reply = function() {
	var pos = { fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 76, className : "stx.test.module.Auto", methodName : "reply"};
	var str = "tests";
	if(!stx_nano_Resource.exists(str)) {
		if(pos == null) {
			throw haxe_Exception.thrown("E_ResourceNotFound(" + str + ")");
		} else {
			var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,pos);
			var error = stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(function(_) {
				return stx_nano_Digests.e_resource_not_found(_,str);
			},stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1));
			throw haxe_Exception.thrown(error);
		}
	}
	var v = stx_nano_Resource.string(str);
	var vI = stx_parse_ParseResult.toChunk((eu_ohmrun_Pml.pml(stx_nano_Wildcard.__).parseI())(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.String(v))));
	var self;
	switch(vI._hx_index) {
	case 0:
		var v = vI.v;
		var self1 = stx_parse_ParseResult.toUpshot(stx_test_module_Auto.main().apply(stx_parse_ParseInput.pure(stx_parse_core_Enumerable.Array(stx_nano_Cluster.prj([v])))));
		switch(self1._hx_index) {
		case 0:
			var t = self1.t;
			switch(t._hx_index) {
			case 0:
				var t1 = t.v;
				self = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,t1);
				break;
			case 1:
				self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
					return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_BadSpec)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
				},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 82, className : "stx.test.module.Auto", methodName : "reply"});
				break;
			}
			break;
		case 1:
			var e = self1.e;
			self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(e,function(eI) {
				return stx_fail_TestFailure.fromParseFailure(eI);
			})),{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 84, className : "stx.test.module.Auto", methodName : "reply"});
			break;
		}
		break;
	case 1:
		self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,function(f) {
			return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_BadSpec)),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
		},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 87, className : "stx.test.module.Auto", methodName : "reply"});
		break;
	case 2:
		var e = vI.err;
		self = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.errate(e,function(eI) {
			return stx_fail_TestFailure.fromParseFailure(eI);
		})),{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 86, className : "stx.test.module.Auto", methodName : "reply"});
		break;
	}
	var self1;
	switch(self._hx_index) {
	case 0:
		var t = self.t;
		self1 = t;
		break;
	case 1:
		var e = self.e;
		self1 = stx_nano_UpshotSum.Reject(e);
		break;
	}
	return self1;
};
stx_test_module_Auto.indeces = function() {
	return eu_ohmrun_pml_Extract.imbibe(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(eu_ohmrun_pml_Extract.symbol("indeces"),stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(eu_ohmrun_pml_Extract.wordish(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),stx_test_module__$Auto_AutoSpecToken.AIndeces,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),"main");
};
stx_test_module_Auto.suite_spec = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(eu_ohmrun_pml_Extract.imbibe(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(eu_ohmrun_pml_Extract.wordish(),stx_test_module_Auto.op(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),eu_ohmrun_pml_Extract.imbibe(stx_test_module_Auto.class_spec_list(),"class_spec_list"),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),function(x) {
		return stx_test_module__$Auto_AutoSpecToken.ASuiteSpec(stx_nano_CoupleLift.fst(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),"suite_spec"),eu_ohmrun_pml_Extract.imbibe(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(eu_ohmrun_pml_Extract.wordish(),stx_test_module_Auto.op(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(eu_ohmrun_pml_Extract.wordish(),function(x) {
		return stx_test_module__$Auto_AutoSpecToken.AClassSpec(x);
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),function(x) {
		return stx_test_module__$Auto_AutoSpecToken.ASuiteSpec(stx_nano_CoupleLift.fst(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"})),"suite_spec"),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
};
stx_test_module_Auto.class_spec_list = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(eu_ohmrun_pml_Extract.imbibe(stx_test_module_Auto.class_spec_n(),"class_spec_n"),stx_test_module_Auto.class_spec_zero(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"}));
};
stx_test_module_Auto.class_spec_zero = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(eu_ohmrun_pml_Extract.wordish(),function(x) {
		return stx_test_module__$Auto_AutoSpecToken.AClassSpec(x);
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_test_module_Auto.class_spec_n = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(stx_parse_Parser.get_self(new stx_parse_parser_term_CoupleWith(eu_ohmrun_pml_Extract.wordish(),stx_test_module_Auto.op(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(eu_ohmrun_pml_Extract.wordish(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 128, className : "stx.parse.Parsers", methodName : "CoupleWith"})),function(x) {
		return stx_test_module__$Auto_AutoSpecToken.AClassSpec(stx_nano_CoupleLift.fst(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(stx_nano_CoupleLift.fst(x)),stx_nano_CoupleLift.snd(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_test_module_Auto.include = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(eu_ohmrun_pml_Extract.symbol("include"),function(_) {
		return stx_test_auto_Op.Include;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_test_module_Auto.exclude = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(eu_ohmrun_pml_Extract.symbol("exclude"),function(_) {
		return stx_test_auto_Op.Exclude;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
};
stx_test_module_Auto.op = function() {
	return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_test_module_Auto.include(),stx_test_module_Auto.exclude(),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
};
stx_test_module_Auto.resolve_index = function(self) {
	var clazz = $hxClasses[self];
	return stx_nano_lift_LiftNano.if_else(clazz == null,function() {
		var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 135, className : "stx.test.module.Auto", methodName : "resolve_index"});
		return stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_AutoClassNotFound(self))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 135, className : "stx.test.module.Auto", methodName : "resolve_index"});
	},function() {
		var self1 = stx_nano_lift_LiftOptionNano.resolve(stx_lift_ArrayLift.search(Type.getClassFields(clazz),function(x) {
			return x == "tests";
		}),function(f) {
			return stx_fail_Refuse.make(stx_nano_lift_LiftNano.option(stx_nano_Wildcard.__,stx_fail_DeclineSum.EXTERNAL(stx_fail_TestFailureSum.E_Test_AutoFieldNotFound("" + self + ".tests()"))),haxe_ds_Option.None,stx_pico_Option.fromNullT(f));
		},{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 136, className : "stx.test.module.Auto", methodName : "resolve_index"});
		var self2;
		switch(self1._hx_index) {
		case 0:
			var t = self1.t;
			try {
				var tests = (Reflect.field(clazz,"tests"))();
				self2 = stx_nano_lift_LiftNano.accept(stx_nano_Wildcard.__,tests);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				var this1 = stx_test_Logging.log(stx_nano_Wildcard.__);
				var v = stx_log_Stringify.fromString("" + Std.string(e));
				new stx_log_log_term_Level(this1,2).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 145, className : "stx.test.module.Auto", methodName : "resolve_index"}));
				var this1 = stx_nano_lift_LiftNano.fault(stx_nano_Wildcard.__,{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 146, className : "stx.test.module.Auto", methodName : "resolve_index"});
				self2 = stx_nano_lift_LiftNano.reject(stx_nano_Wildcard.__,stx_nano_CTR.fromR(stx_fail_Refuse.make(haxe_ds_Option.Some(stx_fail_DeclineSum.INTERNAL(stx_nano_CTR.apply(stx_nano_CTR.fromR(stx_Fail.explain(e)),stx_Nano.digests(stx_nano_Wildcard.__)))),haxe_ds_Option.None,stx_pico_Option.fromNullT(this1))),{ fileName : "src/main/haxe/stx/test/module/Auto.hx", lineNumber : 146, className : "stx.test.module.Auto", methodName : "resolve_index"});
			}
			break;
		case 1:
			var e = self1.e;
			self2 = stx_nano_UpshotSum.Reject(e);
			break;
		}
		return self2;
	});
};
var stx_test_reporter_ReportingApi = function() { };
$hxClasses["stx.test.reporter.ReportingApi"] = stx_test_reporter_ReportingApi;
stx_test_reporter_ReportingApi.__name__ = "stx.test.reporter.ReportingApi";
stx_test_reporter_ReportingApi.__isInterface__ = true;
stx_test_reporter_ReportingApi.prototype = {
	green_tick: null
	,get_green_tick: null
	,green_tick_on_black: null
	,get_green_tick_on_black: null
	,red_cross: null
	,get_red_cross: null
	,red_cross_on_black: null
	,get_red_cross_on_black: null
	,yellow_question_on_black: null
	,get_yellow_question_on_black: null
	,bad: null
	,get_bad: null
	,good: null
	,get_good: null
	,println: null
	,print_status: null
	,method_call_string: null
	,test_case_string: null
	,warn_string: null
	,ok_string: null
	,fail_string: null
	,info_string: null
	,__class__: stx_test_reporter_ReportingApi
};
var stx_test_reporter_RuntimeReporting = function() {
	stx_pico_Clazz.call(this);
};
$hxClasses["stx.test.reporter.RuntimeReporting"] = stx_test_reporter_RuntimeReporting;
stx_test_reporter_RuntimeReporting.__name__ = "stx.test.reporter.RuntimeReporting";
stx_test_reporter_RuntimeReporting.__interfaces__ = [stx_test_reporter_ReportingApi];
stx_test_reporter_RuntimeReporting.__super__ = stx_pico_Clazz;
stx_test_reporter_RuntimeReporting.prototype = $extend(stx_pico_Clazz.prototype,{
	green_tick: null
	,get_green_tick: function() {
		return "<green>✓</green>";
	}
	,green_tick_on_black: null
	,get_green_tick_on_black: function() {
		return "<bg_black>" + this.get_green_tick() + "</bg_black>";
	}
	,red_cross: null
	,get_red_cross: function() {
		return "<red>✗</red>";
	}
	,red_cross_on_black: null
	,get_red_cross_on_black: function() {
		return "<bg_black>" + this.get_red_cross() + "</bg_black>";
	}
	,yellow_question_on_black: null
	,get_yellow_question_on_black: function() {
		return "<bg_black><yellow>?</yellow></bg_black>";
	}
	,bad: null
	,get_bad: function() {
		return this.get_red_cross_on_black();
	}
	,good: null
	,get_good: function() {
		return this.get_green_tick_on_black();
	}
	,println: function(str,indent) {
		if(indent == null) {
			indent = "";
		}
		var v = "" + indent + str;
		var s = Console.logPrefix + ("" + v);
		var outputStream = 0;
		if(outputStream == null) {
			outputStream = 0;
		}
		if(s == null) {
			s = "";
		}
		Console.printFormatted(s + "\n",outputStream);
	}
	,print_status: function(icon,str,indent) {
		if(indent == null) {
			indent = "";
		}
		var v = "" + icon + " " + indent + str;
		var s = Console.logPrefix + ("" + v);
		var outputStream = 0;
		if(outputStream == null) {
			outputStream = 0;
		}
		if(s == null) {
			s = "";
		}
		Console.printFormatted(s + "\n",outputStream);
	}
	,method_call_string: function(test) {
		return "<blue>" + test.class_name + "::" + test.field_name + "</blue>";
	}
	,test_case_string: function(test_case) {
		return "<light_white>" + test_case.class_name + "</light_white>";
	}
	,warn_string: function(string) {
		return "<yellow>" + string + "</yellow>";
	}
	,ok_string: function(string) {
		return "<green>" + string + "</green>";
	}
	,fail_string: function(string) {
		return "<red>" + string + "</red>";
	}
	,info_string: function(string) {
		return "<blue>" + string + "</blue>";
	}
	,__class__: stx_test_reporter_RuntimeReporting
});
var tink_runloop_Worker = function() { };
$hxClasses["tink.runloop.Worker"] = tink_runloop_Worker;
tink_runloop_Worker.__name__ = "tink.runloop.Worker";
tink_runloop_Worker.__isInterface__ = true;
tink_runloop_Worker.prototype = {
	get_id: null
	,get_owner: null
	,work: null
	,asap: null
	,atNextStep: null
	,step: null
	,kill: null
	,__class__: tink_runloop_Worker
};
var tink_runloop_QueueWorker = function(owner,id) {
	this.id = id;
	this.tasks = new haxe_ds_List();
	this.owner = owner;
	this.thread = "Fake Main Thread";
};
$hxClasses["tink.runloop.QueueWorker"] = tink_runloop_QueueWorker;
tink_runloop_QueueWorker.__name__ = "tink.runloop.QueueWorker";
tink_runloop_QueueWorker.__interfaces__ = [tink_runloop_Worker];
tink_runloop_QueueWorker.prototype = {
	id: null
	,get_id: function() {
		return this.id;
	}
	,owner: null
	,get_owner: function() {
		return this.owner;
	}
	,tasks: null
	,thread: null
	,log: function(v,p) {
		this.owner.log(v,p);
	}
	,work: function(task) {
		if(task.get_state() == tink_runloop_TaskState.Pending) {
			this.tasks.add(task);
		}
		return task;
	}
	,atNextStep: function(task) {
		if(task.get_state() == tink_runloop_TaskState.Pending) {
			this.tasks.push(task);
		}
		return task;
	}
	,asap: function(task) {
		if(this.thread == "Fake Main Thread") {
			task.perform();
		} else {
			this.atNextStep(task);
		}
		return task;
	}
	,kill: function() {
		this.tasks = null;
	}
	,error: function(e,t) {
		var _gthis = this;
		this.owner.asap(tink_runloop_Task.ofFunction(function() {
			_gthis.owner.onError(e,t,_gthis,haxe_CallStack.exceptionStack());
		}));
	}
	,execute: function(t) {
		if(t == null) {
			return tink_runloop_WorkResult.Idle;
		} else {
			try {
				t.perform();
				if(t.get_recurring()) {
					this.work(t);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof tink_core_TypedError)) {
					var e = _g1;
					this.error(e,t);
				} else {
					var e = _g1;
					this.error(tink_core_TypedError.withData(null,"Uncaught exception: " + Std.string(e),e,{ fileName : "tink/runloop/QueueWorker.hx", lineNumber : 70, className : "tink.runloop.QueueWorker", methodName : "execute"}),t);
				}
			}
			return tink_runloop_WorkResult.Progressed;
		}
	}
	,toString: function() {
		return "Worker:" + this.id;
	}
	,step: function() {
		if(this.thread == "Fake Main Thread") {
			return this.doStep();
		} else {
			return tink_runloop_WorkResult.WrongThread;
		}
	}
	,doStep: function() {
		if(this.tasks == null) {
			return tink_runloop_WorkResult.Aborted;
		} else {
			return this.execute(this.tasks.pop());
		}
	}
	,__class__: tink_runloop_QueueWorker
};
var tink_core_Signal = {};
tink_core_Signal._new = function(f,init) {
	return new tink_core__$Signal_Suspendable(f,init);
};
tink_core_Signal.handle = function(this1,handler) {
	return this1.listen(handler);
};
tink_core_Signal.map = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			fire(f(v));
		});
	});
};
tink_core_Signal.flatMap = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			f(v).handle(fire);
		});
	});
};
tink_core_Signal.filter = function(this1,f,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			if(f(v)) {
				fire(v);
			}
		});
	});
};
tink_core_Signal.select = function(this1,selector,gather) {
	return tink_core__$Signal_Suspendable.over(this1,function(fire) {
		return this1.listen(function(v) {
			var _g = selector(v);
			if(_g._hx_index == 0) {
				var v = _g.v;
				fire(v);
			}
		});
	});
};
tink_core_Signal.join = function(this1,that,gather) {
	if(this1.get_disposed()) {
		return that;
	} else if(that.get_disposed()) {
		return this1;
	} else {
		return new tink_core__$Signal_Suspendable(function(fire) {
			var cb = fire;
			return new tink_core__$Callback_LinkPair(this1.listen(cb),that.listen(cb));
		},function(self) {
			var release = function() {
				if(this1.get_disposed() && that.get_disposed()) {
					self.dispose();
				}
			};
			this1.ondispose(release);
			that.ondispose(release);
		});
	}
};
tink_core_Signal.nextTime = function(this1,condition) {
	return tink_core_Signal.pickNext(this1,function(v) {
		if(condition == null || condition(v)) {
			return haxe_ds_Option.Some(v);
		} else {
			return haxe_ds_Option.None;
		}
	});
};
tink_core_Signal.pickNext = function(this1,selector) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	link = this1.listen(function(v) {
		var _g = selector(v);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			ret.trigger(v);
			break;
		case 1:
			break;
		}
	});
	ret.handle(link == null ? tink_core_CallbackLink.noop : ($_=link,$bind($_,$_.cancel)));
	return ret;
};
tink_core_Signal.until = function(this1,end) {
	return new tink_core__$Signal_Suspendable(function($yield) {
		return this1.listen($yield);
	},function(self) {
		end.handle($bind(self,self.dispose));
	});
};
tink_core_Signal.next = function(this1,condition) {
	return tink_core_Signal.nextTime(this1,condition);
};
tink_core_Signal.noise = function(this1) {
	return tink_core_Signal.map(this1,function(_) {
		return null;
	});
};
tink_core_Signal.gather = function(this1) {
	return this1;
};
tink_core_Signal.create = function(f) {
	return new tink_core__$Signal_Suspendable(f,null);
};
tink_core_Signal.generate = function(generator,init) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		generator(fire);
		return null;
	},init);
};
tink_core_Signal.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core_Signal.ofClassical = function(add,remove,gather) {
	return new tink_core__$Signal_Suspendable(function(fire) {
		add(fire);
		var _g = remove;
		var a1 = fire;
		return new tink_core_SimpleLink(function() {
			_g(a1);
		});
	});
};
tink_core_Signal.dead = function() {
	return tink_core__$Signal_Disposed.INST;
};
var tink_core_Disposable = function() { };
$hxClasses["tink.core.Disposable"] = tink_core_Disposable;
tink_core_Disposable.__name__ = "tink.core.Disposable";
tink_core_Disposable.__isInterface__ = true;
tink_core_Disposable.prototype = {
	get_disposed: null
	,ondispose: null
	,__class__: tink_core_Disposable
};
var tink_core_OwnedDisposable = function() { };
$hxClasses["tink.core.OwnedDisposable"] = tink_core_OwnedDisposable;
tink_core_OwnedDisposable.__name__ = "tink.core.OwnedDisposable";
tink_core_OwnedDisposable.__isInterface__ = true;
tink_core_OwnedDisposable.__interfaces__ = [tink_core_Disposable];
tink_core_OwnedDisposable.prototype = {
	dispose: null
	,__class__: tink_core_OwnedDisposable
};
var tink_core__$Signal_SignalObject = function() { };
$hxClasses["tink.core._Signal.SignalObject"] = tink_core__$Signal_SignalObject;
tink_core__$Signal_SignalObject.__name__ = "tink.core._Signal.SignalObject";
tink_core__$Signal_SignalObject.__isInterface__ = true;
tink_core__$Signal_SignalObject.__interfaces__ = [tink_core_Disposable];
tink_core__$Signal_SignalObject.prototype = {
	listen: null
	,__class__: tink_core__$Signal_SignalObject
};
var tink_core_SignalTrigger = function() {
	this.handlers = new tink_core_CallbackList();
};
$hxClasses["tink.core.SignalTrigger"] = tink_core_SignalTrigger;
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core_SignalTrigger.prototype = {
	get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,handlers: null
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(d) {
		this.handlers.ondispose(d);
	}
	,trigger: function(event) {
		this.handlers.invoke(event);
	}
	,getLength: function() {
		return this.handlers.used;
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,clear: function() {
		this.handlers.clear();
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_RunLoop = function(id) {
	if(id == null) {
		id = "ROOT_LOOP";
	}
	this.slaveCounter = 0;
	this.burstCap = .25;
	this.retainCount = 0;
	this.slaves = [];
	this.done = this._done = tink_core_Signal.trigger();
	tink_runloop_QueueWorker.call(this,this,id);
};
$hxClasses["tink.RunLoop"] = tink_RunLoop;
tink_RunLoop.__name__ = "tink.RunLoop";
tink_RunLoop.getStamp = function() {
	return HxOverrides.now() / 1000;
};
tink_RunLoop.create = function(init) {
	tink_RunLoop.current.enter(init);
};
tink_RunLoop.__super__ = tink_runloop_QueueWorker;
tink_RunLoop.prototype = $extend(tink_runloop_QueueWorker.prototype,{
	retainCount: null
	,running: null
	,slaves: null
	,done: null
	,_done: null
	,burst: function(time) {
		var limit = tink_RunLoop.getStamp() + Math.min(time,this.burstCap);
		var ret = null;
		while(this.running) {
			var _g = this.step();
			if(_g._hx_index != 0) {
				var v = _g;
				ret = v;
				break;
			}
			if(!(tink_RunLoop.getStamp() < limit)) {
				break;
			}
		}
		return ret;
	}
	,burstCap: null
	,enter: function(init) {
		if(!this.running) {
			this.spin(init);
		} else {
			this.work(tink_runloop_Task.ofFunction(init));
		}
	}
	,spin: function(init) {
		var _gthis = this;
		this.running = true;
		this.execute(tink_runloop_Task.ofFunction(init));
		var stamp = tink_RunLoop.getStamp();
		var burst = function(stop) {
			return function() {
				var delta = tink_RunLoop.getStamp() - stamp;
				stamp += delta;
				switch(_gthis.burst(delta)._hx_index) {
				case 3:case 4:
					_gthis.running = false;
					stop();
					break;
				default:
				}
			};
		};
		var t = new haxe_Timer(0);
		t.run = burst($bind(t,t.stop));
	}
	,log: function(v,p) {
		haxe_Log.trace(v,p);
	}
	,onError: function(e,t,w,stack) {
		if(w != this) {
			this.log(t,{ fileName : "tink/RunLoop.hx", lineNumber : 120, className : "tink.RunLoop", methodName : "onError"});
			this.log("\nError on worker " + Std.string(w) + ":\n" + haxe_CallStack.toString(stack) + "\n",{ fileName : "tink/RunLoop.hx", lineNumber : 121, className : "tink.RunLoop", methodName : "onError"});
			this.kill();
			throw haxe_Exception.thrown(e);
		} else {
			var any = e;
			throw haxe_Exception.thrown(any);
		}
	}
	,delegate: function(task,slave) {
		var _gthis = this;
		var t = new tink_core_FutureTrigger();
		this.asap(tink_runloop_Task.ofFunction(function() {
			_gthis.retainCount++;
		}));
		slave.work(tink_runloop_Task.ofFunction(function() {
			var res = tink_core_Lazy.get(task);
			_gthis.work(tink_runloop_Task.ofFunction(function() {
				t.trigger(res);
				_gthis.retainCount--;
			}));
		}));
		return t;
	}
	,tryDelegate: function(unsafe,slave,report) {
		return this.delegate(new tink_core__$Lazy_LazyConst(tink_core_TypedError.catchExceptions(function() {
			return tink_core_Lazy.get(unsafe);
		},report,{ fileName : "tink/RunLoop.hx", lineNumber : 155, className : "tink.RunLoop", methodName : "tryDelegate"})),slave);
	}
	,retain: function() {
		var _gthis = this;
		this.asap(tink_runloop_Task.ofFunction(function() {
			_gthis.retainCount++;
		}));
		return tink_runloop_Task.ofFunction(function() {
			_gthis.asap(tink_runloop_Task.ofFunction(function() {
				_gthis.retainCount--;
			}));
		});
	}
	,bind: function(callback) {
		var _gthis = this;
		if(callback == null) {
			return null;
		}
		this.asap(tink_runloop_Task.ofFunction(function() {
			_gthis.retainCount++;
		}));
		return function(result) {
			_gthis.work(tink_runloop_Task.ofFunction(function() {
				if(callback != null) {
					tink_core_Callback.invoke(callback,result);
					callback = null;
					_gthis.retainCount--;
				}
			}));
		};
	}
	,synchronously: function(operation) {
		return operation();
	}
	,slaveCounter: null
	,runSlaves: function() {
		this.slaveCounter %= this.slaves.length;
		if(this.slaves.length > 0) {
			var _g = 0;
			var _g1 = this.slaves.length;
			while(_g < _g1) {
				var _ = _g++;
				if(this.slaves[this.slaveCounter++ % this.slaves.length].step()._hx_index == 0) {
					return tink_runloop_WorkResult.Progressed;
				}
			}
		}
		return tink_runloop_WorkResult.Idle;
	}
	,doStep: function() {
		var _g = this.tasks.pop();
		if(_g == null) {
			if(this.retainCount == 0) {
				this._done.handlers.invoke(null);
				return tink_runloop_WorkResult.Done;
			} else {
				return this.runSlaves();
			}
		} else {
			var v = _g;
			return this.execute(v);
		}
	}
	,createSlave: function() {
		var w = new tink_runloop_QueueWorker(this,"" + this.id + "/worker#" + this.slaves.length);
		this.slaves.push(w);
		return w;
	}
	,__class__: tink_RunLoop
});
var tink_concurrent_Mutex = {};
tink_concurrent_Mutex._new = function() {
	return false;
};
tink_concurrent_Mutex.synchronized = function(this1,f) {
	return f();
};
var tink_concurrent__$Mutex_Impl = {};
tink_concurrent__$Mutex_Impl._new = function() {
	return false;
};
tink_concurrent__$Mutex_Impl.tryAcquire = function(this1) {
	return true;
};
tink_concurrent__$Mutex_Impl.acquire = function(this1) {
};
tink_concurrent__$Mutex_Impl.release = function(this1) {
};
var tink_concurrent_Queue = {};
tink_concurrent_Queue._new = function() {
	return new haxe_ds_List();
};
tink_concurrent_Queue.pop = function(this1) {
	return this1.pop();
};
tink_concurrent_Queue.await = function(this1) {
	return this1.pop();
};
var tink_concurrent__$Queue_Impl = {};
tink_concurrent__$Queue_Impl._new = function() {
	return new haxe_ds_List();
};
tink_concurrent__$Queue_Impl.pop = function(this1,block) {
	return this1.pop();
};
var tink_concurrent_Thread = {};
tink_concurrent_Thread.get_current = function() {
	return "Fake Main Thread";
};
tink_concurrent_Thread.eq = function(a,b) {
	return a == b;
};
var tink_concurrent__$Thread_Impl = {};
tink_concurrent__$Thread_Impl._new = function(s) {
	return s;
};
tink_concurrent__$Thread_Impl.getCurrent = function() {
	return "Fake Main Thread";
};
tink_concurrent__$Thread_Impl.eq = function(a,b) {
	return a == b;
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
$hxClasses["tink.core.Annex"] = tink_core_Annex;
tink_core_Annex.__name__ = "tink.core.Annex";
tink_core_Annex.prototype = {
	target: null
	,registry: null
	,__class__: tink_core_Annex
};
var tink_core_Callback = {};
tink_core_Callback._new = function(f) {
	return f;
};
tink_core_Callback.toFunction = function(this1) {
	return this1;
};
tink_core_Callback.invoke = function(this1,data) {
	if(tink_core_Callback.depth < 500) {
		tink_core_Callback.depth++;
		this1(data);
		tink_core_Callback.depth--;
	} else {
		tink_core_Callback.defer(function() {
			this1(data);
		});
	}
};
tink_core_Callback.fromNiladic = function(f) {
	return f;
};
tink_core_Callback.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core_Callback.invoke(callback,v);
		}
	};
};
tink_core_Callback.defer = function(f) {
	tink_RunLoop.current.work(tink_runloop_Task.ofFunction(f));
};
var tink_core_LinkObject = function() { };
$hxClasses["tink.core.LinkObject"] = tink_core_LinkObject;
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
tink_core_LinkObject.__isInterface__ = true;
tink_core_LinkObject.prototype = {
	cancel: null
	,__class__: tink_core_LinkObject
};
var tink_core_CallbackLinkRef = function() {
};
$hxClasses["tink.core.CallbackLinkRef"] = tink_core_CallbackLinkRef;
tink_core_CallbackLinkRef.__name__ = "tink.core.CallbackLinkRef";
tink_core_CallbackLinkRef.__interfaces__ = [tink_core_LinkObject];
tink_core_CallbackLinkRef.prototype = {
	link: null
	,set_link: function(param) {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
		return this.link = param;
	}
	,cancel: function() {
		var this1 = this.link;
		if(this1 != null) {
			this1.cancel();
		}
	}
	,__class__: tink_core_CallbackLinkRef
};
var tink_core_CallbackLink = {};
tink_core_CallbackLink._new = function(link) {
	return new tink_core_SimpleLink(link);
};
tink_core_CallbackLink.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core_CallbackLink.noop = function() {
};
tink_core_CallbackLink.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.toCallback = function(this1) {
	if(this1 == null) {
		return tink_core_CallbackLink.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core_CallbackLink.fromFunction = function(f) {
	return new tink_core_SimpleLink(f);
};
tink_core_CallbackLink.join = function(this1,b) {
	return new tink_core__$Callback_LinkPair(this1,b);
};
tink_core_CallbackLink.fromMany = function(callbacks) {
	return new tink_core_SimpleLink(function() {
		if(callbacks != null) {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		} else {
			callbacks = null;
		}
	});
};
var tink_core_SimpleLink = function(f) {
	this.f = f;
};
$hxClasses["tink.core.SimpleLink"] = tink_core_SimpleLink;
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
tink_core_SimpleLink.prototype = {
	f: null
	,cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core._Callback.LinkPair"] = tink_core__$Callback_LinkPair;
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	a: null
	,b: null
	,dissolved: null
	,cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this1 = this.b;
			if(this1 != null) {
				this1.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw haxe_Exception.thrown("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
$hxClasses["tink.core._Callback.ListCell"] = tink_core__$Callback_ListCell;
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	cb: null
	,list: null
	,invoke: function(data) {
		if(this.list != null) {
			this.cb(data);
		}
	}
	,clear: function() {
		this.cb = null;
		this.list = null;
	}
	,cancel: function() {
		if(this.list != null) {
			var list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core_SimpleDisposable = function(dispose) {
	this.disposeHandlers = [];
	this.f = dispose;
};
$hxClasses["tink.core.SimpleDisposable"] = tink_core_SimpleDisposable;
tink_core_SimpleDisposable.__name__ = "tink.core.SimpleDisposable";
tink_core_SimpleDisposable.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_SimpleDisposable.noop = function() {
};
tink_core_SimpleDisposable.prototype = {
	f: null
	,disposeHandlers: null
	,get_disposed: function() {
		return this.disposeHandlers == null;
	}
	,ondispose: function(d) {
		var _g = this.disposeHandlers;
		if(_g == null) {
			d();
		} else {
			var v = _g;
			v.push(d);
		}
	}
	,dispose: function() {
		var _g = this.disposeHandlers;
		if(_g != null) {
			var v = _g;
			this.disposeHandlers = null;
			var f = this.f;
			this.f = tink_core_SimpleDisposable.noop;
			f();
			var _g = 0;
			while(_g < v.length) {
				var h = v[_g];
				++_g;
				h();
			}
		}
	}
	,__class__: tink_core_SimpleDisposable
};
var tink_core_CallbackList = function(destructive) {
	if(destructive == null) {
		destructive = false;
	}
	this.onfill = function() {
	};
	this.ondrain = function() {
	};
	this.busy = false;
	this.queue = [];
	this.used = 0;
	var _gthis = this;
	tink_core_SimpleDisposable.call(this,function() {
		if(!_gthis.busy) {
			_gthis.destroy();
		}
	});
	this.destructive = destructive;
	this.cells = [];
};
$hxClasses["tink.core.CallbackList"] = tink_core_CallbackList;
tink_core_CallbackList.__name__ = "tink.core.CallbackList";
tink_core_CallbackList.__super__ = tink_core_SimpleDisposable;
tink_core_CallbackList.prototype = $extend(tink_core_SimpleDisposable.prototype,{
	destructive: null
	,cells: null
	,get_length: function() {
		return this.used;
	}
	,used: null
	,queue: null
	,busy: null
	,ondrain: null
	,onfill: null
	,release: function() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.cb = null;
			c.list = null;
		}
		this.queue = null;
		this.cells = null;
		if(this.used > 0) {
			this.used = 0;
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
	}
	,drain: function() {
		var fn = this.ondrain;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			fn();
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(fn);
		}
	}
	,add: function(cb) {
		if(this.disposeHandlers == null) {
			return null;
		}
		var node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			var fn = this.onfill;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		}
		return node;
	}
	,invoke: function(data) {
		var _gthis = this;
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			if(_gthis.disposeHandlers != null) {
				if(_gthis.busy) {
					if(_gthis.destructive != true) {
						var _g = _gthis;
						var data1 = data;
						var tmp = function() {
							_g.invoke(data1);
						};
						_gthis.queue.push(tmp);
					}
				} else {
					_gthis.busy = true;
					if(_gthis.destructive) {
						_gthis.dispose();
					}
					var length = _gthis.cells.length;
					var _g1 = 0;
					var _g2 = length;
					while(_g1 < _g2) {
						var i = _g1++;
						var _this = _gthis.cells[i];
						if(_this.list != null) {
							_this.cb(data);
						}
					}
					_gthis.busy = false;
					if(_gthis.disposeHandlers == null) {
						_gthis.destroy();
					} else {
						if(_gthis.used < _gthis.cells.length) {
							_gthis.compact();
						}
						if(_gthis.queue.length > 0) {
							(_gthis.queue.shift())();
						}
					}
				}
			}
			tink_core_Callback.depth--;
		} else {
			tink_core_Callback.defer(function() {
				if(_gthis.disposeHandlers != null) {
					if(_gthis.busy) {
						if(_gthis.destructive != true) {
							var _g = _gthis;
							var data1 = data;
							var tmp = function() {
								_g.invoke(data1);
							};
							_gthis.queue.push(tmp);
						}
					} else {
						_gthis.busy = true;
						if(_gthis.destructive) {
							_gthis.dispose();
						}
						var length = _gthis.cells.length;
						var _g1 = 0;
						var _g2 = length;
						while(_g1 < _g2) {
							var i = _g1++;
							var _this = _gthis.cells[i];
							if(_this.list != null) {
								_this.cb(data);
							}
						}
						_gthis.busy = false;
						if(_gthis.disposeHandlers == null) {
							_gthis.destroy();
						} else {
							if(_gthis.used < _gthis.cells.length) {
								_gthis.compact();
							}
							if(_gthis.queue.length > 0) {
								(_gthis.queue.shift())();
							}
						}
					}
				}
			});
		}
	}
	,compact: function() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			var fn = this.ondrain;
			if(tink_core_Callback.depth < 500) {
				tink_core_Callback.depth++;
				fn();
				tink_core_Callback.depth--;
			} else {
				tink_core_Callback.defer(fn);
			}
		} else {
			var compacted = 0;
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = this.cells[i];
				var _g3 = _g2.list;
				if(_g2.cb != null) {
					var v = _g2;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	,resize: function(length) {
		this.cells.length = length;
	}
	,clear: function() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
	,__class__: tink_core_CallbackList
});
var tink_core_AlreadyDisposed = function() {
};
$hxClasses["tink.core.AlreadyDisposed"] = tink_core_AlreadyDisposed;
tink_core_AlreadyDisposed.__name__ = "tink.core.AlreadyDisposed";
tink_core_AlreadyDisposed.__interfaces__ = [tink_core_OwnedDisposable];
tink_core_AlreadyDisposed.prototype = {
	get_disposed: function() {
		return true;
	}
	,ondispose: function(d) {
		d();
	}
	,dispose: function() {
	}
	,__class__: tink_core_AlreadyDisposed
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
$hxClasses["tink.core.TypedError"] = tink_core_TypedError;
tink_core_TypedError.__name__ = "tink.core.TypedError";
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var ex = haxe_Exception.caught(_g).unwrap();
		var e = tink_core_TypedError.asError(ex);
		var tmp;
		if(e == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",ex,pos) : report(ex);
		} else {
			var e1 = e;
			tmp = e1;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw haxe_Exception.thrown(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
	,printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,toPromise: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(this)));
	}
	,throwSelf: function() {
		var any = this;
		throw haxe_Exception.thrown(any);
	}
	,toJsError: function() {
		if(((this.data) instanceof Error)) {
			return this.data;
		} else {
			return new tink_core__$Error_TinkError(this);
		}
	}
	,__class__: tink_core_TypedError
};
var tink_core_Stack = {};
tink_core_Stack.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Error_TinkError = function(e) {
	Error.call(this);
	this.message = e.message;
	this.data = e;
};
$hxClasses["tink.core._Error.TinkError"] = tink_core__$Error_TinkError;
tink_core__$Error_TinkError.__name__ = "tink.core._Error.TinkError";
tink_core__$Error_TinkError.__super__ = Error;
tink_core__$Error_TinkError.prototype = $extend(Error.prototype,{
	data: null
	,__class__: tink_core__$Error_TinkError
});
var tink_core__$Future_FutureObject = function() {
};
$hxClasses["tink.core._Future.FutureObject"] = tink_core__$Future_FutureObject;
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
tink_core__$Future_FutureObject.prototype = {
	getStatus: function() {
		return tink_core_FutureStatus.NeverEver;
	}
	,handle: function(callback) {
		return null;
	}
	,eager: function() {
	}
	,__class__: tink_core__$Future_FutureObject
};
var tink_core__$Lazy_Computable = function() { };
$hxClasses["tink.core._Lazy.Computable"] = tink_core__$Lazy_Computable;
tink_core__$Lazy_Computable.__name__ = "tink.core._Lazy.Computable";
tink_core__$Lazy_Computable.__isInterface__ = true;
tink_core__$Lazy_Computable.prototype = {
	isComputed: null
	,compute: null
	,underlying: null
	,__class__: tink_core__$Lazy_Computable
};
var tink_core__$Lazy_LazyObject = function() { };
$hxClasses["tink.core._Lazy.LazyObject"] = tink_core__$Lazy_LazyObject;
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
tink_core__$Lazy_LazyObject.__isInterface__ = true;
tink_core__$Lazy_LazyObject.__interfaces__ = [tink_core__$Lazy_Computable];
tink_core__$Lazy_LazyObject.prototype = {
	get: null
	,__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
$hxClasses["tink.core._Lazy.LazyConst"] = tink_core__$Lazy_LazyConst;
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	value: null
	,isComputed: function() {
		return true;
	}
	,get: function() {
		return this.value;
	}
	,compute: function() {
	}
	,underlying: function() {
		return null;
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	tink_core__$Future_FutureObject.call(this);
	this.value = value;
};
$hxClasses["tink.core._Future.SyncFuture"] = tink_core__$Future_SyncFuture;
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__super__ = tink_core__$Future_FutureObject;
tink_core__$Future_SyncFuture.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	value: null
	,getStatus: function() {
		return tink_core_FutureStatus.Ready(this.value);
	}
	,handle: function(cb) {
		tink_core_Callback.invoke(cb,tink_core_Lazy.get(this.value));
		return null;
	}
	,eager: function() {
		if(!this.value.isComputed()) {
			tink_core_Lazy.get(this.value);
		}
	}
	,__class__: tink_core__$Future_SyncFuture
});
var tink_core_Future = {};
tink_core_Future.never = function() {
	return tink_core_Future.NEVER_INST;
};
tink_core_Future.get_status = function(this1) {
	return this1.getStatus();
};
tink_core_Future._new = function(wakeup) {
	return new tink_core__$Future_SuspendableFuture(wakeup);
};
tink_core_Future.handle = function(this1,callback) {
	return this1.handle(callback);
};
tink_core_Future.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Future.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Future.never();
	} else {
		return tink_core_Future.map(this1,function(_) {
			return null;
		});
	}
};
tink_core_Future.first = function(this1,that) {
	var _g = this1;
	var _g1 = _g.getStatus();
	switch(_g1._hx_index) {
	case 3:
		var _g2 = _g1.result;
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = _g;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			var v = _g;
			return v;
		}
		break;
	case 4:
		var v = that;
		return v;
	default:
		var _g1 = that.getStatus();
		switch(_g1._hx_index) {
		case 3:
			var _g2 = _g1.result;
			var v = that;
			return v;
		case 4:
			var v = _g;
			return v;
		default:
			return new tink_core__$Future_SuspendableFuture(function(fire) {
				return new tink_core__$Callback_LinkPair(this1.handle(fire),that.handle(fire));
			});
		}
	}
};
tink_core_Future.map = function(this1,f,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		var this2 = l;
		var f1 = f;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyFunc(function() {
			return f1(this2.get());
		},this2));
	case 4:
		return tink_core_Future.never();
	default:
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return this1.handle(function(v) {
				fire(f(v));
			});
		});
	}
};
tink_core_Future.flatMap = function(this1,next,gather) {
	var _g = this1.getStatus();
	switch(_g._hx_index) {
	case 3:
		var l = _g.result;
		return new tink_core__$Future_SuspendableFuture(function(fire) {
			return next(tink_core_Lazy.get(l)).handle(function(v) {
				fire(v);
			});
		});
	case 4:
		return tink_core_Future.never();
	default:
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var inner = new tink_core_CallbackLinkRef();
			var outer = this1.handle(function(v) {
				var param = next(v).handle($yield);
				var this1 = inner.link;
				if(this1 != null) {
					this1.cancel();
				}
				inner.link = param;
			});
			return new tink_core__$Callback_LinkPair(outer,inner);
		});
	}
};
tink_core_Future.swap = function(this1,v) {
	return tink_core_Future.map(this1,function(_) {
		return v;
	});
};
tink_core_Future.next = function(this1,n) {
	return tink_core_Future.flatMap(this1,n);
};
tink_core_Future.withSideEffect = function(this1,c) {
	return tink_core_Future.map(this1,function(v) {
		tink_core_Callback.invoke(c,v);
		return v;
	});
};
tink_core_Future.gather = function(this1) {
	return this1;
};
tink_core_Future.merge = function(this1,that,combine) {
	var _g = this1.getStatus();
	var _g1 = that.getStatus();
	if(_g._hx_index == 4) {
		return tink_core_Future.never();
	} else if(_g1._hx_index == 4) {
		return tink_core_Future.never();
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var check = function(v) {
				var _g = this1.getStatus();
				var _g1 = that.getStatus();
				if(_g._hx_index == 3) {
					if(_g1._hx_index == 3) {
						var b = _g1.result;
						var a = _g.result;
						$yield(combine(tink_core_Lazy.get(a),tink_core_Lazy.get(b)));
					}
				}
			};
			return new tink_core__$Callback_LinkPair(this1.handle(check),that.handle(check));
		});
	}
};
tink_core_Future.flatten = function(f) {
	return tink_core_Future.flatMap(f,function(v) {
		return v;
	});
};
tink_core_Future.ofJsPromise = function(promise,transformError) {
	return tink_core_Future.irreversible(function(cb) {
		promise.then(function(a) {
			var _g = cb;
			var a1 = tink_core_Outcome.Success(a);
			tink_core_Callback.defer(function() {
				_g(a1);
			});
		},function(e) {
			var cb1 = cb;
			var tmp;
			if(transformError == null) {
				var e1 = e;
				tmp = tink_core_TypedError.withData(500,e1.message,e1,{ fileName : "tink/core/Future.hx", lineNumber : 176, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"});
			} else {
				var f = transformError;
				tmp = f(e);
			}
			cb1(tink_core_Outcome.Failure(tmp));
		});
	});
};
tink_core_Future.fromJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Future.neverToAny = function(l) {
	return l;
};
tink_core_Future.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.asPromise = function(s) {
	return s;
};
tink_core_Future.ofMany = function(futures,gather) {
	return tink_core_Future.inSequence(futures);
};
tink_core_Future.inParallel = function(futures,concurrency) {
	return tink_core_Future.many(futures,concurrency);
};
tink_core_Future.inSequence = function(futures) {
	return tink_core_Future.many(futures,1);
};
tink_core_Future.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,tink_core_Outcome.Success,function(o) {
		return tink_core_OutcomeTools.orNull(o);
	});
};
tink_core_Future.processMany = function(a,concurrency,fn,lift) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(lift(tink_core_Outcome.Success([]))));
	} else {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			var links = [];
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var x = a[_g1];
				++_g1;
				_g.push(null);
			}
			var ret = _g;
			var index = 0;
			var pending = 0;
			var done = false;
			var concurrency1;
			if(concurrency == null) {
				concurrency1 = a.length;
			} else {
				var v = concurrency;
				concurrency1 = v < 1 ? 1 : v > a.length ? a.length : v;
			}
			var fireWhenReady = function() {
				if(index == ret.length) {
					if(pending == 0) {
						var v = lift(tink_core_Outcome.Success(ret));
						done = true;
						$yield(v);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			};
			var step = null;
			step = function() {
				if(!done && !fireWhenReady()) {
					while(index < ret.length) {
						index += 1;
						var index1 = [index - 1];
						var p = a[index1[0]];
						var check = [(function(index) {
							return function(o) {
								var _g = fn(o);
								switch(_g._hx_index) {
								case 0:
									var v = _g.data;
									ret[index[0]] = v;
									fireWhenReady();
									break;
								case 1:
									var e = _g.failure;
									var _g = 0;
									while(_g < links.length) {
										var l = links[_g];
										++_g;
										if(l != null) {
											l.cancel();
										}
									}
									var v = lift(tink_core_Outcome.Failure(e));
									done = true;
									$yield(v);
									break;
								}
							};
						})(index1)];
						var _g = p.getStatus();
						if(_g._hx_index == 3) {
							var _hx_tmp;
							_hx_tmp = tink_core_Lazy.get(_g.result);
							var v = _hx_tmp;
							check[0](v);
							if(!done) {
								continue;
							}
						} else {
							pending += 1;
							links.push(p.handle((function(check) {
								return function(o) {
									pending -= 1;
									check[0](o);
									if(!done) {
										step();
									}
								};
							})(check)));
						}
						break;
					}
				}
			};
			var _g = 0;
			var _g1 = concurrency1;
			while(_g < _g1) {
				var i = _g++;
				step();
			}
			return tink_core_CallbackLink.fromMany(links);
		});
	}
};
tink_core_Future.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core_Future.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core_Future.isFuture = function(maybeFuture) {
	return ((maybeFuture) instanceof tink_core__$Future_FutureObject);
};
tink_core_Future.async = function(init,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var ret = tink_core_Future.irreversible(init);
	if(lazy) {
		return ret;
	} else {
		ret.eager();
		return ret;
	}
};
tink_core_Future.irreversible = function(init) {
	return new tink_core__$Future_SuspendableFuture(function($yield) {
		init($yield);
		return null;
	});
};
tink_core_Future.or = function(a,b) {
	return tink_core_Future.first(a,b);
};
tink_core_Future.either = function(a,b) {
	return tink_core_Future.first(tink_core_Future.map(a,haxe_ds_Either.Left),tink_core_Future.map(b,haxe_ds_Either.Right));
};
tink_core_Future.and = function(a,b) {
	return tink_core_Future.merge(a,b,function(a,b) {
		return new tink_core_MPair(a,b);
	});
};
tink_core_Future._tryFailingFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFlatMap = function(f,map) {
	return tink_core_Future.flatMap(f,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return tink_core_Future.map(map(d),tink_core_Outcome.Success);
		case 1:
			var f = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
		}
	});
};
tink_core_Future._tryFailingMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
	});
};
tink_core_Future._tryMap = function(f,map) {
	return tink_core_Future.map(f,function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
};
tink_core_Future._flatMap = function(f,map) {
	return tink_core_Future.flatMap(f,map);
};
tink_core_Future._map = function(f,map) {
	return tink_core_Future.map(f,map);
};
tink_core_Future.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Future.delay = function(ms,value) {
	var this1 = tink_core_Future.irreversible(function(cb) {
		haxe_Timer.delay(function() {
			cb(tink_core_Lazy.get(value));
		},ms);
	});
	this1.eager();
	return this1;
};
var tink_core_FutureStatus = $hxEnums["tink.core.FutureStatus"] = { __ename__:"tink.core.FutureStatus",__constructs__:null
	,Suspended: {_hx_name:"Suspended",_hx_index:0,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Awaited: {_hx_name:"Awaited",_hx_index:1,__enum__:"tink.core.FutureStatus",toString:$estr}
	,EagerlyAwaited: {_hx_name:"EagerlyAwaited",_hx_index:2,__enum__:"tink.core.FutureStatus",toString:$estr}
	,Ready: ($_=function(result) { return {_hx_index:3,result:result,__enum__:"tink.core.FutureStatus",toString:$estr}; },$_._hx_name="Ready",$_.__params__ = ["result"],$_)
	,NeverEver: {_hx_name:"NeverEver",_hx_index:4,__enum__:"tink.core.FutureStatus",toString:$estr}
};
tink_core_FutureStatus.__constructs__ = [tink_core_FutureStatus.Suspended,tink_core_FutureStatus.Awaited,tink_core_FutureStatus.EagerlyAwaited,tink_core_FutureStatus.Ready,tink_core_FutureStatus.NeverEver];
var tink_core_FutureTrigger = function() {
	this.status = tink_core_FutureStatus.Awaited;
	tink_core__$Future_FutureObject.call(this);
	this.list = new tink_core_CallbackList(true);
};
$hxClasses["tink.core.FutureTrigger"] = tink_core_FutureTrigger;
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__super__ = tink_core__$Future_FutureObject;
tink_core_FutureTrigger.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	status: null
	,list: null
	,getStatus: function() {
		return this.status;
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var v = _g;
			var _this = this.list;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
			return false;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(result));
			this.list.invoke(result);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
});
var tink_core_JsPromiseTools = function() { };
$hxClasses["tink.core.JsPromiseTools"] = tink_core_JsPromiseTools;
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
var tink_core__$Future_SuspendableFuture = function(wakeup) {
	this.status = tink_core_FutureStatus.Suspended;
	var _gthis = this;
	tink_core__$Future_FutureObject.call(this);
	this.wakeup = wakeup;
	this.callbacks = new tink_core_CallbackList(true);
	this.callbacks.ondrain = function() {
		if(_gthis.status == tink_core_FutureStatus.Awaited) {
			_gthis.status = tink_core_FutureStatus.Suspended;
			var this1 = _gthis.link;
			if(this1 != null) {
				this1.cancel();
			}
			_gthis.link = null;
		}
	};
	this.callbacks.onfill = function() {
		if(_gthis.status == tink_core_FutureStatus.Suspended) {
			_gthis.status = tink_core_FutureStatus.Awaited;
			_gthis.arm();
		}
	};
};
$hxClasses["tink.core._Future.SuspendableFuture"] = tink_core__$Future_SuspendableFuture;
tink_core__$Future_SuspendableFuture.__name__ = "tink.core._Future.SuspendableFuture";
tink_core__$Future_SuspendableFuture.__super__ = tink_core__$Future_FutureObject;
tink_core__$Future_SuspendableFuture.prototype = $extend(tink_core__$Future_FutureObject.prototype,{
	callbacks: null
	,status: null
	,link: null
	,wakeup: null
	,getStatus: function() {
		return this.status;
	}
	,trigger: function(value) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var _g1 = _g.result;
		} else {
			this.status = tink_core_FutureStatus.Ready(new tink_core__$Lazy_LazyConst(value));
			var link = this.link;
			this.link = null;
			this.wakeup = null;
			this.callbacks.invoke(value);
			if(link != null) {
				link.cancel();
			}
		}
	}
	,handle: function(callback) {
		var _g = this.status;
		if(_g._hx_index == 3) {
			var result = _g.result;
			tink_core_Callback.invoke(callback,tink_core_Lazy.get(result));
			return null;
		} else {
			var _this = this.callbacks;
			if(_this.disposeHandlers == null) {
				return null;
			} else {
				var node = new tink_core__$Callback_ListCell(callback,_this);
				_this.cells.push(node);
				if(_this.used++ == 0) {
					var fn = _this.onfill;
					if(tink_core_Callback.depth < 500) {
						tink_core_Callback.depth++;
						fn();
						tink_core_Callback.depth--;
					} else {
						tink_core_Callback.defer(fn);
					}
				}
				return node;
			}
		}
	}
	,arm: function() {
		var _gthis = this;
		this.link = this.wakeup(function(x) {
			_gthis.trigger(x);
		});
	}
	,eager: function() {
		switch(this.status._hx_index) {
		case 0:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			this.arm();
			break;
		case 1:
			this.status = tink_core_FutureStatus.EagerlyAwaited;
			break;
		default:
		}
	}
	,__class__: tink_core__$Future_SuspendableFuture
});
var tink_core_Lazy = {};
tink_core_Lazy.get_computed = function(this1) {
	return this1.isComputed();
};
tink_core_Lazy.get = function(this1) {
	this1.compute();
	return this1.get();
};
tink_core_Lazy.fromNoise = function(l) {
	return l;
};
tink_core_Lazy.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core_Lazy.map = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return f(this1.get());
	},this1);
};
tink_core_Lazy.flatMap = function(this1,f) {
	return new tink_core__$Lazy_LazyFunc(function() {
		return tink_core_Lazy.get(f(this1.get()));
	},this1);
};
tink_core_Lazy.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f,from) {
	this.f = f;
	this.from = from;
};
$hxClasses["tink.core._Lazy.LazyFunc"] = tink_core__$Lazy_LazyFunc;
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	f: null
	,from: null
	,result: null
	,underlying: function() {
		return this.from;
	}
	,isComputed: function() {
		return this.f == null;
	}
	,get: function() {
		return this.result;
	}
	,compute: function() {
		var _g = this.f;
		if(_g != null) {
			var v = _g;
			this.f = null;
			var _g = this.from;
			if(_g != null) {
				var cur = _g;
				this.from = null;
				var stack = [];
				while(cur != null && !cur.isComputed()) {
					stack.push(cur);
					cur = cur.underlying();
				}
				stack.reverse();
				var _g = 0;
				while(_g < stack.length) {
					var c = stack[_g];
					++_g;
					c.compute();
				}
			}
			this.result = v();
		}
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
$hxClasses["tink.core.NamedWith"] = tink_core_NamedWith;
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
tink_core_NamedWith.prototype = {
	name: null
	,value: null
	,__class__: tink_core_NamedWith
};
var tink_core_Noise = {};
tink_core_Noise.ofAny = function(t) {
	return null;
};
var tink_core_OptionTools = function() { };
$hxClasses["tink.core.OptionTools"] = tink_core_OptionTools;
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.sure = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.toOutcome = function(o,pos) {
	switch(o._hx_index) {
	case 0:
		var value = o.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Option.hx", lineNumber : 31, className : "tink.core.OptionTools", methodName : "toOutcome"}));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return tink_core_Lazy.get(l);
	}
};
tink_core_OptionTools.orTry = function(o,fallback) {
	if(o._hx_index == 0) {
		var v = o.v;
		return o;
	} else {
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
$hxClasses["tink.core.OptionIter"] = tink_core_OptionIter;
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
tink_core_OptionIter.prototype = {
	value: null
	,alive: null
	,hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__:"tink.core.Outcome",__constructs__:null
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Success",$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_._hx_name="Failure",$_.__params__ = ["failure"],$_)
};
tink_core_Outcome.__constructs__ = [tink_core_Outcome.Success,tink_core_Outcome.Failure];
var tink_core_OutcomeTools = function() { };
$hxClasses["tink.core.OutcomeTools"] = tink_core_OutcomeTools;
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw haxe_Exception.thrown(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		var _g = outcome.failure;
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	return tink_core_OutcomeTools.or(outcome,fallback);
};
tink_core_OutcomeTools.or = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var _g = outcome.data;
		return outcome;
	case 1:
		var _g = outcome.failure;
		return tink_core_Lazy.get(fallback);
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		var _g = outcome.failure;
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		var _g = outcome.data;
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.next = function(outcome,f) {
	switch(outcome._hx_index) {
	case 0:
		var v = outcome.data;
		return f(v);
	case 1:
		var e = outcome.failure;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		return tink_core_Outcome.Failure(report(e));
	}
};
tink_core_OutcomeTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var d = o.data;
		return f(d);
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		var _g = o.data;
		switch(_g._hx_index) {
		case 0:
			var d = _g.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = _g.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f = o.failure;
		return tink_core_Outcome.Failure(f);
	}
};
var tink_core__$Outcome_OutcomeMapper = {};
tink_core__$Outcome_OutcomeMapper._new = function(f) {
	return { f : f};
};
tink_core__$Outcome_OutcomeMapper.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f1));
		}
	});
};
var tink_core_Pair = {};
tink_core_Pair._new = function(a,b) {
	return new tink_core_MPair(a,b);
};
tink_core_Pair.get_a = function(this1) {
	return this1.a;
};
tink_core_Pair.get_b = function(this1) {
	return this1.b;
};
tink_core_Pair.toBool = function(this1) {
	return this1 != null;
};
tink_core_Pair.isNil = function(this1) {
	return this1 == null;
};
tink_core_Pair.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["tink.core.MPair"] = tink_core_MPair;
tink_core_MPair.__name__ = "tink.core.MPair";
tink_core_MPair.prototype = {
	a: null
	,b: null
	,__class__: tink_core_MPair
};
var tink_core_ProgressValue = {};
tink_core_ProgressValue._new = function(value,total) {
	return new tink_core_MPair(value,total);
};
tink_core_ProgressValue.normalize = function(this1) {
	var o = this1.b;
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(this1.a / v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_ProgressValue.get_value = function(this1) {
	return this1.a;
};
tink_core_ProgressValue.get_total = function(this1) {
	return this1.b;
};
var tink_core_Progress = {};
tink_core_Progress.listen = function(this1,cb) {
	return this1.progressed.listen(cb);
};
tink_core_Progress.handle = function(this1,cb) {
	return this1.result.handle(cb);
};
tink_core_Progress.trigger = function() {
	return new tink_core_ProgressTrigger();
};
tink_core_Progress.make = function(f) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		return f(function(value,total) {
			fire(tink_core_ProgressStatus.InProgress(new tink_core_MPair(value,total)));
		},function(result) {
			fire(tink_core_ProgressStatus.Finished(result));
		});
	});
};
tink_core_Progress.map = function(this1,f) {
	return new tink_core__$Progress_ProgressObject(tink_core_Signal.map(this1.changed,function(s) {
		return tink_core_ProgressStatusTools.map(s,f);
	}),function() {
		return tink_core_ProgressStatusTools.map(this1.getStatus(),f);
	});
};
tink_core_Progress.asFuture = function(this1) {
	return this1.result;
};
tink_core_Progress.promise = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var p = o.data;
				var param = p.changed.listen(function(s) {
					fire(tink_core_ProgressStatusTools.map(s,tink_core_Outcome.Success));
				});
				var this1 = inner.link;
				if(this1 != null) {
					this1.cancel();
				}
				inner.link = param;
				break;
			case 1:
				var e = o.failure;
				fire(tink_core_ProgressStatus.Finished(tink_core_Outcome.Failure(e)));
				break;
			}
		}),inner);
	});
};
tink_core_Progress.flatten = function(v) {
	return tink_core_Progress.map(tink_core_Progress.promise(v),function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var v = _g.data;
				return tink_core_Outcome.Success(v);
			case 1:
				var e = _g.failure;
				return tink_core_Outcome.Failure(e);
			}
			break;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(e);
		}
	});
};
tink_core_Progress.future = function(v) {
	return new tink_core__$Progress_SuspendableProgress(function(fire) {
		var inner = new tink_core_CallbackLinkRef();
		return new tink_core__$Callback_LinkPair(v.handle(function(p) {
			var param = p.changed.listen(fire);
			var this1 = inner.link;
			if(this1 != null) {
				this1.cancel();
			}
			inner.link = param;
		}),inner);
	});
};
tink_core_Progress.next = function(this1,f) {
	return tink_core_Future.flatMap(this1.result,f);
};
var tink_core__$Progress_ProgressObject = function(changed,getStatus) {
	this.changed = changed;
	this.progressed = new tink_core__$Signal_Suspendable(function(fire) {
		return changed.listen(function(s) {
			if(s._hx_index == 0) {
				var v = s.v;
				fire(v);
			}
		});
	},null);
	this.getStatus = getStatus;
	this.result = new tink_core__$Future_SuspendableFuture(function(fire) {
		var _g = getStatus();
		if(_g._hx_index == 1) {
			var v = _g.v;
			fire(v);
			return null;
		} else {
			return changed.listen(function(s) {
				if(s._hx_index == 1) {
					var v = s.v;
					fire(v);
				}
			});
		}
	});
};
$hxClasses["tink.core._Progress.ProgressObject"] = tink_core__$Progress_ProgressObject;
tink_core__$Progress_ProgressObject.__name__ = "tink.core._Progress.ProgressObject";
tink_core__$Progress_ProgressObject.prototype = {
	get_status: function() {
		return this.getStatus();
	}
	,getStatus: null
	,changed: null
	,progressed: null
	,result: null
	,__class__: tink_core__$Progress_ProgressObject
};
var tink_core__$Progress_SuspendableProgress = function(wakeup,status) {
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
	}
	var disposable = tink_core_AlreadyDisposed.INST;
	var changed;
	switch(status._hx_index) {
	case 0:
		var _g = status.v;
		changed = new tink_core__$Signal_Suspendable(function(fire) {
			return wakeup(function(s) {
				status = s;
				fire(status);
			});
		},function(d) {
			disposable = d;
		});
		break;
	case 1:
		var _g = status.v;
		changed = tink_core_Signal.dead();
		break;
	}
	tink_core__$Progress_ProgressObject.call(this,changed,function() {
		return status;
	});
};
$hxClasses["tink.core._Progress.SuspendableProgress"] = tink_core__$Progress_SuspendableProgress;
tink_core__$Progress_SuspendableProgress.__name__ = "tink.core._Progress.SuspendableProgress";
tink_core__$Progress_SuspendableProgress.__super__ = tink_core__$Progress_ProgressObject;
tink_core__$Progress_SuspendableProgress.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	noop: function(_,_1) {
		return null;
	}
	,__class__: tink_core__$Progress_SuspendableProgress
});
var tink_core_ProgressTrigger = function(status) {
	this._changed = null;
	var _gthis = this;
	if(status == null) {
		status = tink_core_ProgressStatus.InProgress(tink_core_ProgressValue.ZERO);
		this._status = status;
	}
	var tmp;
	if(status == null) {
		tmp = false;
	} else if(status._hx_index == 1) {
		var _g = status.v;
		tmp = true;
	} else {
		tmp = false;
	}
	tink_core__$Progress_ProgressObject.call(this,tmp ? tink_core_Signal.dead() : this._changed = tink_core_Signal.trigger(),function() {
		return _gthis._status;
	});
};
$hxClasses["tink.core.ProgressTrigger"] = tink_core_ProgressTrigger;
tink_core_ProgressTrigger.__name__ = "tink.core.ProgressTrigger";
tink_core_ProgressTrigger.__super__ = tink_core__$Progress_ProgressObject;
tink_core_ProgressTrigger.prototype = $extend(tink_core__$Progress_ProgressObject.prototype,{
	_status: null
	,_changed: null
	,asProgress: function() {
		return this;
	}
	,progress: function(v,total) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			var _this = this._changed;
			var this1 = new tink_core_MPair(v,total);
			_this.handlers.invoke(this._status = tink_core_ProgressStatus.InProgress(this1));
		}
	}
	,finish: function(v) {
		var _g = this._status;
		var tmp;
		if(_g._hx_index == 1) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this._changed.handlers.invoke(this._status = tink_core_ProgressStatus.Finished(v));
		}
	}
	,__class__: tink_core_ProgressTrigger
});
var tink_core_UnitInterval = {};
tink_core_UnitInterval.toPercentageString = function(this1,dp) {
	var m = Math.pow(10,dp);
	var v = Math.round(this1 * m * 100) / m;
	var s = v == null ? "null" : "" + v;
	var _g = s.indexOf(".");
	if(_g == -1) {
		return s + "." + StringTools.lpad("","0",dp) + "%";
	} else {
		var i = _g;
		if(s.length - i > dp) {
			return HxOverrides.substr(s,0,dp + i + 1) + "%";
		} else {
			var i = _g;
			return StringTools.rpad(s,"0",i + dp + 1) + "%";
		}
	}
};
var tink_core_ProgressStatus = $hxEnums["tink.core.ProgressStatus"] = { __ename__:"tink.core.ProgressStatus",__constructs__:null
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="InProgress",$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressStatus",toString:$estr}; },$_._hx_name="Finished",$_.__params__ = ["v"],$_)
};
tink_core_ProgressStatus.__constructs__ = [tink_core_ProgressStatus.InProgress,tink_core_ProgressStatus.Finished];
var tink_core_ProgressStatusTools = function() { };
$hxClasses["tink.core.ProgressStatusTools"] = tink_core_ProgressStatusTools;
tink_core_ProgressStatusTools.__name__ = "tink.core.ProgressStatusTools";
tink_core_ProgressStatusTools.map = function(p,f) {
	switch(p._hx_index) {
	case 0:
		var v = p.v;
		return tink_core_ProgressStatus.InProgress(v);
	case 1:
		var v = p.v;
		return tink_core_ProgressStatus.Finished(f(v));
	}
};
var tink_core_TotalTools = function() { };
$hxClasses["tink.core.TotalTools"] = tink_core_TotalTools;
tink_core_TotalTools.__name__ = "tink.core.TotalTools";
tink_core_TotalTools.eq = function(a,b) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var t2 = b.v;
			var t1 = a.v;
			return t1 == t2;
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
var tink_core_ProgressTools = function() { };
$hxClasses["tink.core.ProgressTools"] = tink_core_ProgressTools;
tink_core_ProgressTools.__name__ = "tink.core.ProgressTools";
tink_core_ProgressTools.asPromise = function(p) {
	return p.result;
};
var tink_core_Promise = {};
tink_core_Promise.never = function() {
	return tink_core_Future.never();
};
tink_core_Promise._new = function(f) {
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		return f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
};
tink_core_Promise.eager = function(this1) {
	this1.eager();
	return this1;
};
tink_core_Promise.map = function(this1,f) {
	return tink_core_Future.map(this1,f);
};
tink_core_Promise.flatMap = function(this1,f) {
	return tink_core_Future.flatMap(this1,f);
};
tink_core_Promise.tryRecover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.recover = function(this1,f) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
};
tink_core_Promise.mapError = function(this1,f) {
	return tink_core_Future.map(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
};
tink_core_Promise.withSideEffect = function(this1,c) {
	var c1 = function(o) {
		if(o._hx_index == 0) {
			var data = o.data;
			tink_core_Callback.invoke(c,data);
		}
	};
	return tink_core_Future.map(this1,function(v) {
		tink_core_Callback.invoke(c1,v);
		return v;
	});
};
tink_core_Promise.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core_Promise.noise = function(this1) {
	if(this1.getStatus()._hx_index == 4) {
		return tink_core_Promise.never();
	} else {
		return tink_core_Promise.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
		});
	}
};
tink_core_Promise.isSuccess = function(this1) {
	return tink_core_Future.map(this1,function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
};
tink_core_Promise.next = function(this1,f,gather) {
	return tink_core_Future.flatMap(this1,function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
};
tink_core_Promise.swap = function(this1,v) {
	return tink_core_Promise.next(this1,function(_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	});
};
tink_core_Promise.swapError = function(this1,e) {
	return tink_core_Promise.mapError(this1,function(_) {
		return e;
	});
};
tink_core_Promise.merge = function(this1,other,merger,gather) {
	return tink_core_Future.flatMap(tink_core_Future.merge(this1,other,function(a,b) {
		switch(a._hx_index) {
		case 0:
			var _g = a.data;
			switch(b._hx_index) {
			case 0:
				var b1 = b.data;
				var a1 = _g;
				return merger(a1,b1);
			case 1:
				var e = b.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
			break;
		case 1:
			var e = a.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}),function(o) {
		return o;
	});
};
tink_core_Promise.irreversible = function(f) {
	var f1 = function(res,rej) {
		f(res,rej);
		return null;
	};
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		return f1(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	});
};
tink_core_Promise.and = function(a,b) {
	return tink_core_Promise.merge(a,b,function(a,b) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_core_MPair(a,b))));
	});
};
tink_core_Promise.iterate = function(promises,$yield,fallback,fallThroughOnError) {
	if(fallThroughOnError == null) {
		fallThroughOnError = false;
	}
	return tink_core_Future.irreversible(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								switch(_g._hx_index) {
								case 0:
									var ret = _g.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e = o.failure;
						if(fallThroughOnError) {
							next();
						} else {
							cb(tink_core_Outcome.Failure(e));
						}
						break;
					}
				});
			} else {
				fallback.handle(cb);
			}
		};
		next();
	});
};
tink_core_Promise.retry = function(gen,next) {
	var stamp = function() {
		return HxOverrides.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
				return attempt(count + 1);
			});
		};
		return tink_core_Future.flatMap(gen(),function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
	};
	return attempt(1);
};
tink_core_Promise.ofJsPromise = function(promise,transformError) {
	return tink_core_Future.ofJsPromise(promise,transformError);
};
tink_core_Promise.fromJsPromise = function(promise) {
	return tink_core_Future.ofJsPromise(promise);
};
tink_core_Promise.toJsPromise = function(this1) {
	return new Promise(function(resolve,reject) {
		this1.handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				resolve(v);
				break;
			case 1:
				var e = o.failure;
				reject(e.toJsError());
				break;
			}
		});
	});
};
tink_core_Promise.ofSpecific = function(s) {
	return s;
};
tink_core_Promise.fromNever = function(l) {
	return l;
};
tink_core_Promise.ofTrigger = function(f) {
	return f;
};
tink_core_Promise.ofHappyTrigger = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofFuture = function(f) {
	return tink_core_Future.map(f,tink_core_Outcome.Success);
};
tink_core_Promise.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core_Promise.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core_Promise.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core_Promise.asFuture = function(this1) {
	return this1;
};
tink_core_Promise.lazy = function(p) {
	return new tink_core__$Future_SuspendableFuture(function(cb) {
		return tink_core_Lazy.get(p).handle(cb);
	});
};
tink_core_Promise.inParallel = function(a,concurrency) {
	return tink_core_Promise.many(a,concurrency);
};
tink_core_Promise.many = function(a,concurrency) {
	return tink_core_Future.processMany(a,concurrency,function(o) {
		return o;
	},function(o) {
		return o;
	});
};
tink_core_Promise.inSequence = function(a) {
	return tink_core_Promise.many(a,1);
};
tink_core_Promise.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core_Promise.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		return tink_core_Future.map(ret,function(o) {
			if(!tink_core_OutcomeTools.isSuccess(o)) {
				p = null;
			}
			return o;
		});
	};
};
tink_core_Promise.lift = function(p) {
	return p;
};
tink_core_Promise.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core_Promise.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core_Promise.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core_Next = {};
tink_core_Next.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core_Next.ofSync = function(f) {
	return function(x) {
		return tink_core_Future.map(f(x),tink_core_Outcome.Success);
	};
};
tink_core_Next.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core_Next._chain = function(a,b) {
	return function(v) {
		return tink_core_Promise.next(a(v),b);
	};
};
var tink_core_Recover = {};
tink_core_Recover.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core_Combiner = {};
tink_core_Combiner.ofSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core_Combiner.ofSafe = function(f) {
	return function(x1,x2) {
		return tink_core_Future.map(f(x1,x2),tink_core_Outcome.Success);
	};
};
tink_core_Combiner.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core_PromiseTrigger = {};
tink_core_PromiseTrigger._new = function() {
	return new tink_core_FutureTrigger();
};
tink_core_PromiseTrigger.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core_PromiseTrigger.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core_PromiseTrigger.asPromise = function(this1) {
	return this1;
};
var tink_core_Ref = {};
tink_core_Ref._new = function() {
	return new Array(1);
};
tink_core_Ref.get_value = function(this1) {
	return this1[0];
};
tink_core_Ref.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core_Ref.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core_Ref.to = function(v) {
	var ret = new Array(1);
	ret[0] = v;
	return ret;
};
var tink_core_Gather = {};
tink_core_Gather._new = function(v) {
	return v;
};
tink_core_Gather.ofBool = function(b) {
	return b;
};
var tink_core__$Signal_Disposed = function() {
	tink_core_AlreadyDisposed.call(this);
};
$hxClasses["tink.core._Signal.Disposed"] = tink_core__$Signal_Disposed;
tink_core__$Signal_Disposed.__name__ = "tink.core._Signal.Disposed";
tink_core__$Signal_Disposed.__interfaces__ = [tink_core__$Signal_SignalObject];
tink_core__$Signal_Disposed.__super__ = tink_core_AlreadyDisposed;
tink_core__$Signal_Disposed.prototype = $extend(tink_core_AlreadyDisposed.prototype,{
	listen: function(cb) {
		return null;
	}
	,__class__: tink_core__$Signal_Disposed
});
var tink_core__$Signal_Suspendable = function(activate,init) {
	this.handlers = new tink_core_CallbackList();
	var _gthis = this;
	this.activate = activate;
	this.init = init;
	this.handlers.ondrain = function() {
		var this1 = _gthis.subscription;
		if(this1 != null) {
			this1.cancel();
		}
	};
	this.handlers.onfill = function() {
		if(init != null) {
			var f = init;
			init = null;
			f(_gthis);
		}
		_gthis.subscription = activate(($_=_gthis.handlers,$bind($_,$_.invoke)));
	};
};
$hxClasses["tink.core._Signal.Suspendable"] = tink_core__$Signal_Suspendable;
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_OwnedDisposable,tink_core__$Signal_SignalObject];
tink_core__$Signal_Suspendable.over = function(s,activate) {
	if(s.get_disposed()) {
		return tink_core_Signal.dead();
	} else {
		var ret = new tink_core__$Signal_Suspendable(activate);
		s.ondispose($bind(ret,ret.dispose));
		return ret;
	}
};
tink_core__$Signal_Suspendable.prototype = {
	handlers: null
	,activate: null
	,init: null
	,subscription: null
	,get_disposed: function() {
		return this.handlers.disposeHandlers == null;
	}
	,dispose: function() {
		this.handlers.dispose();
	}
	,ondispose: function(handler) {
		this.handlers.ondispose(handler);
	}
	,listen: function(cb) {
		var _this = this.handlers;
		if(_this.disposeHandlers == null) {
			return null;
		} else {
			var node = new tink_core__$Callback_ListCell(cb,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				var fn = _this.onfill;
				if(tink_core_Callback.depth < 500) {
					tink_core_Callback.depth++;
					fn();
					tink_core_Callback.depth--;
				} else {
					tink_core_Callback.defer(fn);
				}
			}
			return node;
		}
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_runloop_TaskObject = function() { };
$hxClasses["tink.runloop.TaskObject"] = tink_runloop_TaskObject;
tink_runloop_TaskObject.__name__ = "tink.runloop.TaskObject";
tink_runloop_TaskObject.__isInterface__ = true;
tink_runloop_TaskObject.prototype = {
	get_recurring: null
	,get_state: null
	,cancel: null
	,perform: null
	,__class__: tink_runloop_TaskObject
};
var tink_runloop__$Task_Noop = function() {
};
$hxClasses["tink.runloop._Task.Noop"] = tink_runloop__$Task_Noop;
tink_runloop__$Task_Noop.__name__ = "tink.runloop._Task.Noop";
tink_runloop__$Task_Noop.__interfaces__ = [tink_runloop_TaskObject];
tink_runloop__$Task_Noop.prototype = {
	get_recurring: function() {
		return false;
	}
	,get_state: function() {
		return tink_runloop_TaskState.Performed;
	}
	,cancel: function() {
	}
	,perform: function() {
	}
	,__class__: tink_runloop__$Task_Noop
};
var tink_runloop_Task = {};
tink_runloop_Task.ofFunction = function(f) {
	return new tink_runloop_FunctionTask(f);
};
tink_runloop_Task.repeat = function(f) {
	return new tink_runloop_RepeatableFunctionTask(f);
};
var tink_runloop_TaskRepeat = $hxEnums["tink.runloop.TaskRepeat"] = { __ename__:"tink.runloop.TaskRepeat",__constructs__:null
	,Continue: {_hx_name:"Continue",_hx_index:0,__enum__:"tink.runloop.TaskRepeat",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:1,__enum__:"tink.runloop.TaskRepeat",toString:$estr}
};
tink_runloop_TaskRepeat.__constructs__ = [tink_runloop_TaskRepeat.Continue,tink_runloop_TaskRepeat.Done];
var tink_runloop_TaskState = $hxEnums["tink.runloop.TaskState"] = { __ename__:"tink.runloop.TaskState",__constructs__:null
	,Pending: {_hx_name:"Pending",_hx_index:0,__enum__:"tink.runloop.TaskState",toString:$estr}
	,Canceled: {_hx_name:"Canceled",_hx_index:1,__enum__:"tink.runloop.TaskState",toString:$estr}
	,Busy: {_hx_name:"Busy",_hx_index:2,__enum__:"tink.runloop.TaskState",toString:$estr}
	,Performed: {_hx_name:"Performed",_hx_index:3,__enum__:"tink.runloop.TaskState",toString:$estr}
};
tink_runloop_TaskState.__constructs__ = [tink_runloop_TaskState.Pending,tink_runloop_TaskState.Canceled,tink_runloop_TaskState.Busy,tink_runloop_TaskState.Performed];
var tink_runloop_TaskBase = function(recurring) {
	if(recurring == null) {
		recurring = false;
	}
	this.recurring = recurring;
	this.state = tink_runloop_TaskState.Pending;
	this.m = false;
};
$hxClasses["tink.runloop.TaskBase"] = tink_runloop_TaskBase;
tink_runloop_TaskBase.__name__ = "tink.runloop.TaskBase";
tink_runloop_TaskBase.__interfaces__ = [tink_runloop_TaskObject];
tink_runloop_TaskBase.prototype = {
	m: null
	,recurring: null
	,get_recurring: function() {
		return this.recurring;
	}
	,state: null
	,get_state: function() {
		return this.state;
	}
	,cancel: function() {
		var _gthis = this;
		this.exec(function() {
			_gthis.state = tink_runloop_TaskState.Canceled;
			_gthis.doCancel();
			_gthis.doCleanup();
		});
	}
	,exec: function(f) {
		if(this.state == tink_runloop_TaskState.Pending) {
			try {
				f();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown(e);
			}
		}
	}
	,perform: function() {
		var _gthis = this;
		this.exec(function() {
			_gthis.state = tink_runloop_TaskState.Busy;
			_gthis.doPerform();
			if(_gthis.recurring) {
				_gthis.state = tink_runloop_TaskState.Pending;
			} else {
				_gthis.state = tink_runloop_TaskState.Performed;
				_gthis.doCleanup();
			}
		});
	}
	,doCleanup: function() {
	}
	,doCancel: function() {
	}
	,doPerform: function() {
	}
	,__class__: tink_runloop_TaskBase
};
var tink_runloop_FunctionTask = function(f) {
	tink_runloop_TaskBase.call(this);
	this.f = f;
};
$hxClasses["tink.runloop.FunctionTask"] = tink_runloop_FunctionTask;
tink_runloop_FunctionTask.__name__ = "tink.runloop.FunctionTask";
tink_runloop_FunctionTask.__super__ = tink_runloop_TaskBase;
tink_runloop_FunctionTask.prototype = $extend(tink_runloop_TaskBase.prototype,{
	f: null
	,doCleanup: function() {
		this.f = null;
	}
	,doPerform: function() {
		this.f();
	}
	,__class__: tink_runloop_FunctionTask
});
var tink_runloop_RepeatableFunctionTask = function(f) {
	tink_runloop_TaskBase.call(this);
	this.f = f;
};
$hxClasses["tink.runloop.RepeatableFunctionTask"] = tink_runloop_RepeatableFunctionTask;
tink_runloop_RepeatableFunctionTask.__name__ = "tink.runloop.RepeatableFunctionTask";
tink_runloop_RepeatableFunctionTask.__super__ = tink_runloop_TaskBase;
tink_runloop_RepeatableFunctionTask.prototype = $extend(tink_runloop_TaskBase.prototype,{
	f: null
	,doCleanup: function() {
		this.f = null;
	}
	,doPerform: function() {
		this.recurring = this.f() == tink_runloop_TaskRepeat.Continue;
	}
	,__class__: tink_runloop_RepeatableFunctionTask
});
var tink_runloop_WorkResult = $hxEnums["tink.runloop.WorkResult"] = { __ename__:"tink.runloop.WorkResult",__constructs__:null
	,Progressed: {_hx_name:"Progressed",_hx_index:0,__enum__:"tink.runloop.WorkResult",toString:$estr}
	,Waiting: ($_=function(seconds) { return {_hx_index:1,seconds:seconds,__enum__:"tink.runloop.WorkResult",toString:$estr}; },$_._hx_name="Waiting",$_.__params__ = ["seconds"],$_)
	,Idle: {_hx_name:"Idle",_hx_index:2,__enum__:"tink.runloop.WorkResult",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:3,__enum__:"tink.runloop.WorkResult",toString:$estr}
	,Aborted: {_hx_name:"Aborted",_hx_index:4,__enum__:"tink.runloop.WorkResult",toString:$estr}
	,WrongThread: {_hx_name:"WrongThread",_hx_index:5,__enum__:"tink.runloop.WorkResult",toString:$estr}
};
tink_runloop_WorkResult.__constructs__ = [tink_runloop_WorkResult.Progressed,tink_runloop_WorkResult.Waiting,tink_runloop_WorkResult.Idle,tink_runloop_WorkResult.Done,tink_runloop_WorkResult.Aborted,tink_runloop_WorkResult.WrongThread];
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $keyValueIterator(o) { if( o instanceof Array ) return function() { return HxOverrides.keyValueIter(o); }; return typeof(o.keyValueIterator) == 'function' ? $bind(o,o.keyValueIterator) : o.keyValueIterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $getKeyValueIterator(o) { if( o instanceof Array ) return HxOverrides.keyValueIter(o); else return o.keyValueIterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "tests", data : "KGluZGVjZXMgInN0eC50ZXN0dGVzdC5UZXN0cyIgInN0eC50ZXN0LlRlc3QiKQooInBpY2t5IHBpY2siCiAgaW5jbHVkZSAKICAgICgKICAgICAgKCJzdHgudGVzdC50ZXN0LlN5bmNocm9ub3VzRXJyb3JUZXN0IiBleGNsdWRlCiAgICAgICAgInRlc3QiCiAgICAgICkKICAgICAgKAogICAgICAgICJzdHgudGVzdC50ZXN0LlRlc3RUZXN0IiBpbmNsdWRlICJ0ZXN0X2Fzc2VydGlvbiIKICAgICAgKQogICAgICAic3R4LnRlc3QuVGVzdFJlc291cmNlIgogICAgKQopCigicHVzaGluZyBmb3IgcmVsZWFzZSIgCiAgZXhjbHVkZSAoIlNpbmdsZUFyZyIpCikKKCJwdXNoeSBwdXNoeSBwdXNoIiAKICBleGNsdWRlICgiU2luZ2xlQXJnV3JhcHBlZCIpCikKKCJzcG90dHkiIAogIGluY2x1ZGUgKAogICAgKCJPdGhlclRlc3QiIGluY2x1ZGUgInRlc3RfYSIpCiAgKQop"},{ name : "bake.session.id", data : "MzU4OWMxOWUtZmVjMi00Y2Q1LTg2ZmMtYzAwMmFiMGI5YWIx"}];
js_Boot.__toStr = ({ }).toString;
var facade = stx_log_FrontController.get_facade();
stx_log_Signal.get_instance().attach(facade);
var this1 = stx_log_Log.ZERO;
var v = stx_log_Stringify.fromString("No output file available");
new stx_log_log_term_Level(this1,4).toLogApi().comply(v(new stx_log_EntryCtr()),stx_log_LogPosition.fromPos({ fileName : "stx/log/Signal.hx", lineNumber : 52, className : "stx.log._Signal.Signal_Impl_", methodName : "__init__"}));
stx_log_global_config_HasCustomLogger._new()[0] = false;
Console.formatMode = Console.determineConsoleFormatMode();
Console.logPrefix = "<b,gray>><//> ";
Console.warnPrefix = "<b,yellow>><//> ";
Console.errorPrefix = "<b,red>></b> ";
Console.successPrefix = "<b,light_green>><//> ";
Console.debugPrefix = "<b,magenta>><//> ";
Console.printIntercept = null;
Console.argSeparator = " ";
Console.unicodeCompatibilityMode = 0;
Console.unicodeCompatibilityEnabled = false;
Console.formatTagPattern = new EReg("(\\\\)?<(/)?([^><{}\\s]*|{[^}<>]*})>","g");
FormatFlag.RESET = "reset";
FormatFlag.BOLD = "bold";
FormatFlag.ITALIC = "italic";
FormatFlag.DIM = "dim";
FormatFlag.UNDERLINE = "underline";
FormatFlag.BLINK = "blink";
FormatFlag.INVERT = "invert";
FormatFlag.HIDDEN = "hidden";
FormatFlag.BLACK = "black";
FormatFlag.RED = "red";
FormatFlag.GREEN = "green";
FormatFlag.YELLOW = "yellow";
FormatFlag.BLUE = "blue";
FormatFlag.MAGENTA = "magenta";
FormatFlag.CYAN = "cyan";
FormatFlag.WHITE = "white";
FormatFlag.LIGHT_BLACK = "light_black";
FormatFlag.LIGHT_RED = "light_red";
FormatFlag.LIGHT_GREEN = "light_green";
FormatFlag.LIGHT_YELLOW = "light_yellow";
FormatFlag.LIGHT_BLUE = "light_blue";
FormatFlag.LIGHT_MAGENTA = "light_magenta";
FormatFlag.LIGHT_CYAN = "light_cyan";
FormatFlag.LIGHT_WHITE = "light_white";
FormatFlag.BG_BLACK = "bg_black";
FormatFlag.BG_RED = "bg_red";
FormatFlag.BG_GREEN = "bg_green";
FormatFlag.BG_YELLOW = "bg_yellow";
FormatFlag.BG_BLUE = "bg_blue";
FormatFlag.BG_MAGENTA = "bg_magenta";
FormatFlag.BG_CYAN = "bg_cyan";
FormatFlag.BG_WHITE = "bg_white";
FormatFlag.BG_LIGHT_BLACK = "bg_light_black";
FormatFlag.BG_LIGHT_RED = "bg_light_red";
FormatFlag.BG_LIGHT_GREEN = "bg_light_green";
FormatFlag.BG_LIGHT_YELLOW = "bg_light_yellow";
FormatFlag.BG_LIGHT_BLUE = "bg_light_blue";
FormatFlag.BG_LIGHT_MAGENTA = "bg_light_magenta";
FormatFlag.BG_LIGHT_CYAN = "bg_light_cyan";
FormatFlag.BG_LIGHT_WHITE = "bg_light_white";
Printf.DEFAULT_PRECISION = 6;
Printf.DEFAULT_NUM_EXP_DIGITS = 2;
Printf._initialized = false;
Printf.PAD_0 = 0;
Printf.PAD_SPACE = 20;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
eu_ohmrun_Fletcher._ = eu_ohmrun_FletcherLift;
eu_ohmrun_fletcher_Arrange._ = eu_ohmrun_fletcher_ArrangeLift;
eu_ohmrun_fletcher_Attempt._ = eu_ohmrun_fletcher_AttemptLift;
eu_ohmrun_fletcher_Command._ = eu_ohmrun_fletcher_CommandLift;
eu_ohmrun_fletcher_Convert._ = eu_ohmrun_fletcher_ConvertLift;
eu_ohmrun_fletcher_Diffuse._ = eu_ohmrun_fletcher_DiffuseLift;
eu_ohmrun_fletcher_Fiber._ = eu_ohmrun_fletcher_FiberLift;
eu_ohmrun_fletcher_Modulate._ = eu_ohmrun_fletcher_ModulateLift;
eu_ohmrun_fletcher_Produce._ = eu_ohmrun_fletcher_ProduceLift;
eu_ohmrun_fletcher_Propose._ = eu_ohmrun_fletcher_ProposeLift;
eu_ohmrun_fletcher_Provide._ = eu_ohmrun_fletcher_ProvideLift;
eu_ohmrun_fletcher_Receiver._ = eu_ohmrun_fletcher_ReceiverLift;
eu_ohmrun_fletcher_ReceiverInput._ = eu_ohmrun_fletcher_ReceiverInputLift;
eu_ohmrun_fletcher_Reframe._ = eu_ohmrun_fletcher_ReframeLift;
eu_ohmrun_fletcher_Regulate._ = eu_ohmrun_fletcher_RegulateLift;
eu_ohmrun_fletcher_Scenario._ = eu_ohmrun_fletcher_ScenarioLift;
eu_ohmrun_fletcher_Venture._ = eu_ohmrun_fletcher_VentureLift;
eu_ohmrun_fletcher_core_Cont._ = eu_ohmrun_fletcher_core_ContLift;
eu_ohmrun_fletcher_core_Settle._ = eu_ohmrun_fletcher_core_SettleLift;
eu_ohmrun_pml_Atom._ = eu_ohmrun_pml_AtomLift;
eu_ohmrun_pml_Extract.e_not_a_group = "Head not a group";
eu_ohmrun_pml_PExpr.__meta__ = { statics : { parse : { stability : [1]}}};
eu_ohmrun_pml_PExpr._ = eu_ohmrun_pml_PExprLift;
eu_ohmrun_pml_PTokenLift.__meta__ = { obj : { 'stx.meta.using' : null}, statics : { lift : { 'stx.meta.lift' : null}}};
eu_ohmrun_pml_PToken.__meta__ = { statics : { _ : { 'stx.meta.using' : null}, lift : { 'stx.meta.lift' : null}, prj : { 'stx.meta.prj' : null}}};
eu_ohmrun_pml_PToken._ = eu_ohmrun_pml_PTokenLift;
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
stx_Nano._ = stx_nano_lift_LiftNano;
stx_Tag.Tag = null;
stx_assert_Eq.__ = new stx_assert_EqCtr();
stx_assert_EqualedSum.AreEqual = true;
stx_assert_EqualedSum.NotEqual = false;
stx_assert_Equaled.AreEqual = true;
stx_assert_Equaled.NotEqual = false;
stx_assert_OrderedSum.LessThan = true;
stx_assert_OrderedSum.NotLessThan = false;
stx_assert_Predicate._ = stx_assert_PredicateLift;
stx_coroutine_core_Coroutine.STOP = stx_coroutine_core_CoroutineSum.Halt(stx_coroutine_core_ReturnSum.Production(0));
stx_coroutine_core_Coroutine._ = stx_coroutine_core_CoroutineLift;
stx_coroutine_pack_Derive._ = stx_coroutine_pack_DeriveLift;
stx_coroutine_pack_Effect._ = stx_coroutine_pack_EffectLift;
stx_coroutine_pack_Emiter._ = stx_coroutine_pack_EmiterLift;
stx_coroutine_pack_Relate._ = stx_coroutine_pack_RelateLift;
stx_coroutine_pack_Secure._ = stx_coroutine_pack_SecureLift;
stx_coroutine_pack_Source._ = stx_coroutine_pack_SourceLift;
stx_coroutine_pack_Tunnel._ = stx_coroutine_pack_TunnelLift;
stx_ds_KaryTree._ = stx_ds_KaryTreeLift;
stx_ds_KaryTree.ZERO = stx_ds_KaryTreeSum.Nought;
stx_ds_RedBlackClusterMap._ = stx_ds_RedBlackClusterMapLift;
stx_ds_RedBlackMap._ = stx_ds_RedBlackMapLift;
stx_ds_RedBlackSet._ = stx_ds_RedBlackSetLift;
stx_ds_RedBlackTree._ = stx_ds_RedBlackTreeLift;
stx_ds_kary_$tree_KaryTreeZip.ZERO = stx_ds_kary_$tree_KaryTreeZip.unit();
stx_fail_Decline._ = stx_fail_DeclineLift;
stx_fail_Error._ = stx_fail_ErrorLift;
stx_fail_ParseFailure.FAIL = "FAIL";
stx_fail_Refuse._ = stx_fail_RefuseLift;
stx_fail_ShowFailure._ = stx_fail_ShowFailureLift;
stx_fn_Binary._ = stx_fn_BinaryLift;
stx_fn_Block.ZERO = function() {
};
stx_fn_Block._ = stx_fn_BlockLift;
stx_fn_Dual._ = stx_fn_DualLift;
stx_fn_Sink._ = stx_fn_SinkLift;
stx_fn_Ternary._ = stx_fn_TernaryLift;
stx_fn_ThunkLift.__meta__ = { statics : { cache : { params : ["The Thunk to call once"], returns : ["A Thunk which will call the input Thunk once."]}}};
stx_fn_Thunk._ = stx_fn_ThunkLift;
stx_fn_Unary._ = stx_fn_UnaryLift;
stx_fp_Continuation._ = stx_fp_ContinuationLift;
stx_fp_LazyStream.ZERO = stx_fp_LazyStream.unit();
stx_fp_StateMLift.__meta__ = { statics : { exec : { doc : ["Run `StateM` with `s`, dropping the result and returning `s`."]}, 'eval' : { doc : ["Run `StateM` with `s`, returning the result."]}}};
stx_log_LevelSum.BLANK = 0;
stx_log_LevelSum.TRACE = 1;
stx_log_LevelSum.DEBUG = 2;
stx_log_LevelSum.INFO = 3;
stx_log_LevelSum.WARN = 4;
stx_log_LevelSum.ERROR = 5;
stx_log_LevelSum.FATAL = 6;
stx_log_Log._ = stx_log_LogLift;
stx_log_Log.ZERO = new stx_log_log_term_Unit();
stx_log_Logic._ = stx_log_LogicLift;
stx_pico_OptionLift.__meta__ = { statics : { prj : { 'stx.meta.prj' : null}}};
stx_pico_Option.__meta__ = { statics : { __ : { 'stx.meta.using' : null}}};
stx_pico_Option.__ = stx_pico_OptionLift;
stx_log_Stamp.ZERO = new stx_log_Stamp();
stx_log_Signal.ZERO = stx_log_Signal.get_instance();
stx_log_Signal.has_custom = false;
stx_nano_Accrual._ = stx_nano_AccrualLift;
stx_nano_Alert._ = stx_nano_AlertLift;
stx_nano_ByteSize.I8 = "i8";
stx_nano_ByteSize.I16BE = "i16+";
stx_nano_ByteSize.I16LE = "i16-";
stx_nano_ByteSize.UI16BE = "ui16+";
stx_nano_ByteSize.UI16LE = "ui16-";
stx_nano_ByteSize.I24BE = "i24+";
stx_nano_ByteSize.I24LE = "i24-";
stx_nano_ByteSize.UI24BE = "ui24+";
stx_nano_ByteSize.UI24LE = "ui24-";
stx_nano_ByteSize.I32BE = "i32+";
stx_nano_ByteSize.I32LE = "i32-";
stx_nano_ByteSize.FBE = "fbe";
stx_nano_ByteSize.FLE = "fle";
stx_nano_ByteSize.DBE = "dbe";
stx_nano_ByteSize.DLE = "dle";
stx_nano_ByteSize.LINE = "ln";
stx_nano_CharsLift.__meta__ = { statics : { underscore : { thx : null}}};
stx_nano_Chars._ = stx_nano_CharsLift;
stx_nano_Chunk._ = stx_nano_ChunkLift;
stx_nano_ClusterLift._ = stx_lift_ArrayLift;
stx_nano_Cluster._ = stx_nano_ClusterLift;
stx_nano_CompilerTarget._ = stx_nano_CompilerTargetLift;
stx_nano_Contract._ = stx_nano_ContractLift;
stx_nano_Couple.__meta__ = { statics : { make : { 'stx.make' : null}}};
stx_nano_Couple._ = stx_nano_CoupleLift;
stx_nano_Defect._ = stx_nano_DefectLift;
stx_nano_Equity._ = stx_nano_EquityLift;
stx_nano_Floats.__meta__ = { statics : { clamp : { doc : ["Produce a number based on `n` that is `min` if less than `min`, \n\t\t`max` if `n` is greater than `max` and is left untouched if\n\t\tbetween the two."]}}};
stx_nano_Ints.__meta__ = { statics : { xor : { doc : ["Returns `a ^ b`"]}}};
stx_nano_Ints.ZERO = 0;
stx_nano_Ints.ONE = 1;
stx_nano_Iter._ = stx_nano_IterLift;
stx_nano_Junction._ = stx_nano_JunctionLift;
stx_nano_KV._ = stx_nano_KVLift;
stx_nano_Knuckle._ = stx_nano_KnuckleLift;
stx_nano_Ledger._ = stx_nano_LedgerLift;
stx_nano_LogicalClock.lifetime = 0;
stx_nano_LogicalClock.counter = 0;
stx_nano_Math.PRIMES = [1,3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143,4194301,8388593,16777213,33554393,67108859,134217689,268435399,536870909,1073741789,2147483647];
stx_nano_Pledge._ = stx_nano_PledgeLift;
stx_nano_Position.ZERO = stx_nano_Position.make(null,null,null,null);
stx_nano_Position._ = stx_nano_PositionLift;
stx_nano_PrimitiveType._ = stx_nano_PrimitiveTypeLift;
stx_nano_Receipt._ = stx_nano_ReceiptLift;
stx_nano_Record._ = stx_nano_RecordLift;
stx_nano_Register._ = stx_nano__$Register_RegisterLift;
stx_nano__$Register_RegisterState.max = -1;
stx_nano_Report._ = stx_nano_ReportLift;
stx_nano_Signal._ = stx_nano_SignalLift;
stx_nano_Slot._ = stx_nano_SlotLift;
stx_nano_Triple._ = stx_nano_TripleLift;
stx_nano_Upshot._ = stx_nano_UpshotLift;
stx_nano_lift_LiftOptionNano.__meta__ = { statics : { fudge : { 'stx.fudge' : null}}};
stx_parse_ParseResult._ = stx_parse_ParseResultLift;
stx_parse_Parser._ = stx_parse_parser_ParserLift;
stx_parse_core_LR._ = stx_parse_core_LRLift;
stx_parse_core__$UID_UIDs._parserUid = 0;
stx_parse_parser_term_SyncAnon._ = stx_parse_parser_term_SyncAnonLift;
stx_parse_parsers_StringParsers.boolean = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(new stx_parse_parser_term_Identifier("true",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),new stx_parse_parser_term_Identifier("false",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.integer = stx_parse_Parser.get_self(new stx_parse_parser_term_Regex("^[+-]?\\d+",{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"}));
stx_parse_parsers_StringParsers.float = stx_parse_Parser.get_self(new stx_parse_parser_term_Regex("^[+-]?\\d+(\\.\\d+)?",{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"}));
stx_parse_parsers_StringParsers.lower = new stx_parse_parser_term_Range(97,122,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
stx_parse_parsers_StringParsers.upper = new stx_parse_parser_term_Range(65,90,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
stx_parse_parsers_StringParsers.alpha = new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.upper,stx_parse_parsers_StringParsers.lower,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"});
stx_parse_parsers_StringParsers.digit = new stx_parse_parser_term_Range(48,57,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
stx_parse_parsers_StringParsers.alphanum = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.alpha,stx_parse_parsers_StringParsers.digit,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.ascii = new stx_parse_parser_term_Range(0,255,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
stx_parse_parsers_StringParsers.valid = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.alpha,stx_parse_parsers_StringParsers.digit,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})),new stx_parse_parser_term_Identifier("_",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.tab = new stx_parse_parser_term_Identifier("\t",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.space = new stx_parse_parser_term_Identifier(" ",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.nl = new stx_parse_parser_term_Identifier("\n",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.cr = new stx_parse_parser_term_Identifier("\r\n",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.cr_or_nl = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.nl,stx_parse_parsers_StringParsers.cr,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.gap = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.tab,stx_parse_parsers_StringParsers.space,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.whitespace = (function($this) {
	var $r;
	var p = new stx_parse_parser_term_Range(0,32,{ fileName : "stx/parse/Parsers.hx", lineNumber : 32, className : "stx.parse.Parsers", methodName : "Range"});
	p.tag = haxe_ds_Option.Some("whitespace");
	$r = new stx_parse_parser_term_TagRefuse(p,"whitespace",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_parsers_StringParsers.word = stx_parse_parser_ParserLift.tokenize(stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(stx_parse_Parser.get_self(new stx_parse_parser_term_Or(stx_parse_parsers_StringParsers.lower,stx_parse_parsers_StringParsers.upper,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})));
stx_parse_parsers_StringParsers.quote = stx_parse_Parser.get_self(new stx_parse_parser_term_Or(new stx_parse_parser_term_Identifier("\"",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),new stx_parse_parser_term_Identifier("'",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
stx_parse_parsers_StringParsers.escape = new stx_parse_parser_term_Identifier("\\",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.not_escaped = new stx_parse_parser_term_Identifier("\\\\",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.x = stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(stx_parse_Parser.get_self(new stx_parse_parser_term_Not(stx_parse_parsers_StringParsers.not_escaped,{ fileName : "stx/parse/parsers/StringParsers.hx", lineNumber : 55, className : "stx.parse.parsers.StringParsers", methodName : "x"})),stx_parse_parsers_StringParsers.escape,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"}));
stx_parse_parsers_StringParsers.x_quote = stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(stx_parse_parsers_StringParsers.x,stx_parse_parsers_StringParsers.quote,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"}));
stx_parse_parsers_StringParsers.literal = new stx_parse_term_Literal(null,null,{ fileName : "stx/parse/parsers/StringParsers.hx", lineNumber : 58, className : "stx.parse.parsers.StringParsers", methodName : "literal"});
stx_parse_parsers_StringParsers.symbol = (function($this) {
	var $r;
	var p = stx_parse_parser_ParserLift.tokenize(stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(new stx_parse_parser_term_When(function(x) {
		return x.charCodeAt(0) >= 33;
	},null,{ fileName : "stx/parse/parsers/StringParsers.hx", lineNumber : 59, className : "stx.parse.parsers.StringParsers", methodName : "symbol"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})));
	p.tag = haxe_ds_Option.Some("symbol");
	$r = new stx_parse_parser_term_TagRefuse(p,"symbol",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_parsers_StringParsers.brkt_l_square = new stx_parse_parser_term_Identifier("[",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_parsers_StringParsers.brkt_r_square = new stx_parse_parser_term_Identifier("]",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"});
stx_parse_pml_Lexer.tl_bracket = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier("{",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTLBracket;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("lbracket");
	$r = new stx_parse_parser_term_TagRefuse(p,"lbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.tr_bracket = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier("}",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTRBracket;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("rbracket");
	$r = new stx_parse_parser_term_TagRefuse(p,"rbracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.tl_square_bracket = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier("[",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTLSquareBracket;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("l_square_bracket");
	$r = new stx_parse_parser_term_TagRefuse(p,"l_square_bracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.tr_square_bracket = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier("]",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTRSquareBracket;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("r_square_bracket");
	$r = new stx_parse_parser_term_TagRefuse(p,"r_square_bracket",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.tl_paren = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier("(",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTLParen;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("lparen");
	$r = new stx_parse_parser_term_TagRefuse(p,"lparen",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.tr_paren = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(new stx_parse_parser_term_Identifier(")",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),function(_) {
		return eu_ohmrun_pml_PTokenSum.PTRParen;
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("rparen");
	$r = new stx_parse_parser_term_TagRefuse(p,"rparen",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.whitespace = (function($this) {
	var $r;
	var p = stx_parse_parsers_StringParsers.whitespace;
	p.tag = haxe_ds_Option.Some("whitespace");
	$r = new stx_parse_parser_term_TagRefuse(p,"whitespace",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.k_float = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.float,stx_parse_pml_Lexer.float,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("float");
	$r = new stx_parse_parser_term_TagRefuse(p,"float",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.k_int = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_parsers_StringParsers.integer,stx_parse_parser_ParserLift.lookahead(stx_parse_Parser.get_self(new stx_parse_parser_term_Not(new stx_parse_parser_term_Identifier(".",{ fileName : "stx/parse/Parsers.hx", lineNumber : 77, className : "stx.parse.Parsers", methodName : "Identifier"}),{ fileName : "stx/parse/pml/Lexer.hx", lineNumber : 33, className : "stx.parse.pml.Lexer", methodName : "k_int"}))),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),stx_parse_pml_Lexer.int,{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("int");
	$r = new stx_parse_parser_term_TagRefuse(p,"int",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.k_string = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_parsers_StringParsers.literal,function(x) {
		return eu_ohmrun_pml_PTokenSum.PTData(eu_ohmrun_pml_AtomSum.Str(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("string");
	$r = new stx_parse_parser_term_TagRefuse(p,"string",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.k_bool = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_Regex("(true|false)",{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"})),function(x) {
		return eu_ohmrun_pml_PTokenSum.PTData(eu_ohmrun_pml_AtomSum.B(x == "true"));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("bool");
	$r = new stx_parse_parser_term_TagRefuse(p,"bool",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.k_atom = (function($this) {
	var $r;
	var p = stx_parse_Parser.get_self(new stx_parse_parser_term_AnonThen(stx_parse_Parser.get_self(new stx_parse_parser_term_Regex("[^ \r\t\n\\(\\)]+",{ fileName : "stx/parse/Parsers.hx", lineNumber : 38, className : "stx.parse.Parsers", methodName : "Regex"})),function(x) {
		return eu_ohmrun_pml_PTokenSum.PTData(eu_ohmrun_pml_AtomSum.AnSym(x));
	},{ fileName : "stx/parse/Parsers.hx", lineNumber : 47, className : "stx.parse.Parsers", methodName : "AnonThen"}));
	p.tag = haxe_ds_Option.Some("atom");
	$r = new stx_parse_parser_term_TagRefuse(p,"atom",{ fileName : "stx/Parse.hx", lineNumber : 85, className : "stx.LiftParse", methodName : "tagged"});
	return $r;
}(this));
stx_parse_pml_Lexer.main = (function($this) {
	var $r;
	var pI = stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_pml_Lexer.whitespace,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"}));
	var self = stx_lift_ArrayLift.lfold1([stx_parse_pml_Lexer.tl_paren,stx_parse_pml_Lexer.tr_paren,stx_parse_pml_Lexer.t_hash_lbracket(),stx_parse_pml_Lexer.tl_square_bracket,stx_parse_pml_Lexer.tr_square_bracket,stx_parse_pml_Lexer.tl_bracket,stx_parse_pml_Lexer.tr_bracket,stx_parse_pml_Lexer.k_int,stx_parse_pml_Lexer.k_float,stx_parse_pml_Lexer.k_string,stx_parse_pml_Lexer.k_bool,stx_parse_pml_Lexer.k_atom],function(memo,next) {
		return stx_parse_Parser.get_self(new stx_parse_parser_term_Or(memo,next,{ fileName : "stx/parse/Parsers.hx", lineNumber : 41, className : "stx.parse.Parsers", methodName : "Or"}));
	});
	var this1 = new stx_parse_parser_term_Failed("No Parser in Array",false,{ fileName : "stx/parse/lift/LiftArrayOfParser.hx", lineNumber : 6, className : "stx.parse.lift.LiftArrayOfParser", methodName : "ors"});
	var p2;
	if(self._hx_index == 0) {
		var v = self.v;
		p2 = v;
	} else {
		p2 = this1;
	}
	$r = stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_AndL(stx_parse_Parser.get_self(new stx_parse_parser_term_OneMany(stx_parse_Parser.get_self(new stx_parse_parser_term_AndR(pI,p2,{ fileName : "stx/parse/Parsers.hx", lineNumber : 116, className : "stx.parse.Parsers", methodName : "AndR"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 56, className : "stx.parse.Parsers", methodName : "OneMany"})),stx_parse_Parser.get_self(new stx_parse_parser_term_Many(stx_parse_pml_Lexer.whitespace,{ fileName : "stx/parse/Parsers.hx", lineNumber : 53, className : "stx.parse.Parsers", methodName : "Many"})),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"})),new stx_parse_parser_term_Eof(null,{ fileName : "stx/parse/Parsers.hx", lineNumber : 71, className : "stx.parse.Parsers", methodName : "Eof"}),{ fileName : "stx/parse/Parsers.hx", lineNumber : 119, className : "stx.parse.Parsers", methodName : "AndL"}));
	return $r;
}(this));
stx_pico_Apply._ = stx_pico_ApplyLift;
stx_pico_Comply._ = stx_pico_ComplyLift;
stx_pico_Either.__meta__ = { statics : { prj : { 'stx.meta.prj' : null}}};
stx_pico_Either.__ = stx_pico_EitherLift;
stx_pico_Nada.Nada = 0;
stx_pico_Outcome.__ = stx_pico_OutcomeLift;
stx_pkg__$Pkg_Registry.instance = new stx_pkg__$Pkg_Registry();
stx_show_core_LayoutNode._ = stx_show_core_LayoutNodeLift;
stx_test_TestCase.__rtti = "<class path=\"stx.test.TestCase\" params=\"\">\n\t<extends path=\"stx.test.Assert\"/>\n\t<__stx__tests set=\"method\" line=\"4\"><f a=\"timeout\">\n\t<x path=\"Int\"/>\n\t<c path=\"stx.test.TestCaseData\"/>\n</f></__stx__tests>\n\t<__setup public=\"1\" set=\"method\" line=\"7\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__setup>\n\t<__teardown public=\"1\" set=\"method\" line=\"10\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__teardown>\n\t<__before public=\"1\" set=\"method\" line=\"13\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__before>\n\t<__after public=\"1\" set=\"method\" line=\"16\"><f a=\"\"><t path=\"stx.Option\"><t path=\"stx.Async\"/></t></f></__after>\n\t<asTestCase public=\"1\" set=\"method\" line=\"19\"><f a=\"\"><c path=\"stx.test.TestCase\"/></f></asTestCase>\n\t<wrap public=\"1\" params=\"T\" set=\"method\" line=\"22\"><f a=\"future:?pos\">\n\t<t path=\"stx.Future\"><c path=\"wrap.T\"/></t>\n\t<t path=\"stx.Pos\"/>\n\t<t path=\"stx.WrappedFuture\"><c path=\"wrap.T\"/></t>\n</f></wrap>\n\t<new public=\"1\" set=\"method\" line=\"3\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta>\n\t\t<m n=\":build\"><e>tink.SyntaxHub.build()</e></m>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
stx_test_TestResource.__rtti = "<class path=\"stx.test.TestResource\" params=\"\">\n\t<extends path=\"stx.test.TestCase\"/>\n\t<new public=\"1\" set=\"method\" line=\"3\"><f a=\"\"><x path=\"Void\"/></f></new>\n\t<meta><m n=\":build\"><e>tink.SyntaxHub.build()</e></m></meta>\n</class>";
tink_RunLoop.current = new tink_RunLoop();
tink_concurrent_Thread.MAIN = "Fake Main Thread";
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core_AlreadyDisposed.INST = new tink_core_AlreadyDisposed();
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NEVER_INST = new tink_core__$Future_FutureObject();
tink_core_Future.NEVER = tink_core_Future.NEVER_INST;
tink_core_Lazy.NOISE = new tink_core__$Lazy_LazyConst(null);
tink_core_Lazy.NULL = tink_core_Lazy.NOISE;
tink_core_Noise.Noise = null;
tink_core_ProgressValue.ZERO = new tink_core_MPair(0,haxe_ds_Option.None);
tink_core_Progress.INIT = tink_core_ProgressValue.ZERO;
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NEVER = tink_core_Promise.never();
tink_core__$Signal_Disposed.INST = new tink_core__$Signal_Disposed();
tink_runloop_Task.NOOP = new tink_runloop__$Task_Noop();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
